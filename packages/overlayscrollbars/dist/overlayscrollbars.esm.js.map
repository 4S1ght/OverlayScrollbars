{"version":3,"file":"overlayscrollbars.esm.js","sources":["../src/support/utils/array.ts","../src/support/dom/style.ts","../src/support/cache.ts","../src/support/utils/types.ts","../src/support/utils/object.ts","../src/support/dom/attribute.ts","../src/support/dom/traversal.ts","../src/support/dom/manipulation.ts","../src/support/dom/create.ts","../src/support/compatibility/vendors.ts","../src/support/compatibility/apis.ts","../src/support/dom/class.ts","../src/support/utils/equal.ts","../src/support/utils/function.ts","../src/support/dom/dimensions.ts","../src/support/dom/events.ts","../src/support/dom/offset.ts","../src/support/eventListeners.ts","../src/setups/setups.ts","../src/classnames.ts","../src/options.ts","../src/plugins/plugins.ts","../../../node_modules/@babel/runtime/helpers/extends.js","../src/plugins/optionsValidationPlugin/validation.ts","../src/plugins/optionsValidationPlugin/optionsValidationPlugin.ts","../src/plugins/sizeObserverPlugin/sizeObserverPlugin.ts","../src/plugins/scrollbarsHidingPlugin/scrollbarsHidingPlugin.ts","../src/environment.ts","../src/initialization.ts","../src/setups/structureSetup/structureSetup.elements.ts","../src/setups/structureSetup/updateSegments/trinsicUpdateSegment.ts","../src/setups/structureSetup/updateSegments/paddingUpdateSegment.ts","../src/setups/structureSetup/updateSegments/overflowUpdateSegment.ts","../src/setups/structureSetup/structureSetup.update.ts","../src/observers/sizeObserver.ts","../src/observers/trinsicObserver.ts","../src/observers/domObserver.ts","../src/setups/structureSetup/structureSetup.observers.ts","../src/setups/structureSetup/structureSetup.ts","../src/setups/scrollbarsSetup/scrollbarsSetup.elements.ts","../src/setups/scrollbarsSetup/scrollbarsSetup.ts","../src/instances.ts","../src/overlayscrollbars.ts"],"sourcesContent":["import { isArrayLike, isString } from 'support/utils/types';\r\nimport { PlainObject } from 'typings';\r\n\r\ntype RunEachItem = ((...args: any) => any | any[]) | null | undefined;\r\n\r\n/**\r\n * Iterates through a array or object\r\n * @param arrayLikeOrObject The array or object through which shall be iterated.\r\n * @param callback The function which is responsible for the iteration.\r\n * If the function returns true its treated like a \"continue\" statement.\r\n * If the function returns false its treated like a \"break\" statement.\r\n */\r\nexport function each<T>(\r\n  array: Array<T> | ReadonlyArray<T>,\r\n  callback: (value: T, indexOrKey: number, source: Array<T>) => boolean | unknown\r\n): Array<T> | ReadonlyArray<T>;\r\nexport function each<T>(\r\n  array: Array<T> | ReadonlyArray<T> | false | null | undefined,\r\n  callback: (value: T, indexOrKey: number, source: Array<T>) => boolean | unknown\r\n): Array<T> | ReadonlyArray<T> | false | null | undefined;\r\nexport function each<T>(\r\n  arrayLikeObject: ArrayLike<T>,\r\n  callback: (value: T, indexOrKey: number, source: ArrayLike<T>) => boolean | unknown\r\n): ArrayLike<T>;\r\nexport function each<T>(\r\n  arrayLikeObject: ArrayLike<T> | false | null | undefined,\r\n  callback: (value: T, indexOrKey: number, source: ArrayLike<T>) => boolean | unknown\r\n): ArrayLike<T> | false | null | undefined;\r\nexport function each(\r\n  obj: PlainObject,\r\n  callback: (value: any, indexOrKey: string, source: PlainObject) => boolean | unknown\r\n): PlainObject;\r\nexport function each(\r\n  obj: PlainObject | false | null | undefined,\r\n  callback: (value: any, indexOrKey: string, source: PlainObject) => boolean | unknown\r\n): PlainObject | false | null | undefined;\r\nexport function each<T>(\r\n  source: Array<T> | ArrayLike<T> | ReadonlyArray<T> | PlainObject | false | null | undefined,\r\n  callback: (value: T, indexOrKey: any, source: any) => boolean | unknown\r\n): Array<T> | ArrayLike<T> | ReadonlyArray<T> | PlainObject | false | null | undefined {\r\n  if (isArrayLike(source)) {\r\n    for (let i = 0; i < source.length; i++) {\r\n      if (callback(source[i], i, source) === false) {\r\n        break;\r\n      }\r\n    }\r\n  } else if (source) {\r\n    each(Object.keys(source), (key) => callback(source[key], key, source));\r\n  }\r\n  return source;\r\n}\r\n\r\n/**\r\n * Returns the index of the given inside the given array or -1 if the given item isn't part of the given array.\r\n * @param arr The array.\r\n * @param item The item.\r\n * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\r\n */\r\nexport const indexOf = <T = any>(arr: T[], item: T, fromIndex?: number): number =>\r\n  arr.indexOf(item, fromIndex);\r\n\r\n/**\r\n * Pushesh all given items into the given array and returns it.\r\n * @param array The array the items shall be pushed into.\r\n * @param items The items which shall be pushed into the array.\r\n */\r\nexport const push = <T>(array: T[], items: T | ArrayLike<T>, arrayIsSingleItem?: boolean): T[] => {\r\n  !arrayIsSingleItem && !isString(items) && isArrayLike(items)\r\n    ? Array.prototype.push.apply(array, items as T[])\r\n    : array.push(items as T);\r\n  return array;\r\n};\r\n\r\n/**\r\n * Creates a shallow-copied Array instance from an array-like or iterable object.\r\n * @param arr The object from which the array instance shall be created.\r\n */\r\nexport const from = <T = any>(arr?: ArrayLike<T> | Set<T>) => {\r\n  const original = Array.from;\r\n  const result: T[] = [];\r\n\r\n  if (original && arr) {\r\n    return original(arr);\r\n  }\r\n\r\n  if (arr instanceof Set) {\r\n    arr.forEach((value) => {\r\n      push(result, value);\r\n    });\r\n  } else {\r\n    each(arr, (elm) => {\r\n      push(result, elm);\r\n    });\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Check whether the passed array is empty.\r\n * @param array The array which shall be checked.\r\n */\r\nexport const isEmptyArray = (array: any[] | null | undefined): boolean =>\r\n  !!array && array.length === 0;\r\n\r\n/**\r\n * Calls all functions in the passed array/set of functions.\r\n * @param arr The array filled with function which shall be called.\r\n * @param args The args with which each function is called.\r\n * @param keep True when the Set / array should not be cleared afterwards, false otherwise.\r\n */\r\nexport const runEachAndClear = (arr: RunEachItem[], args?: any[], keep?: boolean): void => {\r\n  // eslint-disable-next-line prefer-spread\r\n  const runFn = (fn: RunEachItem) => fn && fn.apply(undefined, args || []);\r\n  each(arr, runFn);\r\n  !keep && ((arr as any[]).length = 0);\r\n};\r\n","import { each, keys } from 'support/utils';\r\nimport { isString, isNumber, isArray, isUndefined } from 'support/utils/types';\r\nimport { PlainObject, StyleObject } from 'typings';\r\n\r\nexport interface TRBL {\r\n  t: number;\r\n  r: number;\r\n  b: number;\r\n  l: number;\r\n}\r\n\r\nconst cssNumber = {\r\n  // animationiterationcount: 1,\r\n  // columncount: 1,\r\n  // fillopacity: 1,\r\n  // flexgrow: 1,\r\n  // flexshrink: 1,\r\n  // fontweight: 1,\r\n  // lineheight: 1,\r\n  // order: 1,\r\n  // orphans: 1,\r\n  // widows: 1,\r\n  // zoom: 1,\r\n  opacity: 1,\r\n  zindex: 1,\r\n};\r\n\r\nconst parseToZeroOrNumber = (value: string, toFloat?: boolean): number => {\r\n  /* istanbul ignore next */\r\n  const num = toFloat ? parseFloat(value) : parseInt(value, 10);\r\n  // num === num means num is not NaN\r\n  /* istanbul ignore next */\r\n  return num === num ? num : 0; // eslint-disable-line no-self-compare\r\n};\r\n\r\nconst adaptCSSVal = (prop: string, val: string | number): string | number =>\r\n  !cssNumber[prop.toLowerCase()] && isNumber(val) ? `${val}px` : val;\r\n\r\nconst getCSSVal = (elm: HTMLElement, computedStyle: CSSStyleDeclaration, prop: string): string =>\r\n  /* istanbul ignore next */\r\n  computedStyle != null\r\n    ? computedStyle[prop] || computedStyle.getPropertyValue(prop)\r\n    : elm.style[prop];\r\n\r\nconst setCSSVal = (\r\n  elm: HTMLElement | false | null | undefined,\r\n  prop: string,\r\n  val: string | number\r\n): void => {\r\n  try {\r\n    if (elm) {\r\n      const { style: elmStyle } = elm;\r\n      if (!isUndefined(elmStyle[prop])) {\r\n        elmStyle[prop] = adaptCSSVal(prop, val);\r\n      } else {\r\n        elmStyle.setProperty(prop, val as string);\r\n      }\r\n    }\r\n  } catch (e) {}\r\n};\r\n\r\n/**\r\n * Gets or sets the passed styles to the passed element.\r\n * @param elm The element to which the styles shall be applied to / be read from.\r\n * @param styles The styles which shall be set or read.\r\n */\r\nexport function style<CustomCssProps>(\r\n  elm: HTMLElement | false | null | undefined,\r\n  styles: StyleObject<CustomCssProps>\r\n): void;\r\nexport function style<CustomCssProps>(\r\n  elm: HTMLElement | false | null | undefined,\r\n  styles: string\r\n): string;\r\nexport function style<CustomCssProps>(\r\n  elm: HTMLElement | false | null | undefined,\r\n  styles: Array<string> | string\r\n): { [key: string]: string };\r\nexport function style<CustomCssProps>(\r\n  elm: HTMLElement | false | null | undefined,\r\n  styles: StyleObject<CustomCssProps> | Array<string> | string\r\n): { [key: string]: string } | string | void {\r\n  const getSingleStyle = isString(styles);\r\n  const getStyles = isArray(styles) || getSingleStyle;\r\n\r\n  if (getStyles) {\r\n    let getStylesResult: string | PlainObject = getSingleStyle ? '' : {};\r\n    if (elm) {\r\n      const computedStyle: CSSStyleDeclaration = window.getComputedStyle(elm, null);\r\n      getStylesResult = getSingleStyle\r\n        ? getCSSVal(elm, computedStyle, styles as string)\r\n        : (styles as Array<string>).reduce((result, key) => {\r\n            result[key] = getCSSVal(elm, computedStyle, key as string);\r\n            return result;\r\n          }, getStylesResult);\r\n    }\r\n    return getStylesResult;\r\n  }\r\n  each(keys(styles), (key) => setCSSVal(elm, key, styles[key]));\r\n}\r\n\r\n/**\r\n * Hides the passed element (display: none).\r\n * @param elm The element which shall be hidden.\r\n */\r\nexport const hide = (elm: HTMLElement | false | null | undefined): void => {\r\n  style(elm, { display: 'none' });\r\n};\r\n\r\n/**\r\n * Shows the passed element (display: block).\r\n * @param elm The element which shall be shown.\r\n */\r\nexport const show = (elm: HTMLElement | false | null | undefined): void => {\r\n  style(elm, { display: 'block' });\r\n};\r\n\r\n/**\r\n * Returns the top right bottom left values of the passed css property.\r\n * @param elm The element of which the values shall be returned.\r\n * @param propertyPrefix The css property prefix. (e.g. \"border\")\r\n * @param propertySuffix The css property suffix. (e.g. \"width\")\r\n */\r\nexport const topRightBottomLeft = (\r\n  elm?: HTMLElement | false | null | undefined,\r\n  propertyPrefix?: string,\r\n  propertySuffix?: string\r\n): TRBL => {\r\n  const finalPrefix = propertyPrefix ? `${propertyPrefix}-` : '';\r\n  const finalSuffix = propertySuffix ? `-${propertySuffix}` : '';\r\n  const top = `${finalPrefix}top${finalSuffix}`;\r\n  const right = `${finalPrefix}right${finalSuffix}`;\r\n  const bottom = `${finalPrefix}bottom${finalSuffix}`;\r\n  const left = `${finalPrefix}left${finalSuffix}`;\r\n  const result = style(elm, [top, right, bottom, left]);\r\n  return {\r\n    t: parseToZeroOrNumber(result[top]),\r\n    r: parseToZeroOrNumber(result[right]),\r\n    b: parseToZeroOrNumber(result[bottom]),\r\n    l: parseToZeroOrNumber(result[left]),\r\n  };\r\n};\r\n","export interface CacheOptions<Value> {\r\n  // initial value of _value.\r\n  _initialValue: Value;\r\n  // Custom comparison function if shallow compare isn't enough. Returns true if nothing changed.\r\n  _equal?: EqualCachePropFunction<Value>;\r\n  // If true always updates _value and _previous, otherwise they update only when they changed.\r\n  _alwaysUpdateValues?: boolean;\r\n}\r\n\r\nexport type CacheValues<T> = [value: T, changed: boolean, previous?: T];\r\n\r\nexport type EqualCachePropFunction<Value> = (currentVal: Value, newVal: Value) => boolean;\r\n\r\nexport type CacheUpdater<Value> = (current: Value, previous?: Value) => Value;\r\n\r\nexport type UpdateCacheContextual<Value> = (newValue: Value, force?: boolean) => CacheValues<Value>;\r\n\r\nexport type UpdateCache<Value> = (force?: boolean) => CacheValues<Value>;\r\n\r\nexport type GetCurrentCache<Value> = (force?: boolean) => CacheValues<Value>;\r\n\r\nexport type Cache<Value> = [UpdateCache<Value>, GetCurrentCache<Value>];\r\n\r\nexport type CacheContextual<Value> = [UpdateCacheContextual<Value>, GetCurrentCache<Value>];\r\n\r\ntype CreateCache = {\r\n  <Value>(options: CacheOptions<Value>): CacheContextual<Value>;\r\n  <Value>(options: CacheOptions<Value>, update: CacheUpdater<Value>): Cache<Value>;\r\n  <Value>(options: CacheOptions<Value>, update?: CacheUpdater<Value>):\r\n    | CacheContextual<Value>\r\n    | Cache<Value>;\r\n};\r\n\r\nexport const createCache: CreateCache = <Value>(\r\n  options: CacheOptions<Value>,\r\n  update?: CacheUpdater<Value>\r\n): CacheContextual<Value> | Cache<Value> => {\r\n  const { _initialValue, _equal, _alwaysUpdateValues } = options;\r\n  let _value: Value = _initialValue;\r\n  let _previous: Value | undefined;\r\n\r\n  const cacheUpdateContextual: UpdateCacheContextual<Value> = (newValue, force?) => {\r\n    const curr = _value;\r\n\r\n    const newVal = newValue;\r\n    const changed = force || (_equal ? !_equal(curr, newVal) : curr !== newVal);\r\n\r\n    if (changed || _alwaysUpdateValues) {\r\n      _value = newVal;\r\n      _previous = curr;\r\n    }\r\n\r\n    return [_value, changed, _previous];\r\n  };\r\n  const cacheUpdateIsolated: UpdateCache<Value> = (force?) =>\r\n    cacheUpdateContextual(update!(_value, _previous), force);\r\n\r\n  const getCurrentCache: GetCurrentCache<Value> = (force?: boolean) => [\r\n    _value,\r\n    !!force, // changed\r\n    _previous,\r\n  ];\r\n\r\n  return [update ? cacheUpdateIsolated : cacheUpdateContextual, getCurrentCache] as\r\n    | CacheContextual<Value>\r\n    | Cache<Value>;\r\n};\r\n","import { PlainObject } from 'typings';\r\n\r\nconst ElementNodeType = Node.ELEMENT_NODE;\r\nconst { toString, hasOwnProperty } = Object.prototype;\r\n\r\nexport const isUndefined = (obj: any): obj is undefined => obj === undefined;\r\n\r\nexport const isNull = (obj: any): obj is null => obj === null;\r\n\r\nexport const type = (obj: any): string =>\r\n  isUndefined(obj) || isNull(obj)\r\n    ? `${obj}`\r\n    : toString\r\n        .call(obj)\r\n        .replace(/^\\[object (.+)\\]$/, '$1')\r\n        .toLowerCase();\r\n\r\nexport const isNumber = (obj: any): obj is number => typeof obj === 'number';\r\n\r\nexport const isString = (obj: any): obj is string => typeof obj === 'string';\r\n\r\nexport const isBoolean = (obj: any): obj is boolean => typeof obj === 'boolean';\r\n\r\nexport const isFunction = (obj: any): obj is (...args: any[]) => any => typeof obj === 'function';\r\n\r\nexport const isArray = <T = any>(obj: any): obj is Array<T> => Array.isArray(obj);\r\n\r\nexport const isObject = (obj: any): boolean =>\r\n  typeof obj === 'object' && !isArray(obj) && !isNull(obj);\r\n\r\n/**\r\n * Returns true if the given object is array like, false otherwise.\r\n * @param obj The Object\r\n */\r\nexport const isArrayLike = <T extends PlainObject = any>(obj: any): obj is ArrayLike<T> => {\r\n  const length = !!obj && obj.length;\r\n  const lengthCorrectFormat = isNumber(length) && length > -1 && length % 1 == 0; // eslint-disable-line eqeqeq\r\n\r\n  return isArray(obj) || (!isFunction(obj) && lengthCorrectFormat)\r\n    ? length > 0 && isObject(obj)\r\n      ? length - 1 in obj\r\n      : true\r\n    : false;\r\n};\r\n\r\n/**\r\n * Returns true if the given object is a \"plain\" (e.g. { key: value }) object, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport const isPlainObject = <T = any>(obj: any): obj is PlainObject<T> => {\r\n  if (!obj || !isObject(obj) || type(obj) !== 'object') return false;\r\n\r\n  let key;\r\n  const cstr = 'constructor';\r\n  const ctor = obj[cstr];\r\n  const ctorProto = ctor && ctor.prototype;\r\n  const hasOwnConstructor = hasOwnProperty.call(obj, cstr);\r\n  const hasIsPrototypeOf = ctorProto && hasOwnProperty.call(ctorProto, 'isPrototypeOf');\r\n\r\n  if (ctor && !hasOwnConstructor && !hasIsPrototypeOf) {\r\n    return false;\r\n  }\r\n\r\n  /* eslint-disable no-restricted-syntax */\r\n  for (key in obj) {\r\n    /**/\r\n  }\r\n  /* eslint-enable */\r\n\r\n  return isUndefined(key) || hasOwnProperty.call(obj, key);\r\n};\r\n\r\n/**\r\n * Checks whether the given object is a HTMLElement.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport const isHTMLElement = (obj: any): obj is HTMLElement => {\r\n  const instanceofObj = HTMLElement;\r\n  return obj\r\n    ? instanceofObj\r\n      ? obj instanceof instanceofObj\r\n      : obj.nodeType === ElementNodeType\r\n    : false;\r\n};\r\n\r\n/**\r\n * Checks whether the given object is a Element.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport const isElement = (obj: any): obj is Element => {\r\n  const instanceofObj = Element;\r\n  return obj\r\n    ? instanceofObj\r\n      ? obj instanceof instanceofObj\r\n      : obj.nodeType === ElementNodeType\r\n    : false;\r\n};\r\n","import { isArray, isFunction, isPlainObject, isNull } from 'support/utils/types';\r\nimport { each } from 'support/utils/array';\r\n\r\n/**\r\n * Determines whether the passed object has a property with the passed name.\r\n * @param obj The object.\r\n * @param prop The name of the property.\r\n */\r\nexport const hasOwnProperty = (obj: any, prop: string | number | symbol): boolean =>\r\n  Object.prototype.hasOwnProperty.call(obj, prop);\r\n\r\n/**\r\n * Returns the names of the enumerable string properties and methods of an object.\r\n * @param obj The object of which the properties shall be returned.\r\n */\r\nexport const keys = (obj: any): Array<string> => (obj ? Object.keys(obj) : []);\r\n\r\ntype AssignDeep = {\r\n  <T, U>(target: T, object1: U): T & U;\r\n  <T, U, V>(target: T, object1: U, object2: V): T & U & V;\r\n  <T, U, V, W>(target: T, object1: U, object2: V, object3: W): T & U & V & W;\r\n  <T, U, V, W, X>(target: T, object1: U, object2: V, object3: W, object4: X): T & U & V & W & X;\r\n  <T, U, V, W, X, Y>(target: T, object1: U, object2: V, object3: W, object4: X, object5: Y): T &\r\n    U &\r\n    V &\r\n    W &\r\n    X &\r\n    Y;\r\n  <T, U, V, W, X, Y, Z>(\r\n    target: T,\r\n    object1?: U,\r\n    object2?: V,\r\n    object3?: W,\r\n    object4?: X,\r\n    object5?: Y,\r\n    object6?: Z\r\n  ): T & U & V & W & X & Y & Z;\r\n};\r\n\r\n// https://github.com/jquery/jquery/blob/master/src/core.js#L116\r\nexport const assignDeep: AssignDeep = <T, U, V, W, X, Y, Z>(\r\n  target: T,\r\n  object1?: U,\r\n  object2?: V,\r\n  object3?: W,\r\n  object4?: X,\r\n  object5?: Y,\r\n  object6?: Z\r\n): T & U & V & W & X & Y & Z => {\r\n  const sources: Array<any> = [object1, object2, object3, object4, object5, object6];\r\n\r\n  // Handle case when target is a string or something (possible in deep copy)\r\n  if ((typeof target !== 'object' || isNull(target)) && !isFunction(target)) {\r\n    target = {} as T;\r\n  }\r\n\r\n  each(sources, (source) => {\r\n    // Extend the base object\r\n    each(keys(source), (key) => {\r\n      const copy: any = source[key];\r\n\r\n      // Prevent Object.prototype pollution\r\n      // Prevent never-ending loop\r\n      if (target === copy) {\r\n        return true;\r\n      }\r\n\r\n      const copyIsArray = isArray(copy);\r\n\r\n      // Recurse if we're merging plain objects or arrays\r\n      if (copy && (isPlainObject(copy) || copyIsArray)) {\r\n        const src = target[key];\r\n        let clone: any = src;\r\n\r\n        // Ensure proper type for the source value\r\n        if (copyIsArray && !isArray(src)) {\r\n          clone = [];\r\n        } else if (!copyIsArray && !isPlainObject(src)) {\r\n          clone = {};\r\n        }\r\n\r\n        // Never move original objects, clone them\r\n        target[key] = assignDeep(clone, copy) as any;\r\n      } else {\r\n        target[key] = copy;\r\n      }\r\n    });\r\n  });\r\n\r\n  // Return the modified object\r\n  return target as any;\r\n};\r\n\r\n/**\r\n * Returns true if the given object is empty, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport const isEmptyObject = (obj: any): boolean => {\r\n  /* eslint-disable no-restricted-syntax, guard-for-in */\r\n  for (const name in obj) return false;\r\n  return true;\r\n  /* eslint-enable */\r\n};\r\n","import { from } from 'support/utils/array';\r\nimport { isUndefined } from 'support/utils/types';\r\n\r\ntype GetSetPropName = 'scrollLeft' | 'scrollTop' | 'value';\r\n\r\ntype Attr = {\r\n  (elm: HTMLElement | false | null | undefined, attrName: string): string | null;\r\n  (elm: HTMLElement | false | null | undefined, attrName: string, value: string): void;\r\n  (elm: HTMLElement | false | null | undefined, attrName: string, value?: string):\r\n    | string\r\n    | null\r\n    | void;\r\n};\r\n\r\ntype GetSetProp<T> = {\r\n  (elm: HTMLElement | false | null | undefined): T;\r\n  (elm: HTMLElement | false | null | undefined, value: T): void;\r\n  (elm: HTMLElement | false | null | undefined, value?: T): number | void;\r\n};\r\n\r\nconst getSetProp = (\r\n  topLeft: GetSetPropName,\r\n  fallback: number | string,\r\n  elm: HTMLElement | HTMLInputElement | false | null | undefined,\r\n  value?: number | string\r\n): number | string | void => {\r\n  if (isUndefined(value)) {\r\n    return elm ? elm[topLeft] : fallback;\r\n  }\r\n  elm && (elm[topLeft] = value);\r\n};\r\n\r\n/**\r\n * Gets or sets a attribute with the given attribute of the given element depending whether the value attribute is given.\r\n * Returns null if the element has no attribute with the given name.\r\n * @param elm The element of which the attribute shall be get or set.\r\n * @param attrName The attribute name which shall be get or set.\r\n * @param value The value of the attribute which shall be set.\r\n */\r\nexport const attr = ((\r\n  elm: HTMLElement | false | null | undefined,\r\n  attrName: string,\r\n  value?: string\r\n): string | null | void => {\r\n  if (isUndefined(value)) {\r\n    return elm ? elm.getAttribute(attrName) : null;\r\n  }\r\n  elm && elm.setAttribute(attrName, value);\r\n}) as Attr;\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and adds or removes the given value from it.\r\n * @param elm The element.\r\n * @param attrName The attributeName to which the value shall be added or removed.\r\n * @param value The value which shall be added or removed.\r\n * @param add True if the value shall be added, false otherwise.\r\n */\r\nexport const attrClass = (\r\n  elm: HTMLElement | false | null | undefined,\r\n  attrName: string,\r\n  value: string,\r\n  add?: boolean\r\n) => {\r\n  const currValues = attr(elm, attrName) || '';\r\n  const currValuesSet = new Set(currValues.split(' '));\r\n  currValuesSet[add ? 'add' : 'delete'](value);\r\n\r\n  attr(elm, attrName, from(currValuesSet).join(' ').trim());\r\n};\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and checks if the given value is in it.\r\n * @param elm The element.\r\n * @param attrName The attributeName from which the content shall be checked.\r\n * @param value The value.\r\n * @returns True if the given attribute has the value in it, false otherwise.\r\n */\r\nexport const hasAttrClass = (\r\n  elm: HTMLElement | false | null | undefined,\r\n  attrName: string,\r\n  value: string\r\n) => {\r\n  const currValues = attr(elm, attrName) || '';\r\n  const currValuesSet = new Set(currValues.split(' '));\r\n  return currValuesSet.has(value);\r\n};\r\n\r\n/**\r\n * Removes the given attribute from the given element.\r\n * @param elm The element of which the attribute shall be removed.\r\n * @param attrName The attribute name.\r\n */\r\nexport const removeAttr = (elm: Element | false | null | undefined, attrName: string): void => {\r\n  elm && elm.removeAttribute(attrName);\r\n};\r\n\r\n/**\r\n * Gets or sets the scrollLeft value of the given element depending whether the value attribute is given.\r\n * @param elm The element of which the scrollLeft value shall be get or set.\r\n * @param value The scrollLeft value which shall be set.\r\n */\r\nexport const scrollLeft = ((\r\n  elm: HTMLElement | false | null | undefined,\r\n  value?: number\r\n): number | void => getSetProp('scrollLeft', 0, elm, value) as number) as GetSetProp<number>;\r\n\r\n/**\r\n * Gets or sets the scrollTop value of the given element depending whether the value attribute is given.\r\n * @param elm The element of which the scrollTop value shall be get or set.\r\n * @param value The scrollTop value which shall be set.\r\n */\r\nexport const scrollTop = ((\r\n  elm: HTMLElement | false | null | undefined,\r\n  value?: number\r\n): number | void => getSetProp('scrollTop', 0, elm, value) as number) as GetSetProp<number>;\r\n\r\n/**\r\n * Gets or sets the value of the given input element depending whether the value attribute is given.\r\n * @param elm The input element of which the value shall be get or set.\r\n * @param value The value which shall be set.\r\n */\r\nexport const val = ((\r\n  elm: HTMLInputElement | false | null | undefined,\r\n  value?: string\r\n): string | void => getSetProp('value', '', elm, value) as string) as GetSetProp<string>;\r\n","import { isElement } from 'support/utils/types';\r\nimport { push, from } from 'support/utils/array';\r\n\r\ntype InputElementType = Node | Element | Node | false | null | undefined;\r\ntype OutputElementType = Node | Element | null;\r\n\r\nconst elmPrototype = Element.prototype;\r\n\r\n/**\r\n * Find all elements with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nconst find = (selector: string, elm?: InputElementType): Element[] => {\r\n  const arr: Array<Element> = [];\r\n  const rootElm = elm ? (isElement(elm) ? elm : null) : document;\r\n\r\n  return rootElm ? push(arr, rootElm.querySelectorAll(selector)) : arr;\r\n};\r\n\r\n/**\r\n * Find the first element with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nconst findFirst = (selector: string, elm?: InputElementType): OutputElementType => {\r\n  const rootElm = elm ? (isElement(elm) ? elm : null) : document;\r\n\r\n  return rootElm ? rootElm.querySelector(selector) : null;\r\n};\r\n\r\n/**\r\n * Determines whether the passed element is matching with the passed selector.\r\n * @param elm The element which has to be compared with the passed selector.\r\n * @param selector The selector which has to be compared with the passed element. Additional selectors: ':visible' and ':hidden'.\r\n */\r\nconst is = (elm: InputElementType, selector: string): boolean => {\r\n  if (isElement(elm)) {\r\n    /* istanbul ignore next */\r\n    // eslint-disable-next-line\r\n    // @ts-ignore\r\n    const fn: (...args: any) => boolean = elmPrototype.matches || elmPrototype.msMatchesSelector;\r\n    return fn.call(elm, selector);\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * Returns the children (no text-nodes or comments) of the passed element which are matching the passed selector. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the children shall be returned.\r\n * @param selector The selector which must match with the children elements.\r\n */\r\nconst children = (elm: InputElementType, selector?: string): ReadonlyArray<Element> => {\r\n  const childs: Array<Element> = [];\r\n\r\n  return isElement(elm)\r\n    ? push(\r\n        childs,\r\n        from(elm.children).filter((child) => (selector ? is(child, selector) : child))\r\n      )\r\n    : childs;\r\n};\r\n\r\n/**\r\n * Returns the childNodes (incl. text-nodes or comments etc.) of the passed element. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the childNodes shall be returned.\r\n */\r\nconst contents = (elm: InputElementType): ReadonlyArray<ChildNode> =>\r\n  elm ? from(elm.childNodes) : [];\r\n\r\n/**\r\n * Returns the parent element of the passed element, or null if the passed element is null.\r\n * @param elm The element of which the parent element shall be returned.\r\n */\r\nconst parent = (elm: InputElementType): OutputElementType => (elm ? elm.parentElement : null);\r\n\r\nexport const closest = (elm: InputElementType, selector: string): OutputElementType => {\r\n  if (isElement(elm)) {\r\n    const closestFn = elmPrototype.closest;\r\n    if (closestFn) {\r\n      return closestFn.call(elm, selector);\r\n    }\r\n\r\n    do {\r\n      if (is(elm, selector)) {\r\n        return elm as Element;\r\n      }\r\n      elm = parent(elm);\r\n    } while (elm);\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\n/**\r\n * Determines whether the given element lies between two selectors in the DOM.\r\n * @param elm The element.\r\n * @param highBoundarySelector The high boundary selector.\r\n * @param deepBoundarySelector The deep boundary selector.\r\n */\r\nconst liesBetween = (\r\n  elm: InputElementType,\r\n  highBoundarySelector: string,\r\n  deepBoundarySelector: string\r\n): boolean => {\r\n  const closestHighBoundaryElm = elm && closest(elm, highBoundarySelector);\r\n  const closestDeepBoundaryElm = elm && findFirst(deepBoundarySelector, closestHighBoundaryElm);\r\n\r\n  return closestHighBoundaryElm && closestDeepBoundaryElm\r\n    ? closestHighBoundaryElm === elm ||\r\n        closestDeepBoundaryElm === elm ||\r\n        closest(closest(elm, deepBoundarySelector), highBoundarySelector) !== closestHighBoundaryElm\r\n    : false;\r\n};\r\n\r\nexport { find, findFirst, is, children, contents, parent, liesBetween };\r\n","import { isArrayLike } from 'support/utils/types';\r\nimport { each, from } from 'support/utils/array';\r\nimport { parent } from 'support/dom/traversal';\r\n\r\ntype NodeCollection = ArrayLike<Node> | Node | false | null | undefined;\r\n\r\n/**\r\n * Inserts Nodes before the given preferredAnchor element.\r\n * @param parentElm The parent of the preferredAnchor element or the element which shall be the parent of the inserted Nodes.\r\n * @param preferredAnchor The element before which the Nodes shall be inserted or null if the elements shall be appended at the end.\r\n * @param insertedElms The Nodes which shall be inserted.\r\n */\r\nconst before = (\r\n  parentElm: Node | false | null | undefined,\r\n  preferredAnchor: Node | false | null | undefined,\r\n  insertedElms: NodeCollection\r\n): void => {\r\n  if (insertedElms) {\r\n    let anchor: Node | false | null | undefined = preferredAnchor;\r\n    let fragment: DocumentFragment | Node | null | undefined;\r\n\r\n    // parent must be defined\r\n    if (parentElm) {\r\n      if (isArrayLike(insertedElms)) {\r\n        fragment = document.createDocumentFragment();\r\n\r\n        // append all insertedElms to the fragment and if one of these is the anchor, change the anchor\r\n        each(insertedElms, (insertedElm) => {\r\n          if (insertedElm === anchor) {\r\n            anchor = insertedElm.previousSibling;\r\n          }\r\n          fragment!.appendChild(insertedElm);\r\n        });\r\n      } else {\r\n        fragment = insertedElms;\r\n      }\r\n\r\n      // if the preferred anchor isn't null set it to a valid anchor\r\n      if (preferredAnchor) {\r\n        if (!anchor) {\r\n          anchor = parentElm.firstChild;\r\n        } else if (anchor !== preferredAnchor) {\r\n          anchor = anchor.nextSibling;\r\n        }\r\n      }\r\n\r\n      parentElm.insertBefore(fragment, anchor || null);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Appends the given children at the end of the given Node.\r\n * @param node The Node to which the children shall be appended.\r\n * @param children The Nodes which shall be appended.\r\n */\r\nexport const appendChildren = (\r\n  node: Node | false | null | undefined,\r\n  children: NodeCollection\r\n): void => {\r\n  before(node, null, children);\r\n};\r\n\r\n/**\r\n * Prepends the given children at the start of the given Node.\r\n * @param node The Node to which the children shall be prepended.\r\n * @param children The Nodes which shall be prepended.\r\n */\r\nexport const prependChildren = (\r\n  node: Node | false | null | undefined,\r\n  children: NodeCollection\r\n): void => {\r\n  before(node, node && node.firstChild, children);\r\n};\r\n\r\n/**\r\n * Inserts the given Nodes before the given Node.\r\n * @param node The Node before which the given Nodes shall be inserted.\r\n * @param insertedNodes The Nodes which shall be inserted.\r\n */\r\nexport const insertBefore = (\r\n  node: Node | false | null | undefined,\r\n  insertedNodes: NodeCollection\r\n): void => {\r\n  before(parent(node), node, insertedNodes);\r\n};\r\n\r\n/**\r\n * Inserts the given Nodes after the given Node.\r\n * @param node The Node after which the given Nodes shall be inserted.\r\n * @param insertedNodes The Nodes which shall be inserted.\r\n */\r\nexport const insertAfter = (\r\n  node: Node | false | null | undefined,\r\n  insertedNodes: NodeCollection\r\n): void => {\r\n  before(parent(node), node && node.nextSibling, insertedNodes);\r\n};\r\n\r\n/**\r\n * Removes the given Nodes from their parent.\r\n * @param nodes The Nodes which shall be removed.\r\n */\r\nexport const removeElements = (nodes: NodeCollection): void => {\r\n  if (isArrayLike(nodes)) {\r\n    each(from(nodes), (e) => removeElements(e));\r\n  } else if (nodes) {\r\n    const parentElm = parent(nodes);\r\n    if (parentElm) {\r\n      parentElm.removeChild(nodes);\r\n    }\r\n  }\r\n};\r\n","import { each } from 'support/utils/array';\r\nimport { attr } from 'support/dom/attribute';\r\nimport { contents } from 'support/dom/traversal';\r\nimport { removeElements } from 'support/dom/manipulation';\r\n\r\n/**\r\n * Creates a div DOM node.\r\n */\r\nexport const createDiv = (classNames?: string): HTMLDivElement => {\r\n  const div = document.createElement('div');\r\n  if (classNames) {\r\n    attr(div, 'class', classNames);\r\n  }\r\n  return div;\r\n};\r\n\r\n/**\r\n * Creates DOM nodes modeled after the passed html string and returns the root dom nodes as a array.\r\n * @param html The html string after which the DOM nodes shall be created.\r\n */\r\nexport const createDOM = (html: string): ReadonlyArray<Node> => {\r\n  const createdDiv = createDiv();\r\n  createdDiv.innerHTML = html.trim();\r\n\r\n  return each(contents(createdDiv), (elm) => removeElements(elm));\r\n};\r\n","import { each } from 'support/utils/array';\r\nimport { hasOwnProperty } from 'support/utils/object';\r\nimport { createDiv } from 'support/dom/create';\r\n\r\nconst firstLetterToUpper = (str: string): string => str.charAt(0).toUpperCase() + str.slice(1);\r\nconst getDummyStyle = (): CSSStyleDeclaration => createDiv().style;\r\n\r\n// https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix\r\n\r\nexport const cssPrefixes: ReadonlyArray<string> = ['-webkit-', '-moz-', '-o-', '-ms-'];\r\nexport const jsPrefixes: ReadonlyArray<string> = [\r\n  'WebKit',\r\n  'Moz',\r\n  'O',\r\n  'MS',\r\n  'webkit',\r\n  'moz',\r\n  'o',\r\n  'ms',\r\n];\r\n\r\nexport const jsCache: { [key: string]: any } = {};\r\nexport const cssCache: { [key: string]: string } = {};\r\n\r\n/**\r\n * Gets the name of the given CSS property with vendor prefix if it isn't supported without it, or and empty string if unsupported.\r\n * @param name The name of the CSS property which shall be get.\r\n */\r\nexport const cssProperty = (name: string): string => {\r\n  let result: string | undefined = cssCache[name];\r\n\r\n  if (hasOwnProperty(cssCache, name)) {\r\n    return result;\r\n  }\r\n\r\n  const uppercasedName: string = firstLetterToUpper(name);\r\n  const elmStyle: CSSStyleDeclaration = getDummyStyle();\r\n\r\n  each(cssPrefixes, (prefix: string) => {\r\n    const prefixWithoutDashes: string = prefix.replace(/-/g, '');\r\n    const resultPossibilities: Array<string> = [\r\n      name, // transition\r\n      prefix + name, // -webkit-transition\r\n      prefixWithoutDashes + uppercasedName, // webkitTransition\r\n      firstLetterToUpper(prefixWithoutDashes) + uppercasedName, // WebkitTransition\r\n    ];\r\n\r\n    // eslint-disable-next-line no-return-assign\r\n    return !(result = resultPossibilities.find(\r\n      (resultPossibility: string) => elmStyle[resultPossibility] !== undefined\r\n    ));\r\n  });\r\n\r\n  // eslint-disable-next-line no-return-assign\r\n  return (cssCache[name] = result || '');\r\n};\r\n\r\n/**\r\n * Get the name of the given CSS property value(s), with vendor prefix if it isn't supported without it, or an empty string if no value is supported.\r\n * @param property The CSS property to which the CSS property value(s) belong.\r\n * @param values The value(s) separated by spaces which shall be get.\r\n * @param suffix A suffix which is added to each value in case the value is a function or something else more advanced.\r\n */\r\nexport const cssPropertyValue = (property: string, values: string, suffix?: string): string => {\r\n  const name = `${property} ${values}`;\r\n  let result: string | undefined = cssCache[name];\r\n\r\n  if (hasOwnProperty(cssCache, name)) {\r\n    return result;\r\n  }\r\n\r\n  const dummyStyle: CSSStyleDeclaration = getDummyStyle();\r\n  const possbleValues: Array<string> = values.split(' ');\r\n  const preparedSuffix: string = suffix || '';\r\n  const cssPrefixesWithFirstEmpty = [''].concat(cssPrefixes);\r\n\r\n  each(possbleValues, (possibleValue: string) => {\r\n    each(cssPrefixesWithFirstEmpty, (prefix: string) => {\r\n      const prop = prefix + possibleValue;\r\n      dummyStyle.cssText = `${property}:${prop}${preparedSuffix}`;\r\n      if (dummyStyle.length) {\r\n        result = prop;\r\n        return false;\r\n      }\r\n    });\r\n    return !result;\r\n  });\r\n\r\n  // eslint-disable-next-line no-return-assign\r\n  return (cssCache[name] = result || '');\r\n};\r\n\r\n/**\r\n * Get the requested JS function, object or constructor with vendor prefix if it isn't supported without or undefined if unsupported.\r\n * @param name The name of the JS function, object or constructor.\r\n */\r\nexport const jsAPI = <T = any>(name: string): T | undefined => {\r\n  let result: any = jsCache[name] || window[name];\r\n\r\n  if (hasOwnProperty(jsCache, name)) {\r\n    return result;\r\n  }\r\n\r\n  each(jsPrefixes, (prefix: string) => {\r\n    result = result || window[prefix + firstLetterToUpper(name)];\r\n    return !result;\r\n  });\r\n\r\n  jsCache[name] = result;\r\n  return result;\r\n};\r\n","import { jsAPI } from 'support/compatibility/vendors';\r\n\r\nexport const MutationObserverConstructor = jsAPI<typeof MutationObserver>('MutationObserver');\r\nexport const IntersectionObserverConstructor =\r\n  jsAPI<typeof IntersectionObserver>('IntersectionObserver');\r\nexport const ResizeObserverConstructor = jsAPI<typeof ResizeObserver>('ResizeObserver');\r\nexport const cAF = jsAPI<typeof cancelAnimationFrame>('cancelAnimationFrame');\r\nexport const rAF = jsAPI<typeof requestAnimationFrame>('requestAnimationFrame');\r\nexport const setT = window.setTimeout as (handler: TimerHandler, timeout?: number) => number;\r\nexport const clearT = window.clearTimeout as (id?: number) => void;\r\n","import { isString } from 'support/utils/types';\r\nimport { each } from 'support/utils/array';\r\nimport { keys } from 'support/utils/object';\r\n\r\ntype ClassContainingElement = Node | Element | false | null | undefined;\r\ntype ClassName = string | false | null | undefined;\r\n\r\nconst rnothtmlwhite = /[^\\x20\\t\\r\\n\\f]+/g;\r\nconst classListAction = (\r\n  elm: ClassContainingElement,\r\n  className: ClassName,\r\n  action: (elmClassList: DOMTokenList, clazz: string) => boolean | void\r\n): boolean => {\r\n  const classList = elm && (elm as Element).classList;\r\n  let clazz: string;\r\n  let i = 0;\r\n  let result = false;\r\n\r\n  if (classList && className && isString(className)) {\r\n    const classes: Array<string> = className.match(rnothtmlwhite) || [];\r\n    result = classes.length > 0;\r\n    while ((clazz = classes[i++])) {\r\n      result = !!action(classList, clazz) && result;\r\n    }\r\n  }\r\n  return result;\r\n};\r\n\r\n/**\r\n * Check whether the given element has the given class name(s).\r\n * @param elm The element.\r\n * @param className The class name(s).\r\n */\r\nexport const hasClass = (elm: ClassContainingElement, className: ClassName): boolean =>\r\n  classListAction(elm, className, (classList, clazz) => classList.contains(clazz));\r\n\r\n/**\r\n * Removes the given class name(s) from the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be removed. (separated by spaces)\r\n */\r\nexport const removeClass = (elm: ClassContainingElement, className: ClassName): void => {\r\n  classListAction(elm, className, (classList, clazz) => classList.remove(clazz));\r\n};\r\n\r\n/**\r\n * Adds the given class name(s) to the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be added. (separated by spaces)\r\n * @returns A function which removes the added class name(s).\r\n */\r\nexport const addClass = (elm: ClassContainingElement, className: ClassName): (() => void) => {\r\n  classListAction(elm, className, (classList, clazz) => classList.add(clazz));\r\n  return removeClass.bind(0, elm, className);\r\n};\r\n\r\n/**\r\n * Takes two className strings, compares them and returns the difference as array.\r\n * @param classNameA ClassName A.\r\n * @param classNameB ClassName B.\r\n */\r\nexport const diffClass = (classNameA: ClassName, classNameB: ClassName) => {\r\n  const classNameASplit = classNameA && classNameA.split(' ');\r\n  const classNameBSplit = classNameB && classNameB.split(' ');\r\n  const tempObj = {};\r\n\r\n  each(classNameASplit, (className) => {\r\n    tempObj[className] = 1;\r\n  });\r\n  each(classNameBSplit, (className) => {\r\n    if (tempObj[className]) {\r\n      delete tempObj[className];\r\n    } else {\r\n      tempObj[className] = 1;\r\n    }\r\n  });\r\n\r\n  return keys(tempObj);\r\n};\r\n","import { each } from 'support/utils/array';\r\nimport { WH, XY, TRBL } from 'support/dom';\r\nimport { PlainObject } from 'typings';\r\n\r\n/**\r\n * Compares two objects and returns true if all values of the passed prop names are identical, false otherwise or if one of the two object is falsy.\r\n * @param a Object a.\r\n * @param b Object b.\r\n * @param props The props which shall be compared.\r\n */\r\nexport const equal = <T extends PlainObject>(\r\n  a: T | undefined,\r\n  b: T | undefined,\r\n  props: Array<keyof T>,\r\n  propMutation?: ((value: any) => any) | null | false\r\n): boolean => {\r\n  if (a && b) {\r\n    let result = true;\r\n    each(props, (prop) => {\r\n      const compareA = propMutation ? propMutation(a[prop]) : a[prop];\r\n      const compareB = propMutation ? propMutation(b[prop]) : b[prop];\r\n      if (compareA !== compareB) {\r\n        result = false;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalWH = <T>(a?: WH<T>, b?: WH<T>) => equal<WH<T>>(a, b, ['w', 'h']);\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalXY = <T>(a?: XY<T>, b?: XY<T>) => equal<XY<T>>(a, b, ['x', 'y']);\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalTRBL = (a?: TRBL, b?: TRBL) => equal<TRBL>(a, b, ['t', 'r', 'b', 'l']);\r\n\r\n/**\r\n * Compares two DOM Rects for their equality of their width and height properties\r\n * Also returns false if one of the DOM Rects is undefined or null.\r\n * @param a DOM Rect a.\r\n * @param b DOM Rect b.\r\n * @param round Whether the values should be rounded.\r\n */\r\nexport const equalBCRWH = (a?: DOMRect, b?: DOMRect, round?: boolean) =>\r\n  equal<DOMRect>(a, b, ['width', 'height'], round && ((value) => Math.round(value)));\r\n","import { isNumber, isFunction } from 'support/utils/types';\r\nimport { from } from 'support/utils/array';\r\nimport { rAF, cAF, setT, clearT } from 'support/compatibility/apis';\r\n\r\ntype DebounceTiming = number | false | null | undefined;\r\n\r\nexport interface DebounceOptions<FunctionToDebounce extends (...args: any) => any> {\r\n  /**\r\n   * The timeout for debouncing. If null, no debounce is applied.\r\n   */\r\n  _timeout?: DebounceTiming | (() => DebounceTiming);\r\n  /**\r\n   * A maximum amount of ms. before the function will be called even with debounce.\r\n   */\r\n  _maxDelay?: DebounceTiming | (() => DebounceTiming);\r\n  /**\r\n   * Function which merges parameters for each canceled debounce.\r\n   * If parameters can't be merged the function will return null, otherwise it returns the merged parameters.\r\n   */\r\n  _mergeParams?: (\r\n    prev: Parameters<FunctionToDebounce>,\r\n    curr: Parameters<FunctionToDebounce>\r\n  ) => Parameters<FunctionToDebounce> | false | null | undefined;\r\n}\r\n\r\nexport interface Debounced<FunctionToDebounce extends (...args: any) => any> {\r\n  (...args: Parameters<FunctionToDebounce>): ReturnType<FunctionToDebounce>;\r\n  _flush(): void;\r\n}\r\n\r\nexport const noop = () => {}; // eslint-disable-line\r\n\r\n/**\r\n * Debounces the given function either with a timeout or a animation frame.\r\n * @param functionToDebounce The function which shall be debounced.\r\n * @param options Options for debouncing.\r\n */\r\nexport const debounce = <FunctionToDebounce extends (...args: any) => any>(\r\n  functionToDebounce: FunctionToDebounce,\r\n  options?: DebounceOptions<FunctionToDebounce>\r\n): Debounced<FunctionToDebounce> => {\r\n  let maxTimeoutId: number | undefined;\r\n  let prevArguments: Parameters<FunctionToDebounce> | null | undefined;\r\n  let latestArguments: Parameters<FunctionToDebounce> | null | undefined;\r\n  let clear: () => void = noop;\r\n  const { _timeout, _maxDelay, _mergeParams } = options || {};\r\n\r\n  const invokeFunctionToDebounce = function (args: IArguments) {\r\n    clear();\r\n    clearT(maxTimeoutId);\r\n    maxTimeoutId = prevArguments = undefined;\r\n    clear = noop;\r\n    // eslint-disable-next-line\r\n    // @ts-ignore\r\n    functionToDebounce.apply(this, args);\r\n  };\r\n\r\n  const mergeParms = (\r\n    curr: Parameters<FunctionToDebounce>\r\n  ): Parameters<FunctionToDebounce> | false | null | undefined =>\r\n    _mergeParams && prevArguments ? _mergeParams(prevArguments, curr) : curr;\r\n\r\n  const flush = () => {\r\n    /* istanbul ignore next */\r\n    if (clear !== noop) {\r\n      invokeFunctionToDebounce(mergeParms(latestArguments!) || latestArguments!);\r\n    }\r\n  };\r\n\r\n  const debouncedFn = function () {\r\n    // eslint-disable-next-line prefer-rest-params\r\n    const args: Parameters<FunctionToDebounce> = from(arguments) as Parameters<FunctionToDebounce>;\r\n    const finalTimeout = isFunction(_timeout) ? _timeout() : _timeout;\r\n    const hasTimeout = isNumber(finalTimeout) && finalTimeout >= 0;\r\n\r\n    if (hasTimeout) {\r\n      const finalMaxWait = isFunction(_maxDelay) ? _maxDelay() : _maxDelay;\r\n      const hasMaxWait = isNumber(finalMaxWait) && finalMaxWait >= 0;\r\n      const setTimeoutFn = finalTimeout > 0 ? setT : rAF!;\r\n      const clearTimeoutFn = finalTimeout > 0 ? clearT : cAF!;\r\n      const mergeParamsResult = mergeParms(args);\r\n      const invokedArgs = mergeParamsResult || args;\r\n      const boundInvoke = invokeFunctionToDebounce.bind(0, invokedArgs);\r\n\r\n      // if (!mergeParamsResult) {\r\n      //   invokeFunctionToDebounce(prevArguments || args);\r\n      // }\r\n\r\n      clear();\r\n      // @ts-ignore\r\n      const timeoutId = setTimeoutFn(boundInvoke, finalTimeout);\r\n      clear = () => clearTimeoutFn(timeoutId);\r\n\r\n      if (hasMaxWait && !maxTimeoutId) {\r\n        maxTimeoutId = setT(flush, finalMaxWait as number);\r\n      }\r\n\r\n      prevArguments = latestArguments = invokedArgs;\r\n    } else {\r\n      invokeFunctionToDebounce(args);\r\n    }\r\n  };\r\n  debouncedFn._flush = flush;\r\n\r\n  return debouncedFn as Debounced<FunctionToDebounce>;\r\n};\r\n","import { style } from 'support/dom/style';\r\n\r\nexport interface WH<T = number> {\r\n  w: T;\r\n  h: T;\r\n}\r\n\r\nconst elementHasDimensions = (elm: HTMLElement): boolean =>\r\n  !!(elm.offsetWidth || elm.offsetHeight || elm.getClientRects().length);\r\nconst zeroObj: WH = {\r\n  w: 0,\r\n  h: 0,\r\n};\r\n\r\n/**\r\n * Returns the window inner- width and height.\r\n */\r\nexport const windowSize = (): WH => ({\r\n  w: window.innerWidth,\r\n  h: window.innerHeight,\r\n});\r\n\r\n/**\r\n * Returns the scroll- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the scroll- width and height shall be returned.\r\n */\r\nexport const offsetSize = (elm: HTMLElement | null | undefined): WH =>\r\n  elm\r\n    ? {\r\n        w: elm.offsetWidth,\r\n        h: elm.offsetHeight,\r\n      }\r\n    : zeroObj;\r\n\r\n/**\r\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the client- width and height shall be returned.\r\n */\r\nexport const clientSize = (elm: HTMLElement | false | null | undefined): WH =>\r\n  elm\r\n    ? {\r\n        w: elm.clientWidth,\r\n        h: elm.clientHeight,\r\n      }\r\n    : zeroObj;\r\n\r\n/**\r\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the client- width and height shall be returned.\r\n */\r\nexport const scrollSize = (elm: HTMLElement | false | null | undefined): WH =>\r\n  elm\r\n    ? {\r\n        w: elm.scrollWidth,\r\n        h: elm.scrollHeight,\r\n      }\r\n    : zeroObj;\r\n\r\n/**\r\n * Returns the fractional- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the fractional- width and height shall be returned.\r\n */\r\nexport const fractionalSize = (elm: HTMLElement | false | null | undefined): WH => {\r\n  const cssHeight = parseFloat(style(elm, 'height')) || 0;\r\n  const cssWidth = parseFloat(style(elm, 'height')) || 0;\r\n  return {\r\n    w: cssWidth - Math.round(cssWidth),\r\n    h: cssHeight - Math.round(cssHeight),\r\n  };\r\n};\r\n\r\n/**\r\n * Returns the BoundingClientRect of the passed element.\r\n * @param elm The element of which the BoundingClientRect shall be returned.\r\n */\r\nexport const getBoundingClientRect = (elm: HTMLElement): DOMRect => elm.getBoundingClientRect();\r\n\r\n/**\r\n * Determines whether the passed element has any dimensions.\r\n * @param elm The element.\r\n */\r\nexport const hasDimensions = (elm: HTMLElement | false | null | undefined): boolean =>\r\n  elm ? elementHasDimensions(elm as HTMLElement) : false;\r\n","import { isUndefined } from 'support/utils/types';\r\nimport { each, push, runEachAndClear } from 'support/utils/array';\r\n\r\nlet passiveEventsSupport: boolean;\r\nconst supportPassiveEvents = (): boolean => {\r\n  if (isUndefined(passiveEventsSupport)) {\r\n    passiveEventsSupport = false;\r\n    try {\r\n      /* eslint-disable */\r\n      // @ts-ignore\r\n      window.addEventListener(\r\n        'test',\r\n        null,\r\n        Object.defineProperty({}, 'passive', {\r\n          get() {\r\n            passiveEventsSupport = true;\r\n          },\r\n        })\r\n      );\r\n      /* eslint-enable */\r\n    } catch (e) {}\r\n  }\r\n  return passiveEventsSupport;\r\n};\r\nconst splitEventNames = (eventNames: string) => eventNames.split(' ');\r\n\r\nexport interface OnOptions {\r\n  _capture?: boolean;\r\n  _passive?: boolean;\r\n  _once?: boolean;\r\n}\r\n\r\n/**\r\n * Removes the passed event listener for the passed events with the passed options.\r\n * @param target The element from which the listener shall be removed.\r\n * @param eventNames The eventsnames for which the listener shall be removed.\r\n * @param listener The listener which shall be removed.\r\n * @param capture The options of the removed listener.\r\n */\r\nexport const off = <T extends Event = Event>(\r\n  target: EventTarget,\r\n  eventNames: string,\r\n  listener: (event: T) => any,\r\n  capture?: boolean\r\n): void => {\r\n  each(splitEventNames(eventNames), (eventName) => {\r\n    target.removeEventListener(eventName, listener as EventListener, capture);\r\n  });\r\n};\r\n\r\n/**\r\n * Adds the passed event listener for the passed eventnames with the passed options.\r\n * @param target The element to which the listener shall be added.\r\n * @param eventNames The eventsnames for which the listener shall be called.\r\n * @param listener The listener which is called on the eventnames.\r\n * @param options The options of the added listener.\r\n */\r\nexport const on = <T extends Event = Event>(\r\n  target: EventTarget,\r\n  eventNames: string,\r\n  listener: (event: T) => any,\r\n  options?: OnOptions\r\n): (() => void) => {\r\n  const doSupportPassiveEvents = supportPassiveEvents();\r\n  const passive = (doSupportPassiveEvents && options && options._passive) ?? doSupportPassiveEvents;\r\n  const capture = (options && options._capture) || false;\r\n  const once = (options && options._once) || false;\r\n  const offListeners: (() => void)[] = [];\r\n  const nativeOptions: AddEventListenerOptions | boolean = doSupportPassiveEvents\r\n    ? {\r\n        passive,\r\n        capture,\r\n      }\r\n    : capture;\r\n\r\n  each(splitEventNames(eventNames), (eventName) => {\r\n    const finalListener = (\r\n      once\r\n        ? (evt: T) => {\r\n            target.removeEventListener(eventName, finalListener, capture);\r\n            listener && listener(evt);\r\n          }\r\n        : listener\r\n    ) as EventListener;\r\n\r\n    push(offListeners, off.bind(null, target, eventName, finalListener, capture));\r\n    target.addEventListener(eventName, finalListener, nativeOptions);\r\n  });\r\n\r\n  return runEachAndClear.bind(0, offListeners);\r\n};\r\n\r\n/**\r\n * Shorthand for the stopPropagation event Method.\r\n * @param evt The event of which the stopPropagation method shall be called.\r\n */\r\nexport const stopPropagation = (evt: Event): void => evt.stopPropagation();\r\n\r\n/**\r\n * Shorthand for the preventDefault event Method.\r\n * @param evt The event of which the preventDefault method shall be called.\r\n */\r\nexport const preventDefault = (evt: Event): void => evt.preventDefault();\r\n\r\n/**\r\n * Shorthand for the stopPropagation and preventDefault event Method.\r\n * @param evt The event of which the stopPropagation and preventDefault methods shall be called.\r\n */\r\nexport const stopAndPrevent = (evt: Event): void =>\r\n  (stopPropagation(evt) as undefined) || (preventDefault(evt) as undefined);\r\n","import { getBoundingClientRect } from 'support/dom/dimensions';\r\n\r\nexport interface XY<T = number> {\r\n  x: T;\r\n  y: T;\r\n}\r\n\r\nconst zeroObj: XY = {\r\n  x: 0,\r\n  y: 0,\r\n};\r\n\r\n/**\r\n * Returns the offset- left and top coordinates of the passed element relative to the document. If the element is null the top and left values are 0.\r\n * @param elm The element of which the offset- top and left coordinates shall be returned.\r\n */\r\nexport const absoluteCoordinates = (elm: HTMLElement | null | undefined): XY => {\r\n  const rect = elm ? getBoundingClientRect(elm) : 0;\r\n  return rect\r\n    ? {\r\n        x: rect.left + window.pageYOffset,\r\n        y: rect.top + window.pageXOffset,\r\n      }\r\n    : zeroObj;\r\n};\r\n\r\n/**\r\n * Returns the offset- left and top coordinates of the passed element. If the element is null the top and left values are 0.\r\n * @param elm The element of which the offset- top and left coordinates shall be returned.\r\n */\r\nexport const offsetCoordinates = (elm: HTMLElement | null | undefined): XY =>\r\n  elm\r\n    ? {\r\n        x: elm.offsetLeft,\r\n        y: elm.offsetTop,\r\n      }\r\n    : zeroObj;\r\n","import { isArray } from 'support/utils/types';\r\nimport { keys } from 'support/utils/object';\r\nimport { each, from, isEmptyArray } from 'support/utils/array';\r\n\r\nexport type EventListener<\r\n  EventMap extends Record<string, any[]>,\r\n  Name extends keyof EventMap = keyof EventMap\r\n> = (...args: EventMap[Name]) => void;\r\n\r\nexport type InitialEventListeners<EventMap extends Record<string, any[]>> = {\r\n  [K in keyof EventMap]?: EventListener<EventMap> | EventListener<EventMap>[];\r\n};\r\n\r\nconst manageListener = <EventMap extends Record<string, any[]>>(\r\n  callback: (listener?: EventListener<EventMap>) => void,\r\n  listener?: EventListener<EventMap> | EventListener<EventMap>[]\r\n) => {\r\n  each(isArray(listener) ? listener : [listener], callback);\r\n};\r\n\r\nexport const createEventListenerHub = <EventMap extends Record<string, any[]>>(\r\n  initialEventListeners?: InitialEventListeners<EventMap>\r\n) => {\r\n  type EventListener<Name extends keyof EventMap = keyof EventMap> = (\r\n    ...args: EventMap[Name]\r\n  ) => void;\r\n  type RemoveEvent = {\r\n    <Name extends keyof EventMap>(name?: Name, listener?: EventListener<Name>): void;\r\n    <Name extends keyof EventMap>(name?: Name, listener?: EventListener<Name>[]): void;\r\n    <Name extends keyof EventMap>(\r\n      name?: Name,\r\n      listener?: EventListener<Name> | EventListener<Name>[]\r\n    ): void;\r\n  };\r\n  type AddEvent = {\r\n    <Name extends keyof EventMap>(name: Name, listener: EventListener<Name>): () => void;\r\n    <Name extends keyof EventMap>(name: Name, listener: EventListener<Name>[]): () => void;\r\n    <Name extends keyof EventMap>(\r\n      name: Name,\r\n      listener: EventListener<Name> | EventListener<Name>[]\r\n    ): () => void;\r\n  };\r\n  type TriggerEvent = {\r\n    <Name extends keyof EventMap>(name: Name, args?: EventMap[Name]): void;\r\n  };\r\n\r\n  const events = new Map<keyof EventMap, Set<EventListener>>();\r\n\r\n  const removeEvent: RemoveEvent = <Name extends keyof EventMap>(\r\n    name?: Name,\r\n    listener?: EventListener<Name> | EventListener<Name>[]\r\n  ): void => {\r\n    if (name) {\r\n      const eventSet = events.get(name);\r\n      manageListener((currListener) => {\r\n        if (eventSet) {\r\n          eventSet[currListener ? 'delete' : 'clear'](currListener!);\r\n        }\r\n      }, listener as any);\r\n    } else {\r\n      events.forEach((eventSet) => {\r\n        eventSet.clear();\r\n      });\r\n      events.clear();\r\n    }\r\n  };\r\n\r\n  const addEvent: AddEvent = <Name extends keyof EventMap>(\r\n    name: Name,\r\n    listener: EventListener<Name> | EventListener<Name>[]\r\n  ): (() => void) => {\r\n    const eventSet = events.get(name) || new Set();\r\n    events.set(name, eventSet);\r\n\r\n    manageListener((currListener) => {\r\n      currListener && eventSet.add(currListener);\r\n    }, listener as any);\r\n\r\n    return removeEvent.bind(0, name as any, listener as any);\r\n  };\r\n\r\n  const triggerEvent: TriggerEvent = <Name extends keyof EventMap>(\r\n    name: Name,\r\n    args?: EventMap[Name]\r\n  ): void => {\r\n    const eventSet = events.get(name);\r\n\r\n    each(from(eventSet), (event) => {\r\n      if (args && !isEmptyArray(args)) {\r\n        (event as (...args: EventMap[keyof EventMap]) => void).apply(0, args as any);\r\n      } else {\r\n        (event as () => void)();\r\n      }\r\n    });\r\n  };\r\n\r\n  const initialListenerKeys = keys(initialEventListeners) as Extract<keyof EventMap, string>[];\r\n  each(initialListenerKeys, (key) => {\r\n    addEvent(key, initialEventListeners![key] as any);\r\n  });\r\n\r\n  return [addEvent, removeEvent, triggerEvent] as [AddEvent, RemoveEvent, TriggerEvent];\r\n};\r\n","import { assignDeep, hasOwnProperty } from 'support';\r\nimport type { Options, ReadonlyOSOptions } from 'options';\r\nimport type { PartialOptions } from 'typings';\r\n\r\nexport type SetupElements<T extends Record<string, any>> = [elements: T, destroy: () => void];\r\n\r\nexport type SetupUpdate<T extends any[]> = (\r\n  changedOptions: PartialOptions<Options>,\r\n  force: boolean,\r\n  ...args: T\r\n) => void;\r\n\r\nexport type SetupUpdateCheckOption = <T>(path: string) => [value: T, changed: boolean];\r\n\r\nexport type SetupUpdateSegment<Hints extends Record<string, any>> = (\r\n  updateHints: Hints,\r\n  checkOption: SetupUpdateCheckOption,\r\n  force: boolean\r\n) => Partial<Hints> | void;\r\n\r\nexport type SetupState<T extends Record<string, any>> = [\r\n  get: () => T,\r\n  set: (newState: Partial<T>) => void\r\n];\r\n\r\nexport type Setup<\r\n  DynamicState,\r\n  StaticState extends Record<string, any> = Record<string, any>,\r\n  A extends any[] = []\r\n> = [update: SetupUpdate<A>, state: (() => DynamicState) & StaticState, destroy: () => void];\r\n\r\nconst getPropByPath = <T>(obj: any, path: string): T =>\r\n  obj\r\n    ? path.split('.').reduce((o, prop) => (o && hasOwnProperty(o, prop) ? o[prop] : undefined), obj)\r\n    : undefined;\r\n\r\nexport const createOptionCheck =\r\n  (\r\n    options: ReadonlyOSOptions,\r\n    changedOptions: PartialOptions<Options>,\r\n    force?: boolean\r\n  ): SetupUpdateCheckOption =>\r\n  (path: string) =>\r\n    [getPropByPath(options, path), force || getPropByPath(changedOptions, path) !== undefined];\r\n\r\nexport const createState = <S>(initialState: S): SetupState<S> => {\r\n  let state: S = initialState;\r\n  return [\r\n    () => state,\r\n    (newState: Partial<S>) => {\r\n      state = assignDeep({}, state, newState);\r\n    },\r\n  ];\r\n};\r\n","export const classNameEnvironment = 'os-environment';\r\nexport const classNameEnvironmentFlexboxGlue = `${classNameEnvironment}-flexbox-glue`;\r\nexport const classNameEnvironmentFlexboxGlueMax = `${classNameEnvironmentFlexboxGlue}-max`;\r\n\r\nexport const dataAttributeHost = 'data-overlayscrollbars';\r\nexport const dataAttributeHostOverflowX = `${dataAttributeHost}-overflow-x`;\r\nexport const dataAttributeHostOverflowY = `${dataAttributeHost}-overflow-y`;\r\nexport const dataValueHostOverflowVisible = 'overflowVisible';\r\nexport const dataValueHostViewportScrollbarStyling = 'viewportStyled';\r\nexport const classNamePadding = 'os-padding';\r\nexport const classNameViewport = 'os-viewport';\r\nexport const classNameViewportArrange = `${classNameViewport}-arrange`;\r\nexport const classNameContent = 'os-content';\r\nexport const classNameViewportScrollbarStyling = `${classNameViewport}-scrollbar-styled`;\r\nexport const classNameOverflowVisible = `os-overflow-visible`;\r\n\r\nexport const classNameSizeObserver = 'os-size-observer';\r\nexport const classNameSizeObserverAppear = `${classNameSizeObserver}-appear`;\r\nexport const classNameSizeObserverListener = `${classNameSizeObserver}-listener`;\r\nexport const classNameSizeObserverListenerScroll = `${classNameSizeObserverListener}-scroll`;\r\nexport const classNameSizeObserverListenerItem = `${classNameSizeObserverListener}-item`;\r\nexport const classNameSizeObserverListenerItemFinal = `${classNameSizeObserverListenerItem}-final`;\r\n\r\nexport const classNameTrinsicObserver = 'os-trinsic-observer';\r\n\r\nexport const classNameScrollbar = 'os-scrollbar';\r\nexport const classNameScrollbarHorizontal = `${classNameScrollbar}-horizontal`;\r\nexport const classNameScrollbarVertical = `${classNameScrollbar}-vertical`;\r\nexport const classNameScrollbarTrack = 'os-scrollbar-track';\r\nexport const classNameScrollbarHandle = 'os-scrollbar-handle';\r\nexport const classNamesScrollbarVisible = `${classNameScrollbar}-visible`;\r\nexport const classNamesScrollbarCornerless = `${classNameScrollbar}-cornerless`;\r\nexport const classNamesScrollbarTransitionless = `${classNameScrollbar}-transitionless`;\r\nexport const classNamesScrollbarInteraction = `${classNameScrollbar}-interaction`;\r\nexport const classNamesScrollbarAutoHidden = `${classNameScrollbar}-auto-hidden`;\r\n","import { assignDeep, each, isObject, keys, isArray, hasOwnProperty, isFunction } from 'support';\r\nimport { PartialOptions, ReadonlyOptions } from 'typings';\r\n\r\nconst opsStringify = (value: any) =>\r\n  JSON.stringify(value, (_, val) => {\r\n    if (isFunction(val)) {\r\n      throw new Error();\r\n    }\r\n    return val;\r\n  });\r\n\r\nexport type ResizeBehavior = 'none' | 'both' | 'horizontal' | 'vertical';\r\n\r\nexport type OverflowBehavior =\r\n  | 'hidden'\r\n  | 'scroll'\r\n  | 'visible'\r\n  | 'visible-hidden'\r\n  | 'visible-scroll';\r\n\r\nexport type ScrollbarVisibilityBehavior = 'visible' | 'hidden' | 'auto';\r\n\r\nexport type ScrollbarAutoHideBehavior = 'never' | 'scroll' | 'leave' | 'move';\r\n\r\nexport type ScrollBehavior = 'always' | 'ifneeded' | 'never';\r\n\r\nexport type BasicEventCallback = (this: any) => void;\r\n\r\nexport type ScrollEventCallback = (this: any, args?: UIEvent) => void;\r\n\r\nexport type OverflowChangedCallback = (this: any, args?: OverflowChangedArgs) => void;\r\n\r\nexport type OverflowAmountChangedCallback = (this: any, args?: OverflowAmountChangedArgs) => void;\r\n\r\nexport type DirectionChangedCallback = (this: any, args?: DirectionChangedArgs) => void;\r\n\r\nexport type SizeChangedCallback = (this: any, args?: SizeChangedArgs) => void;\r\n\r\nexport type UpdatedCallback = (this: any, args?: UpdatedArgs) => void;\r\n\r\nexport interface Options {\r\n  paddingAbsolute: boolean;\r\n  updating: {\r\n    elementEvents: Array<[elementSelector: string, eventNames: string]> | null;\r\n    attributes: string[] | null;\r\n    debounce: [timeout: number, maxWait: number] | number | null; // (if tuple: [timeout: 0, maxWait: 33], if number: [timeout: number, maxWait: false]) debounce for content Changes\r\n    ignoreMutation: ((mutation: MutationRecord) => any) | null;\r\n  };\r\n  overflow: {\r\n    x: OverflowBehavior;\r\n    y: OverflowBehavior;\r\n  };\r\n  scrollbars: {\r\n    visibility: ScrollbarVisibilityBehavior;\r\n    autoHide: ScrollbarAutoHideBehavior;\r\n    autoHideDelay: number;\r\n    dragScroll: boolean;\r\n    clickScroll: boolean;\r\n    touch: boolean;\r\n  };\r\n  nativeScrollbarsOverlaid: {\r\n    show: boolean;\r\n    initialize: boolean;\r\n  };\r\n}\r\n\r\nexport type ReadonlyOSOptions = ReadonlyOptions<Options>;\r\n\r\nexport interface OverflowChangedArgs {\r\n  x: boolean;\r\n  y: boolean;\r\n  xScrollable: boolean;\r\n  yScrollable: boolean;\r\n  clipped: boolean;\r\n}\r\n\r\nexport interface OverflowAmountChangedArgs {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport interface DirectionChangedArgs {\r\n  isRTL: number;\r\n  dir: string;\r\n}\r\n\r\nexport interface SizeChangedArgs {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport interface UpdatedArgs {\r\n  forced: boolean;\r\n}\r\n\r\nexport const defaultOptions: Options = {\r\n  // resize: 'none', // none || both  || horizontal || vertical || n || b || h || v\r\n  paddingAbsolute: false, // true || false\r\n  updating: {\r\n    elementEvents: [['img', 'load']], // array of tuples || null\r\n    debounce: [0, 33], // number || number array || null\r\n    attributes: null, // string array || null\r\n    ignoreMutation: null, // () => any || null\r\n  },\r\n  overflow: {\r\n    x: 'scroll', // visible-hidden  || visible-scroll || hidden || scroll || v-h || v-s || h || s\r\n    y: 'scroll', // visible-hidden  || visible-scroll || hidden || scroll || v-h || v-s || h || s\r\n  },\r\n  nativeScrollbarsOverlaid: {\r\n    show: false, // true || false\r\n    initialize: false, // true || false\r\n  },\r\n  scrollbars: {\r\n    visibility: 'auto', // visible || hidden || auto || v || h || a\r\n    autoHide: 'never', // never || scroll || leave || move || n || s || l || m\r\n    autoHideDelay: 800, // number\r\n    dragScroll: true, // true || false\r\n    clickScroll: false, // true || false\r\n    touch: true, // true || false\r\n  },\r\n  /*\r\n  textarea: {\r\n    dynWidth: false, // true || false\r\n    dynHeight: false, // true || false\r\n    inheritedAttrs: ['style', 'class'], // string || array || null\r\n  },\r\n  */\r\n};\r\n\r\nexport const getOptionsDiff = <T>(\r\n  currOptions: T,\r\n  newOptions: PartialOptions<T>\r\n): PartialOptions<T> => {\r\n  const diff: PartialOptions<T> = {};\r\n  const optionsKeys = keys(newOptions).concat(keys(currOptions));\r\n\r\n  each(optionsKeys, (optionKey) => {\r\n    const currOptionValue = currOptions[optionKey];\r\n    const newOptionValue = newOptions[optionKey];\r\n\r\n    if (isObject(currOptionValue) && isObject(newOptionValue)) {\r\n      assignDeep((diff[optionKey] = {}), getOptionsDiff(currOptionValue, newOptionValue));\r\n    } else if (hasOwnProperty(newOptions, optionKey) && newOptionValue !== currOptionValue) {\r\n      let isDiff = true;\r\n\r\n      if (isArray(currOptionValue) || isArray(newOptionValue)) {\r\n        try {\r\n          if (opsStringify(currOptionValue) === opsStringify(newOptionValue)) {\r\n            isDiff = false;\r\n          }\r\n        } catch {}\r\n      }\r\n\r\n      if (isDiff) {\r\n        diff[optionKey] = newOptionValue;\r\n      }\r\n    }\r\n  });\r\n\r\n  return diff;\r\n};\r\n","import { assignDeep, each, isArray, keys } from 'support';\r\nimport { OverlayScrollbars, OverlayScrollbarsStatic } from 'overlayscrollbars';\r\n\r\nexport type PluginInstance =\r\n  | Record<string, unknown>\r\n  | ((staticObj: OverlayScrollbarsStatic, instanceObj: OverlayScrollbars) => void);\r\nexport type Plugin<T extends PluginInstance = PluginInstance> = {\r\n  [pluginName: string]: T;\r\n};\r\n\r\nconst pluginRegistry: Record<string, PluginInstance> = {};\r\n\r\nexport const getPlugins = () => assignDeep({}, pluginRegistry);\r\n\r\nexport const addPlugin = (addedPlugin: Plugin | Plugin[]) => {\r\n  each((isArray(addedPlugin) ? addedPlugin : [addedPlugin]) as Plugin[], (plugin) => {\r\n    each(keys(plugin), (pluginName) => {\r\n      pluginRegistry[pluginName] = plugin[pluginName];\r\n    });\r\n  });\r\n};\r\n","function _extends() {\n  module.exports = _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _extends.apply(this, arguments);\n}\n\nmodule.exports = _extends, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","import { each, hasOwnProperty, keys, push, isEmptyObject } from 'support/utils';\r\nimport { type, isArray, isUndefined, isPlainObject, isString } from 'support/utils/types';\r\nimport { PlainObject, PartialOptions } from 'typings';\r\n\r\nexport type OptionsObjectType = Record<string, unknown>;\r\nexport type OptionsFunctionType = (this: any, ...args: any[]) => any;\r\nexport type OptionsTemplateType<T extends OptionsTemplateNativeTypes> = ExtractPropsKey<\r\n  OptionsTemplateTypeMap,\r\n  T\r\n>;\r\nexport type OptionsTemplateTypes = keyof OptionsTemplateTypeMap;\r\nexport type OptionsTemplateNativeTypes = OptionsTemplateTypeMap[keyof OptionsTemplateTypeMap];\r\n\r\nexport type OptionsTemplateValue<T extends OptionsTemplateNativeTypes = string> = T extends string\r\n  ? string extends T\r\n    ? OptionsTemplateValueNonEnum<T>\r\n    : string\r\n  : OptionsTemplateValueNonEnum<T>;\r\n\r\nexport type OptionsTemplate<T> = {\r\n  [P in keyof T]: T[P] extends OptionsObjectType\r\n    ? OptionsTemplate<T[P]>\r\n    : T[P] extends OptionsTemplateNativeTypes\r\n    ? OptionsTemplateValue<T[P]>\r\n    : never;\r\n};\r\n\r\nexport type OptionsValidationResult<T> = [\r\n  PartialOptions<T>, // validated\r\n  Record<string, unknown> // foreign\r\n];\r\n\r\ntype OptionsTemplateTypeMap = {\r\n  __TPL_boolean_TYPE__: boolean;\r\n  __TPL_number_TYPE__: number;\r\n  __TPL_string_TYPE__: string;\r\n  __TPL_array_TYPE__: Array<any> | ReadonlyArray<any>;\r\n  __TPL_function_TYPE__: OptionsFunctionType;\r\n  __TPL_null_TYPE__: null;\r\n  __TPL_object_TYPE__: OptionsObjectType;\r\n};\r\n\r\ntype OptionsTemplateValueNonEnum<T extends OptionsTemplateNativeTypes> =\r\n  | OptionsTemplateType<T>\r\n  | [OptionsTemplateType<T>, ...Array<OptionsTemplateTypes>];\r\n\r\ntype ExtractPropsKey<T, TProps extends T[keyof T]> = {\r\n  [P in keyof T]: TProps extends T[P] ? P : never;\r\n}[keyof T];\r\n\r\ntype OptionsTemplateTypesDictionary = {\r\n  readonly boolean: OptionsTemplateType<boolean>;\r\n  readonly number: OptionsTemplateType<number>;\r\n  readonly string: OptionsTemplateType<string>;\r\n  readonly array: OptionsTemplateType<Array<any>>;\r\n  readonly object: OptionsTemplateType<OptionsObjectType>;\r\n  readonly function: OptionsTemplateType<OptionsFunctionType>;\r\n  readonly null: OptionsTemplateType<null>;\r\n};\r\n\r\nconst optionsTemplateTypes: OptionsTemplateTypesDictionary = {\r\n  boolean: '__TPL_boolean_TYPE__',\r\n  number: '__TPL_number_TYPE__',\r\n  string: '__TPL_string_TYPE__',\r\n  array: '__TPL_array_TYPE__',\r\n  object: '__TPL_object_TYPE__',\r\n  function: '__TPL_function_TYPE__',\r\n  null: '__TPL_null_TYPE__',\r\n};\r\n\r\n/**\r\n * Validates the given options object according to the given template object and returns a object which looks like:\r\n * {\r\n *  foreign   : a object which consists of properties which aren't defined inside the template. (foreign properties)\r\n *  validated : a object which consists only of valid properties. (property name is inside the template and value has a correct type)\r\n * }\r\n * @param template The template according to which the options object shall be validated.\r\n * @param options The options object which shall be validated.\r\n * @param optionsDiff When provided the returned validated object will only have properties which are different to this objects properties.\r\n * Example (assume all properties are valid to the template):\r\n * Options object            : { a: 'a', b: 'b', c: 'c' }\r\n * optionsDiff object        : { a: 'a', b: 'b', c: undefined }\r\n * Returned validated object : { c: 'c' }\r\n * Because the value of the properties a and b didn't change, they aren't included in the returned object.\r\n * Without the optionsDiff object the returned validated object would be: { a: 'a', b: 'b', c: 'c' }\r\n * @param doWriteErrors True if errors shall be logged into the console, false otherwise.\r\n * @param propPath The propertyPath which lead to this object. (used for error logging)\r\n */\r\nconst validateRecursive = <T extends PlainObject>(\r\n  template: OptionsTemplate<T>,\r\n  options: PartialOptions<T>,\r\n  doWriteErrors?: boolean,\r\n  propPath?: string\r\n): OptionsValidationResult<T> => {\r\n  const validatedOptions: PartialOptions<T> = {};\r\n  const optionsCopy: PartialOptions<T> = { ...options };\r\n  const props = keys(template).filter((prop) => hasOwnProperty(options, prop));\r\n\r\n  each(props, (prop: Extract<keyof T, string>) => {\r\n    const optionsValue: any = options[prop];\r\n    const templateValue: PlainObject | string | OptionsTemplateTypes | Array<OptionsTemplateTypes> =\r\n      template[prop];\r\n    const templateIsComplex = isPlainObject(templateValue);\r\n    const propPrefix = propPath ? `${propPath}.` : '';\r\n\r\n    // if the template has a object as value, it means that the options are complex (verschachtelt)\r\n    if (templateIsComplex && isPlainObject(optionsValue)) {\r\n      const [validated, foreign] = validateRecursive(\r\n        templateValue as T,\r\n        optionsValue,\r\n        doWriteErrors,\r\n        propPrefix + prop\r\n      );\r\n      validatedOptions[prop] = validated as any;\r\n      optionsCopy[prop] = foreign as any;\r\n\r\n      each([optionsCopy, validatedOptions], (value) => {\r\n        if (isEmptyObject(value[prop])) {\r\n          delete value[prop];\r\n        }\r\n      });\r\n    } else if (!templateIsComplex) {\r\n      let isValid = false;\r\n      const errorEnumStrings: Array<string> = [];\r\n      const errorPossibleTypes: Array<string> = [];\r\n      const optionsValueType = type(optionsValue);\r\n      const templateValueArr: Array<string | OptionsTemplateTypes> = !isArray(templateValue)\r\n        ? [templateValue as string | OptionsTemplateTypes]\r\n        : (templateValue as Array<OptionsTemplateTypes>);\r\n\r\n      each(templateValueArr, (currTemplateType) => {\r\n        // if currType value isn't inside possibleTemplateTypes we assume its a enum string value\r\n        let typeString: string | undefined;\r\n        each(optionsTemplateTypes, (value: string, key: string) => {\r\n          if (value === currTemplateType) {\r\n            typeString = key;\r\n          }\r\n        });\r\n        const isEnumString = isUndefined(typeString);\r\n        if (isEnumString && isString(optionsValue)) {\r\n          // split it into a array which contains all possible values for example: [\"yes\", \"no\", \"maybe\"]\r\n          const enumStringSplit = currTemplateType.split(' ');\r\n          isValid = !!enumStringSplit.find((possibility) => possibility === optionsValue);\r\n\r\n          // build error message\r\n          push(errorEnumStrings, enumStringSplit);\r\n        } else {\r\n          isValid = optionsTemplateTypes[optionsValueType] === currTemplateType;\r\n        }\r\n\r\n        // build error message\r\n        push(errorPossibleTypes, isEnumString ? optionsTemplateTypes.string : typeString!);\r\n\r\n        // continue if invalid, break if valid\r\n        return !isValid;\r\n      });\r\n\r\n      if (isValid) {\r\n        validatedOptions[prop] = optionsValue;\r\n      } else if (doWriteErrors) {\r\n        console.warn(\r\n          `${\r\n            `The option \"${propPrefix}${prop}\" wasn't set, because it doesn't accept the type [ ${optionsValueType.toUpperCase()} ] with the value of \"${optionsValue}\".\\r\\n` +\r\n            `Accepted types are: [ ${errorPossibleTypes.join(', ').toUpperCase()} ].\\r\\n`\r\n          }${\r\n            errorEnumStrings.length > 0\r\n              ? `\\r\\nValid strings are: [ ${errorEnumStrings.join(', ')} ].`\r\n              : ''\r\n          }`\r\n        );\r\n      }\r\n\r\n      delete optionsCopy[prop];\r\n    }\r\n  });\r\n\r\n  return [validatedOptions, optionsCopy]; // optionsCopy equals now to foreign options\r\n};\r\n\r\n/**\r\n * Validates the given options object according to the given template object and returns a tuple which looks like:\r\n * [\r\n *  validated : a object which consists only of valid properties. (property name is inside the template and value has a correct type)\r\n *  foreign   : a object which consists of properties which aren't defined inside the template. (foreign properties)\r\n * ]\r\n * @param template The template according to which the options object shall be validated.\r\n * @param options The options object which shall be validated.\r\n * @param doWriteErrors True if errors shall be logged into the console, false otherwise.\r\n */\r\nconst validateOptions = <T extends PlainObject>(\r\n  template: OptionsTemplate<T>,\r\n  options: PartialOptions<T>,\r\n  doWriteErrors?: boolean\r\n): OptionsValidationResult<T> => validateRecursive<T>(template, options, doWriteErrors);\r\n\r\nexport { validateOptions, optionsTemplateTypes };\r\n","import {\r\n  Options,\r\n  OverflowBehavior,\r\n  ScrollbarVisibilityBehavior,\r\n  ScrollbarAutoHideBehavior,\r\n} from 'options';\r\nimport {\r\n  validateOptions,\r\n  OptionsTemplate,\r\n  OptionsTemplateValue,\r\n  optionsTemplateTypes as oTypes,\r\n} from 'plugins/optionsValidationPlugin/validation';\r\nimport type { PartialOptions } from 'typings';\r\nimport type { Plugin } from 'plugins';\r\n\r\nconst numberAllowedValues: OptionsTemplateValue<number> = oTypes.number;\r\nconst booleanAllowedValues: OptionsTemplateValue<boolean> = oTypes.boolean;\r\nconst arrayNullValues: OptionsTemplateValue<Array<unknown> | null> = [oTypes.array, oTypes.null];\r\nconst overflowAllowedValues: OptionsTemplateValue<OverflowBehavior> =\r\n  'hidden scroll visible visible-hidden';\r\nconst scrollbarsVisibilityAllowedValues: OptionsTemplateValue<ScrollbarVisibilityBehavior> =\r\n  'visible hidden auto';\r\nconst scrollbarsAutoHideAllowedValues: OptionsTemplateValue<ScrollbarAutoHideBehavior> =\r\n  'never scroll leavemove';\r\n\r\nconst optionsTemplate: OptionsTemplate<Options> = {\r\n  // resize: resizeAllowedValues, // none || both  || horizontal || vertical || n || b ||\r\n  paddingAbsolute: booleanAllowedValues, // true || false\r\n  updating: {\r\n    elementEvents: arrayNullValues, // array of tuples || null\r\n    attributes: arrayNullValues,\r\n    debounce: [oTypes.number, oTypes.array, oTypes.null], // number || number array || null\r\n    ignoreMutation: [oTypes.function, oTypes.null], // function || null\r\n  },\r\n  overflow: {\r\n    x: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scrol\r\n    y: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scrol\r\n  },\r\n  scrollbars: {\r\n    visibility: scrollbarsVisibilityAllowedValues, // visible || hidden || auto || v ||\r\n    autoHide: scrollbarsAutoHideAllowedValues, // never || scroll || leave || move ||\r\n    autoHideDelay: numberAllowedValues, // number\r\n    dragScroll: booleanAllowedValues, // true || false\r\n    clickScroll: booleanAllowedValues, // true || false\r\n    touch: booleanAllowedValues, // true || false\r\n  },\r\n  /*\r\n  textarea: {\r\n    dynWidth: booleanAllowedValues, // true || false\r\n    dynHeight: booleanAllowedValues, // true || false\r\n    inheritedAttrs: stringArrayNullAllowedValues, // string || array || nul\r\n  },\r\n  */\r\n  nativeScrollbarsOverlaid: {\r\n    show: booleanAllowedValues, // true || false\r\n    initialize: booleanAllowedValues, // true || false\r\n  },\r\n};\r\n\r\nexport type OptionsValidationPluginInstance = {\r\n  _: (options: PartialOptions<Options>, doWriteErrors?: boolean) => PartialOptions<Options>;\r\n};\r\n\r\nexport const optionsValidationPluginName = '__osOptionsValidationPlugin';\r\n\r\nexport const optionsValidationPlugin: Plugin<OptionsValidationPluginInstance> = {\r\n  [optionsValidationPluginName]: {\r\n    _: (options: PartialOptions<Options>, doWriteErrors?: boolean) => {\r\n      const [validated, foreign] = validateOptions(optionsTemplate, options, doWriteErrors);\r\n      return { ...foreign, ...validated };\r\n    },\r\n  },\r\n};\r\n","import {\r\n  createDOM,\r\n  style,\r\n  appendChildren,\r\n  offsetSize,\r\n  scrollLeft,\r\n  scrollTop,\r\n  on,\r\n  addClass,\r\n  equalWH,\r\n  push,\r\n  cAF,\r\n  rAF,\r\n  stopPropagation,\r\n} from 'support';\r\nimport {\r\n  classNameSizeObserverListenerScroll,\r\n  classNameSizeObserverListenerItem,\r\n  classNameSizeObserverListenerItemFinal,\r\n} from 'classnames';\r\nimport type { Plugin } from 'plugins';\r\n\r\nexport type SizeObserverPluginInstance = {\r\n  _: (\r\n    listenerElement: HTMLElement,\r\n    onSizeChangedCallback: (appear: boolean) => any,\r\n    observeAppearChange: boolean\r\n  ) => [appearCallback: () => any, offFns: (() => any)[]];\r\n};\r\n\r\nconst scrollAmount = 3333333;\r\nconst scrollEventName = 'scroll';\r\nexport const sizeObserverPluginName = '__osSizeObserverPlugin';\r\n\r\nexport const sizeObserverPlugin: Plugin<SizeObserverPluginInstance> = {\r\n  [sizeObserverPluginName]: {\r\n    _: (listenerElement, onSizeChangedCallback, observeAppearChange) => {\r\n      const observerElementChildren = createDOM(\r\n        `<div class=\"${classNameSizeObserverListenerItem}\" dir=\"ltr\"><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\"></div></div><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\" style=\"width: 200%; height: 200%\"></div></div></div>`\r\n      );\r\n      appendChildren(listenerElement, observerElementChildren);\r\n      addClass(listenerElement, classNameSizeObserverListenerScroll);\r\n      const observerElementChildrenRoot = observerElementChildren[0] as HTMLElement;\r\n      const shrinkElement = observerElementChildrenRoot.lastChild as HTMLElement;\r\n      const expandElement = observerElementChildrenRoot.firstChild as HTMLElement;\r\n      const expandElementChild = expandElement?.firstChild as HTMLElement;\r\n\r\n      let cacheSize = offsetSize(observerElementChildrenRoot);\r\n      let currSize = cacheSize;\r\n      let isDirty = false;\r\n      let rAFId: number;\r\n\r\n      const reset = () => {\r\n        scrollLeft(expandElement, scrollAmount);\r\n        scrollTop(expandElement, scrollAmount);\r\n        scrollLeft(shrinkElement, scrollAmount);\r\n        scrollTop(shrinkElement, scrollAmount);\r\n      };\r\n      const onResized = (appear?: unknown) => {\r\n        rAFId = 0;\r\n        if (isDirty) {\r\n          cacheSize = currSize;\r\n          onSizeChangedCallback(appear === true);\r\n        }\r\n      };\r\n      const onScroll = (scrollEvent?: Event | false) => {\r\n        currSize = offsetSize(observerElementChildrenRoot);\r\n        isDirty = !scrollEvent || !equalWH(currSize, cacheSize);\r\n\r\n        if (scrollEvent) {\r\n          stopPropagation(scrollEvent);\r\n\r\n          if (isDirty && !rAFId) {\r\n            cAF!(rAFId);\r\n            rAFId = rAF!(onResized);\r\n          }\r\n        } else {\r\n          onResized(scrollEvent === false);\r\n        }\r\n\r\n        reset();\r\n      };\r\n      const offListeners = push(\r\n        [],\r\n        [on(expandElement, scrollEventName, onScroll), on(shrinkElement, scrollEventName, onScroll)]\r\n      );\r\n\r\n      // lets assume that the divs will never be that large and a constant value is enough\r\n      style(expandElementChild, {\r\n        width: scrollAmount,\r\n        height: scrollAmount,\r\n      });\r\n\r\n      reset();\r\n\r\n      return [observeAppearChange ? onScroll.bind(0, false) : reset, offListeners];\r\n    },\r\n  },\r\n};\r\n","import {\r\n  keys,\r\n  attr,\r\n  WH,\r\n  style,\r\n  addClass,\r\n  removeClass,\r\n  noop,\r\n  each,\r\n  assignDeep,\r\n  windowSize,\r\n  UpdateCache,\r\n  XY,\r\n} from 'support';\r\nimport { classNameViewportArrange } from 'classnames';\r\nimport type { StyleObject } from 'typings';\r\nimport type { StructureSetupState } from 'setups/structureSetup';\r\nimport type {\r\n  ViewportOverflowState,\r\n  GetViewportOverflowState,\r\n  HideNativeScrollbars,\r\n} from 'setups/structureSetup/updateSegments/overflowUpdateSegment';\r\nimport type { InternalEnvironment } from 'environment';\r\nimport type { Plugin } from 'plugins';\r\n\r\nexport type ArrangeViewport = (\r\n  viewportOverflowState: ViewportOverflowState,\r\n  viewportScrollSize: WH<number>,\r\n  sizeFraction: WH<number>,\r\n  directionIsRTL: boolean\r\n) => boolean;\r\n\r\nexport type UndoViewportArrangeResult = [\r\n  redoViewportArrange: () => void,\r\n  overflowState?: ViewportOverflowState\r\n];\r\n\r\nexport type UndoArrangeViewport = (\r\n  showNativeOverlaidScrollbars: boolean,\r\n  directionIsRTL: boolean,\r\n  viewportOverflowState?: ViewportOverflowState\r\n) => UndoViewportArrangeResult;\r\n\r\nexport type ScrollbarsHidingPluginInstance = {\r\n  _createUniqueViewportArrangeElement(env: InternalEnvironment): HTMLStyleElement | false;\r\n  _overflowUpdateSegment(\r\n    doViewportArrange: boolean,\r\n    flexboxGlue: boolean,\r\n    viewport: HTMLElement,\r\n    viewportArrange: HTMLStyleElement | false | null | undefined,\r\n    getState: () => StructureSetupState,\r\n    getViewportOverflowState: GetViewportOverflowState,\r\n    hideNativeScrollbars: HideNativeScrollbars\r\n  ): [ArrangeViewport, UndoArrangeViewport];\r\n  _envWindowZoom(): (\r\n    envInstance: InternalEnvironment,\r\n    updateNativeScrollbarSizeCache: UpdateCache<XY<number>>,\r\n    triggerEvent: () => void\r\n  ) => void;\r\n};\r\n\r\nlet contentArrangeCounter = 0;\r\nconst { round, abs } = Math;\r\nconst getWindowDPR = (): number => {\r\n  // eslint-disable-next-line\r\n  // @ts-ignore\r\n  const dDPI = window.screen.deviceXDPI || 0;\r\n  // eslint-disable-next-line\r\n  // @ts-ignore\r\n  const sDPI = window.screen.logicalXDPI || 1;\r\n  return window.devicePixelRatio || dDPI / sDPI;\r\n};\r\n\r\nconst diffBiggerThanOne = (valOne: number, valTwo: number): boolean => {\r\n  const absValOne = abs(valOne);\r\n  const absValTwo = abs(valTwo);\r\n  return !(absValOne === absValTwo || absValOne + 1 === absValTwo || absValOne - 1 === absValTwo);\r\n};\r\n\r\nexport const scrollbarsHidingPluginName = '__osScrollbarsHidingPlugin';\r\n\r\nexport const scrollbarsHidingPlugin: Plugin<ScrollbarsHidingPluginInstance> = {\r\n  [scrollbarsHidingPluginName]: {\r\n    _createUniqueViewportArrangeElement: (env: InternalEnvironment) => {\r\n      const {\r\n        _nativeScrollbarsHiding: _nativeScrollbarStyling,\r\n        _nativeScrollbarsOverlaid: _nativeScrollbarIsOverlaid,\r\n        _cssCustomProperties,\r\n      } = env;\r\n      const create =\r\n        !_cssCustomProperties &&\r\n        !_nativeScrollbarStyling &&\r\n        (_nativeScrollbarIsOverlaid.x || _nativeScrollbarIsOverlaid.y);\r\n      const result = create ? document.createElement('style') : false;\r\n\r\n      if (result) {\r\n        attr(result, 'id', `${classNameViewportArrange}-${contentArrangeCounter}`);\r\n        contentArrangeCounter++;\r\n      }\r\n\r\n      return result;\r\n    },\r\n    _overflowUpdateSegment: (\r\n      doViewportArrange,\r\n      flexboxGlue,\r\n      viewport,\r\n      viewportArrange,\r\n      getState,\r\n      getViewportOverflowState,\r\n      hideNativeScrollbars\r\n    ) => {\r\n      /**\r\n       * Sets the styles of the viewport arrange element.\r\n       * @param viewportOverflowState The viewport overflow state according to which the scrollbars shall be hidden.\r\n       * @param viewportScrollSize The content scroll size.\r\n       * @param directionIsRTL Whether the direction is RTL or not.\r\n       * @returns A boolean which indicates whether the viewport arrange element was adjusted.\r\n       */\r\n      const arrangeViewport: ArrangeViewport = (\r\n        viewportOverflowState,\r\n        viewportScrollSize,\r\n        sizeFraction,\r\n        directionIsRTL\r\n      ) => {\r\n        if (doViewportArrange) {\r\n          const { _viewportPaddingStyle } = getState();\r\n          const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } = viewportOverflowState;\r\n          const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n          const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\r\n          const viewportArrangeHorizontalPaddingKey: keyof StyleObject = directionIsRTL\r\n            ? 'paddingRight'\r\n            : 'paddingLeft';\r\n          const viewportArrangeHorizontalPaddingValue = _viewportPaddingStyle[\r\n            viewportArrangeHorizontalPaddingKey\r\n          ] as number;\r\n          const viewportArrangeVerticalPaddingValue = _viewportPaddingStyle.paddingTop as number;\r\n          const fractionalContentWidth = viewportScrollSize.w + sizeFraction.w;\r\n          const fractionalContenHeight = viewportScrollSize.h + sizeFraction.h;\r\n          const arrangeSize = {\r\n            w:\r\n              hideOffsetY && arrangeY\r\n                ? `${\r\n                    hideOffsetY + fractionalContentWidth - viewportArrangeHorizontalPaddingValue\r\n                  }px`\r\n                : '',\r\n            h:\r\n              hideOffsetX && arrangeX\r\n                ? `${hideOffsetX + fractionalContenHeight - viewportArrangeVerticalPaddingValue}px`\r\n                : '',\r\n          };\r\n\r\n          // adjust content arrange / before element\r\n          if (viewportArrange) {\r\n            const { sheet } = viewportArrange;\r\n            if (sheet) {\r\n              const { cssRules } = sheet;\r\n              if (cssRules) {\r\n                if (!cssRules.length) {\r\n                  sheet.insertRule(\r\n                    `#${attr(viewportArrange, 'id')} + .${classNameViewportArrange}::before {}`,\r\n                    0\r\n                  );\r\n                }\r\n\r\n                // @ts-ignore\r\n                const ruleStyle = cssRules[0].style;\r\n\r\n                ruleStyle.width = arrangeSize.w;\r\n                ruleStyle.height = arrangeSize.h;\r\n              }\r\n            }\r\n          } else {\r\n            style<'--os-vaw' | '--os-vah'>(viewport, {\r\n              '--os-vaw': arrangeSize.w,\r\n              '--os-vah': arrangeSize.h,\r\n            });\r\n          }\r\n        }\r\n\r\n        return doViewportArrange;\r\n      };\r\n\r\n      /**\r\n       * Removes all styles applied because of the viewport arrange strategy.\r\n       * @param showNativeOverlaidScrollbars Whether native overlaid scrollbars are shown instead of hidden.\r\n       * @param directionIsRTL Whether the direction is RTL or not.\r\n       * @param viewportOverflowState The currentviewport overflow state or undefined if it has to be determined.\r\n       * @returns A object with a function which applies all the removed styles and the determined viewport vverflow state.\r\n       */\r\n      const undoViewportArrange: UndoArrangeViewport = (\r\n        showNativeOverlaidScrollbars,\r\n        directionIsRTL,\r\n        viewportOverflowState?\r\n      ) => {\r\n        if (doViewportArrange) {\r\n          const finalViewportOverflowState =\r\n            viewportOverflowState || getViewportOverflowState(showNativeOverlaidScrollbars);\r\n          const { _viewportPaddingStyle: viewportPaddingStyle } = getState();\r\n          const { _scrollbarsHideOffsetArrange } = finalViewportOverflowState;\r\n          const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n          const finalPaddingStyle: StyleObject = {};\r\n          const assignProps = (props: string) =>\r\n            each(props.split(' '), (prop) => {\r\n              finalPaddingStyle[prop] = viewportPaddingStyle[prop];\r\n            });\r\n\r\n          if (arrangeX) {\r\n            assignProps('marginBottom paddingTop paddingBottom');\r\n          }\r\n\r\n          if (arrangeY) {\r\n            assignProps('marginLeft marginRight paddingLeft paddingRight');\r\n          }\r\n\r\n          const prevStyle = style(viewport, keys(finalPaddingStyle));\r\n\r\n          removeClass(viewport, classNameViewportArrange);\r\n\r\n          if (!flexboxGlue) {\r\n            finalPaddingStyle.height = '';\r\n          }\r\n\r\n          style(viewport, finalPaddingStyle);\r\n\r\n          return [\r\n            () => {\r\n              hideNativeScrollbars(\r\n                finalViewportOverflowState,\r\n                directionIsRTL,\r\n                doViewportArrange,\r\n                prevStyle\r\n              );\r\n              style(viewport, prevStyle);\r\n              addClass(viewport, classNameViewportArrange);\r\n            },\r\n            finalViewportOverflowState,\r\n          ];\r\n        }\r\n        return [noop];\r\n      };\r\n\r\n      return [arrangeViewport, undoViewportArrange];\r\n    },\r\n    _envWindowZoom: () => {\r\n      let size = { w: 0, h: 0 };\r\n      let dpr = 0;\r\n\r\n      return (envInstance, updateNativeScrollbarSizeCache, triggerEvent) => {\r\n        const sizeNew = windowSize();\r\n        const deltaSize = {\r\n          w: sizeNew.w - size.w,\r\n          h: sizeNew.h - size.h,\r\n        };\r\n\r\n        if (deltaSize.w === 0 && deltaSize.h === 0) {\r\n          return;\r\n        }\r\n\r\n        const deltaAbsSize = {\r\n          w: abs(deltaSize.w),\r\n          h: abs(deltaSize.h),\r\n        };\r\n        const deltaAbsRatio = {\r\n          w: abs(round(sizeNew.w / (size.w / 100.0))),\r\n          h: abs(round(sizeNew.h / (size.h / 100.0))),\r\n        };\r\n        const dprNew = getWindowDPR();\r\n        const deltaIsBigger = deltaAbsSize.w > 2 && deltaAbsSize.h > 2;\r\n        const difference = !diffBiggerThanOne(deltaAbsRatio.w, deltaAbsRatio.h);\r\n        const dprChanged = dprNew !== dpr && dprNew > 0;\r\n        const isZoom = deltaIsBigger && difference && dprChanged;\r\n\r\n        if (isZoom) {\r\n          const [scrollbarSize, scrollbarSizeChanged] = updateNativeScrollbarSizeCache();\r\n\r\n          assignDeep(envInstance._nativeScrollbarsSize, scrollbarSize); // keep the object same!\r\n\r\n          if (scrollbarSizeChanged) {\r\n            triggerEvent();\r\n          }\r\n        }\r\n\r\n        size = sizeNew;\r\n        dpr = dprNew;\r\n      };\r\n    },\r\n  },\r\n};\r\n","import {\r\n  createDOM,\r\n  addClass,\r\n  style,\r\n  appendChildren,\r\n  fractionalSize,\r\n  clientSize,\r\n  absoluteCoordinates,\r\n  offsetSize,\r\n  scrollLeft,\r\n  XY,\r\n  removeAttr,\r\n  removeElements,\r\n  equalBCRWH,\r\n  getBoundingClientRect,\r\n  assignDeep,\r\n  cssProperty,\r\n  createCache,\r\n  equalXY,\r\n  createEventListenerHub,\r\n  EventListener,\r\n} from 'support';\r\nimport {\r\n  classNameEnvironment,\r\n  classNameEnvironmentFlexboxGlue,\r\n  classNameEnvironmentFlexboxGlueMax,\r\n  classNameViewportScrollbarStyling,\r\n} from 'classnames';\r\nimport { Options, defaultOptions } from 'options';\r\nimport { PartialOptions } from 'typings';\r\nimport { InitializationStrategy } from 'initialization';\r\nimport { getPlugins, ScrollbarsHidingPluginInstance, scrollbarsHidingPluginName } from 'plugins';\r\n\r\ntype EnvironmentEventMap = {\r\n  _: [];\r\n};\r\n\r\nexport interface InternalEnvironment {\r\n  readonly _nativeScrollbarsSize: XY;\r\n  readonly _nativeScrollbarsOverlaid: XY<boolean>;\r\n  readonly _nativeScrollbarsHiding: boolean;\r\n  readonly _rtlScrollBehavior: { n: boolean; i: boolean };\r\n  readonly _flexboxGlue: boolean;\r\n  readonly _cssCustomProperties: boolean;\r\n  readonly _defaultInitializationStrategy: InitializationStrategy;\r\n  readonly _defaultDefaultOptions: Options;\r\n  _addListener(listener: EventListener<EnvironmentEventMap, '_'>): () => void;\r\n  _getInitializationStrategy(): InitializationStrategy;\r\n  _setInitializationStrategy(newInitializationStrategy: Partial<InitializationStrategy>): void;\r\n  _getDefaultOptions(): Options;\r\n  _setDefaultOptions(newDefaultOptions: PartialOptions<Options>): void;\r\n}\r\n\r\nlet environmentInstance: InternalEnvironment;\r\n\r\nconst getNativeScrollbarSize = (\r\n  body: HTMLElement,\r\n  measureElm: HTMLElement,\r\n  measureElmChild: HTMLElement,\r\n  clear?: boolean\r\n): XY => {\r\n  appendChildren(body, measureElm);\r\n\r\n  const cSize = clientSize(measureElm);\r\n  const oSize = offsetSize(measureElm);\r\n  const fSize = fractionalSize(measureElmChild);\r\n\r\n  clear && removeElements(measureElm);\r\n\r\n  return {\r\n    x: oSize.h - cSize.h + fSize.h,\r\n    y: oSize.w - cSize.w + fSize.w,\r\n  };\r\n};\r\n\r\nconst getNativeScrollbarsHiding = (testElm: HTMLElement): boolean => {\r\n  let result = false;\r\n  const revertClass = addClass(testElm, classNameViewportScrollbarStyling);\r\n  try {\r\n    result =\r\n      style(testElm, cssProperty('scrollbar-width')) === 'none' ||\r\n      window.getComputedStyle(testElm, '::-webkit-scrollbar').getPropertyValue('display') ===\r\n        'none';\r\n  } catch (ex) {}\r\n  revertClass();\r\n  return result;\r\n};\r\n\r\nconst getRtlScrollBehavior = (\r\n  parentElm: HTMLElement,\r\n  childElm: HTMLElement\r\n): { i: boolean; n: boolean } => {\r\n  const strHidden = 'hidden';\r\n  style(parentElm, { overflowX: strHidden, overflowY: strHidden, direction: 'rtl' });\r\n  scrollLeft(parentElm, 0);\r\n\r\n  const parentOffset = absoluteCoordinates(parentElm);\r\n  const childOffset = absoluteCoordinates(childElm);\r\n  scrollLeft(parentElm, -999); // https://github.com/KingSora/OverlayScrollbars/issues/187\r\n  const childOffsetAfterScroll = absoluteCoordinates(childElm);\r\n  return {\r\n    /**\r\n     * origin direction = determines if the zero scroll position is on the left or right side\r\n     * 'i' means 'invert' (i === true means that the axis must be inverted to be correct)\r\n     * true = on the left side\r\n     * false = on the right side\r\n     */\r\n    i: parentOffset.x === childOffset.x,\r\n    /**\r\n     * negative = determines if the maximum scroll is positive or negative\r\n     * 'n' means 'negate' (n === true means that the axis must be negated to be correct)\r\n     * true = negative\r\n     * false = positive\r\n     */\r\n    n: childOffset.x !== childOffsetAfterScroll.x,\r\n  };\r\n};\r\n\r\nconst getFlexboxGlue = (parentElm: HTMLElement, childElm: HTMLElement): boolean => {\r\n  const revertFbxGlue = addClass(parentElm, classNameEnvironmentFlexboxGlue);\r\n  const minOffsetsizeParent = getBoundingClientRect(parentElm);\r\n  const minOffsetsize = getBoundingClientRect(childElm);\r\n  const supportsMin = equalBCRWH(minOffsetsize, minOffsetsizeParent, true);\r\n\r\n  const revertFbxGlueMax = addClass(parentElm, classNameEnvironmentFlexboxGlueMax);\r\n  const maxOffsetsizeParent = getBoundingClientRect(parentElm);\r\n  const maxOffsetsize = getBoundingClientRect(childElm);\r\n  const supportsMax = equalBCRWH(maxOffsetsize, maxOffsetsizeParent, true);\r\n\r\n  revertFbxGlue();\r\n  revertFbxGlueMax();\r\n\r\n  return supportsMin && supportsMax;\r\n};\r\n\r\nconst createEnvironment = (): InternalEnvironment => {\r\n  const { body } = document;\r\n  const envDOM = createDOM(`<div class=\"${classNameEnvironment}\"><div></div></div>`);\r\n  const envElm = envDOM[0] as HTMLElement;\r\n  const envChildElm = envElm.firstChild as HTMLElement;\r\n  const [addEvent, , triggerEvent] = createEventListenerHub<EnvironmentEventMap>();\r\n  const [updateNativeScrollbarSizeCache, getNativeScrollbarSizeCache] = createCache(\r\n    {\r\n      _initialValue: getNativeScrollbarSize(body, envElm, envChildElm),\r\n      _equal: equalXY,\r\n    },\r\n    getNativeScrollbarSize.bind(0, body, envElm, envChildElm, true)\r\n  );\r\n  const [nativeScrollbarsSize] = getNativeScrollbarSizeCache();\r\n  const nativeScrollbarsHiding = getNativeScrollbarsHiding(envElm);\r\n  const nativeScrollbarsOverlaid = {\r\n    x: nativeScrollbarsSize.x === 0,\r\n    y: nativeScrollbarsSize.y === 0,\r\n  };\r\n  const initializationStrategy = {\r\n    _padding: !nativeScrollbarsHiding,\r\n    _content: false,\r\n  };\r\n  const defaultDefaultOptions = assignDeep({}, defaultOptions);\r\n\r\n  const env: InternalEnvironment = {\r\n    _nativeScrollbarsSize: nativeScrollbarsSize,\r\n    _nativeScrollbarsOverlaid: nativeScrollbarsOverlaid,\r\n    _nativeScrollbarsHiding: nativeScrollbarsHiding,\r\n    _cssCustomProperties: style(envElm, 'zIndex') === '-1',\r\n    _rtlScrollBehavior: getRtlScrollBehavior(envElm, envChildElm),\r\n    _flexboxGlue: getFlexboxGlue(envElm, envChildElm),\r\n    _addListener: (listener) => addEvent('_', listener),\r\n    _getInitializationStrategy: assignDeep<InitializationStrategy, InitializationStrategy>.bind(\r\n      0,\r\n      {} as InitializationStrategy,\r\n      initializationStrategy\r\n    ),\r\n    _setInitializationStrategy(newInitializationStrategy) {\r\n      assignDeep(initializationStrategy, newInitializationStrategy);\r\n    },\r\n    _getDefaultOptions: assignDeep<Options, Options>.bind(0, {} as Options, defaultDefaultOptions),\r\n    _setDefaultOptions(newDefaultOptions) {\r\n      assignDeep(defaultDefaultOptions, newDefaultOptions);\r\n    },\r\n    _defaultInitializationStrategy: assignDeep({}, initializationStrategy),\r\n    _defaultDefaultOptions: assignDeep({}, defaultDefaultOptions),\r\n  };\r\n\r\n  removeAttr(envElm, 'style');\r\n  removeElements(envElm);\r\n\r\n  if (!nativeScrollbarsHiding && (!nativeScrollbarsOverlaid.x || !nativeScrollbarsOverlaid.y)) {\r\n    let resizeFn: undefined | ReturnType<ScrollbarsHidingPluginInstance['_envWindowZoom']>;\r\n    window.addEventListener('resize', () => {\r\n      const scrollbarsHidingPlugin = getPlugins()[scrollbarsHidingPluginName] as\r\n        | ScrollbarsHidingPluginInstance\r\n        | undefined;\r\n\r\n      resizeFn = resizeFn || (scrollbarsHidingPlugin && scrollbarsHidingPlugin._envWindowZoom());\r\n      resizeFn && resizeFn(env, updateNativeScrollbarSizeCache, triggerEvent.bind(0, '_'));\r\n    });\r\n  }\r\n\r\n  return env;\r\n};\r\n\r\nconst getEnvironment = (): InternalEnvironment => {\r\n  if (!environmentInstance) {\r\n    environmentInstance = createEnvironment();\r\n  }\r\n  return environmentInstance;\r\n};\r\n\r\nexport { getEnvironment };\r\n","import { isFunction, isNull, isUndefined } from 'support';\r\nimport type {\r\n  StructureInitialization,\r\n  StructureInitializationStrategy,\r\n} from 'setups/structureSetup';\r\nimport type {\r\n  ScrollbarsInitialization,\r\n  ScrollbarsInitializationStrategy,\r\n} from 'setups/scrollbarsSetup';\r\n\r\ntype StaticInitialization = HTMLElement | null | undefined;\r\ntype DynamicInitialization = HTMLElement | boolean | null | undefined;\r\n\r\nexport type InitializationTargetElement = HTMLElement | HTMLTextAreaElement;\r\n\r\nexport type InitializationTargetObject = StructureInitialization & ScrollbarsInitialization;\r\n\r\nexport type InitializationTarget = InitializationTargetElement | InitializationTargetObject;\r\n\r\nexport type InitializationStrategy = StructureInitializationStrategy &\r\n  ScrollbarsInitializationStrategy;\r\n\r\n/**\r\n * Static elements MUST be present.\r\n * Null or undefined behave like if this element wasn't specified during initialization.\r\n */\r\nexport type StaticInitializationElement<Args extends any[]> =\r\n  | ((...args: Args) => StaticInitialization)\r\n  | StaticInitialization;\r\n\r\n/**\r\n * Dynamic element CAN be present.\r\n * If its a element the element will be handled as the repsective element.\r\n * True means that the respective dynamic element is forced to be generated.\r\n * False means that the respective dynamic element is forced NOT to be generated.\r\n * Null or undefined behave like if this element wasn't specified during initialization.\r\n */\r\nexport type DynamicInitializationElement<Args extends any[]> =\r\n  | ((...args: Args) => DynamicInitialization)\r\n  | DynamicInitialization;\r\n\r\nexport type InitializtationElementStrategy<InitElm> = Exclude<InitElm, HTMLElement>;\r\n\r\nexport type DefaultInitializtationElementStrategy<\r\n  InitElm extends StaticInitializationElement<any> | DynamicInitializationElement<any>\r\n> = Extract<InitElm, (...args: any[]) => any> extends (...args: infer P) => any\r\n  ? (...args: P) => HTMLElement\r\n  : never;\r\n\r\nconst resolveInitialization = <T>(value: any, args: any): T =>\r\n  isFunction(value) ? value.apply(0, args) : value;\r\n\r\nconst staticInitializationElement = <T extends StaticInitializationElement<any>>(\r\n  args: Parameters<Extract<T, (...args: any[]) => any>>,\r\n  defaultStaticInitializationElement: DefaultInitializtationElementStrategy<T>,\r\n  staticInitializationElementStrategy?: InitializtationElementStrategy<T>,\r\n  staticInitializationElementValue?: T | false\r\n): HTMLElement =>\r\n  resolveInitialization<StaticInitialization>(\r\n    staticInitializationElementValue ||\r\n      resolveInitialization<StaticInitialization>(staticInitializationElementStrategy, args),\r\n    args\r\n  ) || defaultStaticInitializationElement.apply(0, args);\r\n\r\nconst dynamicInitializationElement = <T extends DynamicInitializationElement<any>>(\r\n  args: Parameters<Extract<T, (...args: any[]) => any>>,\r\n  defaultDynamicInitializationElement: DefaultInitializtationElementStrategy<T>,\r\n  dynamicInitializationElementStrategy?: InitializtationElementStrategy<T>,\r\n  dynamicInitializationElementValue?: T | false\r\n): HTMLElement | false => {\r\n  let result = resolveInitialization<DynamicInitialization>(\r\n    dynamicInitializationElementValue,\r\n    args\r\n  );\r\n\r\n  if (isNull(result) || isUndefined(result)) {\r\n    result = resolveInitialization<DynamicInitialization>(\r\n      dynamicInitializationElementStrategy,\r\n      args\r\n    );\r\n  }\r\n\r\n  return result === true || isNull(result) || isUndefined(result)\r\n    ? defaultDynamicInitializationElement.apply(0, args)\r\n    : result;\r\n};\r\n\r\nexport { staticInitializationElement, dynamicInitializationElement };\r\n","import {\r\n  isHTMLElement,\r\n  appendChildren,\r\n  createDiv,\r\n  is,\r\n  contents,\r\n  insertAfter,\r\n  addClass,\r\n  parent,\r\n  indexOf,\r\n  removeElements,\r\n  removeClass,\r\n  hasClass,\r\n  push,\r\n  runEachAndClear,\r\n  insertBefore,\r\n  attr,\r\n  keys,\r\n  removeAttr,\r\n  attrClass,\r\n  hasAttrClass,\r\n  ResizeObserverConstructor,\r\n} from 'support';\r\nimport {\r\n  dataAttributeHost,\r\n  dataAttributeHostOverflowX,\r\n  dataAttributeHostOverflowY,\r\n  classNamePadding,\r\n  classNameViewport,\r\n  classNameContent,\r\n  classNameViewportScrollbarStyling,\r\n} from 'classnames';\r\nimport { getEnvironment } from 'environment';\r\nimport { getPlugins, scrollbarsHidingPluginName } from 'plugins';\r\nimport type { ScrollbarsHidingPluginInstance } from 'plugins/scrollbarsHidingPlugin';\r\nimport {\r\n  staticInitializationElement as generalStaticInitializationElement,\r\n  dynamicInitializationElement as generalDynamicInitializationElement,\r\n} from 'initialization';\r\nimport type { InitializationTarget, InitializationTargetElement } from 'initialization';\r\nimport type {\r\n  StructureDynamicInitializationElement,\r\n  StructureInitialization,\r\n  StructureStaticInitializationElement,\r\n} from 'setups/structureSetup/structureSetup.initialization';\r\n\r\nexport type StructureSetupElements = [\r\n  targetObj: StructureSetupElementsObj,\r\n  appendElements: () => void,\r\n  destroy: () => void\r\n];\r\n\r\nexport interface StructureSetupElementsObj {\r\n  _target: InitializationTargetElement;\r\n  _host: HTMLElement;\r\n  _viewport: HTMLElement;\r\n  _padding: HTMLElement | false;\r\n  _content: HTMLElement | false;\r\n  _viewportArrange: HTMLStyleElement | false | null | undefined;\r\n  // ctx ----\r\n  _isTextarea: boolean;\r\n  _isBody: boolean;\r\n  _htmlElm: HTMLHtmlElement;\r\n  _bodyElm: HTMLBodyElement;\r\n  _windowElm: Window;\r\n  _documentElm: Document;\r\n  _targetIsElm: boolean;\r\n  _viewportIsTarget: boolean;\r\n  _viewportHasClass: (className: string, attributeClassName: string) => boolean;\r\n  _viewportAddRemoveClass: (className: string, attributeClassName: string, add?: boolean) => void;\r\n}\r\n\r\nconst createNewDiv = createDiv.bind(0, '');\r\n\r\nconst unwrap = (elm: HTMLElement | false | null | undefined) => {\r\n  appendChildren(parent(elm), contents(elm));\r\n  removeElements(elm);\r\n};\r\n\r\nconst addDataAttrHost = (elm: HTMLElement, value: string) => {\r\n  attr(elm, dataAttributeHost, value);\r\n  return removeAttr.bind(0, elm, dataAttributeHost);\r\n};\r\n\r\nexport const createStructureSetupElements = (\r\n  target: InitializationTarget\r\n): StructureSetupElements => {\r\n  const env = getEnvironment();\r\n  const { _getInitializationStrategy, _nativeScrollbarsHiding } = env;\r\n  const scrollbarsHidingPlugin = getPlugins()[scrollbarsHidingPluginName] as\r\n    | ScrollbarsHidingPluginInstance\r\n    | undefined;\r\n  const createUniqueViewportArrangeElement =\r\n    scrollbarsHidingPlugin && scrollbarsHidingPlugin._createUniqueViewportArrangeElement;\r\n  const {\r\n    _host: hostInitializationStrategy,\r\n    _viewport: viewportInitializationStrategy,\r\n    _padding: paddingInitializationStrategy,\r\n    _content: contentInitializationStrategy,\r\n  } = _getInitializationStrategy();\r\n  const targetIsElm = isHTMLElement(target);\r\n  const targetStructureInitialization = target as StructureInitialization;\r\n  const targetElement = targetIsElm\r\n    ? (target as InitializationTargetElement)\r\n    : targetStructureInitialization.target;\r\n  const isTextarea = is(targetElement, 'textarea');\r\n  const isBody = !isTextarea && is(targetElement, 'body');\r\n  const ownerDocument = targetElement!.ownerDocument;\r\n  const bodyElm = ownerDocument.body as HTMLBodyElement;\r\n  const wnd = ownerDocument.defaultView as Window;\r\n  const singleElmSupport = !!ResizeObserverConstructor && !isTextarea && _nativeScrollbarsHiding;\r\n  const staticInitializationElement =\r\n    generalStaticInitializationElement<StructureStaticInitializationElement>.bind(0, [\r\n      targetElement,\r\n    ]);\r\n  const dynamicInitializationElement =\r\n    generalDynamicInitializationElement<StructureDynamicInitializationElement>.bind(0, [\r\n      targetElement,\r\n    ]);\r\n  const viewportElement = [\r\n    staticInitializationElement(\r\n      createNewDiv,\r\n      viewportInitializationStrategy,\r\n      targetStructureInitialization.viewport\r\n    ),\r\n    staticInitializationElement(createNewDiv, viewportInitializationStrategy),\r\n    staticInitializationElement(createNewDiv),\r\n  ].filter((potentialViewport) =>\r\n    !singleElmSupport ? potentialViewport !== targetElement : true\r\n  )[0];\r\n  const viewportIsTarget = viewportElement === targetElement;\r\n  const evaluatedTargetObj: StructureSetupElementsObj = {\r\n    _target: targetElement,\r\n    _host: isTextarea\r\n      ? staticInitializationElement(\r\n          createNewDiv,\r\n          hostInitializationStrategy,\r\n          targetStructureInitialization.host\r\n        )\r\n      : (targetElement as HTMLElement),\r\n    _viewport: viewportElement,\r\n    _padding:\r\n      !viewportIsTarget &&\r\n      dynamicInitializationElement(\r\n        createNewDiv,\r\n        paddingInitializationStrategy,\r\n        targetStructureInitialization.padding\r\n      ),\r\n    _content:\r\n      !viewportIsTarget &&\r\n      dynamicInitializationElement(\r\n        createNewDiv,\r\n        contentInitializationStrategy,\r\n        targetStructureInitialization.content\r\n      ),\r\n    _viewportArrange:\r\n      !viewportIsTarget &&\r\n      !_nativeScrollbarsHiding &&\r\n      createUniqueViewportArrangeElement &&\r\n      createUniqueViewportArrangeElement(env),\r\n    _windowElm: wnd,\r\n    _documentElm: ownerDocument,\r\n    _htmlElm: parent(bodyElm) as HTMLHtmlElement,\r\n    _bodyElm: bodyElm,\r\n    _isTextarea: isTextarea,\r\n    _isBody: isBody,\r\n    _targetIsElm: targetIsElm,\r\n    _viewportIsTarget: viewportIsTarget,\r\n    _viewportHasClass: (className: string, attributeClassName: string) =>\r\n      viewportIsTarget\r\n        ? hasAttrClass(viewportElement, dataAttributeHost, attributeClassName)\r\n        : hasClass(viewportElement, className),\r\n    _viewportAddRemoveClass: (className: string, attributeClassName: string, add?: boolean) =>\r\n      viewportIsTarget\r\n        ? attrClass(viewportElement, dataAttributeHost, attributeClassName, add)\r\n        : (add ? addClass : removeClass)(viewportElement, className),\r\n  };\r\n  const generatedElements = keys(evaluatedTargetObj).reduce((arr, key: string) => {\r\n    const value = evaluatedTargetObj[key];\r\n    return push(arr, value && !parent(value) ? value : false);\r\n  }, [] as HTMLElement[]);\r\n  const elementIsGenerated = (elm: HTMLElement | false) =>\r\n    elm ? indexOf(generatedElements, elm) > -1 : null;\r\n  const { _target, _host, _padding, _viewport, _content, _viewportArrange } = evaluatedTargetObj;\r\n  const destroyFns: (() => any)[] = [];\r\n  const isTextareaHostGenerated = isTextarea && elementIsGenerated(_host);\r\n  const targetContents = isTextarea\r\n    ? _target\r\n    : contents(\r\n        [_content, _viewport, _padding, _host, _target].find(\r\n          (elm) => elementIsGenerated(elm) === false\r\n        )\r\n      );\r\n  const contentSlot = _content || _viewport;\r\n  const appendElements = () => {\r\n    const removeHostDataAttr = addDataAttrHost(_host, viewportIsTarget ? 'viewport' : 'host');\r\n    const removePaddingClass = addClass(_padding, classNamePadding);\r\n    const removeViewportClass = addClass(_viewport, !viewportIsTarget && classNameViewport);\r\n    const removeContentClass = addClass(_content, classNameContent);\r\n\r\n    // only insert host for textarea after target if it was generated\r\n    if (isTextareaHostGenerated) {\r\n      insertAfter(_target, _host);\r\n\r\n      push(destroyFns, () => {\r\n        insertAfter(_host, _target);\r\n        removeElements(_host);\r\n      });\r\n    }\r\n\r\n    appendChildren(contentSlot, targetContents);\r\n    appendChildren(_host, _padding);\r\n    appendChildren(_padding || _host, !viewportIsTarget && _viewport);\r\n    appendChildren(_viewport, _content);\r\n\r\n    push(destroyFns, () => {\r\n      removeHostDataAttr();\r\n      removeAttr(_viewport, dataAttributeHostOverflowX);\r\n      removeAttr(_viewport, dataAttributeHostOverflowY);\r\n\r\n      if (elementIsGenerated(_content)) {\r\n        unwrap(_content);\r\n      }\r\n      if (elementIsGenerated(_viewport)) {\r\n        unwrap(_viewport);\r\n      }\r\n      if (elementIsGenerated(_padding)) {\r\n        unwrap(_padding);\r\n      }\r\n      removePaddingClass();\r\n      removeViewportClass();\r\n      removeContentClass();\r\n    });\r\n\r\n    if (_nativeScrollbarsHiding && !viewportIsTarget) {\r\n      push(destroyFns, removeClass.bind(0, _viewport, classNameViewportScrollbarStyling));\r\n    }\r\n    if (_viewportArrange) {\r\n      insertBefore(_viewport, _viewportArrange);\r\n      push(destroyFns, removeElements.bind(0, _viewportArrange));\r\n    }\r\n  };\r\n\r\n  return [evaluatedTargetObj, appendElements, runEachAndClear.bind(0, destroyFns)];\r\n};\r\n","import { style } from 'support';\r\nimport { getEnvironment } from 'environment';\r\nimport type { CreateStructureUpdateSegment } from 'setups/structureSetup/structureSetup.update';\r\n\r\n/**\r\n * Lifecycle with the responsibility to adjust the trinsic behavior of the content element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createTrinsicUpdateSegment: CreateStructureUpdateSegment = (\r\n  structureSetupElements,\r\n  state\r\n) => {\r\n  const { _content } = structureSetupElements;\r\n  const [getState] = state;\r\n\r\n  return (updateHints) => {\r\n    const { _flexboxGlue } = getEnvironment();\r\n    const { _heightIntrinsic } = getState();\r\n    const { _heightIntrinsicChanged } = updateHints;\r\n    const heightIntrinsicChanged = (_content || !_flexboxGlue) && _heightIntrinsicChanged;\r\n\r\n    if (heightIntrinsicChanged) {\r\n      style(_content, {\r\n        height: _heightIntrinsic ? '' : '100%',\r\n      });\r\n    }\r\n\r\n    return {\r\n      _sizeChanged: heightIntrinsicChanged,\r\n      _contentMutation: heightIntrinsicChanged,\r\n    };\r\n  };\r\n};\r\n","import { createCache, topRightBottomLeft, equalTRBL, style, assignDeep } from 'support';\r\nimport { StyleObject } from 'typings';\r\nimport { getEnvironment } from 'environment';\r\nimport type { CreateStructureUpdateSegment } from 'setups/structureSetup/structureSetup.update';\r\n\r\n/**\r\n * Lifecycle with the responsibility to adjust the padding styling of the padding and viewport element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createPaddingUpdateSegment: CreateStructureUpdateSegment = (\r\n  structureSetupElements,\r\n  state\r\n) => {\r\n  const [getState, setState] = state;\r\n  const { _host, _padding, _viewport, _viewportIsTarget: _isSingleElm } = structureSetupElements;\r\n  const [updatePaddingCache, currentPaddingCache] = createCache(\r\n    {\r\n      _equal: equalTRBL,\r\n      _initialValue: topRightBottomLeft(),\r\n    },\r\n    topRightBottomLeft.bind(0, _host, 'padding', '')\r\n  );\r\n\r\n  return (updateHints, checkOption, force) => {\r\n    let [padding, paddingChanged] = currentPaddingCache(force);\r\n    const { _nativeScrollbarsHiding: _nativeScrollbarStyling, _flexboxGlue } = getEnvironment();\r\n    const { _directionIsRTL } = getState();\r\n    const { _sizeChanged, _contentMutation, _directionChanged } = updateHints;\r\n    const [paddingAbsolute, paddingAbsoluteChanged] = checkOption('paddingAbsolute');\r\n    const contentMutation = !_flexboxGlue && _contentMutation;\r\n\r\n    if (_sizeChanged || paddingChanged || contentMutation) {\r\n      [padding, paddingChanged] = updatePaddingCache(force);\r\n    }\r\n\r\n    const paddingStyleChanged =\r\n      !_isSingleElm && (paddingAbsoluteChanged || _directionChanged || paddingChanged);\r\n\r\n    if (paddingStyleChanged) {\r\n      // if there is no padding element and no scrollbar styling, paddingAbsolute isn't supported\r\n      const paddingRelative = !paddingAbsolute || (!_padding && !_nativeScrollbarStyling);\r\n      const paddingHorizontal = padding.r + padding.l;\r\n      const paddingVertical = padding.t + padding.b;\r\n\r\n      const paddingStyle: StyleObject = {\r\n        marginRight: paddingRelative && !_directionIsRTL ? -paddingHorizontal : 0,\r\n        marginBottom: paddingRelative ? -paddingVertical : 0,\r\n        marginLeft: paddingRelative && _directionIsRTL ? -paddingHorizontal : 0,\r\n        top: paddingRelative ? -padding.t : 0,\r\n        right: paddingRelative ? (_directionIsRTL ? -padding.r : 'auto') : 0,\r\n        left: paddingRelative ? (_directionIsRTL ? 'auto' : -padding.l) : 0,\r\n        width: paddingRelative ? `calc(100% + ${paddingHorizontal}px)` : '',\r\n      };\r\n      const viewportStyle: StyleObject = {\r\n        paddingTop: paddingRelative ? padding.t : 0,\r\n        paddingRight: paddingRelative ? padding.r : 0,\r\n        paddingBottom: paddingRelative ? padding.b : 0,\r\n        paddingLeft: paddingRelative ? padding.l : 0,\r\n      };\r\n\r\n      // if there is no padding element apply the style to the viewport element instead\r\n      style(_padding || _viewport, paddingStyle);\r\n      style(_viewport, viewportStyle);\r\n\r\n      setState({\r\n        _padding: padding,\r\n        _paddingAbsolute: !paddingRelative,\r\n        _viewportPaddingStyle: _padding\r\n          ? viewportStyle\r\n          : assignDeep({}, paddingStyle, viewportStyle),\r\n      });\r\n    }\r\n\r\n    return {\r\n      _paddingStyleChanged: paddingStyleChanged,\r\n    };\r\n  };\r\n};\r\n","import {\r\n  createCache,\r\n  attr,\r\n  WH,\r\n  XY,\r\n  style,\r\n  scrollSize,\r\n  fractionalSize,\r\n  equalWH,\r\n  addClass,\r\n  removeClass,\r\n  clientSize,\r\n  equalXY,\r\n  attrClass,\r\n  noop,\r\n} from 'support';\r\nimport { getEnvironment } from 'environment';\r\nimport {\r\n  classNameViewportScrollbarStyling,\r\n  classNameOverflowVisible,\r\n  dataAttributeHost,\r\n  dataAttributeHostOverflowX,\r\n  dataAttributeHostOverflowY,\r\n  dataValueHostViewportScrollbarStyling,\r\n  dataValueHostOverflowVisible,\r\n} from 'classnames';\r\nimport { getPlugins, scrollbarsHidingPluginName } from 'plugins';\r\nimport type {\r\n  ScrollbarsHidingPluginInstance,\r\n  ArrangeViewport,\r\n  UndoArrangeViewport,\r\n} from 'plugins/scrollbarsHidingPlugin';\r\nimport type { StyleObject, OverflowStyle } from 'typings';\r\nimport type { OverflowBehavior } from 'options';\r\nimport type { CreateStructureUpdateSegment } from 'setups/structureSetup/structureSetup.update';\r\n\r\nexport interface ViewportOverflowState {\r\n  _scrollbarsHideOffset: XY<number>;\r\n  _scrollbarsHideOffsetArrange: XY<boolean>;\r\n  _overflowScroll: XY<boolean>;\r\n  _overflowStyle: XY<OverflowStyle>;\r\n}\r\n\r\nexport type GetViewportOverflowState = (\r\n  showNativeOverlaidScrollbars: boolean,\r\n  viewportStyleObj?: StyleObject\r\n) => ViewportOverflowState;\r\n\r\nexport type HideNativeScrollbars = (\r\n  viewportOverflowState: ViewportOverflowState,\r\n  directionIsRTL: boolean,\r\n  viewportArrange: boolean,\r\n  viewportStyleObj: StyleObject\r\n) => void;\r\n\r\nconst { max } = Math;\r\nconst max0 = max.bind(0, 0);\r\nconst strVisible = 'visible';\r\nconst strHidden = 'hidden';\r\nconst overlaidScrollbarsHideOffset = 42;\r\nconst whCacheOptions = {\r\n  _equal: equalWH,\r\n  _initialValue: { w: 0, h: 0 },\r\n};\r\nconst xyCacheOptions = {\r\n  _equal: equalXY,\r\n  _initialValue: { x: strHidden, y: strHidden } as XY<OverflowStyle>,\r\n};\r\n\r\nconst getOverflowAmount = (viewportScrollSize: WH<number>, viewportClientSize: WH<number>) => {\r\n  const tollerance = window.devicePixelRatio % 1 !== 0 ? 1 : 0;\r\n  const amount = {\r\n    w: max0(viewportScrollSize.w - viewportClientSize.w),\r\n    h: max0(viewportScrollSize.h - viewportClientSize.h),\r\n  };\r\n\r\n  return {\r\n    w: amount.w > tollerance ? amount.w : 0,\r\n    h: amount.h > tollerance ? amount.h : 0,\r\n  };\r\n};\r\n\r\nconst conditionalClass = (\r\n  elm: Element | false | null | undefined,\r\n  classNames: string,\r\n  add: boolean\r\n) => (add ? addClass(elm, classNames) : removeClass(elm, classNames));\r\n\r\nconst overflowIsVisible = (overflowBehavior: string) => overflowBehavior.indexOf(strVisible) === 0;\r\n\r\n/**\r\n * Lifecycle with the responsibility to set the correct overflow and scrollbar hiding styles of the viewport element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createOverflowUpdateSegment: CreateStructureUpdateSegment = (\r\n  structureSetupElements,\r\n  state\r\n) => {\r\n  const [getState, setState] = state;\r\n  const {\r\n    _host,\r\n    _padding,\r\n    _viewport,\r\n    _viewportArrange,\r\n    _viewportIsTarget,\r\n    _viewportAddRemoveClass,\r\n  } = structureSetupElements;\r\n  const {\r\n    _nativeScrollbarsSize,\r\n    _flexboxGlue,\r\n    _nativeScrollbarsHiding,\r\n    _nativeScrollbarsOverlaid,\r\n  } = getEnvironment();\r\n  const scrollbarsHidingPlugin = getPlugins()[scrollbarsHidingPluginName] as\r\n    | ScrollbarsHidingPluginInstance\r\n    | undefined;\r\n  const doViewportArrange =\r\n    !_viewportIsTarget &&\r\n    !_nativeScrollbarsHiding &&\r\n    (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n\r\n  const [updateSizeFraction, getCurrentSizeFraction] = createCache<WH<number>>(\r\n    whCacheOptions,\r\n    fractionalSize.bind(0, _viewport)\r\n  );\r\n\r\n  const [updateViewportScrollSizeCache, getCurrentViewportScrollSizeCache] = createCache<\r\n    WH<number>\r\n  >(whCacheOptions, scrollSize.bind(0, _viewport));\r\n\r\n  const [updateOverflowAmountCache, getCurrentOverflowAmountCache] =\r\n    createCache<WH<number>>(whCacheOptions);\r\n\r\n  const [updateOverflowEdge, getCurrentOverflowEdgeCache] = createCache<WH<number>>(whCacheOptions);\r\n\r\n  const [updateOverflowStyleCache] = createCache<XY<OverflowStyle>>(xyCacheOptions);\r\n\r\n  /**\r\n   * Applies a fixed height to the viewport so it can't overflow or underflow the host element.\r\n   * @param viewportOverflowState The current overflow state.\r\n   * @param heightIntrinsic Whether the host height is intrinsic or not.\r\n   */\r\n  const fixFlexboxGlue = (\r\n    viewportOverflowState: ViewportOverflowState,\r\n    heightIntrinsic: boolean\r\n  ) => {\r\n    style(_viewport, {\r\n      height: '',\r\n    });\r\n\r\n    if (heightIntrinsic) {\r\n      const { _paddingAbsolute, _padding: padding } = getState();\r\n      const { _overflowScroll, _scrollbarsHideOffset } = viewportOverflowState;\r\n      const fSize = fractionalSize(_host);\r\n      const hostClientSize = clientSize(_host);\r\n\r\n      // padding subtraction is only needed if padding is absolute or if viewport is content-box\r\n      const isContentBox = style(_viewport, 'boxSizing') === 'content-box';\r\n      const paddingVertical = _paddingAbsolute || isContentBox ? padding.b + padding.t : 0;\r\n      const subtractXScrollbar = !(_nativeScrollbarsOverlaid.x && isContentBox);\r\n\r\n      style(_viewport, {\r\n        height:\r\n          hostClientSize.h +\r\n          fSize.h +\r\n          (_overflowScroll.x && subtractXScrollbar ? _scrollbarsHideOffset.x : 0) -\r\n          paddingVertical,\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Gets the current overflow state of the viewport.\r\n   * @param showNativeOverlaidScrollbars Whether native overlaid scrollbars are shown instead of hidden.\r\n   * @param viewportStyleObj The viewport style object where the overflow scroll property can be read of, or undefined if shall be determined.\r\n   * @returns A object which contains informations about the current overflow state.\r\n   */\r\n  const getViewportOverflowState: GetViewportOverflowState = (\r\n    showNativeOverlaidScrollbars,\r\n    viewportStyleObj?\r\n  ) => {\r\n    const arrangeHideOffset =\r\n      !_nativeScrollbarsHiding && !showNativeOverlaidScrollbars ? overlaidScrollbarsHideOffset : 0;\r\n    const getStatePerAxis = (\r\n      styleKey: string,\r\n      isOverlaid: boolean,\r\n      nativeScrollbarSize: number\r\n    ) => {\r\n      const overflowStyle = style(_viewport, styleKey);\r\n      // can't do something like \"viewportStyleObj && viewportStyleObj[styleKey] || overflowStyle\" here!\r\n      const objectPrefferedOverflowStyle = viewportStyleObj\r\n        ? viewportStyleObj[styleKey]\r\n        : overflowStyle;\r\n      const overflowScroll = objectPrefferedOverflowStyle === 'scroll';\r\n      const nonScrollbarStylingHideOffset = isOverlaid ? arrangeHideOffset : nativeScrollbarSize;\r\n      const scrollbarsHideOffset =\r\n        overflowScroll && !_nativeScrollbarsHiding ? nonScrollbarStylingHideOffset : 0;\r\n      const scrollbarsHideOffsetArrange = isOverlaid && !!arrangeHideOffset;\r\n\r\n      return [overflowStyle, overflowScroll, scrollbarsHideOffset, scrollbarsHideOffsetArrange] as [\r\n        overflowStyle: OverflowStyle,\r\n        overflowScroll: boolean,\r\n        scrollbarsHideOffset: number,\r\n        scrollbarsHideOffsetArrange: boolean\r\n      ];\r\n    };\r\n\r\n    const [xOverflowStyle, xOverflowScroll, xScrollbarsHideOffset, xScrollbarsHideOffsetArrange] =\r\n      getStatePerAxis('overflowX', _nativeScrollbarsOverlaid.x, _nativeScrollbarsSize.x);\r\n    const [yOverflowStyle, yOverflowScroll, yScrollbarsHideOffset, yScrollbarsHideOffsetArrange] =\r\n      getStatePerAxis('overflowY', _nativeScrollbarsOverlaid.y, _nativeScrollbarsSize.y);\r\n\r\n    return {\r\n      _overflowStyle: {\r\n        x: xOverflowStyle,\r\n        y: yOverflowStyle,\r\n      },\r\n      _overflowScroll: {\r\n        x: xOverflowScroll,\r\n        y: yOverflowScroll,\r\n      },\r\n      _scrollbarsHideOffset: {\r\n        x: xScrollbarsHideOffset,\r\n        y: yScrollbarsHideOffset,\r\n      },\r\n      _scrollbarsHideOffsetArrange: {\r\n        x: xScrollbarsHideOffsetArrange,\r\n        y: yScrollbarsHideOffsetArrange,\r\n      },\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Sets the overflow property of the viewport and calculates the a overflow state according to the new parameters.\r\n   * @param showNativeOverlaidScrollbars Whether to show natively overlaid scrollbars.\r\n   * @param overflowAmount The overflow amount.\r\n   * @param overflow The overflow behavior according to the options.\r\n   * @param viewportStyleObj The viewport style object to which the overflow style shall be applied.\r\n   * @returns A object which represents the newly set overflow state.\r\n   */\r\n  const setViewportOverflowState = (\r\n    showNativeOverlaidScrollbars: boolean,\r\n    hasOverflow: XY<boolean>,\r\n    overflowOption: XY<OverflowBehavior>,\r\n    viewportStyleObj: StyleObject\r\n  ): ViewportOverflowState => {\r\n    const setAxisOverflowStyle = (behavior: OverflowBehavior, hasOverflowAxis: boolean) => {\r\n      const overflowVisible = overflowIsVisible(behavior);\r\n      const overflowVisibleBehavior =\r\n        (hasOverflowAxis && overflowVisible && behavior.replace(`${strVisible}-`, '')) || '';\r\n      return [\r\n        hasOverflowAxis && !overflowVisible ? behavior : '',\r\n        overflowIsVisible(overflowVisibleBehavior) ? 'hidden' : overflowVisibleBehavior,\r\n      ];\r\n    };\r\n\r\n    const [overflowX, visibleBehaviorX] = setAxisOverflowStyle(overflowOption.x, hasOverflow.x);\r\n    const [overflowY, visibleBehaviorY] = setAxisOverflowStyle(overflowOption.y, hasOverflow.y);\r\n\r\n    viewportStyleObj.overflowX = visibleBehaviorX && overflowY ? visibleBehaviorX : overflowX;\r\n    viewportStyleObj.overflowY = visibleBehaviorY && overflowX ? visibleBehaviorY : overflowY;\r\n\r\n    return getViewportOverflowState(showNativeOverlaidScrollbars, viewportStyleObj);\r\n  };\r\n\r\n  /**\r\n   * Hides the native scrollbars according to the passed parameters.\r\n   * @param viewportOverflowState The viewport overflow state.\r\n   * @param directionIsRTL Whether the direction is RTL or not.\r\n   * @param viewportArrange Whether special styles related to the viewport arrange strategy shall be applied.\r\n   * @param viewportStyleObj The viewport style object to which the needed styles shall be applied.\r\n   */\r\n  const hideNativeScrollbars: HideNativeScrollbars = (\r\n    viewportOverflowState,\r\n    directionIsRTL,\r\n    viewportArrange,\r\n    viewportStyleObj\r\n  ) => {\r\n    const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } = viewportOverflowState;\r\n    const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n    const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\r\n    const { _viewportPaddingStyle: viewportPaddingStyle } = getState();\r\n    const horizontalMarginKey: keyof StyleObject = directionIsRTL ? 'marginLeft' : 'marginRight';\r\n    const viewportHorizontalPaddingKey: keyof StyleObject = directionIsRTL\r\n      ? 'paddingLeft'\r\n      : 'paddingRight';\r\n    const horizontalMarginValue = viewportPaddingStyle[horizontalMarginKey] as number;\r\n    const verticalMarginValue = viewportPaddingStyle.marginBottom as number;\r\n    const horizontalPaddingValue = viewportPaddingStyle[viewportHorizontalPaddingKey] as number;\r\n    const verticalPaddingValue = viewportPaddingStyle.paddingBottom as number;\r\n\r\n    // horizontal\r\n    viewportStyleObj.width = `calc(100% + ${hideOffsetY + horizontalMarginValue * -1}px)`;\r\n    viewportStyleObj[horizontalMarginKey] = -hideOffsetY + horizontalMarginValue;\r\n\r\n    // vertical\r\n    viewportStyleObj.marginBottom = -hideOffsetX + verticalMarginValue;\r\n\r\n    // viewport arrange additional styles\r\n    if (viewportArrange) {\r\n      viewportStyleObj[viewportHorizontalPaddingKey] =\r\n        horizontalPaddingValue + (arrangeY ? hideOffsetY : 0);\r\n      viewportStyleObj.paddingBottom = verticalPaddingValue + (arrangeX ? hideOffsetX : 0);\r\n    }\r\n  };\r\n\r\n  const [arrangeViewport, undoViewportArrange] = scrollbarsHidingPlugin\r\n    ? scrollbarsHidingPlugin._overflowUpdateSegment(\r\n        doViewportArrange,\r\n        _flexboxGlue,\r\n        _viewport,\r\n        _viewportArrange,\r\n        getState,\r\n        getViewportOverflowState,\r\n        hideNativeScrollbars\r\n      )\r\n    : [(() => doViewportArrange) as ArrangeViewport, (() => [noop]) as UndoArrangeViewport];\r\n\r\n  return (updateHints, checkOption, force) => {\r\n    const {\r\n      _sizeChanged,\r\n      _hostMutation,\r\n      _contentMutation,\r\n      _paddingStyleChanged,\r\n      _heightIntrinsicChanged,\r\n      _directionChanged,\r\n    } = updateHints;\r\n    const { _heightIntrinsic, _directionIsRTL } = getState();\r\n    const [showNativeOverlaidScrollbarsOption, showNativeOverlaidScrollbarsChanged] =\r\n      checkOption<boolean>('nativeScrollbarsOverlaid.show');\r\n    const [overflow, overflowChanged] = checkOption<XY<OverflowBehavior>>('overflow');\r\n\r\n    const showNativeOverlaidScrollbars =\r\n      showNativeOverlaidScrollbarsOption &&\r\n      _nativeScrollbarsOverlaid.x &&\r\n      _nativeScrollbarsOverlaid.y;\r\n    const adjustFlexboxGlue =\r\n      !_viewportIsTarget &&\r\n      !_flexboxGlue &&\r\n      (_sizeChanged ||\r\n        _contentMutation ||\r\n        _hostMutation ||\r\n        showNativeOverlaidScrollbarsChanged ||\r\n        _heightIntrinsicChanged);\r\n    const overflowXVisible = overflowIsVisible(overflow.x);\r\n    const overflowYVisible = overflowIsVisible(overflow.y);\r\n    const overflowVisible = overflowXVisible || overflowYVisible;\r\n\r\n    let sizeFractionCache = getCurrentSizeFraction(force);\r\n    let viewportScrollSizeCache = getCurrentViewportScrollSizeCache(force);\r\n    let overflowAmuntCache = getCurrentOverflowAmountCache(force);\r\n    let overflowEdgeCache = getCurrentOverflowEdgeCache(force);\r\n\r\n    let preMeasureViewportOverflowState: ViewportOverflowState | undefined;\r\n\r\n    if (showNativeOverlaidScrollbarsChanged && _nativeScrollbarsHiding) {\r\n      _viewportAddRemoveClass(\r\n        classNameViewportScrollbarStyling,\r\n        dataValueHostViewportScrollbarStyling,\r\n        !showNativeOverlaidScrollbars\r\n      );\r\n    }\r\n\r\n    if (adjustFlexboxGlue) {\r\n      preMeasureViewportOverflowState = getViewportOverflowState(showNativeOverlaidScrollbars);\r\n      fixFlexboxGlue(preMeasureViewportOverflowState, _heightIntrinsic);\r\n    }\r\n\r\n    if (\r\n      _sizeChanged ||\r\n      _paddingStyleChanged ||\r\n      _contentMutation ||\r\n      _directionChanged ||\r\n      showNativeOverlaidScrollbarsChanged\r\n    ) {\r\n      if (overflowVisible) {\r\n        _viewportAddRemoveClass(classNameOverflowVisible, dataValueHostOverflowVisible, false);\r\n      }\r\n\r\n      const [redoViewportArrange, undoViewportArrangeOverflowState] = undoViewportArrange(\r\n        showNativeOverlaidScrollbars,\r\n        _directionIsRTL,\r\n        preMeasureViewportOverflowState\r\n      );\r\n      const [sizeFraction, sizeFractionChanged] = (sizeFractionCache = updateSizeFraction(force));\r\n      const [viewportScrollSize, viewportScrollSizeChanged] = (viewportScrollSizeCache =\r\n        updateViewportScrollSizeCache(force));\r\n      const viewportclientSize = clientSize(_viewport);\r\n      let arrangedViewportScrollSize = viewportScrollSize;\r\n      let arrangedViewportClientSize = viewportclientSize;\r\n\r\n      redoViewportArrange();\r\n\r\n      // if re measure is required (only required if content arrange strategy is used)\r\n      if (\r\n        (viewportScrollSizeChanged || sizeFractionChanged || showNativeOverlaidScrollbarsChanged) &&\r\n        undoViewportArrangeOverflowState &&\r\n        !showNativeOverlaidScrollbars &&\r\n        arrangeViewport(\r\n          undoViewportArrangeOverflowState,\r\n          viewportScrollSize,\r\n          sizeFraction,\r\n          _directionIsRTL\r\n        )\r\n      ) {\r\n        arrangedViewportClientSize = clientSize(_viewport);\r\n        arrangedViewportScrollSize = scrollSize(_viewport);\r\n      }\r\n\r\n      const overflowAmountScrollSize = {\r\n        w: max0(max(viewportScrollSize.w, arrangedViewportScrollSize.w) + sizeFraction.w),\r\n        h: max0(max(viewportScrollSize.h, arrangedViewportScrollSize.h) + sizeFraction.h),\r\n      };\r\n      const overflowAmountClientSize = {\r\n        w: max0(\r\n          arrangedViewportClientSize.w +\r\n            max0(viewportclientSize.w - viewportScrollSize.w) +\r\n            sizeFraction.w\r\n        ),\r\n        h: max0(\r\n          arrangedViewportClientSize.h +\r\n            max0(viewportclientSize.h - viewportScrollSize.h) +\r\n            sizeFraction.h\r\n        ),\r\n      };\r\n\r\n      overflowEdgeCache = updateOverflowEdge(overflowAmountClientSize);\r\n      overflowAmuntCache = updateOverflowAmountCache(\r\n        getOverflowAmount(overflowAmountScrollSize, overflowAmountClientSize),\r\n        force\r\n      );\r\n    }\r\n\r\n    const [overflowEdge, overflowEdgeChanged] = overflowEdgeCache;\r\n    const [overflowAmount, overflowAmountChanged] = overflowAmuntCache;\r\n    const [viewportScrollSize, viewportScrollSizeChanged] = viewportScrollSizeCache;\r\n    const [sizeFraction, sizeFractionChanged] = sizeFractionCache;\r\n    const hasOverflow = {\r\n      x: overflowAmount.w > 0,\r\n      y: overflowAmount.h > 0,\r\n    };\r\n    const removeClipping =\r\n      (overflowXVisible && overflowYVisible && (hasOverflow.x || hasOverflow.y)) ||\r\n      (overflowXVisible && hasOverflow.x && !hasOverflow.y) ||\r\n      (overflowYVisible && hasOverflow.y && !hasOverflow.x);\r\n\r\n    if (\r\n      _paddingStyleChanged ||\r\n      _directionChanged ||\r\n      sizeFractionChanged ||\r\n      viewportScrollSizeChanged ||\r\n      overflowEdgeChanged ||\r\n      overflowAmountChanged ||\r\n      overflowChanged ||\r\n      showNativeOverlaidScrollbarsChanged ||\r\n      adjustFlexboxGlue\r\n    ) {\r\n      const viewportStyle: StyleObject = {\r\n        marginRight: 0,\r\n        marginBottom: 0,\r\n        marginLeft: 0,\r\n        width: '',\r\n        overflowY: '',\r\n        overflowX: '',\r\n      };\r\n      const viewportOverflowState = setViewportOverflowState(\r\n        showNativeOverlaidScrollbars,\r\n        hasOverflow,\r\n        overflow,\r\n        viewportStyle\r\n      );\r\n      const viewportArranged = arrangeViewport(\r\n        viewportOverflowState,\r\n        viewportScrollSize,\r\n        sizeFraction,\r\n        _directionIsRTL\r\n      );\r\n\r\n      if (!_viewportIsTarget) {\r\n        hideNativeScrollbars(\r\n          viewportOverflowState,\r\n          _directionIsRTL,\r\n          viewportArranged,\r\n          viewportStyle\r\n        );\r\n      }\r\n\r\n      if (adjustFlexboxGlue) {\r\n        fixFlexboxGlue(viewportOverflowState, _heightIntrinsic);\r\n      }\r\n\r\n      if (_viewportIsTarget) {\r\n        attr(_host, dataAttributeHostOverflowX, viewportStyle.overflowX as string);\r\n        attr(_host, dataAttributeHostOverflowY, viewportStyle.overflowY as string);\r\n      } else {\r\n        style(_viewport, viewportStyle);\r\n      }\r\n    }\r\n\r\n    attrClass(_host, dataAttributeHost, dataValueHostOverflowVisible, removeClipping);\r\n    conditionalClass(_padding, classNameOverflowVisible, removeClipping);\r\n    !_viewportIsTarget && conditionalClass(_viewport, classNameOverflowVisible, overflowVisible);\r\n\r\n    const [overflowStyle, overflowStyleChanged] = updateOverflowStyleCache(\r\n      getViewportOverflowState(showNativeOverlaidScrollbars)._overflowStyle\r\n    );\r\n\r\n    setState({\r\n      _overflowStyle: overflowStyle,\r\n      _overflowEdge: {\r\n        x: overflowEdge.w,\r\n        y: overflowEdge.h,\r\n      },\r\n      _overflowAmount: {\r\n        x: overflowAmount.w,\r\n        y: overflowAmount.h,\r\n      },\r\n      _hasOverflow: hasOverflow,\r\n    });\r\n\r\n    return {\r\n      _overflowStyleChanged: overflowStyleChanged,\r\n      _overflowEdgeChanged: overflowEdgeChanged,\r\n      _overflowAmountChanged: overflowAmountChanged,\r\n    };\r\n  };\r\n};\r\n","import { each, isNumber, scrollLeft, scrollTop, assignDeep, keys } from 'support';\r\nimport { getEnvironment } from 'environment';\r\nimport {\r\n  createTrinsicUpdateSegment,\r\n  createPaddingUpdateSegment,\r\n  createOverflowUpdateSegment,\r\n} from 'setups/structureSetup/updateSegments';\r\nimport type { SetupState, SetupUpdateSegment, SetupUpdateCheckOption } from 'setups';\r\nimport type { StructureSetupState } from 'setups/structureSetup';\r\nimport type { StructureSetupElementsObj } from 'setups/structureSetup/structureSetup.elements';\r\n\r\nexport type CreateStructureUpdateSegment = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  state: SetupState<StructureSetupState>\r\n) => StructureSetupUpdateSegment;\r\n\r\nexport type StructureSetupUpdateSegment = SetupUpdateSegment<StructureSetupUpdateHints>;\r\n\r\nexport type StructureSetupUpdate = (\r\n  checkOption: SetupUpdateCheckOption,\r\n  updateHints: Partial<StructureSetupUpdateHints>,\r\n  force?: boolean\r\n) => StructureSetupUpdateHints;\r\n\r\nexport interface StructureSetupUpdateHints {\r\n  _sizeChanged: boolean;\r\n  _directionChanged: boolean;\r\n  _heightIntrinsicChanged: boolean;\r\n  _overflowEdgeChanged: boolean;\r\n  _overflowAmountChanged: boolean;\r\n  _overflowStyleChanged: boolean;\r\n  _paddingStyleChanged: boolean;\r\n  _hostMutation: boolean;\r\n  _contentMutation: boolean;\r\n}\r\n\r\nconst prepareUpdateHints = <T extends StructureSetupUpdateHints>(\r\n  leading: Required<T>,\r\n  adaptive?: Partial<T>,\r\n  force?: boolean\r\n): Required<T> => {\r\n  const result = {};\r\n  const finalAdaptive = adaptive || {};\r\n  const objKeys = keys(leading).concat(keys(finalAdaptive));\r\n\r\n  each(objKeys, (key) => {\r\n    const leadingValue = leading[key];\r\n    const adaptiveValue = finalAdaptive[key];\r\n    result[key] = !!(force || leadingValue || adaptiveValue);\r\n  });\r\n\r\n  return result as Required<T>;\r\n};\r\n\r\nexport const createStructureSetupUpdate = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  state: SetupState<StructureSetupState>\r\n): StructureSetupUpdate => {\r\n  const { _viewport } = structureSetupElements;\r\n  const {\r\n    _nativeScrollbarsHiding: _nativeScrollbarStyling,\r\n    _nativeScrollbarsOverlaid: _nativeScrollbarIsOverlaid,\r\n    _flexboxGlue,\r\n  } = getEnvironment();\r\n  const doViewportArrange =\r\n    !_nativeScrollbarStyling && (_nativeScrollbarIsOverlaid.x || _nativeScrollbarIsOverlaid.y);\r\n\r\n  const updateSegments: StructureSetupUpdateSegment[] = [\r\n    createTrinsicUpdateSegment(structureSetupElements, state),\r\n    createPaddingUpdateSegment(structureSetupElements, state),\r\n    createOverflowUpdateSegment(structureSetupElements, state),\r\n  ];\r\n\r\n  return (\r\n    checkOption: SetupUpdateCheckOption,\r\n    updateHints: Partial<StructureSetupUpdateHints>,\r\n    force?: boolean\r\n  ) => {\r\n    const initialUpdateHints = prepareUpdateHints(\r\n      assignDeep(\r\n        {\r\n          _sizeChanged: false,\r\n          _paddingStyleChanged: false,\r\n          _directionChanged: false,\r\n          _heightIntrinsicChanged: false,\r\n          _overflowEdgeChanged: false,\r\n          _overflowAmountChanged: false,\r\n          _overflowStyleChanged: false,\r\n          _hostMutation: false,\r\n          _contentMutation: false,\r\n        },\r\n        updateHints\r\n      ),\r\n      {},\r\n      force\r\n    );\r\n    const adjustScrollOffset = doViewportArrange || !_flexboxGlue;\r\n    const scrollOffsetX = adjustScrollOffset && scrollLeft(_viewport);\r\n    const scrollOffsetY = adjustScrollOffset && scrollTop(_viewport);\r\n\r\n    let adaptivedUpdateHints: Required<StructureSetupUpdateHints> = initialUpdateHints;\r\n    each(updateSegments, (updateSegment) => {\r\n      adaptivedUpdateHints = prepareUpdateHints<StructureSetupUpdateHints>(\r\n        adaptivedUpdateHints,\r\n        updateSegment(adaptivedUpdateHints, checkOption, !!force) || {},\r\n        force\r\n      );\r\n    });\r\n\r\n    if (isNumber(scrollOffsetX)) {\r\n      scrollLeft(_viewport, scrollOffsetX);\r\n    }\r\n    if (isNumber(scrollOffsetY)) {\r\n      scrollTop(_viewport, scrollOffsetY);\r\n    }\r\n\r\n    return adaptivedUpdateHints;\r\n  };\r\n};\r\n","import {\r\n  Cache,\r\n  CacheValues,\r\n  createCache,\r\n  createDOM,\r\n  style,\r\n  scrollLeft,\r\n  scrollTop,\r\n  runEachAndClear,\r\n  prependChildren,\r\n  removeElements,\r\n  on,\r\n  addClass,\r\n  push,\r\n  ResizeObserverConstructor,\r\n  isArray,\r\n  isBoolean,\r\n  removeClass,\r\n  isObject,\r\n  stopPropagation,\r\n} from 'support';\r\nimport { getEnvironment } from 'environment';\r\nimport {\r\n  classNameSizeObserver,\r\n  classNameSizeObserverAppear,\r\n  classNameSizeObserverListener,\r\n} from 'classnames';\r\nimport { getPlugins, SizeObserverPluginInstance, sizeObserverPluginName } from 'plugins';\r\n\r\nexport interface SizeObserverOptions {\r\n  _direction?: boolean;\r\n  _appear?: boolean;\r\n}\r\n\r\nexport interface SizeObserverCallbackParams {\r\n  _sizeChanged: boolean;\r\n  _directionIsRTLCache?: CacheValues<boolean>;\r\n  _appear?: boolean;\r\n}\r\n\r\nexport type DestroySizeObserver = () => void;\r\n\r\nconst scrollAmount = 3333333;\r\nconst getElmDirectionIsRTL = (elm: HTMLElement): boolean => style(elm, 'direction') === 'rtl';\r\nconst domRectHasDimensions = (rect?: DOMRectReadOnly) => rect && (rect.height || rect.width);\r\n\r\n/**\r\n * Creates a size observer which observes any size, padding, border, margin and box-sizing changes of the target element. Depending on the options also direction and appear can be observed.\r\n * @param target The target element which shall be observed.\r\n * @param onSizeChangedCallback The callback which gets called after a size change was detected.\r\n * @param options The options for size detection, whether to observe also direction and appear.\r\n * @returns A object which represents the instance of the size observer.\r\n */\r\nexport const createSizeObserver = (\r\n  target: HTMLElement,\r\n  onSizeChangedCallback: (params: SizeObserverCallbackParams) => any,\r\n  options?: SizeObserverOptions\r\n): DestroySizeObserver => {\r\n  const { _direction: observeDirectionChange = false, _appear: observeAppearChange = false } =\r\n    options || {};\r\n  const sizeObserverPlugin = getPlugins()[sizeObserverPluginName] as\r\n    | SizeObserverPluginInstance\r\n    | undefined;\r\n  const { _rtlScrollBehavior: rtlScrollBehavior } = getEnvironment();\r\n  const baseElements = createDOM(\r\n    `<div class=\"${classNameSizeObserver}\"><div class=\"${classNameSizeObserverListener}\"></div></div>`\r\n  );\r\n  const sizeObserver = baseElements[0] as HTMLElement;\r\n  const listenerElement = sizeObserver.firstChild as HTMLElement;\r\n  const getIsDirectionRTL = getElmDirectionIsRTL.bind(0, sizeObserver);\r\n  const [updateResizeObserverContentRectCache] = createCache<DOMRectReadOnly | undefined>({\r\n    _initialValue: undefined,\r\n    _alwaysUpdateValues: true,\r\n    _equal: (currVal, newVal) =>\r\n      !(\r\n        !currVal || // if no initial value\r\n        // if from display: none to display: block\r\n        (!domRectHasDimensions(currVal) && domRectHasDimensions(newVal))\r\n      ),\r\n  });\r\n  const onSizeChangedCallbackProxy = (\r\n    sizeChangedContext?: CacheValues<boolean> | ResizeObserverEntry[] | Event | boolean\r\n  ) => {\r\n    const isResizeObserverCall =\r\n      isArray(sizeChangedContext) &&\r\n      sizeChangedContext.length > 0 &&\r\n      isObject(sizeChangedContext[0]);\r\n\r\n    const hasDirectionCache =\r\n      !isResizeObserverCall && isBoolean((sizeChangedContext as CacheValues<boolean>)[0]);\r\n\r\n    let skip = false;\r\n    let appear: boolean | number | undefined = false;\r\n    let doDirectionScroll = true; // always true if sizeChangedContext is Event (appear callback or RO. Polyfill)\r\n\r\n    // if triggered from RO.\r\n    if (isResizeObserverCall) {\r\n      const [currRContentRect, , prevContentRect] = updateResizeObserverContentRectCache(\r\n        (sizeChangedContext as ResizeObserverEntry[]).pop()!.contentRect\r\n      );\r\n      const hasDimensions = domRectHasDimensions(currRContentRect);\r\n      const hadDimensions = domRectHasDimensions(prevContentRect);\r\n      skip = !prevContentRect || !hasDimensions; // skip on initial RO. call or if display is none\r\n      appear = !hadDimensions && hasDimensions;\r\n\r\n      doDirectionScroll = !skip; // direction scroll when not skipping\r\n    }\r\n    // else if its triggered with DirectionCache\r\n    else if (hasDirectionCache) {\r\n      [, doDirectionScroll] = sizeChangedContext as CacheValues<boolean>; // direction scroll when DirectionCache changed, false otherwise\r\n    }\r\n    // else if it triggered with appear from polyfill\r\n    else {\r\n      appear = sizeChangedContext === true;\r\n    }\r\n\r\n    if (observeDirectionChange && doDirectionScroll) {\r\n      const rtl = hasDirectionCache\r\n        ? (sizeChangedContext as CacheValues<boolean>)[0]\r\n        : getElmDirectionIsRTL(sizeObserver);\r\n      scrollLeft(\r\n        sizeObserver,\r\n        rtl\r\n          ? rtlScrollBehavior.n\r\n            ? -scrollAmount\r\n            : rtlScrollBehavior.i\r\n            ? 0\r\n            : scrollAmount\r\n          : scrollAmount\r\n      );\r\n      scrollTop(sizeObserver, scrollAmount);\r\n    }\r\n\r\n    if (!skip) {\r\n      onSizeChangedCallback({\r\n        _sizeChanged: !hasDirectionCache,\r\n        _directionIsRTLCache: hasDirectionCache\r\n          ? (sizeChangedContext as CacheValues<boolean>)\r\n          : undefined,\r\n        _appear: !!appear,\r\n      });\r\n    }\r\n  };\r\n  const offListeners: (() => void)[] = [];\r\n  let appearCallback: ((...args: any) => any) | false = observeAppearChange\r\n    ? onSizeChangedCallbackProxy\r\n    : false;\r\n  let directionIsRTLCache: Cache<boolean> | undefined;\r\n\r\n  if (ResizeObserverConstructor) {\r\n    const resizeObserverInstance = new ResizeObserverConstructor(onSizeChangedCallbackProxy);\r\n    resizeObserverInstance.observe(listenerElement);\r\n    push(offListeners, () => {\r\n      resizeObserverInstance.disconnect();\r\n    });\r\n  } else if (sizeObserverPlugin) {\r\n    const [pluginAppearCallback, pluginOffListeners] = sizeObserverPlugin._(\r\n      listenerElement,\r\n      onSizeChangedCallbackProxy,\r\n      observeAppearChange\r\n    );\r\n    appearCallback = pluginAppearCallback;\r\n    push(offListeners, pluginOffListeners);\r\n  }\r\n\r\n  if (observeDirectionChange) {\r\n    directionIsRTLCache = createCache(\r\n      {\r\n        _initialValue: !getIsDirectionRTL(), // invert current value to trigger initial change\r\n      },\r\n      getIsDirectionRTL\r\n    );\r\n    const [updateDirectionIsRTLCache] = directionIsRTLCache;\r\n\r\n    push(\r\n      offListeners,\r\n      on(sizeObserver, 'scroll', (event: Event) => {\r\n        const directionIsRTLCacheValues = updateDirectionIsRTLCache();\r\n        const [directionIsRTL, directionIsRTLChanged] = directionIsRTLCacheValues;\r\n\r\n        if (directionIsRTLChanged) {\r\n          removeClass(listenerElement, 'ltr rtl');\r\n          if (directionIsRTL) {\r\n            addClass(listenerElement, 'rtl');\r\n          } else {\r\n            addClass(listenerElement, 'ltr');\r\n          }\r\n          onSizeChangedCallbackProxy(directionIsRTLCacheValues);\r\n        }\r\n\r\n        stopPropagation(event);\r\n      })\r\n    );\r\n  }\r\n\r\n  // appearCallback is always needed on scroll-observer strategy to reset it\r\n  if (appearCallback) {\r\n    addClass(sizeObserver, classNameSizeObserverAppear);\r\n    push(\r\n      offListeners,\r\n      on(sizeObserver, 'animationstart', appearCallback, {\r\n        // Fire only once for \"CSS is ready\" event if ResizeObserver strategy is used\r\n        _once: !!ResizeObserverConstructor,\r\n      })\r\n    );\r\n  }\r\n\r\n  prependChildren(target, sizeObserver);\r\n\r\n  return () => {\r\n    runEachAndClear(offListeners);\r\n    removeElements(sizeObserver);\r\n  };\r\n};\r\n","import {\r\n  WH,\r\n  CacheValues,\r\n  createDiv,\r\n  offsetSize,\r\n  runEachAndClear,\r\n  prependChildren,\r\n  removeElements,\r\n  createCache,\r\n  push,\r\n  IntersectionObserverConstructor,\r\n} from 'support';\r\nimport { createSizeObserver } from 'observers/sizeObserver';\r\nimport { classNameTrinsicObserver } from 'classnames';\r\n\r\nexport type TrinsicObserverCallback = (heightIntrinsic: CacheValues<boolean>) => any;\r\nexport type TrinsicObserver = [\r\n  destroy: () => void,\r\n  update: () => void | Parameters<TrinsicObserverCallback>\r\n];\r\n\r\nconst isHeightIntrinsic = (ioEntryOrSize: IntersectionObserverEntry | WH<number>): boolean =>\r\n  (ioEntryOrSize as WH<number>).h === 0 ||\r\n  (ioEntryOrSize as IntersectionObserverEntry).isIntersecting ||\r\n  (ioEntryOrSize as IntersectionObserverEntry).intersectionRatio > 0;\r\n\r\n/**\r\n * Creates a trinsic observer which observes changes to intrinsic or extrinsic sizing for the height of the target element.\r\n * @param target The element which shall be observed.\r\n * @param onTrinsicChangedCallback The callback which gets called after a change was detected.\r\n * @returns A object which represents the instance of the trinsic observer.\r\n */\r\nexport const createTrinsicObserver = (\r\n  target: HTMLElement,\r\n  onTrinsicChangedCallback: TrinsicObserverCallback\r\n): TrinsicObserver => {\r\n  let intersectionObserverInstance: undefined | IntersectionObserver;\r\n  const trinsicObserver = createDiv(classNameTrinsicObserver);\r\n  const offListeners: (() => void)[] = [];\r\n  const [updateHeightIntrinsicCache] = createCache({\r\n    _initialValue: false,\r\n  });\r\n  const triggerOnTrinsicChangedCallback = (\r\n    updateValue?: IntersectionObserverEntry | WH<number>,\r\n    fromRecords?: true\r\n  ): void | Parameters<TrinsicObserverCallback> => {\r\n    if (updateValue) {\r\n      const heightIntrinsic = updateHeightIntrinsicCache(isHeightIntrinsic(updateValue));\r\n      const [, heightIntrinsicChanged] = heightIntrinsic;\r\n\r\n      if (heightIntrinsicChanged) {\r\n        !fromRecords && onTrinsicChangedCallback(heightIntrinsic);\r\n        return [heightIntrinsic];\r\n      }\r\n    }\r\n  };\r\n  const intersectionObserverCallback = (\r\n    entries: IntersectionObserverEntry[],\r\n    fromRecords?: true\r\n  ) => {\r\n    if (entries && entries.length > 0) {\r\n      return triggerOnTrinsicChangedCallback(entries.pop(), fromRecords);\r\n    }\r\n  };\r\n\r\n  if (IntersectionObserverConstructor) {\r\n    intersectionObserverInstance = new IntersectionObserverConstructor(\r\n      (entries) => intersectionObserverCallback(entries),\r\n      { root: target }\r\n    );\r\n    intersectionObserverInstance.observe(trinsicObserver);\r\n    push(offListeners, () => {\r\n      intersectionObserverInstance!.disconnect();\r\n    });\r\n  } else {\r\n    const onSizeChanged = () => {\r\n      const newSize = offsetSize(trinsicObserver);\r\n      triggerOnTrinsicChangedCallback(newSize);\r\n    };\r\n    push(offListeners, createSizeObserver(trinsicObserver, onSizeChanged));\r\n    onSizeChanged();\r\n  }\r\n\r\n  prependChildren(target, trinsicObserver);\r\n\r\n  return [\r\n    () => {\r\n      runEachAndClear(offListeners);\r\n      removeElements(trinsicObserver);\r\n    },\r\n    () => {\r\n      if (intersectionObserverInstance) {\r\n        return intersectionObserverCallback(intersectionObserverInstance.takeRecords(), true);\r\n      }\r\n    },\r\n  ];\r\n};\r\n","import {\r\n  each,\r\n  noop,\r\n  debounce,\r\n  indexOf,\r\n  isString,\r\n  MutationObserverConstructor,\r\n  isEmptyArray,\r\n  on,\r\n  attr,\r\n  is,\r\n  find,\r\n  push,\r\n} from 'support';\r\n\r\ntype DOMContentObserverCallback = (contentChangedTroughEvent: boolean) => any;\r\n\r\ntype DOMTargetObserverCallback = (targetChangedAttrs: string[], targetStyleChanged: boolean) => any;\r\n\r\ninterface DOMObserverOptionsBase {\r\n  _attributes?: string[];\r\n  _styleChangingAttributes?: string[];\r\n  /**\r\n   * A function which can ignore a changed attribute if it returns true.\r\n   * for DOMTargetObserver this applies to the changes to the observed target\r\n   * for DOMContentObserver this applies to changes to nested targets -> nested targets are elements which match the \"_nestedTargetSelector\" selector\r\n   */\r\n  _ignoreTargetChange?: DOMObserverIgnoreTargetChange;\r\n}\r\n\r\ninterface DOMContentObserverOptions extends DOMObserverOptionsBase {\r\n  _eventContentChange?: DOMObserverEventContentChange; // [selector, eventname(s) | function returning eventname(s)] -> eventnames divided by whitespaces\r\n  _nestedTargetSelector?: string;\r\n  _ignoreContentChange?: DOMObserverIgnoreContentChange; // function which will prevent marking certain dom changes as content change if it returns true\r\n}\r\n\r\ntype DOMTargetObserverOptions = DOMObserverOptionsBase;\r\n\r\ntype ContentChangeArrayItem = [selector?: string, eventNames?: string] | null | undefined;\r\n\r\nexport type DOMObserverEventContentChange =\r\n  | Array<ContentChangeArrayItem>\r\n  | false\r\n  | null\r\n  | undefined;\r\n\r\nexport type DOMObserverIgnoreContentChange = (\r\n  mutation: MutationRecord,\r\n  isNestedTarget: boolean,\r\n  domObserverTarget: HTMLElement,\r\n  domObserverOptions?: DOMContentObserverOptions\r\n) => boolean;\r\n\r\nexport type DOMObserverIgnoreTargetChange = (\r\n  target: Node,\r\n  attributeName: string,\r\n  oldAttributeValue: string | null,\r\n  newAttributeValue: string | null\r\n) => boolean;\r\n\r\nexport type DOMObserverCallback<ContentObserver extends boolean> = ContentObserver extends true\r\n  ? DOMContentObserverCallback\r\n  : DOMTargetObserverCallback;\r\n\r\nexport type DOMObserverOptions<ContentObserver extends boolean> = ContentObserver extends true\r\n  ? DOMContentObserverOptions\r\n  : DOMTargetObserverOptions;\r\n\r\nexport type DOMObserver<ContentObserver extends boolean> = [\r\n  destroy: () => void,\r\n  update: () => void | false | Parameters<DOMObserverCallback<ContentObserver>>\r\n];\r\n\r\ntype EventContentChangeUpdateElement = (getElements?: (selector: string) => Node[]) => void;\r\ntype EventContentChange = [destroy: () => void, updateElements: EventContentChangeUpdateElement];\r\n\r\n/**\r\n * Creates a set of helper functions to observe events of elements inside the target element.\r\n * @param target The target element of which the children elements shall be observed. (not only direct children but also nested ones)\r\n * @param eventContentChange The event content change array. (array of tuples: selector and eventname(s))\r\n * @param callback Callback which is called if one of the elements emits the corresponding event.\r\n * @returns A object which contains a set of helper functions to destroy and update the observation of elements.\r\n */\r\nconst createEventContentChange = (\r\n  target: Element,\r\n  callback: (...args: any) => any,\r\n  eventContentChange?: DOMObserverEventContentChange\r\n): EventContentChange => {\r\n  let map: WeakMap<Node, [string, () => any]> | undefined; // weak map to prevent memory leak for detached elements\r\n  let destroyed = false;\r\n  const destroy = () => {\r\n    destroyed = true;\r\n  };\r\n  const updateElements: EventContentChangeUpdateElement = (getElements?) => {\r\n    if (eventContentChange) {\r\n      const eventElmList = eventContentChange.reduce<Array<[Node[], string]>>((arr, item) => {\r\n        if (item) {\r\n          const selector = item[0];\r\n          const eventNames = item[1];\r\n          const elements =\r\n            eventNames &&\r\n            selector &&\r\n            (getElements ? getElements(selector) : find(selector, target));\r\n\r\n          if (elements && elements.length && eventNames && isString(eventNames)) {\r\n            push(arr, [elements, eventNames.trim()], true);\r\n          }\r\n        }\r\n        return arr;\r\n      }, []);\r\n\r\n      each(eventElmList, (item) =>\r\n        each(item[0], (elm) => {\r\n          const eventNames = item[1];\r\n          const entry = map!.get(elm);\r\n\r\n          if (entry) {\r\n            const entryEventNames = entry[0];\r\n            const entryOff = entry[1];\r\n\r\n            // in case an already registered element is registered again, unregister the previous events\r\n            if (entryEventNames === eventNames) {\r\n              entryOff();\r\n            }\r\n          }\r\n\r\n          const off = on(elm, eventNames, (event: Event) => {\r\n            if (destroyed) {\r\n              off();\r\n              map!.delete(elm);\r\n            } else {\r\n              callback(event);\r\n            }\r\n          });\r\n          map!.set(elm, [eventNames, off]);\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  if (eventContentChange) {\r\n    map = new WeakMap();\r\n    updateElements();\r\n  }\r\n\r\n  return [destroy, updateElements];\r\n};\r\n\r\n/**\r\n * Creates a DOM observer which observes DOM changes to either the target element or its children.\r\n * @param target The element which shall be observed.\r\n * @param isContentObserver Whether this observer is just observing the target or just the targets children. (not only direct children but also nested ones)\r\n * @param callback The callback which gets called if a change was detected.\r\n * @param options The options for DOM change detection.\r\n * @returns A object which represents the instance of the DOM observer.\r\n */\r\nexport const createDOMObserver = <ContentObserver extends boolean>(\r\n  target: HTMLElement,\r\n  isContentObserver: ContentObserver,\r\n  callback: DOMObserverCallback<ContentObserver>,\r\n  options?: DOMObserverOptions<ContentObserver>\r\n): DOMObserver<ContentObserver> => {\r\n  let isConnected = false;\r\n  const {\r\n    _attributes,\r\n    _styleChangingAttributes,\r\n    _eventContentChange,\r\n    _nestedTargetSelector,\r\n    _ignoreTargetChange,\r\n    _ignoreContentChange,\r\n  } = (options as DOMContentObserverOptions & DOMTargetObserverOptions) || {};\r\n  const debouncedEventContentChange = debounce(\r\n    () => {\r\n      if (isConnected) {\r\n        (callback as DOMContentObserverCallback)(true);\r\n      }\r\n    },\r\n    { _timeout: 33, _maxDelay: 99 }\r\n  );\r\n  const [destroyEventContentChange, updateEventContentChangeElements] = createEventContentChange(\r\n    target,\r\n    debouncedEventContentChange,\r\n    _eventContentChange\r\n  );\r\n\r\n  // MutationObserver\r\n  const finalAttributes = _attributes || [];\r\n  const finalStyleChangingAttributes = _styleChangingAttributes || [];\r\n  const observedAttributes = finalAttributes.concat(finalStyleChangingAttributes);\r\n  const observerCallback = (\r\n    mutations: MutationRecord[],\r\n    fromRecords?: true\r\n  ): void | Parameters<DOMObserverCallback<ContentObserver>> => {\r\n    const ignoreTargetChange = _ignoreTargetChange || noop;\r\n    const ignoreContentChange = _ignoreContentChange || noop;\r\n    const targetChangedAttrs: string[] = [];\r\n    const totalAddedNodes: Node[] = [];\r\n    let targetStyleChanged = false;\r\n    let contentChanged = false;\r\n    let childListChanged = false;\r\n    each(mutations, (mutation) => {\r\n      const { attributeName, target: mutationTarget, type, oldValue, addedNodes } = mutation;\r\n      const isAttributesType = type === 'attributes';\r\n      const isChildListType = type === 'childList';\r\n      const targetIsMutationTarget = target === mutationTarget;\r\n      const attributeValue =\r\n        isAttributesType && isString(attributeName)\r\n          ? attr(mutationTarget as HTMLElement, attributeName!)\r\n          : 0;\r\n      const attributeChanged = attributeValue !== 0 && oldValue !== attributeValue;\r\n      const styleChangingAttrChanged =\r\n        indexOf(finalStyleChangingAttributes, attributeName) > -1 && attributeChanged;\r\n\r\n      // if is content observer and something changed in children\r\n      if (isContentObserver && !targetIsMutationTarget) {\r\n        const notOnlyAttrChanged = !isAttributesType;\r\n        const contentAttrChanged = isAttributesType && styleChangingAttrChanged;\r\n        const isNestedTarget =\r\n          contentAttrChanged && _nestedTargetSelector && is(mutationTarget, _nestedTargetSelector);\r\n        const baseAssertion = isNestedTarget\r\n          ? !ignoreTargetChange(mutationTarget, attributeName!, oldValue, attributeValue)\r\n          : notOnlyAttrChanged || contentAttrChanged;\r\n        const contentFinalChanged =\r\n          baseAssertion && !ignoreContentChange(mutation, !!isNestedTarget, target, options);\r\n\r\n        push(totalAddedNodes, addedNodes);\r\n\r\n        contentChanged = contentChanged || contentFinalChanged;\r\n        childListChanged = childListChanged || isChildListType;\r\n      }\r\n      // if is target observer and target attr changed\r\n      if (\r\n        !isContentObserver &&\r\n        targetIsMutationTarget &&\r\n        attributeChanged &&\r\n        !ignoreTargetChange(mutationTarget, attributeName!, oldValue, attributeValue)\r\n      ) {\r\n        push(targetChangedAttrs, attributeName!);\r\n        targetStyleChanged = targetStyleChanged || styleChangingAttrChanged;\r\n      }\r\n    });\r\n\r\n    if (childListChanged && !isEmptyArray(totalAddedNodes)) {\r\n      // adds / removes the new elements from the event content change\r\n      updateEventContentChangeElements((selector) =>\r\n        totalAddedNodes.reduce<Node[]>((arr, node) => {\r\n          push(arr, find(selector, node));\r\n          return is(node, selector) ? push(arr, node) : arr;\r\n        }, [])\r\n      );\r\n    }\r\n\r\n    if (isContentObserver) {\r\n      !fromRecords && contentChanged && (callback as DOMContentObserverCallback)(false);\r\n      return [false] as Parameters<DOMObserverCallback<ContentObserver>>;\r\n    }\r\n    if (!isEmptyArray(targetChangedAttrs) || targetStyleChanged) {\r\n      !fromRecords &&\r\n        (callback as DOMTargetObserverCallback)(targetChangedAttrs, targetStyleChanged);\r\n      return [targetChangedAttrs, targetStyleChanged] as Parameters<\r\n        DOMObserverCallback<ContentObserver>\r\n      >;\r\n    }\r\n  };\r\n  const mutationObserver: MutationObserver = new MutationObserverConstructor!((mutations) =>\r\n    observerCallback(mutations)\r\n  );\r\n\r\n  // Connect\r\n  mutationObserver.observe(target, {\r\n    attributes: true,\r\n    attributeOldValue: true,\r\n    attributeFilter: observedAttributes,\r\n    subtree: isContentObserver,\r\n    childList: isContentObserver,\r\n    characterData: isContentObserver,\r\n  });\r\n  isConnected = true;\r\n\r\n  return [\r\n    () => {\r\n      if (isConnected) {\r\n        destroyEventContentChange();\r\n        mutationObserver.disconnect();\r\n        isConnected = false;\r\n      }\r\n    },\r\n    () => {\r\n      if (isConnected) {\r\n        debouncedEventContentChange._flush();\r\n\r\n        const records = mutationObserver.takeRecords();\r\n        return !isEmptyArray(records) && observerCallback(records, true);\r\n      }\r\n    },\r\n  ];\r\n};\r\n","import {\r\n  debounce,\r\n  isArray,\r\n  isNumber,\r\n  each,\r\n  indexOf,\r\n  isString,\r\n  attr,\r\n  removeAttr,\r\n  CacheValues,\r\n  keys,\r\n  liesBetween,\r\n  scrollSize,\r\n  equalWH,\r\n  createCache,\r\n  WH,\r\n  fractionalSize,\r\n  isFunction,\r\n  ResizeObserverConstructor,\r\n  closest,\r\n  assignDeep,\r\n  push,\r\n} from 'support';\r\nimport { getEnvironment } from 'environment';\r\nimport {\r\n  dataAttributeHost,\r\n  dataValueHostOverflowVisible,\r\n  classNameViewport,\r\n  classNameOverflowVisible,\r\n  classNameScrollbar,\r\n} from 'classnames';\r\nimport { createSizeObserver, SizeObserverCallbackParams } from 'observers/sizeObserver';\r\nimport { createTrinsicObserver } from 'observers/trinsicObserver';\r\nimport { createDOMObserver, DOMObserver } from 'observers/domObserver';\r\nimport type { SetupState, SetupUpdateCheckOption } from 'setups';\r\nimport type { StructureSetupState } from 'setups/structureSetup';\r\nimport type { StructureSetupElementsObj } from 'setups/structureSetup/structureSetup.elements';\r\nimport type {\r\n  StructureSetupUpdate,\r\n  StructureSetupUpdateHints,\r\n} from 'setups/structureSetup/structureSetup.update';\r\n\r\nexport type StructureSetupObserversUpdate = (checkOption: SetupUpdateCheckOption) => void;\r\n\r\nexport type StructureSetupObservers = [\r\n  destroy: () => void,\r\n  updateObservers: () => Partial<StructureSetupUpdateHints>,\r\n  updateObserversOptions: StructureSetupObserversUpdate\r\n];\r\n\r\ntype ExcludeFromTuple<T extends readonly any[], E> = T extends [infer F, ...infer R]\r\n  ? [F] extends [E]\r\n    ? ExcludeFromTuple<R, E>\r\n    : [F, ...ExcludeFromTuple<R, E>]\r\n  : [];\r\n\r\nconst hostSelector = `[${dataAttributeHost}]`;\r\n\r\n// TODO: observer textarea attrs if textarea\r\n\r\nconst viewportSelector = `.${classNameViewport}`;\r\nconst viewportAttrsFromTarget = ['tabindex'];\r\nconst baseStyleChangingAttrsTextarea = ['wrap', 'cols', 'rows'];\r\nconst baseStyleChangingAttrs = ['id', 'class', 'style', 'open'];\r\n\r\nexport const createStructureSetupObservers = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  state: SetupState<StructureSetupState>,\r\n  structureSetupUpdate: (\r\n    ...args: ExcludeFromTuple<Parameters<StructureSetupUpdate>, Parameters<StructureSetupUpdate>[0]>\r\n  ) => any\r\n): StructureSetupObservers => {\r\n  let debounceTimeout: number | false | undefined;\r\n  let debounceMaxDelay: number | false | undefined;\r\n  let contentMutationObserver: DOMObserver<true> | undefined;\r\n  const [, setState] = state;\r\n  const {\r\n    _host,\r\n    _viewport,\r\n    _content,\r\n    _isTextarea,\r\n    _viewportIsTarget,\r\n    _viewportHasClass,\r\n    _viewportAddRemoveClass,\r\n  } = structureSetupElements;\r\n  const { _nativeScrollbarsHiding: _nativeScrollbarStyling, _flexboxGlue } = getEnvironment();\r\n\r\n  const [updateContentSizeCache] = createCache<WH<number>>(\r\n    {\r\n      _equal: equalWH,\r\n      _initialValue: { w: 0, h: 0 },\r\n    },\r\n    () => {\r\n      const has = _viewportHasClass(classNameOverflowVisible, dataValueHostOverflowVisible);\r\n      has && _viewportAddRemoveClass(classNameOverflowVisible, dataValueHostOverflowVisible);\r\n\r\n      const contentScroll = scrollSize(_content);\r\n      const viewportScroll = scrollSize(_viewport);\r\n      const fractional = fractionalSize(_viewport);\r\n\r\n      has && _viewportAddRemoveClass(classNameOverflowVisible, dataValueHostOverflowVisible, true);\r\n      return {\r\n        w: viewportScroll.w + contentScroll.w + fractional.w,\r\n        h: viewportScroll.h + contentScroll.h + fractional.h,\r\n      };\r\n    }\r\n  );\r\n  const contentMutationObserverAttr = _isTextarea\r\n    ? baseStyleChangingAttrsTextarea\r\n    : baseStyleChangingAttrs.concat(baseStyleChangingAttrsTextarea);\r\n  const structureSetupUpdateWithDebouncedAdaptiveUpdateHints = debounce(structureSetupUpdate, {\r\n    _timeout: () => debounceTimeout,\r\n    _maxDelay: () => debounceMaxDelay,\r\n    _mergeParams(prev, curr) {\r\n      const [prevObj] = prev;\r\n      const [currObj] = curr;\r\n      return [\r\n        keys(prevObj)\r\n          .concat(keys(currObj))\r\n          .reduce((obj, key) => {\r\n            obj[key] = prevObj[key] || currObj[key];\r\n            return obj;\r\n          }, {}),\r\n      ] as [Partial<StructureSetupUpdateHints>];\r\n    },\r\n  });\r\n\r\n  const updateViewportAttrsFromHost = (attributes?: string[]) => {\r\n    each(attributes || viewportAttrsFromTarget, (attribute) => {\r\n      if (indexOf(viewportAttrsFromTarget, attribute) > -1) {\r\n        const hostAttr = attr(_host, attribute);\r\n        if (isString(hostAttr)) {\r\n          attr(_viewport, attribute, hostAttr);\r\n        } else {\r\n          removeAttr(_viewport, attribute);\r\n        }\r\n      }\r\n    });\r\n  };\r\n  const onTrinsicChanged = (heightIntrinsicCache: CacheValues<boolean>, fromRecords?: true) => {\r\n    const [heightIntrinsic, heightIntrinsicChanged] = heightIntrinsicCache;\r\n    const updateHints: Partial<StructureSetupUpdateHints> = {\r\n      _heightIntrinsicChanged: heightIntrinsicChanged,\r\n    };\r\n    setState({ _heightIntrinsic: heightIntrinsic });\r\n    !fromRecords && structureSetupUpdate(updateHints);\r\n    return updateHints;\r\n  };\r\n  const onSizeChanged = ({\r\n    _sizeChanged,\r\n    _directionIsRTLCache,\r\n    _appear,\r\n  }: SizeObserverCallbackParams) => {\r\n    const updateFn =\r\n      !_sizeChanged || _appear\r\n        ? structureSetupUpdate\r\n        : structureSetupUpdateWithDebouncedAdaptiveUpdateHints;\r\n\r\n    let directionChanged = false;\r\n    if (_directionIsRTLCache) {\r\n      const [directionIsRTL, directionIsRTLChanged] = _directionIsRTLCache;\r\n      directionChanged = directionIsRTLChanged;\r\n      setState({ _directionIsRTL: directionIsRTL });\r\n    }\r\n\r\n    updateFn({ _sizeChanged, _directionChanged: directionChanged });\r\n  };\r\n  const onContentMutation = (contentChangedTroughEvent: boolean, fromRecords?: true) => {\r\n    const [, contentSizeChanged] = updateContentSizeCache();\r\n    const updateHints: Partial<StructureSetupUpdateHints> = {\r\n      _contentMutation: contentSizeChanged,\r\n    };\r\n    // if contentChangedTroughEvent is true its already debounced\r\n    const updateFn = contentChangedTroughEvent\r\n      ? structureSetupUpdate\r\n      : structureSetupUpdateWithDebouncedAdaptiveUpdateHints;\r\n\r\n    if (contentSizeChanged) {\r\n      !fromRecords && updateFn(updateHints);\r\n    }\r\n    return updateHints;\r\n  };\r\n  const onHostMutation = (\r\n    targetChangedAttrs: string[],\r\n    targetStyleChanged: boolean,\r\n    fromRecords?: true\r\n  ) => {\r\n    const updateHints: Partial<StructureSetupUpdateHints> = { _hostMutation: targetStyleChanged };\r\n    if (targetStyleChanged) {\r\n      !fromRecords && structureSetupUpdateWithDebouncedAdaptiveUpdateHints(updateHints);\r\n    } else if (!_viewportIsTarget) {\r\n      updateViewportAttrsFromHost(targetChangedAttrs);\r\n    }\r\n    return updateHints;\r\n  };\r\n\r\n  const trinsicObserver =\r\n    (_content || !_flexboxGlue) && createTrinsicObserver(_host, onTrinsicChanged);\r\n  const destroySizeObserver =\r\n    !_viewportIsTarget &&\r\n    createSizeObserver(_host, onSizeChanged, {\r\n      _appear: true,\r\n      _direction: !_nativeScrollbarStyling,\r\n    });\r\n  const [destroyHostMutationObserver, updateHostMutationObserver] = createDOMObserver(\r\n    _host,\r\n    false,\r\n    onHostMutation,\r\n    {\r\n      _styleChangingAttributes: baseStyleChangingAttrs,\r\n      _attributes: baseStyleChangingAttrs.concat(viewportAttrsFromTarget),\r\n    }\r\n  );\r\n\r\n  const viewportIsTargetResizeObserver =\r\n    _viewportIsTarget &&\r\n    new ResizeObserverConstructor!(onSizeChanged.bind(0, { _sizeChanged: true }));\r\n\r\n  viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.observe(_host);\r\n  updateViewportAttrsFromHost();\r\n\r\n  return [\r\n    () => {\r\n      contentMutationObserver && contentMutationObserver[0](); // destroy\r\n      trinsicObserver && trinsicObserver[0](); // destroy\r\n      destroySizeObserver && destroySizeObserver();\r\n      viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.disconnect();\r\n      destroyHostMutationObserver();\r\n    },\r\n    () => {\r\n      const updateHints: Partial<StructureSetupUpdateHints> = {};\r\n      const hostUpdateResult = updateHostMutationObserver();\r\n      const contentUpdateResult = contentMutationObserver && contentMutationObserver[1](); // update\r\n      const trinsicUpdateResult = trinsicObserver && trinsicObserver[1](); // update\r\n\r\n      if (hostUpdateResult) {\r\n        assignDeep(\r\n          updateHints,\r\n          onHostMutation.apply(\r\n            0,\r\n            push(hostUpdateResult, true) as [\r\n              ...updateResult: typeof hostUpdateResult,\r\n              fromRecords: true\r\n            ]\r\n          )\r\n        );\r\n      }\r\n      if (contentUpdateResult) {\r\n        assignDeep(\r\n          updateHints,\r\n          onContentMutation.apply(\r\n            0,\r\n            push(contentUpdateResult, true) as [\r\n              ...updateResult: typeof contentUpdateResult,\r\n              fromRecords: true\r\n            ]\r\n          )\r\n        );\r\n      }\r\n      if (trinsicUpdateResult) {\r\n        assignDeep(\r\n          updateHints,\r\n          onTrinsicChanged.apply(\r\n            0,\r\n            push(trinsicUpdateResult as any[], true) as [\r\n              ...updateResult: typeof trinsicUpdateResult,\r\n              fromRecords: true\r\n            ]\r\n          )\r\n        );\r\n      }\r\n\r\n      return updateHints;\r\n    },\r\n    (checkOption) => {\r\n      const [ignoreMutation] = checkOption<string[] | null>('updating.ignoreMutation');\r\n      const [attributes, attributesChanged] = checkOption<string[] | null>('updating.attributes');\r\n      const [elementEvents, elementEventsChanged] = checkOption<Array<[string, string]> | null>(\r\n        'updating.elementEvents'\r\n      );\r\n      const [debounceValue, debounceChanged] = checkOption<Array<number> | number | null>(\r\n        'updating.debounce'\r\n      );\r\n      const updateContentMutationObserver = elementEventsChanged || attributesChanged;\r\n      const ignoreMutationFromOptions = (mutation: MutationRecord) =>\r\n        isFunction(ignoreMutation) && ignoreMutation(mutation);\r\n\r\n      if (updateContentMutationObserver) {\r\n        if (contentMutationObserver) {\r\n          contentMutationObserver[1](); // update\r\n          contentMutationObserver[0](); // destroy\r\n        }\r\n        contentMutationObserver = createDOMObserver(\r\n          _content || _viewport,\r\n          true,\r\n          onContentMutation,\r\n          {\r\n            _styleChangingAttributes: contentMutationObserverAttr.concat(attributes || []),\r\n            _attributes: contentMutationObserverAttr.concat(attributes || []),\r\n            _eventContentChange: elementEvents,\r\n            _nestedTargetSelector: hostSelector,\r\n            _ignoreContentChange: (mutation, isNestedTarget) => {\r\n              const { target, attributeName } = mutation;\r\n              const ignore =\r\n                !isNestedTarget && attributeName\r\n                  ? liesBetween(target, hostSelector, viewportSelector)\r\n                  : false;\r\n              return (\r\n                ignore ||\r\n                !!closest(target, `.${classNameScrollbar}`) || // ignore explicitely all scrollbar elements\r\n                !!ignoreMutationFromOptions(mutation)\r\n              );\r\n            },\r\n          }\r\n        );\r\n      }\r\n\r\n      if (debounceChanged) {\r\n        structureSetupUpdateWithDebouncedAdaptiveUpdateHints._flush();\r\n        if (isArray(debounceValue)) {\r\n          const timeout = debounceValue[0];\r\n          const maxWait = debounceValue[1];\r\n          debounceTimeout = isNumber(timeout) ? timeout : false;\r\n          debounceMaxDelay = isNumber(maxWait) ? maxWait : false;\r\n        } else if (isNumber(debounceValue)) {\r\n          debounceTimeout = debounceValue;\r\n          debounceMaxDelay = false;\r\n        } else {\r\n          debounceTimeout = false;\r\n          debounceMaxDelay = false;\r\n        }\r\n      }\r\n    },\r\n  ];\r\n};\r\n","import { createEventListenerHub, isEmptyObject, keys } from 'support';\r\nimport { createState, createOptionCheck } from 'setups/setups';\r\nimport { createStructureSetupElements } from 'setups/structureSetup/structureSetup.elements';\r\nimport { createStructureSetupUpdate } from 'setups/structureSetup/structureSetup.update';\r\nimport { createStructureSetupObservers } from 'setups/structureSetup/structureSetup.observers';\r\nimport type { StructureSetupUpdateHints } from 'setups/structureSetup/structureSetup.update';\r\nimport type { StructureSetupElementsObj } from 'setups/structureSetup/structureSetup.elements';\r\nimport type { TRBL, XY, EventListener } from 'support';\r\nimport type { Options, ReadonlyOSOptions } from 'options';\r\nimport type { Setup } from 'setups';\r\nimport type { InitializationTarget } from 'initialization';\r\nimport type { PartialOptions, StyleObject, OverflowStyle } from 'typings';\r\n\r\nexport interface StructureSetupState {\r\n  _padding: TRBL;\r\n  _paddingAbsolute: boolean;\r\n  _viewportPaddingStyle: StyleObject;\r\n  _overflowEdge: XY<number>;\r\n  _overflowAmount: XY<number>;\r\n  _overflowStyle: XY<OverflowStyle>;\r\n  _hasOverflow: XY<boolean>;\r\n  _heightIntrinsic: boolean;\r\n  _directionIsRTL: boolean;\r\n}\r\n\r\nexport interface StructureSetupStaticState {\r\n  _elements: StructureSetupElementsObj;\r\n  _appendElements: () => void;\r\n  _addOnUpdatedListener: (listener: EventListener<StructureSetupEventMap, 'u'>) => void;\r\n}\r\n\r\ntype StructureSetupEventMap = {\r\n  u: [\r\n    updateHints: StructureSetupUpdateHints,\r\n    changedOptions: PartialOptions<Options>,\r\n    force: boolean\r\n  ];\r\n};\r\n\r\nconst initialXYNumber = { x: 0, y: 0 };\r\nconst initialStructureSetupUpdateState: StructureSetupState = {\r\n  _padding: {\r\n    t: 0,\r\n    r: 0,\r\n    b: 0,\r\n    l: 0,\r\n  },\r\n  _paddingAbsolute: false,\r\n  _viewportPaddingStyle: {\r\n    marginRight: 0,\r\n    marginBottom: 0,\r\n    marginLeft: 0,\r\n    paddingTop: 0,\r\n    paddingRight: 0,\r\n    paddingBottom: 0,\r\n    paddingLeft: 0,\r\n  },\r\n  _overflowEdge: initialXYNumber,\r\n  _overflowAmount: initialXYNumber,\r\n  _overflowStyle: {\r\n    x: 'hidden',\r\n    y: 'hidden',\r\n  },\r\n  _hasOverflow: {\r\n    x: false,\r\n    y: false,\r\n  },\r\n  _heightIntrinsic: false,\r\n  _directionIsRTL: false,\r\n};\r\n\r\nexport const createStructureSetup = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOSOptions\r\n): Setup<StructureSetupState, StructureSetupStaticState> => {\r\n  const checkOptionsFallback = createOptionCheck(options, {});\r\n  const state = createState(initialStructureSetupUpdateState);\r\n  const [addEvent, removeEvent, triggerEvent] = createEventListenerHub<StructureSetupEventMap>();\r\n  const [getState] = state;\r\n  const [elements, appendElements, destroyElements] = createStructureSetupElements(target);\r\n  const updateStructure = createStructureSetupUpdate(elements, state);\r\n  const triggerUpdateEvent: (...args: StructureSetupEventMap['u']) => void = (\r\n    updateHints,\r\n    changedOptions,\r\n    force\r\n  ) => {\r\n    const truthyUpdateHints = keys(updateHints).some((key) => updateHints[key]);\r\n\r\n    if (truthyUpdateHints || !isEmptyObject(changedOptions) || force) {\r\n      triggerEvent('u', [updateHints, changedOptions, force]);\r\n    }\r\n  };\r\n  const [destroyObservers, updateObservers, updateObserversOptions] = createStructureSetupObservers(\r\n    elements,\r\n    state,\r\n    (updateHints) => {\r\n      triggerUpdateEvent(updateStructure(checkOptionsFallback, updateHints), {}, false);\r\n    }\r\n  );\r\n\r\n  const structureSetupState = getState.bind(0) as (() => StructureSetupState) &\r\n    StructureSetupStaticState;\r\n  structureSetupState._addOnUpdatedListener = (listener) => {\r\n    addEvent('u', listener);\r\n  };\r\n  structureSetupState._appendElements = appendElements;\r\n  structureSetupState._elements = elements;\r\n\r\n  return [\r\n    (changedOptions, force?) => {\r\n      const checkOption = createOptionCheck(options, changedOptions, force);\r\n      updateObserversOptions(checkOption);\r\n      triggerUpdateEvent(\r\n        updateStructure(checkOption, updateObservers(), force),\r\n        changedOptions,\r\n        !!force\r\n      );\r\n    },\r\n    structureSetupState,\r\n    () => {\r\n      removeEvent();\r\n      destroyObservers();\r\n      destroyElements();\r\n    },\r\n  ];\r\n};\r\n","import {\r\n  addClass,\r\n  appendChildren,\r\n  createDiv,\r\n  each,\r\n  isEmptyArray,\r\n  on,\r\n  push,\r\n  removeClass,\r\n  removeElements,\r\n  runEachAndClear,\r\n  setT,\r\n  stopPropagation,\r\n} from 'support';\r\nimport {\r\n  classNameScrollbar,\r\n  classNameScrollbarHorizontal,\r\n  classNameScrollbarVertical,\r\n  classNameScrollbarTrack,\r\n  classNameScrollbarHandle,\r\n  classNamesScrollbarInteraction,\r\n  classNamesScrollbarTransitionless,\r\n} from 'classnames';\r\nimport { getEnvironment } from 'environment';\r\nimport { dynamicInitializationElement as generalDynamicInitializationElement } from 'initialization';\r\nimport type { InitializationTarget } from 'initialization';\r\nimport type { StructureSetupElementsObj } from 'setups/structureSetup/structureSetup.elements';\r\nimport type {\r\n  ScrollbarsInitialization,\r\n  ScrollbarsInitializationStrategy,\r\n  ScrollbarsDynamicInitializationElement,\r\n} from 'setups/scrollbarsSetup/scrollbarsSetup.initialization';\r\n\r\nexport interface ScrollbarStructure {\r\n  _scrollbar: HTMLElement;\r\n  _track: HTMLElement;\r\n  _handle: HTMLElement;\r\n}\r\n\r\nexport interface ScrollbarsSetupElement {\r\n  _scrollbarStructures: ScrollbarStructure[];\r\n  _clone: () => ScrollbarStructure;\r\n  _addRemoveClass: (classNames: string, add?: boolean) => void;\r\n  // _removeClass: (classNames: string) => void;\r\n  /*\r\n  _addEventListener: () => void;\r\n  _removeEventListener: () => void;\r\n  */\r\n}\r\n\r\nexport interface ScrollbarsSetupElementsObj {\r\n  _horizontal: ScrollbarsSetupElement;\r\n  _vertical: ScrollbarsSetupElement;\r\n}\r\n\r\nexport type ScrollbarsSetupElements = [\r\n  elements: ScrollbarsSetupElementsObj,\r\n  appendElements: () => void,\r\n  destroy: () => void\r\n];\r\n\r\nconst interactionStartEventNames = 'touchstart mouseenter';\r\nconst interactionEndEventNames = 'touchend touchcancel mouseleave';\r\nconst stopRootClickPropagation = (scrollbar: HTMLElement, documentElm: Document) =>\r\n  on(\r\n    scrollbar,\r\n    'mousedown',\r\n    on.bind(0, documentElm, 'click', stopPropagation, { _once: true, _capture: true }),\r\n    { _capture: true }\r\n  );\r\n\r\nexport const createScrollbarsSetupElements = (\r\n  target: InitializationTarget,\r\n  structureSetupElements: StructureSetupElementsObj\r\n): ScrollbarsSetupElements => {\r\n  const { _getInitializationStrategy } = getEnvironment();\r\n  const { _scrollbarsSlot: environmentScrollbarSlot } =\r\n    _getInitializationStrategy() as ScrollbarsInitializationStrategy;\r\n  const { _documentElm, _target, _host, _viewport, _targetIsElm } = structureSetupElements;\r\n  const initializationScrollbarSlot =\r\n    !_targetIsElm && (target as ScrollbarsInitialization).scrollbarsSlot;\r\n  const evaluatedScrollbarSlot =\r\n    generalDynamicInitializationElement<ScrollbarsDynamicInitializationElement>(\r\n      [_target, _host, _viewport],\r\n      () => _host,\r\n      environmentScrollbarSlot,\r\n      initializationScrollbarSlot\r\n    );\r\n  const scrollbarsAddRemoveClass = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    classNames: string,\r\n    add?: boolean\r\n  ) => {\r\n    const action = add ? addClass : removeClass;\r\n    each(scrollbarStructures, (scrollbarStructure) => {\r\n      action(scrollbarStructure._scrollbar, classNames);\r\n    });\r\n  };\r\n  const destroyFns: (() => void)[] = [];\r\n  const horizontalScrollbars: ScrollbarStructure[] = [];\r\n  const verticalScrollbars: ScrollbarStructure[] = [];\r\n\r\n  const addRemoveClassHorizontal = scrollbarsAddRemoveClass.bind(0, horizontalScrollbars);\r\n  const addRemoveClassVertical = scrollbarsAddRemoveClass.bind(0, verticalScrollbars);\r\n  const generateScrollbarDOM = (horizontal?: boolean): ScrollbarStructure => {\r\n    const scrollbarClassName = horizontal\r\n      ? classNameScrollbarHorizontal\r\n      : classNameScrollbarVertical;\r\n    const arrToPush = horizontal ? horizontalScrollbars : verticalScrollbars;\r\n    const transitionlessClass = isEmptyArray(arrToPush) ? classNamesScrollbarTransitionless : '';\r\n    const scrollbar = createDiv(\r\n      `${classNameScrollbar} ${scrollbarClassName} ${transitionlessClass} os-theme-dark`\r\n    );\r\n    const track = createDiv(classNameScrollbarTrack);\r\n    const handle = createDiv(classNameScrollbarHandle);\r\n    const result = {\r\n      _scrollbar: scrollbar,\r\n      _track: track,\r\n      _handle: handle,\r\n    };\r\n\r\n    appendChildren(scrollbar, track);\r\n    appendChildren(track, handle);\r\n\r\n    push(arrToPush, result);\r\n    push(destroyFns, [\r\n      removeElements.bind(0, scrollbar),\r\n      on(scrollbar, interactionStartEventNames, () => {\r\n        addRemoveClassHorizontal(classNamesScrollbarInteraction, true);\r\n        addRemoveClassVertical(classNamesScrollbarInteraction, true);\r\n      }),\r\n      on(scrollbar, interactionEndEventNames, () => {\r\n        addRemoveClassHorizontal(classNamesScrollbarInteraction);\r\n        addRemoveClassVertical(classNamesScrollbarInteraction);\r\n      }),\r\n      stopRootClickPropagation(scrollbar, _documentElm),\r\n    ]);\r\n\r\n    return result;\r\n  };\r\n  const generateHorizontalScrollbarStructure = generateScrollbarDOM.bind(0, true);\r\n  const generateVerticalScrollbarStructure = generateScrollbarDOM.bind(0, false);\r\n  const appendElements = () => {\r\n    appendChildren(evaluatedScrollbarSlot, horizontalScrollbars[0]._scrollbar);\r\n    appendChildren(evaluatedScrollbarSlot, verticalScrollbars[0]._scrollbar);\r\n\r\n    setT(() => {\r\n      addRemoveClassHorizontal(classNamesScrollbarTransitionless);\r\n      addRemoveClassVertical(classNamesScrollbarTransitionless);\r\n    }, 300);\r\n  };\r\n\r\n  generateHorizontalScrollbarStructure();\r\n  generateVerticalScrollbarStructure();\r\n\r\n  return [\r\n    {\r\n      _horizontal: {\r\n        _scrollbarStructures: horizontalScrollbars,\r\n        _clone: generateHorizontalScrollbarStructure,\r\n        _addRemoveClass: addRemoveClassHorizontal,\r\n      },\r\n      _vertical: {\r\n        _scrollbarStructures: verticalScrollbars,\r\n        _clone: generateVerticalScrollbarStructure,\r\n        _addRemoveClass: addRemoveClassVertical,\r\n      },\r\n    },\r\n    appendElements,\r\n    runEachAndClear.bind(0, destroyFns),\r\n  ];\r\n};\r\n","import { rAF, cAF, isFunction, on, runEachAndClear, setT, clearT } from 'support';\r\nimport { createState, createOptionCheck } from 'setups/setups';\r\nimport {\r\n  createScrollbarsSetupElements,\r\n  ScrollbarsSetupElementsObj,\r\n} from 'setups/scrollbarsSetup/scrollbarsSetup.elements';\r\nimport {\r\n  classNamesScrollbarVisible,\r\n  classNamesScrollbarCornerless,\r\n  classNamesScrollbarAutoHidden,\r\n} from 'classnames';\r\nimport type { StructureSetupUpdateHints } from 'setups/structureSetup/structureSetup.update';\r\nimport type {\r\n  ReadonlyOSOptions,\r\n  ScrollbarVisibilityBehavior,\r\n  ScrollbarAutoHideBehavior,\r\n} from 'options';\r\nimport type { Setup, StructureSetupState, StructureSetupStaticState } from 'setups';\r\nimport type { InitializationTarget } from 'initialization';\r\nimport type { OverflowStyle } from 'typings';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\r\nexport interface ScrollbarsSetupState {}\r\n\r\nexport interface ScrollbarsSetupStaticState {\r\n  _elements: ScrollbarsSetupElementsObj;\r\n  _appendElements: () => void;\r\n}\r\n\r\nconst createSelfCancelTimeout = (timeout?: number | (() => number)) => {\r\n  let id: number;\r\n  const setTFn = timeout ? setT : rAF!;\r\n  const clearTFn = timeout ? clearT : cAF!;\r\n  return [\r\n    (callback: () => any) => {\r\n      clearTFn(id);\r\n      // @ts-ignore\r\n      id = setTFn(callback, isFunction(timeout) ? timeout() : timeout);\r\n    },\r\n    () => clearTFn(id),\r\n  ] as [timeout: (callback: () => any) => void, clear: () => void];\r\n};\r\n\r\nexport const createScrollbarsSetup = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOSOptions,\r\n  structureSetupState: (() => StructureSetupState) & StructureSetupStaticState\r\n): Setup<ScrollbarsSetupState, ScrollbarsSetupStaticState, [StructureSetupUpdateHints]> => {\r\n  let globalAutoHideDelay = 0;\r\n  let autoHideIsMove: boolean;\r\n  let autoHideIsLeave: boolean;\r\n  let autoHideNotNever: boolean;\r\n  let mouseInHost: boolean;\r\n  const state = createState({});\r\n  const [getState] = state;\r\n  const [requestMouseMoveAnimationFrame, cancelMouseMoveAnimationFrame] = createSelfCancelTimeout();\r\n  const [requestScrollAnimationFrame, cancelScrollAnimationFrame] = createSelfCancelTimeout();\r\n  const [scrollTimeout, clearScrollTimeout] = createSelfCancelTimeout(100);\r\n  const [auotHideMoveTimeout, clearAutoHideTimeout] = createSelfCancelTimeout(100);\r\n  const [auotHideTimeout, clearAutoTimeout] = createSelfCancelTimeout(() => globalAutoHideDelay);\r\n  const [elements, appendElements, destroyElements] = createScrollbarsSetupElements(\r\n    target,\r\n    structureSetupState._elements\r\n  );\r\n  const { _host, _viewport } = structureSetupState._elements;\r\n  const { _horizontal, _vertical } = elements;\r\n  const { _addRemoveClass: addRemoveClassHorizontal } = _horizontal;\r\n  const { _addRemoveClass: addRemoveClassVertical } = _vertical;\r\n  const manageScrollbarsAutoHide = (removeAutoHide: boolean, delayless?: boolean) => {\r\n    clearAutoTimeout();\r\n    if (removeAutoHide) {\r\n      addRemoveClassHorizontal(classNamesScrollbarAutoHidden);\r\n      addRemoveClassVertical(classNamesScrollbarAutoHidden);\r\n    } else {\r\n      const hide = () => {\r\n        addRemoveClassHorizontal(classNamesScrollbarAutoHidden, true);\r\n        addRemoveClassVertical(classNamesScrollbarAutoHidden, true);\r\n      };\r\n      if (globalAutoHideDelay > 0 && !delayless) {\r\n        auotHideTimeout(hide);\r\n      } else {\r\n        hide();\r\n      }\r\n    }\r\n  };\r\n  const onHostMouseEnter = () => {\r\n    mouseInHost = autoHideIsLeave;\r\n    mouseInHost && manageScrollbarsAutoHide(true);\r\n  };\r\n  const destroyFns: (() => void)[] = [\r\n    clearScrollTimeout,\r\n    clearAutoTimeout,\r\n    clearAutoHideTimeout,\r\n    cancelScrollAnimationFrame,\r\n    cancelMouseMoveAnimationFrame,\r\n    destroyElements,\r\n\r\n    on(_host, 'mouseover', onHostMouseEnter, { _once: true }),\r\n    on(_host, 'mouseenter', onHostMouseEnter),\r\n    on(_host, 'mouseleave', () => {\r\n      mouseInHost = false;\r\n      autoHideIsLeave && manageScrollbarsAutoHide(false);\r\n    }),\r\n    on(_host, 'mousemove', () => {\r\n      autoHideIsMove &&\r\n        requestMouseMoveAnimationFrame(() => {\r\n          clearScrollTimeout();\r\n          manageScrollbarsAutoHide(true);\r\n          auotHideMoveTimeout(() => {\r\n            autoHideIsMove && manageScrollbarsAutoHide(false);\r\n          });\r\n        });\r\n    }),\r\n    on(_viewport, 'scroll', () => {\r\n      autoHideNotNever &&\r\n        requestScrollAnimationFrame(() => {\r\n          manageScrollbarsAutoHide(true);\r\n          scrollTimeout(() => {\r\n            autoHideNotNever && !mouseInHost && manageScrollbarsAutoHide(false);\r\n          });\r\n        });\r\n    }),\r\n  ];\r\n  const scrollbarsSetupState = getState.bind(0) as (() => ScrollbarsSetupState) &\r\n    ScrollbarsSetupStaticState;\r\n  scrollbarsSetupState._elements = elements;\r\n  scrollbarsSetupState._appendElements = appendElements;\r\n\r\n  return [\r\n    (changedOptions, force, structureUpdateHints) => {\r\n      const { _overflowEdgeChanged, _overflowAmountChanged, _overflowStyleChanged } =\r\n        structureUpdateHints;\r\n      const checkOption = createOptionCheck(options, changedOptions, force);\r\n\r\n      const [visibility, visibilityChanged] =\r\n        checkOption<ScrollbarVisibilityBehavior>('scrollbars.visibility');\r\n      const [autoHide, autoHideChanged] =\r\n        checkOption<ScrollbarAutoHideBehavior>('scrollbars.autoHide');\r\n      const [autoHideDelay] = checkOption<number>('scrollbars.autoHideDelay');\r\n      const [dragScrolling, dragScrollingChanged] = checkOption<boolean>(\r\n        'scrollbars.dragScrolling'\r\n      );\r\n      const [touchSupport, touchSupportChanged] = checkOption<boolean>('scrollbars.touchSupport');\r\n\r\n      const updateHandleSize = _overflowEdgeChanged || _overflowAmountChanged;\r\n      const updateVisibility = _overflowStyleChanged || visibilityChanged;\r\n\r\n      const setScrollbarVisibility = (\r\n        overflowStyle: OverflowStyle,\r\n        addRemoveClass: (classNames: string, add?: boolean) => void\r\n      ) => {\r\n        const isVisible =\r\n          visibility === 'visible' || (visibility === 'auto' && overflowStyle === 'scroll');\r\n        addRemoveClass(classNamesScrollbarVisible, isVisible);\r\n        return isVisible;\r\n      };\r\n\r\n      globalAutoHideDelay = autoHideDelay;\r\n\r\n      if (updateVisibility) {\r\n        const { _overflowStyle } = structureSetupState();\r\n\r\n        const xVisible = setScrollbarVisibility(_overflowStyle.x, addRemoveClassHorizontal);\r\n        const yVisible = setScrollbarVisibility(_overflowStyle.y, addRemoveClassVertical);\r\n        const hasCorner = xVisible && yVisible;\r\n\r\n        addRemoveClassHorizontal(classNamesScrollbarCornerless, !hasCorner);\r\n        addRemoveClassVertical(classNamesScrollbarCornerless, !hasCorner);\r\n      }\r\n      if (autoHideChanged) {\r\n        autoHideIsMove = autoHide === 'move';\r\n        autoHideIsLeave = autoHide === 'leave';\r\n        autoHideNotNever = autoHide !== 'never';\r\n        manageScrollbarsAutoHide(!autoHideNotNever, true);\r\n      }\r\n    },\r\n    scrollbarsSetupState,\r\n    runEachAndClear.bind(0, destroyFns),\r\n  ];\r\n};\r\n","import { OverlayScrollbars } from 'overlayscrollbars';\r\n\r\nconst targets: Set<Element> = new Set();\r\nconst targetInstanceMap: WeakMap<Element, OverlayScrollbars> = new WeakMap();\r\n\r\n/**\r\n * Adds the given OverlayScrollbars instance to the given element.\r\n * @param target The element which is the target of the OverlayScrollbars instance.\r\n * @param osInstance The OverlayScrollbars instance.\r\n */\r\nexport const addInstance = (target: Element, osInstance: OverlayScrollbars): void => {\r\n  targetInstanceMap.set(target, osInstance);\r\n  targets.add(target);\r\n};\r\n\r\n/**\r\n * Removes a OverlayScrollbars instance from the given element.\r\n * @param target The element from which its OverlayScrollbars instance shall be removed.\r\n */\r\nexport const removeInstance = (target: Element): void => {\r\n  targetInstanceMap.delete(target);\r\n  targets.delete(target);\r\n};\r\n\r\n/**\r\n * Gets the OverlayScrollbars from the given element or undefined if it doesn't have one.\r\n * @param target The element of which its OverlayScrollbars instance shall be get.\r\n */\r\nexport const getInstance = (target: Element): OverlayScrollbars | undefined =>\r\n  targetInstanceMap.get(target);\r\n\r\n/**\r\n * Gets a Map which represents all active OverayScrollbars instances.\r\n * The Key is the element and the value is the instance.\r\n */\r\nexport const allInstances = (): ReadonlyMap<Element, OverlayScrollbars> => {\r\n  const validTargetInstanceMap: Map<Element, OverlayScrollbars> = new Map();\r\n\r\n  targets.forEach((target: Element) => {\r\n    /* istanbul ignore else */\r\n    if (targetInstanceMap.has(target)) {\r\n      validTargetInstanceMap.set(target, targetInstanceMap.get(target)!);\r\n    }\r\n  });\r\n\r\n  targets.clear();\r\n\r\n  validTargetInstanceMap.forEach((instance: OverlayScrollbars, validTarget: Element) => {\r\n    targets.add(validTarget);\r\n  });\r\n\r\n  return validTargetInstanceMap;\r\n};\r\n","import {\r\n  assignDeep,\r\n  isEmptyObject,\r\n  each,\r\n  isFunction,\r\n  keys,\r\n  isHTMLElement,\r\n  XY,\r\n  TRBL,\r\n  createEventListenerHub,\r\n} from 'support';\r\nimport { createStructureSetup, createScrollbarsSetup } from 'setups';\r\nimport { getOptionsDiff, Options, ReadonlyOSOptions } from 'options';\r\nimport { getEnvironment } from 'environment';\r\nimport {\r\n  getPlugins,\r\n  addPlugin,\r\n  optionsValidationPluginName,\r\n  Plugin,\r\n  OptionsValidationPluginInstance,\r\n} from 'plugins';\r\nimport { addInstance, getInstance, removeInstance } from 'instances';\r\nimport type { PartialOptions, OverflowStyle } from 'typings';\r\nimport type {\r\n  InitializationTarget,\r\n  InitializationTargetObject,\r\n  InitializationStrategy,\r\n} from 'initialization';\r\nimport type {\r\n  InitialEventListeners as GeneralInitialEventListeners,\r\n  EventListener as GeneralEventListener,\r\n} from 'support/eventListeners';\r\n\r\nexport interface OverlayScrollbarsStatic {\r\n  (\r\n    target: InitializationTarget | InitializationTargetObject,\r\n    options?: PartialOptions<Options>,\r\n    eventListeners?: GeneralInitialEventListeners<EventListenerMap>\r\n  ): OverlayScrollbars;\r\n\r\n  plugin(plugin: Plugin | Plugin[]): void;\r\n  env(): Environment;\r\n}\r\n\r\nexport interface Environment {\r\n  scrollbarsSize: XY<number>;\r\n  scrollbarsOverlaid: XY<boolean>;\r\n  scrollbarsHiding: boolean;\r\n  rtlScrollBehavior: { n: boolean; i: boolean };\r\n  flexboxGlue: boolean;\r\n  cssCustomProperties: boolean;\r\n  defaultInitializationStrategy: InitializationStrategy;\r\n  defaultDefaultOptions: Options;\r\n\r\n  getInitializationStrategy(): InitializationStrategy;\r\n  setInitializationStrategy(newInitializationStrategy: Partial<InitializationStrategy>): void;\r\n  getDefaultOptions(): Options;\r\n  setDefaultOptions(newDefaultOptions: PartialOptions<Options>): void;\r\n}\r\n\r\nexport interface State {\r\n  padding: TRBL;\r\n  paddingAbsolute: boolean;\r\n  overflowEdge: XY<number>;\r\n  overflowAmount: XY<number>;\r\n  overflowStyle: XY<OverflowStyle>;\r\n  hasOverflow: XY<boolean>;\r\n  destroyed: boolean;\r\n}\r\n\r\nexport interface Elements {\r\n  target: HTMLElement;\r\n  host: HTMLElement;\r\n  padding: HTMLElement;\r\n  viewport: HTMLElement;\r\n  content: HTMLElement;\r\n}\r\n\r\nexport interface OnUpdatedEventListenerArgs {\r\n  updateHints: {\r\n    sizeChanged: boolean;\r\n    directionChanged: boolean;\r\n    heightIntrinsicChanged: boolean;\r\n    overflowEdgeChanged: boolean;\r\n    overflowAmountChanged: boolean;\r\n    overflowStyleChanged: boolean;\r\n    hostMutation: boolean;\r\n    contentMutation: boolean;\r\n  };\r\n  changedOptions: PartialOptions<Options>;\r\n  force: boolean;\r\n}\r\n\r\nexport type EventListenerMap = {\r\n  /**\r\n   * Triggered after all elements are initialized and appended.\r\n   */\r\n  initialized: [instance: OverlayScrollbars];\r\n  /**\r\n   * Triggered after an update.\r\n   */\r\n  updated: [instance: OverlayScrollbars, onUpdatedArgs: OnUpdatedEventListenerArgs];\r\n  /**\r\n   * Triggered after all elements, observers and events are destroyed.\r\n   */\r\n  destroyed: [instance: OverlayScrollbars, withdrawn: boolean];\r\n};\r\n\r\nexport type InitialEventListeners = GeneralInitialEventListeners<EventListenerMap>;\r\n\r\nexport type EventListener<Name extends keyof EventListenerMap> = GeneralEventListener<\r\n  EventListenerMap,\r\n  Name\r\n>;\r\n\r\nexport interface OverlayScrollbars {\r\n  options(): Options;\r\n  options(newOptions?: PartialOptions<Options>): Options;\r\n\r\n  update(force?: boolean): OverlayScrollbars;\r\n\r\n  destroy(): void;\r\n\r\n  state(): State;\r\n\r\n  elements(): Elements;\r\n\r\n  on<Name extends keyof EventListenerMap>(name: Name, listener: EventListener<Name>): () => void;\r\n  on<Name extends keyof EventListenerMap>(name: Name, listener: EventListener<Name>[]): () => void;\r\n\r\n  off<Name extends keyof EventListenerMap>(name: Name, listener: EventListener<Name>): void;\r\n  off<Name extends keyof EventListenerMap>(name: Name, listener: EventListener<Name>[]): void;\r\n}\r\n\r\n/**\r\n * Notes:\r\n * Height intrinsic detection use \"content: true\" init strategy - or open ticket for custom height intrinsic observer\r\n */\r\n\r\nexport const OverlayScrollbars: OverlayScrollbarsStatic = (\r\n  target,\r\n  options?,\r\n  eventListeners?\r\n): OverlayScrollbars => {\r\n  let destroyed = false;\r\n  const {\r\n    _getDefaultOptions,\r\n    _nativeScrollbarsOverlaid: _nativeScrollbarIsOverlaid,\r\n    _addListener: addEnvListener,\r\n  } = getEnvironment();\r\n  const plugins = getPlugins();\r\n  const instanceTarget = isHTMLElement(target) ? target : target.target;\r\n  const potentialInstance = getInstance(instanceTarget);\r\n  if (potentialInstance) {\r\n    return potentialInstance;\r\n  }\r\n\r\n  const optionsValidationPlugin = plugins[\r\n    optionsValidationPluginName\r\n  ] as OptionsValidationPluginInstance;\r\n  const validateOptions = (newOptions?: PartialOptions<Options>) => {\r\n    const opts = newOptions || {};\r\n    const validate = optionsValidationPlugin && optionsValidationPlugin._;\r\n    return validate ? validate(opts, true) : opts;\r\n  };\r\n  const currentOptions: ReadonlyOSOptions = assignDeep(\r\n    {},\r\n    _getDefaultOptions(),\r\n    validateOptions(options)\r\n  );\r\n  const [addEvent, removeEvent, triggerEvent] = createEventListenerHub(eventListeners);\r\n  const [updateStructure, structureState, destroyStructure] = createStructureSetup(\r\n    target,\r\n    currentOptions\r\n  );\r\n  const [updateScrollbars, scrollbarsState, destroyScrollbars] = createScrollbarsSetup(\r\n    target,\r\n    currentOptions,\r\n    structureState\r\n  );\r\n  const update = (changedOptions: PartialOptions<Options>, force?: boolean) => {\r\n    updateStructure(changedOptions, !!force);\r\n  };\r\n  const removeEnvListener = addEnvListener(update.bind(0, {}, true));\r\n  const destroy = (withdrawn?: boolean) => {\r\n    removeInstance(instanceTarget);\r\n    removeEnvListener();\r\n\r\n    destroyScrollbars();\r\n    destroyStructure();\r\n\r\n    destroyed = true;\r\n\r\n    // eslint-disable-next-line no-use-before-define\r\n    triggerEvent('destroyed', [instance, !!withdrawn]);\r\n    removeEvent();\r\n  };\r\n\r\n  const instance: OverlayScrollbars = {\r\n    options(newOptions?: PartialOptions<Options>) {\r\n      if (newOptions) {\r\n        const changedOptions = getOptionsDiff(currentOptions, validateOptions(newOptions));\r\n\r\n        if (!isEmptyObject(changedOptions)) {\r\n          assignDeep(currentOptions, changedOptions);\r\n          update(changedOptions);\r\n        }\r\n      }\r\n      return assignDeep({}, currentOptions);\r\n    },\r\n    on: addEvent,\r\n    off: (name, listener) => {\r\n      name && listener && removeEvent(name, listener as any);\r\n    },\r\n    state() {\r\n      const {\r\n        _overflowEdge,\r\n        _overflowAmount,\r\n        _overflowStyle,\r\n        _hasOverflow,\r\n        _padding,\r\n        _paddingAbsolute,\r\n      } = structureState();\r\n      return assignDeep(\r\n        {},\r\n        {\r\n          overflowEdge: _overflowEdge,\r\n          overflowAmount: _overflowAmount,\r\n          overflowStyle: _overflowStyle,\r\n          hasOverflow: _hasOverflow,\r\n          padding: _padding,\r\n          paddingAbsolute: _paddingAbsolute,\r\n          destroyed,\r\n        }\r\n      );\r\n    },\r\n    elements() {\r\n      const { _target, _host, _padding, _viewport, _content } = structureState._elements;\r\n      return assignDeep(\r\n        {},\r\n        {\r\n          target: _target,\r\n          host: _host,\r\n          padding: _padding || _viewport,\r\n          viewport: _viewport,\r\n          content: _content || _viewport,\r\n        }\r\n      );\r\n    },\r\n    update(force?: boolean) {\r\n      update({}, force);\r\n      return instance;\r\n    },\r\n    destroy: destroy.bind(0),\r\n  };\r\n\r\n  structureState._addOnUpdatedListener((updateHints, changedOptions, force: boolean) => {\r\n    updateScrollbars(changedOptions, force, updateHints);\r\n  });\r\n\r\n  each(keys(plugins), (pluginName) => {\r\n    const pluginInstance = plugins[pluginName];\r\n    if (isFunction(pluginInstance)) {\r\n      pluginInstance(OverlayScrollbars, instance);\r\n    }\r\n  });\r\n\r\n  if (\r\n    _nativeScrollbarIsOverlaid.x &&\r\n    _nativeScrollbarIsOverlaid.y &&\r\n    !currentOptions.nativeScrollbarsOverlaid.initialize\r\n  ) {\r\n    destroy(true);\r\n    return instance;\r\n  }\r\n\r\n  structureState._appendElements();\r\n  scrollbarsState._appendElements();\r\n\r\n  addInstance(instanceTarget, instance);\r\n  triggerEvent('initialized', [instance]);\r\n\r\n  structureState._addOnUpdatedListener((updateHints, changedOptions, force) => {\r\n    const {\r\n      _sizeChanged,\r\n      _directionChanged,\r\n      _heightIntrinsicChanged,\r\n      _overflowEdgeChanged,\r\n      _overflowAmountChanged,\r\n      _overflowStyleChanged,\r\n      _contentMutation,\r\n      _hostMutation,\r\n    } = updateHints;\r\n\r\n    triggerEvent('updated', [\r\n      instance,\r\n      {\r\n        updateHints: {\r\n          sizeChanged: _sizeChanged,\r\n          directionChanged: _directionChanged,\r\n          heightIntrinsicChanged: _heightIntrinsicChanged,\r\n          overflowEdgeChanged: _overflowEdgeChanged,\r\n          overflowAmountChanged: _overflowAmountChanged,\r\n          overflowStyleChanged: _overflowStyleChanged,\r\n          contentMutation: _contentMutation,\r\n          hostMutation: _hostMutation,\r\n        },\r\n        changedOptions,\r\n        force,\r\n      },\r\n    ]);\r\n  });\r\n\r\n  return instance.update(true);\r\n};\r\n\r\nOverlayScrollbars.plugin = addPlugin;\r\nOverlayScrollbars.env = () => {\r\n  const {\r\n    _nativeScrollbarsSize,\r\n    _nativeScrollbarsOverlaid,\r\n    _nativeScrollbarsHiding,\r\n    _rtlScrollBehavior,\r\n    _flexboxGlue,\r\n    _cssCustomProperties,\r\n    _defaultInitializationStrategy,\r\n    _defaultDefaultOptions,\r\n    _getInitializationStrategy,\r\n    _setInitializationStrategy,\r\n    _getDefaultOptions,\r\n    _setDefaultOptions,\r\n  } = getEnvironment();\r\n  return assignDeep(\r\n    {},\r\n    {\r\n      scrollbarsSize: _nativeScrollbarsSize,\r\n      scrollbarsOverlaid: _nativeScrollbarsOverlaid,\r\n      scrollbarsHiding: _nativeScrollbarsHiding,\r\n      rtlScrollBehavior: _rtlScrollBehavior,\r\n      flexboxGlue: _flexboxGlue,\r\n      cssCustomProperties: _cssCustomProperties,\r\n      defaultInitializationStrategy: _defaultInitializationStrategy,\r\n      defaultDefaultOptions: _defaultDefaultOptions,\r\n\r\n      getInitializationStrategy: _getInitializationStrategy,\r\n      setInitializationStrategy: _setInitializationStrategy,\r\n      getDefaultOptions: _getDefaultOptions,\r\n      setDefaultOptions: _setDefaultOptions,\r\n    }\r\n  );\r\n};\r\n"],"names":["each","source","callback","isArrayLike","i","length","Object","keys","key","style","elm","styles","getSingleStyle","isString","getStyles","isArray","getStylesResult","computedStyle","window","getComputedStyle","getCSSVal","reduce","result","setCSSVal","createCache","options","update","u","_initialValue","_","_equal","g","_alwaysUpdateValues","_value","_previous","cacheUpdateContextual","newValue","force","curr","newVal","changed","cacheUpdateIsolated","getCurrentCache","ElementNodeType","Node","ELEMENT_NODE","toString","hasOwnProperty","prototype","isUndefined","obj","undefined","isNull","type","call","replace","toLowerCase","isNumber","isBoolean","isFunction","Array","isObject","lengthCorrectFormat","isPlainObject","cstr","ctor","ctorProto","hasOwnConstructor","hasIsPrototypeOf","isHTMLElement","instanceofObj","HTMLElement","nodeType","isElement","Element","indexOf","arr","item","fromIndex","push","array","items","arrayIsSingleItem","apply","from","original","Set","forEach","value","isEmptyArray","runEachAndClear","args","keep","runFn","fn","prop","assignDeep","target","object1","object2","object3","object4","object5","object6","sources","copy","copyIsArray","src","clone","isEmptyObject","name","getSetProp","topLeft","fallback","attr","attrName","getAttribute","setAttribute","attrClass","add","currValues","currValuesSet","split","join","trim","hasAttrClass","has","removeAttr","removeAttribute","scrollLeft","scrollTop","elmPrototype","find","selector","rootElm","document","querySelectorAll","findFirst","querySelector","is","matches","msMatchesSelector","contents","childNodes","parent","parentElement","closest","closestFn","liesBetween","highBoundarySelector","deepBoundarySelector","closestHighBoundaryElm","closestDeepBoundaryElm","before","parentElm","preferredAnchor","insertedElms","anchor","fragment","createDocumentFragment","insertedElm","previousSibling","appendChild","firstChild","nextSibling","insertBefore","appendChildren","node","children","prependChildren","insertedNodes","insertAfter","removeElements","nodes","e","removeChild","createDiv","classNames","div","createElement","createDOM","html","createdDiv","innerHTML","firstLetterToUpper","str","charAt","toUpperCase","slice","getDummyStyle","cssPrefixes","jsPrefixes","jsCache","cssCache","cssProperty","uppercasedName","elmStyle","prefix","prefixWithoutDashes","resultPossibilities","resultPossibility","jsAPI","MutationObserverConstructor","IntersectionObserverConstructor","ResizeObserverConstructor","cAF","rAF","setT","setTimeout","clearT","clearTimeout","rnothtmlwhite","classListAction","className","action","classList","clazz","classes","match","hasClass","contains","removeClass","remove","addClass","bind","equal","a","b","props","propMutation","compareA","compareB","equalWH","equalXY","equalTRBL","equalBCRWH","round","Math","noop","debounce","functionToDebounce","maxTimeoutId","prevArguments","latestArguments","clear","v","_timeout","p","_maxDelay","m","_mergeParams","invokeFunctionToDebounce","this","mergeParms","flush","debouncedFn","arguments","finalTimeout","hasTimeout","finalMaxWait","hasMaxWait","setTimeoutFn","clearTimeoutFn","mergeParamsResult","invokedArgs","boundInvoke","timeoutId","_flush","cssNumber","opacity","zindex","parseToZeroOrNumber","toFloat","num","parseFloat","parseInt","adaptCSSVal","val","getPropertyValue","setProperty","topRightBottomLeft","propertyPrefix","propertySuffix","finalPrefix","finalSuffix","top","right","bottom","left","t","r","l","zeroObj","w","h","windowSize","innerWidth","innerHeight","offsetSize","offsetWidth","offsetHeight","clientSize","clientWidth","clientHeight","scrollSize","scrollWidth","scrollHeight","fractionalSize","cssHeight","cssWidth","getBoundingClientRect","passiveEventsSupport","supportPassiveEvents","addEventListener","defineProperty","get","splitEventNames","eventNames","off","listener","capture","eventName","removeEventListener","on","_ref","doSupportPassiveEvents","passive","_passive","_capture","once","_once","offListeners","nativeOptions","finalListener","evt","stopPropagation","x","y","absoluteCoordinates","rect","pageYOffset","pageXOffset","manageListener","createEventListenerHub","initialEventListeners","events","Map","removeEvent","eventSet","currListener","addEvent","set","triggerEvent","event","initialListenerKeys","getPropByPath","path","o","createOptionCheck","changedOptions","createState","initialState","state","newState","classNameEnvironment","classNameEnvironmentFlexboxGlue","classNameEnvironmentFlexboxGlueMax","dataAttributeHost","dataAttributeHostOverflowX","dataAttributeHostOverflowY","dataValueHostOverflowVisible","dataValueHostViewportScrollbarStyling","classNamePadding","classNameViewport","classNameViewportArrange","classNameContent","classNameViewportScrollbarStyling","classNameOverflowVisible","classNameSizeObserver","classNameSizeObserverAppear","classNameSizeObserverListener","classNameSizeObserverListenerScroll","classNameSizeObserverListenerItem","classNameSizeObserverListenerItemFinal","classNameTrinsicObserver","classNameScrollbar","classNameScrollbarHorizontal","classNameScrollbarVertical","classNameScrollbarTrack","classNameScrollbarHandle","classNamesScrollbarVisible","classNamesScrollbarCornerless","classNamesScrollbarTransitionless","classNamesScrollbarInteraction","classNamesScrollbarAutoHidden","opsStringify","JSON","stringify","Error","defaultOptions","paddingAbsolute","updating","elementEvents","attributes","ignoreMutation","overflow","nativeScrollbarsOverlaid","show","initialize","scrollbars","visibility","autoHide","autoHideDelay","dragScroll","clickScroll","touch","getOptionsDiff","currOptions","newOptions","diff","optionsKeys","concat","optionKey","currOptionValue","newOptionValue","isDiff","pluginRegistry","getPlugins","addPlugin","addedPlugin","plugin","pluginName","_extends","module","assign","exports","__esModule","optionsTemplateTypes","boolean","number","string","object","function","null","validateRecursive","template","doWriteErrors","propPath","validatedOptions","optionsCopy","filter","optionsValue","templateValue","templateIsComplex","propPrefix","validated","foreign","isValid","errorEnumStrings","errorPossibleTypes","optionsValueType","templateValueArr","currTemplateType","typeString","isEnumString","enumStringSplit","possibility","console","warn","validateOptions","numberAllowedValues","oTypes","booleanAllowedValues","arrayNullValues","overflowAllowedValues","scrollbarsVisibilityAllowedValues","scrollbarsAutoHideAllowedValues","optionsTemplate","optionsValidationPluginName","optionsValidationPlugin","scrollAmount","scrollEventName","sizeObserverPluginName","sizeObserverPlugin","listenerElement","onSizeChangedCallback","observeAppearChange","observerElementChildren","observerElementChildrenRoot","shrinkElement","lastChild","expandElement","expandElementChild","cacheSize","currSize","isDirty","rAFId","reset","onResized","appear","onScroll","scrollEvent","width","height","contentArrangeCounter","abs","getWindowDPR","dDPI","screen","deviceXDPI","sDPI","logicalXDPI","devicePixelRatio","diffBiggerThanOne","valOne","valTwo","absValOne","absValTwo","scrollbarsHidingPluginName","scrollbarsHidingPlugin","_createUniqueViewportArrangeElement","env","_nativeScrollbarsHiding","_nativeScrollbarStyling","_nativeScrollbarsOverlaid","_nativeScrollbarIsOverlaid","L","_cssCustomProperties","create","_overflowUpdateSegment","doViewportArrange","flexboxGlue","viewport","viewportArrange","getState","getViewportOverflowState","hideNativeScrollbars","arrangeViewport","viewportOverflowState","viewportScrollSize","sizeFraction","directionIsRTL","M","_viewportPaddingStyle","R","_scrollbarsHideOffset","D","_scrollbarsHideOffsetArrange","arrangeX","arrangeY","hideOffsetX","hideOffsetY","viewportArrangeHorizontalPaddingKey","viewportArrangeHorizontalPaddingValue","viewportArrangeVerticalPaddingValue","paddingTop","fractionalContentWidth","fractionalContenHeight","arrangeSize","sheet","cssRules","insertRule","ruleStyle","undoViewportArrange","showNativeOverlaidScrollbars","finalViewportOverflowState","viewportPaddingStyle","finalPaddingStyle","assignProps","prevStyle","_envWindowZoom","size","dpr","envInstance","updateNativeScrollbarSizeCache","sizeNew","deltaSize","deltaAbsSize","deltaAbsRatio","dprNew","deltaIsBigger","difference","dprChanged","isZoom","scrollbarSize","scrollbarSizeChanged","_nativeScrollbarsSize","environmentInstance","getNativeScrollbarSize","body","measureElm","measureElmChild","cSize","oSize","fSize","getNativeScrollbarsHiding","testElm","revertClass","ex","getRtlScrollBehavior","childElm","strHidden","overflowX","overflowY","direction","parentOffset","childOffset","childOffsetAfterScroll","n","getFlexboxGlue","revertFbxGlue","minOffsetsizeParent","minOffsetsize","supportsMin","revertFbxGlueMax","maxOffsetsizeParent","maxOffsetsize","supportsMax","createEnvironment","envDOM","envElm","envChildElm","getNativeScrollbarSizeCache","nativeScrollbarsSize","nativeScrollbarsHiding","initializationStrategy","_padding","_content","defaultDefaultOptions","_rtlScrollBehavior","_flexboxGlue","_addListener","_getInitializationStrategy","_setInitializationStrategy","newInitializationStrategy","_getDefaultOptions","_setDefaultOptions","newDefaultOptions","_defaultInitializationStrategy","_defaultDefaultOptions","resizeFn","getEnvironment","resolveInitialization","staticInitializationElement","defaultStaticInitializationElement","staticInitializationElementStrategy","staticInitializationElementValue","dynamicInitializationElement","defaultDynamicInitializationElement","dynamicInitializationElementStrategy","dynamicInitializationElementValue","createNewDiv","unwrap","addDataAttrHost","createStructureSetupElements","G","T","createUniqueViewportArrangeElement","_host","hostInitializationStrategy","_viewport","viewportInitializationStrategy","paddingInitializationStrategy","contentInitializationStrategy","targetIsElm","targetStructureInitialization","targetElement","isTextarea","isBody","ownerDocument","bodyElm","wnd","defaultView","singleElmSupport","generalStaticInitializationElement","generalDynamicInitializationElement","viewportElement","potentialViewport","viewportIsTarget","evaluatedTargetObj","_target","host","padding","content","_viewportArrange","_windowElm","_documentElm","_htmlElm","_bodyElm","_isTextarea","_isBody","_targetIsElm","_viewportIsTarget","_viewportHasClass","attributeClassName","_viewportAddRemoveClass","generatedElements","elementIsGenerated","tt","K","k","Z","B","nt","destroyFns","isTextareaHostGenerated","targetContents","contentSlot","appendElements","removeHostDataAttr","removePaddingClass","removeViewportClass","removeContentClass","createTrinsicUpdateSegment","structureSetupElements","updateHints","Y","_t","_heightIntrinsic","gt","_heightIntrinsicChanged","heightIntrinsicChanged","_sizeChanged","_contentMutation","createPaddingUpdateSegment","setState","_isSingleElm","updatePaddingCache","currentPaddingCache","checkOption","paddingChanged","wt","_directionIsRTL","ht","vt","bt","_directionChanged","paddingAbsoluteChanged","contentMutation","paddingStyleChanged","paddingRelative","paddingHorizontal","paddingVertical","paddingStyle","marginRight","marginBottom","marginLeft","viewportStyle","paddingRight","paddingBottom","paddingLeft","_paddingAbsolute","_paddingStyleChanged","max","max0","strVisible","overlaidScrollbarsHideOffset","whCacheOptions","xyCacheOptions","getOverflowAmount","viewportClientSize","tollerance","amount","conditionalClass","overflowIsVisible","overflowBehavior","createOverflowUpdateSegment","ut","ft","V","P","updateSizeFraction","getCurrentSizeFraction","updateViewportScrollSizeCache","getCurrentViewportScrollSizeCache","updateOverflowAmountCache","getCurrentOverflowAmountCache","updateOverflowEdge","getCurrentOverflowEdgeCache","updateOverflowStyleCache","fixFlexboxGlue","heightIntrinsic","yt","xt","_overflowScroll","hostClientSize","isContentBox","subtractXScrollbar","viewportStyleObj","arrangeHideOffset","getStatePerAxis","styleKey","isOverlaid","nativeScrollbarSize","overflowStyle","objectPrefferedOverflowStyle","overflowScroll","nonScrollbarStylingHideOffset","scrollbarsHideOffset","scrollbarsHideOffsetArrange","xOverflowStyle","xOverflowScroll","xScrollbarsHideOffset","xScrollbarsHideOffsetArrange","yOverflowStyle","yOverflowScroll","yScrollbarsHideOffset","yScrollbarsHideOffsetArrange","_overflowStyle","setViewportOverflowState","hasOverflow","overflowOption","setAxisOverflowStyle","behavior","hasOverflowAxis","overflowVisible","overflowVisibleBehavior","visibleBehaviorX","visibleBehaviorY","horizontalMarginKey","viewportHorizontalPaddingKey","horizontalMarginValue","verticalMarginValue","horizontalPaddingValue","verticalPaddingValue","$t","_hostMutation","St","showNativeOverlaidScrollbarsOption","showNativeOverlaidScrollbarsChanged","overflowChanged","adjustFlexboxGlue","overflowXVisible","overflowYVisible","sizeFractionCache","viewportScrollSizeCache","overflowAmuntCache","overflowEdgeCache","preMeasureViewportOverflowState","redoViewportArrange","undoViewportArrangeOverflowState","sizeFractionChanged","viewportScrollSizeChanged","viewportclientSize","arrangedViewportScrollSize","arrangedViewportClientSize","overflowAmountScrollSize","overflowAmountClientSize","overflowEdge","overflowEdgeChanged","overflowAmount","overflowAmountChanged","removeClipping","viewportArranged","overflowStyleChanged","_overflowEdge","_overflowAmount","_hasOverflow","_overflowStyleChanged","_overflowEdgeChanged","_overflowAmountChanged","prepareUpdateHints","leading","adaptive","finalAdaptive","objKeys","leadingValue","adaptiveValue","createStructureSetupUpdate","updateSegments","initialUpdateHints","adjustScrollOffset","scrollOffsetX","scrollOffsetY","adaptivedUpdateHints","updateSegment","getElmDirectionIsRTL","domRectHasDimensions","createSizeObserver","_direction","observeDirectionChange","_appear","rtlScrollBehavior","baseElements","sizeObserver","getIsDirectionRTL","updateResizeObserverContentRectCache","currVal","onSizeChangedCallbackProxy","sizeChangedContext","isResizeObserverCall","hasDirectionCache","skip","doDirectionScroll","currRContentRect","prevContentRect","pop","contentRect","hasDimensions","hadDimensions","rtl","_directionIsRTLCache","appearCallback","directionIsRTLCache","resizeObserverInstance","observe","disconnect","pluginAppearCallback","pluginOffListeners","updateDirectionIsRTLCache","directionIsRTLCacheValues","directionIsRTLChanged","isHeightIntrinsic","ioEntryOrSize","isIntersecting","intersectionRatio","createTrinsicObserver","onTrinsicChangedCallback","intersectionObserverInstance","trinsicObserver","updateHeightIntrinsicCache","triggerOnTrinsicChangedCallback","updateValue","fromRecords","intersectionObserverCallback","entries","root","onSizeChanged","newSize","takeRecords","createEventContentChange","eventContentChange","map","destroyed","destroy","updateElements","getElements","eventElmList","elements","entry","entryEventNames","entryOff","delete","WeakMap","createDOMObserver","isContentObserver","isConnected","Mt","_attributes","Rt","_styleChangingAttributes","Dt","_eventContentChange","jt","_nestedTargetSelector","Vt","_ignoreTargetChange","kt","_ignoreContentChange","debouncedEventContentChange","destroyEventContentChange","updateEventContentChangeElements","finalAttributes","finalStyleChangingAttributes","observedAttributes","observerCallback","mutations","ignoreTargetChange","ignoreContentChange","targetChangedAttrs","totalAddedNodes","targetStyleChanged","contentChanged","childListChanged","mutation","attributeName","mutationTarget","oldValue","addedNodes","isAttributesType","isChildListType","targetIsMutationTarget","attributeValue","attributeChanged","styleChangingAttrChanged","notOnlyAttrChanged","contentAttrChanged","isNestedTarget","baseAssertion","contentFinalChanged","mutationObserver","attributeOldValue","attributeFilter","subtree","childList","characterData","records","hostSelector","viewportSelector","viewportAttrsFromTarget","baseStyleChangingAttrsTextarea","baseStyleChangingAttrs","createStructureSetupObservers","structureSetupUpdate","debounceTimeout","debounceMaxDelay","contentMutationObserver","rt","dt","updateContentSizeCache","contentScroll","viewportScroll","fractional","contentMutationObserverAttr","structureSetupUpdateWithDebouncedAdaptiveUpdateHints","prev","prevObj","currObj","updateViewportAttrsFromHost","attribute","hostAttr","onTrinsicChanged","heightIntrinsicCache","updateFn","directionChanged","onContentMutation","contentChangedTroughEvent","contentSizeChanged","onHostMutation","destroySizeObserver","destroyHostMutationObserver","updateHostMutationObserver","viewportIsTargetResizeObserver","hostUpdateResult","contentUpdateResult","trinsicUpdateResult","attributesChanged","elementEventsChanged","debounceValue","debounceChanged","updateContentMutationObserver","ignoreMutationFromOptions","ignore","timeout","maxWait","initialXYNumber","initialStructureSetupUpdateState","createStructureSetup","checkOptionsFallback","destroyElements","updateStructure","triggerUpdateEvent","truthyUpdateHints","some","destroyObservers","updateObservers","updateObserversOptions","structureSetupState","_addOnUpdatedListener","_appendElements","_elements","interactionStartEventNames","interactionEndEventNames","stopRootClickPropagation","scrollbar","documentElm","createScrollbarsSetupElements","_scrollbarsSlot","environmentScrollbarSlot","st","lt","initializationScrollbarSlot","scrollbarsSlot","evaluatedScrollbarSlot","scrollbarsAddRemoveClass","scrollbarStructures","scrollbarStructure","_scrollbar","horizontalScrollbars","verticalScrollbars","addRemoveClassHorizontal","addRemoveClassVertical","generateScrollbarDOM","horizontal","scrollbarClassName","arrToPush","transitionlessClass","track","handle","_track","_handle","generateHorizontalScrollbarStructure","generateVerticalScrollbarStructure","_horizontal","_scrollbarStructures","_clone","_addRemoveClass","_vertical","createSelfCancelTimeout","id","setTFn","clearTFn","createScrollbarsSetup","globalAutoHideDelay","autoHideIsMove","autoHideIsLeave","autoHideNotNever","mouseInHost","requestMouseMoveAnimationFrame","cancelMouseMoveAnimationFrame","requestScrollAnimationFrame","cancelScrollAnimationFrame","scrollTimeout","clearScrollTimeout","auotHideMoveTimeout","clearAutoHideTimeout","auotHideTimeout","clearAutoTimeout","Wt","Zt","manageScrollbarsAutoHide","removeAutoHide","delayless","hide","onHostMouseEnter","scrollbarsSetupState","structureUpdateHints","Tt","Et","It","visibilityChanged","autoHideChanged","updateVisibility","setScrollbarVisibility","addRemoveClass","isVisible","Ct","xVisible","yVisible","hasCorner","targets","targetInstanceMap","addInstance","osInstance","removeInstance","getInstance","OverlayScrollbars","eventListeners","U","addEnvListener","plugins","instanceTarget","potentialInstance","opts","validate","currentOptions","structureState","destroyStructure","updateScrollbars","scrollbarsState","destroyScrollbars","removeEnvListener","withdrawn","instance","Ot","zt","At","pluginInstance","sizeChanged","hostMutation","F","X","J","N","W","scrollbarsSize","scrollbarsOverlaid","scrollbarsHiding","cssCustomProperties","defaultInitializationStrategy","getInitializationStrategy","setInitializationStrategy","getDefaultOptions","setDefaultOptions"],"mappings":"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"}