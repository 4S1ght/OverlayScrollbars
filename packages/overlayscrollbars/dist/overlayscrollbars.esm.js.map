{"version":3,"file":"overlayscrollbars.esm.js","sources":["../src/support/cache.ts","../src/support/utils/types.ts","../src/support/utils/array.ts","../src/support/utils/object.ts","../src/support/dom/attribute.ts","../src/support/dom/style.ts","../src/support/dom/traversal.ts","../src/support/dom/manipulation.ts","../src/support/dom/create.ts","../src/support/compatibility/vendors.ts","../src/support/compatibility/apis.ts","../src/support/dom/class.ts","../src/support/utils/equal.ts","../src/support/utils/function.ts","../src/support/dom/dimensions.ts","../src/support/dom/events.ts","../src/support/dom/offset.ts","../src/support/eventListeners.ts","../src/setups/setups.ts","../src/classnames.ts","../src/options.ts","../src/environment.ts","../src/initialization.ts","../src/setups/structureSetup/structureSetup.elements.ts","../src/setups/structureSetup/updateSegments/trinsicUpdateSegment.ts","../src/setups/structureSetup/updateSegments/paddingUpdateSegment.ts","../src/setups/structureSetup/updateSegments/overflowUpdateSegment.ts","../src/setups/structureSetup/structureSetup.update.ts","../src/observers/sizeObserver.ts","../src/observers/trinsicObserver.ts","../src/observers/domObserver.ts","../src/setups/structureSetup/structureSetup.observers.ts","../src/setups/structureSetup/structureSetup.ts","../src/setups/scrollbarsSetup/scrollbarsSetup.elements.ts","../src/setups/scrollbarsSetup/scrollbarsSetup.ts","../src/plugins/plugins.ts","../src/plugins/optionsValidation/validation.ts","../src/plugins/optionsValidation/optionsValidation.ts","../src/instances.ts","../src/overlayscrollbars.ts"],"sourcesContent":["export interface CacheOptions<Value> {\r\n  // initial value of _value.\r\n  _initialValue: Value;\r\n  // Custom comparison function if shallow compare isn't enough. Returns true if nothing changed.\r\n  _equal?: EqualCachePropFunction<Value>;\r\n  // If true always updates _value and _previous, otherwise they update only when they changed.\r\n  _alwaysUpdateValues?: boolean;\r\n}\r\n\r\nexport type CacheValues<T> = [value: T, changed: boolean, previous?: T];\r\n\r\nexport type EqualCachePropFunction<Value> = (currentVal: Value, newVal: Value) => boolean;\r\n\r\nexport type CacheUpdater<Value> = (current: Value, previous?: Value) => Value;\r\n\r\nexport type UpdateCacheContextual<Value> = (newValue: Value, force?: boolean) => CacheValues<Value>;\r\n\r\nexport type UpdateCache<Value> = (force?: boolean) => CacheValues<Value>;\r\n\r\nexport type GetCurrentCache<Value> = (force?: boolean) => CacheValues<Value>;\r\n\r\nexport type Cache<Value> = [UpdateCache<Value>, GetCurrentCache<Value>];\r\n\r\nexport type CacheContextual<Value> = [UpdateCacheContextual<Value>, GetCurrentCache<Value>];\r\n\r\nexport function createCache<Value>(options: CacheOptions<Value>): CacheContextual<Value>;\r\nexport function createCache<Value>(\r\n  options: CacheOptions<Value>,\r\n  update: CacheUpdater<Value>\r\n): Cache<Value>;\r\nexport function createCache<Value>(\r\n  options: CacheOptions<Value>,\r\n  update?: CacheUpdater<Value>\r\n): CacheContextual<Value> | Cache<Value> {\r\n  const { _initialValue, _equal, _alwaysUpdateValues } = options;\r\n  let _value: Value = _initialValue;\r\n  let _previous: Value | undefined;\r\n\r\n  const cacheUpdateContextual: UpdateCacheContextual<Value> = (newValue, force?) => {\r\n    const curr = _value;\r\n\r\n    const newVal = newValue;\r\n    const changed = force || (_equal ? !_equal(curr, newVal) : curr !== newVal);\r\n\r\n    if (changed || _alwaysUpdateValues) {\r\n      _value = newVal;\r\n      _previous = curr;\r\n    }\r\n\r\n    return [_value, changed, _previous];\r\n  };\r\n  const cacheUpdateIsolated: UpdateCache<Value> = (force?) =>\r\n    cacheUpdateContextual(update!(_value, _previous), force);\r\n\r\n  const getCurrentCache: GetCurrentCache<Value> = (force?: boolean) => [\r\n    _value,\r\n    !!force, // changed\r\n    _previous,\r\n  ];\r\n\r\n  return [update ? cacheUpdateIsolated : cacheUpdateContextual, getCurrentCache] as\r\n    | CacheContextual<Value>\r\n    | Cache<Value>;\r\n}\r\n","import { PlainObject } from 'typings';\r\n\r\nconst ElementNodeType = Node.ELEMENT_NODE;\r\nconst { toString, hasOwnProperty } = Object.prototype;\r\n\r\nexport function isUndefined(obj: any): obj is undefined {\r\n  return obj === undefined;\r\n}\r\n\r\nexport function isNull(obj: any): obj is null {\r\n  return obj === null;\r\n}\r\n\r\nexport const type: (obj: any) => string = (obj) =>\r\n  isUndefined(obj) || isNull(obj)\r\n    ? `${obj}`\r\n    : toString\r\n        .call(obj)\r\n        .replace(/^\\[object (.+)\\]$/, '$1')\r\n        .toLowerCase();\r\n\r\nexport function isNumber(obj: any): obj is number {\r\n  return typeof obj === 'number';\r\n}\r\n\r\nexport function isString(obj: any): obj is string {\r\n  return typeof obj === 'string';\r\n}\r\n\r\nexport function isBoolean(obj: any): obj is boolean {\r\n  return typeof obj === 'boolean';\r\n}\r\n\r\nexport function isFunction(obj: any): obj is (...args: any[]) => any {\r\n  return typeof obj === 'function';\r\n}\r\n\r\nexport function isArray(obj: any): obj is Array<any> {\r\n  return Array.isArray(obj);\r\n}\r\n\r\nexport function isObject(obj: any): boolean {\r\n  return typeof obj === 'object' && !isArray(obj) && !isNull(obj);\r\n}\r\n\r\n/**\r\n * Returns true if the given object is array like, false otherwise.\r\n * @param obj The Object\r\n */\r\nexport function isArrayLike<T extends PlainObject = any>(obj: any): obj is ArrayLike<T> {\r\n  const length = !!obj && obj.length;\r\n  const lengthCorrectFormat = isNumber(length) && length > -1 && length % 1 == 0; // eslint-disable-line eqeqeq\r\n\r\n  return isArray(obj) || (!isFunction(obj) && lengthCorrectFormat)\r\n    ? length > 0 && isObject(obj)\r\n      ? length - 1 in obj\r\n      : true\r\n    : false;\r\n}\r\n\r\n/**\r\n * Returns true if the given object is a \"plain\" (e.g. { key: value }) object, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport function isPlainObject<T = any>(obj: any): obj is PlainObject<T> {\r\n  if (!obj || !isObject(obj) || type(obj) !== 'object') return false;\r\n\r\n  let key;\r\n  const cstr = 'constructor';\r\n  const ctor = obj[cstr];\r\n  const ctorProto = ctor && ctor.prototype;\r\n  const hasOwnConstructor = hasOwnProperty.call(obj, cstr);\r\n  const hasIsPrototypeOf = ctorProto && hasOwnProperty.call(ctorProto, 'isPrototypeOf');\r\n\r\n  if (ctor && !hasOwnConstructor && !hasIsPrototypeOf) {\r\n    return false;\r\n  }\r\n\r\n  /* eslint-disable no-restricted-syntax */\r\n  for (key in obj) {\r\n    /**/\r\n  }\r\n  /* eslint-enable */\r\n\r\n  return isUndefined(key) || hasOwnProperty.call(obj, key);\r\n}\r\n\r\n/**\r\n * Checks whether the given object is a HTMLElement.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport function isHTMLElement(obj: any): obj is HTMLElement {\r\n  const instanceofObj = window.HTMLElement;\r\n  return obj\r\n    ? instanceofObj\r\n      ? obj instanceof instanceofObj\r\n      : obj.nodeType === ElementNodeType\r\n    : false;\r\n}\r\n\r\n/**\r\n * Checks whether the given object is a Element.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport function isElement(obj: any): obj is Element {\r\n  const instanceofObj = window.Element;\r\n  return obj\r\n    ? instanceofObj\r\n      ? obj instanceof instanceofObj\r\n      : obj.nodeType === ElementNodeType\r\n    : false;\r\n}\r\n","import { isArrayLike, isString } from 'support/utils/types';\r\nimport { PlainObject } from 'typings';\r\n\r\ntype RunEachItem = ((...args: any) => any | any[]) | null | undefined;\r\n\r\n/**\r\n * Iterates through a array or object\r\n * @param arrayLikeOrObject The array or object through which shall be iterated.\r\n * @param callback The function which is responsible for the iteration.\r\n * If the function returns true its treated like a \"continue\" statement.\r\n * If the function returns false its treated like a \"break\" statement.\r\n */\r\nexport function each<T>(\r\n  array: Array<T> | ReadonlyArray<T>,\r\n  callback: (value: T, indexOrKey: number, source: Array<T>) => boolean | unknown\r\n): Array<T> | ReadonlyArray<T>;\r\nexport function each<T>(\r\n  array: Array<T> | ReadonlyArray<T> | null | undefined,\r\n  callback: (value: T, indexOrKey: number, source: Array<T>) => boolean | unknown\r\n): Array<T> | ReadonlyArray<T> | null | undefined;\r\nexport function each<T>(\r\n  arrayLikeObject: ArrayLike<T>,\r\n  callback: (value: T, indexOrKey: number, source: ArrayLike<T>) => boolean | unknown\r\n): ArrayLike<T>;\r\nexport function each<T>(\r\n  arrayLikeObject: ArrayLike<T> | null | undefined,\r\n  callback: (value: T, indexOrKey: number, source: ArrayLike<T>) => boolean | unknown\r\n): ArrayLike<T> | null | undefined;\r\nexport function each(\r\n  obj: PlainObject,\r\n  callback: (value: any, indexOrKey: string, source: PlainObject) => boolean | unknown\r\n): PlainObject;\r\nexport function each(\r\n  obj: PlainObject | null | undefined,\r\n  callback: (value: any, indexOrKey: string, source: PlainObject) => boolean | unknown\r\n): PlainObject | null | undefined;\r\nexport function each<T>(\r\n  source: ArrayLike<T> | PlainObject | null | undefined,\r\n  callback: (value: T, indexOrKey: any, source: any) => boolean | unknown\r\n): Array<T> | ReadonlyArray<T> | ArrayLike<T> | PlainObject | null | undefined {\r\n  if (isArrayLike(source)) {\r\n    for (let i = 0; i < source.length; i++) {\r\n      if (callback(source[i], i, source) === false) {\r\n        break;\r\n      }\r\n    }\r\n  } else if (source) {\r\n    each(Object.keys(source), (key) => callback(source[key], key, source));\r\n  }\r\n  return source;\r\n}\r\n\r\n/**\r\n * Returns the index of the given inside the given array or -1 if the given item isn't part of the given array.\r\n * @param arr The array.\r\n * @param item The item.\r\n * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\r\n */\r\nexport const indexOf = <T = any>(arr: T[], item: T, fromIndex?: number): number =>\r\n  arr.indexOf(item, fromIndex);\r\n\r\n/**\r\n * Pushesh all given items into the given array and returns it.\r\n * @param array The array the items shall be pushed into.\r\n * @param items The items which shall be pushed into the array.\r\n */\r\nexport const push = <T>(array: T[], items: T | ArrayLike<T>, arrayIsSingleItem?: boolean): T[] => {\r\n  !arrayIsSingleItem && !isString(items) && isArrayLike(items)\r\n    ? Array.prototype.push.apply(array, items as T[])\r\n    : array.push(items as T);\r\n  return array;\r\n};\r\n\r\n/**\r\n * Creates a shallow-copied Array instance from an array-like or iterable object.\r\n * @param arr The object from which the array instance shall be created.\r\n */\r\nexport const from = <T = any>(arr?: ArrayLike<T> | Set<T>) => {\r\n  if (Array.from && arr) {\r\n    return Array.from(arr);\r\n  }\r\n  const result: T[] = [];\r\n\r\n  if (arr instanceof Set) {\r\n    arr.forEach((value) => {\r\n      push(result, value);\r\n    });\r\n  } else {\r\n    each(arr, (elm) => {\r\n      push(result, elm);\r\n    });\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Check whether the passed array is empty.\r\n * @param array The array which shall be checked.\r\n */\r\nexport const isEmptyArray = (array: any[] | null | undefined): boolean =>\r\n  !!array && array.length === 0;\r\n\r\n/**\r\n * Calls all functions in the passed array/set of functions.\r\n * @param arr The array filled with function which shall be called.\r\n * @param p1 The first param.\r\n */\r\nexport const runEach = (arr: ArrayLike<RunEachItem> | Set<RunEachItem>, args?: any[]): void => {\r\n  // eslint-disable-next-line prefer-spread\r\n  const runFn = (fn: RunEachItem) => fn && fn.apply(undefined, args || []);\r\n  if (arr instanceof Set) {\r\n    arr.forEach(runFn);\r\n  } else {\r\n    each(arr, runFn);\r\n  }\r\n};\r\n","import { isArray, isFunction, isPlainObject, isNull } from 'support/utils/types';\r\nimport { each } from 'support/utils/array';\r\n\r\n/**\r\n * Determines whether the passed object has a property with the passed name.\r\n * @param obj The object.\r\n * @param prop The name of the property.\r\n */\r\nexport const hasOwnProperty = (obj: any, prop: string | number | symbol): boolean =>\r\n  Object.prototype.hasOwnProperty.call(obj, prop);\r\n\r\n/**\r\n * Returns the names of the enumerable string properties and methods of an object.\r\n * @param obj The object of which the properties shall be returned.\r\n */\r\nexport const keys = (obj: any): Array<string> => (obj ? Object.keys(obj) : []);\r\n\r\n// https://github.com/jquery/jquery/blob/master/src/core.js#L116\r\nexport function assignDeep<T, U>(target: T, object1: U): T & U;\r\nexport function assignDeep<T, U, V>(target: T, object1: U, object2: V): T & U & V;\r\nexport function assignDeep<T, U, V, W>(\r\n  target: T,\r\n  object1: U,\r\n  object2: V,\r\n  object3: W\r\n): T & U & V & W;\r\nexport function assignDeep<T, U, V, W, X>(\r\n  target: T,\r\n  object1: U,\r\n  object2: V,\r\n  object3: W,\r\n  object4: X\r\n): T & U & V & W & X;\r\nexport function assignDeep<T, U, V, W, X, Y>(\r\n  target: T,\r\n  object1: U,\r\n  object2: V,\r\n  object3: W,\r\n  object4: X,\r\n  object5: Y\r\n): T & U & V & W & X & Y;\r\nexport function assignDeep<T, U, V, W, X, Y, Z>(\r\n  target: T,\r\n  object1?: U,\r\n  object2?: V,\r\n  object3?: W,\r\n  object4?: X,\r\n  object5?: Y,\r\n  object6?: Z\r\n): T & U & V & W & X & Y & Z {\r\n  const sources: Array<any> = [object1, object2, object3, object4, object5, object6];\r\n\r\n  // Handle case when target is a string or something (possible in deep copy)\r\n  if ((typeof target !== 'object' || isNull(target)) && !isFunction(target)) {\r\n    target = {} as T;\r\n  }\r\n\r\n  each(sources, (source) => {\r\n    // Extend the base object\r\n    each(keys(source), (key) => {\r\n      const copy: any = source[key];\r\n\r\n      // Prevent Object.prototype pollution\r\n      // Prevent never-ending loop\r\n      if (target === copy) {\r\n        return true;\r\n      }\r\n\r\n      const copyIsArray = isArray(copy);\r\n\r\n      // Recurse if we're merging plain objects or arrays\r\n      if (copy && (isPlainObject(copy) || copyIsArray)) {\r\n        const src = target[key];\r\n        let clone: any = src;\r\n\r\n        // Ensure proper type for the source value\r\n        if (copyIsArray && !isArray(src)) {\r\n          clone = [];\r\n        } else if (!copyIsArray && !isPlainObject(src)) {\r\n          clone = {};\r\n        }\r\n\r\n        // Never move original objects, clone them\r\n        target[key] = assignDeep(clone, copy) as any;\r\n      } else {\r\n        target[key] = copy;\r\n      }\r\n    });\r\n  });\r\n\r\n  // Return the modified object\r\n  return target as any;\r\n}\r\n\r\n/**\r\n * Returns true if the given object is empty, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport function isEmptyObject(obj: any): boolean {\r\n  /* eslint-disable no-restricted-syntax, guard-for-in */\r\n  for (const name in obj) return false;\r\n  return true;\r\n  /* eslint-enable */\r\n}\r\n","import { from } from 'support/utils/array';\r\nimport { isUndefined } from 'support/utils/types';\r\n\r\ntype GetSetPropName = 'scrollLeft' | 'scrollTop' | 'value';\r\n\r\nfunction getSetProp(\r\n  topLeft: GetSetPropName,\r\n  fallback: number | string,\r\n  elm: HTMLElement | HTMLInputElement | false | null | undefined,\r\n  value?: number | string\r\n): number | string | void {\r\n  if (isUndefined(value)) {\r\n    return elm ? elm[topLeft] : fallback;\r\n  }\r\n  elm && (elm[topLeft] = value);\r\n}\r\n\r\n/**\r\n * Gets or sets a attribute with the given attribute of the given element depending whether the value attribute is given.\r\n * Returns null if the element has no attribute with the given name.\r\n * @param elm The element of which the attribute shall be get or set.\r\n * @param attrName The attribute name which shall be get or set.\r\n * @param value The value of the attribute which shall be set.\r\n */\r\nexport function attr(elm: HTMLElement | false | null | undefined, attrName: string): string | null;\r\nexport function attr(\r\n  elm: HTMLElement | false | null | undefined,\r\n  attrName: string,\r\n  value: string\r\n): void;\r\nexport function attr(\r\n  elm: HTMLElement | false | null | undefined,\r\n  attrName: string,\r\n  value?: string\r\n): string | null | void {\r\n  if (isUndefined(value)) {\r\n    return elm ? elm.getAttribute(attrName) : null;\r\n  }\r\n  elm && elm.setAttribute(attrName, value);\r\n}\r\n\r\nexport const attrClass = (\r\n  elm: HTMLElement | false | null | undefined,\r\n  attrName: string,\r\n  value: string,\r\n  add?: boolean\r\n) => {\r\n  const currValues = attr(elm, attrName) || '';\r\n  const currValuesSet = new Set(currValues.split(' '));\r\n  currValuesSet[add ? 'add' : 'delete'](value);\r\n\r\n  attr(elm, attrName, from(currValuesSet).join(' ').trim());\r\n};\r\n\r\nexport const hasAttrClass = (\r\n  elm: HTMLElement | false | null | undefined,\r\n  attrName: string,\r\n  value: string\r\n) => {\r\n  const currValues = attr(elm, attrName) || '';\r\n  const currValuesSet = new Set(currValues.split(' '));\r\n  return currValuesSet.has(value);\r\n};\r\n\r\n/**\r\n * Removes the given attribute from the given element.\r\n * @param elm The element of which the attribute shall be removed.\r\n * @param attrName The attribute name.\r\n */\r\nexport const removeAttr = (elm: Element | false | null | undefined, attrName: string): void => {\r\n  elm && elm.removeAttribute(attrName);\r\n};\r\n\r\n/**\r\n * Gets or sets the scrollLeft value of the given element depending whether the value attribute is given.\r\n * @param elm The element of which the scrollLeft value shall be get or set.\r\n * @param value The scrollLeft value which shall be set.\r\n */\r\nexport function scrollLeft(elm: HTMLElement | false | null | undefined): number;\r\nexport function scrollLeft(elm: HTMLElement | false | null | undefined, value: number): void;\r\nexport function scrollLeft(\r\n  elm: HTMLElement | false | null | undefined,\r\n  value?: number\r\n): number | void {\r\n  return getSetProp('scrollLeft', 0, elm, value) as number;\r\n}\r\n\r\n/**\r\n * Gets or sets the scrollTop value of the given element depending whether the value attribute is given.\r\n * @param elm The element of which the scrollTop value shall be get or set.\r\n * @param value The scrollTop value which shall be set.\r\n */\r\nexport function scrollTop(elm: HTMLElement | false | null | undefined): number;\r\nexport function scrollTop(elm: HTMLElement | false | null | undefined, value: number): void;\r\nexport function scrollTop(\r\n  elm: HTMLElement | false | null | undefined,\r\n  value?: number\r\n): number | void {\r\n  return getSetProp('scrollTop', 0, elm, value) as number;\r\n}\r\n\r\n/**\r\n * Gets or sets the value of the given input element depending whether the value attribute is given.\r\n * @param elm The input element of which the value shall be get or set.\r\n * @param value The value which shall be set.\r\n */\r\nexport function val(elm: HTMLInputElement | false | null | undefined): string;\r\nexport function val(elm: HTMLInputElement | false | null | undefined, value: string): void;\r\nexport function val(\r\n  elm: HTMLInputElement | false | null | undefined,\r\n  value?: string\r\n): string | void {\r\n  return getSetProp('value', '', elm, value) as string;\r\n}\r\n","import { each, keys } from 'support/utils';\r\nimport { isString, isNumber, isArray, isUndefined } from 'support/utils/types';\r\nimport { PlainObject, StyleObject } from 'typings';\r\n\r\nexport interface TRBL {\r\n  t: number;\r\n  r: number;\r\n  b: number;\r\n  l: number;\r\n}\r\n\r\nconst cssNumber = {\r\n  // animationiterationcount: 1,\r\n  // columncount: 1,\r\n  // fillopacity: 1,\r\n  // flexgrow: 1,\r\n  // flexshrink: 1,\r\n  // fontweight: 1,\r\n  // lineheight: 1,\r\n  // order: 1,\r\n  // orphans: 1,\r\n  // widows: 1,\r\n  // zoom: 1,\r\n  opacity: 1,\r\n  zindex: 1,\r\n};\r\n\r\nconst parseToZeroOrNumber = (value: string, toFloat?: boolean): number => {\r\n  /* istanbul ignore next */\r\n  const num = toFloat ? parseFloat(value) : parseInt(value, 10);\r\n  /* istanbul ignore next */\r\n  return Number.isNaN(num) ? 0 : num;\r\n};\r\nconst adaptCSSVal = (prop: string, val: string | number): string | number =>\r\n  !cssNumber[prop.toLowerCase()] && isNumber(val) ? `${val}px` : val;\r\nconst getCSSVal = (elm: HTMLElement, computedStyle: CSSStyleDeclaration, prop: string): string =>\r\n  /* istanbul ignore next */\r\n  computedStyle != null\r\n    ? computedStyle[prop] || computedStyle.getPropertyValue(prop)\r\n    : elm.style[prop];\r\nconst setCSSVal = (\r\n  elm: HTMLElement | false | null | undefined,\r\n  prop: string,\r\n  val: string | number\r\n): void => {\r\n  try {\r\n    if (elm) {\r\n      const { style: elmStyle } = elm;\r\n      if (!isUndefined(elmStyle[prop])) {\r\n        elmStyle[prop] = adaptCSSVal(prop, val);\r\n      } else {\r\n        elmStyle.setProperty(prop, val as string);\r\n      }\r\n    }\r\n  } catch (e) {}\r\n};\r\n\r\n/**\r\n * Gets or sets the passed styles to the passed element.\r\n * @param elm The element to which the styles shall be applied to / be read from.\r\n * @param styles The styles which shall be set or read.\r\n */\r\nexport function style<CustomCssProps>(\r\n  elm: HTMLElement | false | null | undefined,\r\n  styles: StyleObject<CustomCssProps>\r\n): void;\r\nexport function style<CustomCssProps>(\r\n  elm: HTMLElement | false | null | undefined,\r\n  styles: string\r\n): string;\r\nexport function style<CustomCssProps>(\r\n  elm: HTMLElement | false | null | undefined,\r\n  styles: Array<string> | string\r\n): { [key: string]: string };\r\nexport function style<CustomCssProps>(\r\n  elm: HTMLElement | false | null | undefined,\r\n  styles: StyleObject<CustomCssProps> | Array<string> | string\r\n): { [key: string]: string } | string | void {\r\n  const getSingleStyle = isString(styles);\r\n  const getStyles = isArray(styles) || getSingleStyle;\r\n\r\n  if (getStyles) {\r\n    let getStylesResult: string | PlainObject = getSingleStyle ? '' : {};\r\n    if (elm) {\r\n      const computedStyle: CSSStyleDeclaration = window.getComputedStyle(elm, null);\r\n      getStylesResult = getSingleStyle\r\n        ? getCSSVal(elm, computedStyle, styles as string)\r\n        : (styles as Array<string>).reduce((result, key) => {\r\n            result[key] = getCSSVal(elm, computedStyle, key as string);\r\n            return result;\r\n          }, getStylesResult);\r\n    }\r\n    return getStylesResult;\r\n  }\r\n  each(keys(styles), (key) => setCSSVal(elm, key, styles[key]));\r\n}\r\n\r\n/**\r\n * Hides the passed element (display: none).\r\n * @param elm The element which shall be hidden.\r\n */\r\nexport const hide = (elm: HTMLElement | false | null | undefined): void => {\r\n  style(elm, { display: 'none' });\r\n};\r\n\r\n/**\r\n * Shows the passed element (display: block).\r\n * @param elm The element which shall be shown.\r\n */\r\nexport const show = (elm: HTMLElement | false | null | undefined): void => {\r\n  style(elm, { display: 'block' });\r\n};\r\n\r\n/**\r\n * Returns the top right bottom left values of the passed css property.\r\n * @param elm The element of which the values shall be returned.\r\n * @param propertyPrefix The css property prefix. (e.g. \"border\")\r\n * @param propertySuffix The css property suffix. (e.g. \"width\")\r\n */\r\nexport const topRightBottomLeft = (\r\n  elm?: HTMLElement | false | null | undefined,\r\n  propertyPrefix?: string,\r\n  propertySuffix?: string\r\n): TRBL => {\r\n  const finalPrefix = propertyPrefix ? `${propertyPrefix}-` : '';\r\n  const finalSuffix = propertySuffix ? `-${propertySuffix}` : '';\r\n  const top = `${finalPrefix}top${finalSuffix}`;\r\n  const right = `${finalPrefix}right${finalSuffix}`;\r\n  const bottom = `${finalPrefix}bottom${finalSuffix}`;\r\n  const left = `${finalPrefix}left${finalSuffix}`;\r\n  const result = style(elm, [top, right, bottom, left]);\r\n  return {\r\n    t: parseToZeroOrNumber(result[top]),\r\n    r: parseToZeroOrNumber(result[right]),\r\n    b: parseToZeroOrNumber(result[bottom]),\r\n    l: parseToZeroOrNumber(result[left]),\r\n  };\r\n};\r\n","import { isElement } from 'support/utils/types';\r\nimport { push, from } from 'support/utils/array';\r\n\r\ntype InputElementType = Element | Node | false | null | undefined;\r\ntype OutputElementType = Element | null;\r\n\r\nconst elmPrototype = Element.prototype;\r\n\r\n/**\r\n * Find all elements with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nconst find = (selector: string, elm?: InputElementType): Element[] => {\r\n  const arr: Array<Element> = [];\r\n  const rootElm = elm ? (isElement(elm) ? elm : null) : document;\r\n\r\n  return rootElm ? push(arr, rootElm.querySelectorAll(selector)) : arr;\r\n};\r\n\r\n/**\r\n * Find the first element with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nconst findFirst = (selector: string, elm?: InputElementType): OutputElementType => {\r\n  const rootElm = elm ? (isElement(elm) ? elm : null) : document;\r\n\r\n  return rootElm ? rootElm.querySelector(selector) : null;\r\n};\r\n\r\n/**\r\n * Determines whether the passed element is matching with the passed selector.\r\n * @param elm The element which has to be compared with the passed selector.\r\n * @param selector The selector which has to be compared with the passed element. Additional selectors: ':visible' and ':hidden'.\r\n */\r\nconst is = (elm: InputElementType, selector: string): boolean => {\r\n  if (isElement(elm)) {\r\n    /* istanbul ignore next */\r\n    // eslint-disable-next-line\r\n    // @ts-ignore\r\n    const fn: (...args: any) => boolean = elmPrototype.matches || elmPrototype.msMatchesSelector;\r\n    return fn.call(elm, selector);\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * Returns the children (no text-nodes or comments) of the passed element which are matching the passed selector. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the children shall be returned.\r\n * @param selector The selector which must match with the children elements.\r\n */\r\nconst children = (elm: InputElementType, selector?: string): ReadonlyArray<Element> => {\r\n  const childs: Array<Element> = [];\r\n\r\n  return isElement(elm)\r\n    ? push(\r\n        childs,\r\n        from(elm.children).filter((child) => (selector ? is(child, selector) : child))\r\n      )\r\n    : childs;\r\n};\r\n\r\n/**\r\n * Returns the childNodes (incl. text-nodes or comments etc.) of the passed element. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the childNodes shall be returned.\r\n */\r\nconst contents = (elm: InputElementType): ReadonlyArray<ChildNode> =>\r\n  elm ? from(elm.childNodes) : [];\r\n\r\n/**\r\n * Returns the parent element of the passed element, or null if the passed element is null.\r\n * @param elm The element of which the parent element shall be returned.\r\n */\r\nconst parent = (elm: InputElementType): OutputElementType => (elm ? elm.parentElement : null);\r\n\r\nconst closest = (elm: InputElementType, selector: string): OutputElementType => {\r\n  if (isElement(elm)) {\r\n    const closestFn = elmPrototype.closest;\r\n    if (closestFn) {\r\n      return closestFn.call(elm, selector);\r\n    }\r\n\r\n    do {\r\n      if (is(elm, selector)) {\r\n        return elm as Element;\r\n      }\r\n      elm = parent(elm);\r\n    } while (elm);\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\n/**\r\n * Determines whether the given element lies between two selectors in the DOM.\r\n * @param elm The element.\r\n * @param highBoundarySelector The high boundary selector.\r\n * @param deepBoundarySelector The deep boundary selector.\r\n */\r\nconst liesBetween = (\r\n  elm: InputElementType,\r\n  highBoundarySelector: string,\r\n  deepBoundarySelector: string\r\n): boolean => {\r\n  const closestHighBoundaryElm = elm && closest(elm, highBoundarySelector);\r\n  const closestDeepBoundaryElm = elm && findFirst(deepBoundarySelector, closestHighBoundaryElm);\r\n\r\n  return closestHighBoundaryElm && closestDeepBoundaryElm\r\n    ? closestHighBoundaryElm === elm ||\r\n        closestDeepBoundaryElm === elm ||\r\n        closest(closest(elm, deepBoundarySelector), highBoundarySelector) !== closestHighBoundaryElm\r\n    : false;\r\n};\r\n\r\nexport { find, findFirst, is, children, contents, parent, liesBetween };\r\n","import { isArrayLike } from 'support/utils/types';\r\nimport { each, from } from 'support/utils/array';\r\nimport { parent } from 'support/dom/traversal';\r\n\r\ntype NodeCollection = ArrayLike<Node> | Node | false | null | undefined;\r\n\r\n/**\r\n * Inserts Nodes before the given preferredAnchor element.\r\n * @param parentElm The parent of the preferredAnchor element or the element which shall be the parent of the inserted Nodes.\r\n * @param preferredAnchor The element before which the Nodes shall be inserted or null if the elements shall be appended at the end.\r\n * @param insertedElms The Nodes which shall be inserted.\r\n */\r\nconst before = (\r\n  parentElm: Node | false | null | undefined,\r\n  preferredAnchor: Node | false | null | undefined,\r\n  insertedElms: NodeCollection\r\n): void => {\r\n  if (insertedElms) {\r\n    let anchor: Node | false | null | undefined = preferredAnchor;\r\n    let fragment: DocumentFragment | Node | null | undefined;\r\n\r\n    // parent must be defined\r\n    if (parentElm) {\r\n      if (isArrayLike(insertedElms)) {\r\n        fragment = document.createDocumentFragment();\r\n\r\n        // append all insertedElms to the fragment and if one of these is the anchor, change the anchor\r\n        each(insertedElms, (insertedElm) => {\r\n          if (insertedElm === anchor) {\r\n            anchor = insertedElm.previousSibling;\r\n          }\r\n          fragment!.appendChild(insertedElm);\r\n        });\r\n      } else {\r\n        fragment = insertedElms;\r\n      }\r\n\r\n      // if the preferred anchor isn't null set it to a valid anchor\r\n      if (preferredAnchor) {\r\n        if (!anchor) {\r\n          anchor = parentElm.firstChild;\r\n        } else if (anchor !== preferredAnchor) {\r\n          anchor = anchor.nextSibling;\r\n        }\r\n      }\r\n\r\n      parentElm.insertBefore(fragment, anchor || null);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Appends the given children at the end of the given Node.\r\n * @param node The Node to which the children shall be appended.\r\n * @param children The Nodes which shall be appended.\r\n */\r\nexport const appendChildren = (\r\n  node: Node | false | null | undefined,\r\n  children: NodeCollection\r\n): void => {\r\n  before(node, null, children);\r\n};\r\n\r\n/**\r\n * Prepends the given children at the start of the given Node.\r\n * @param node The Node to which the children shall be prepended.\r\n * @param children The Nodes which shall be prepended.\r\n */\r\nexport const prependChildren = (\r\n  node: Node | false | null | undefined,\r\n  children: NodeCollection\r\n): void => {\r\n  before(node, node && node.firstChild, children);\r\n};\r\n\r\n/**\r\n * Inserts the given Nodes before the given Node.\r\n * @param node The Node before which the given Nodes shall be inserted.\r\n * @param insertedNodes The Nodes which shall be inserted.\r\n */\r\nexport const insertBefore = (\r\n  node: Node | false | null | undefined,\r\n  insertedNodes: NodeCollection\r\n): void => {\r\n  before(parent(node), node, insertedNodes);\r\n};\r\n\r\n/**\r\n * Inserts the given Nodes after the given Node.\r\n * @param node The Node after which the given Nodes shall be inserted.\r\n * @param insertedNodes The Nodes which shall be inserted.\r\n */\r\nexport const insertAfter = (\r\n  node: Node | false | null | undefined,\r\n  insertedNodes: NodeCollection\r\n): void => {\r\n  before(parent(node), node && node.nextSibling, insertedNodes);\r\n};\r\n\r\n/**\r\n * Removes the given Nodes from their parent.\r\n * @param nodes The Nodes which shall be removed.\r\n */\r\nexport const removeElements = (nodes: NodeCollection): void => {\r\n  if (isArrayLike(nodes)) {\r\n    each(from(nodes), (e) => removeElements(e));\r\n  } else if (nodes) {\r\n    const parentElm = parent(nodes);\r\n    if (parentElm) {\r\n      parentElm.removeChild(nodes);\r\n    }\r\n  }\r\n};\r\n","import { each } from 'support/utils/array';\r\nimport { attr } from 'support/dom/attribute';\r\nimport { contents } from 'support/dom/traversal';\r\nimport { removeElements } from 'support/dom/manipulation';\r\n\r\n/**\r\n * Creates a div DOM node.\r\n */\r\nexport const createDiv = (classNames?: string): HTMLDivElement => {\r\n  const div = document.createElement('div');\r\n  if (classNames) {\r\n    attr(div, 'class', classNames);\r\n  }\r\n  return div;\r\n};\r\n\r\n/**\r\n * Creates DOM nodes modeled after the passed html string and returns the root dom nodes as a array.\r\n * @param html The html string after which the DOM nodes shall be created.\r\n */\r\nexport const createDOM = (html: string): ReadonlyArray<Node> => {\r\n  const createdDiv = createDiv();\r\n  createdDiv.innerHTML = html.trim();\r\n\r\n  return each(contents(createdDiv), (elm) => removeElements(elm));\r\n};\r\n","import { each } from 'support/utils/array';\r\nimport { hasOwnProperty } from 'support/utils/object';\r\nimport { createDiv } from 'support/dom/create';\r\n\r\nconst firstLetterToUpper = (str: string): string => str.charAt(0).toUpperCase() + str.slice(1);\r\nconst getDummyStyle = (): CSSStyleDeclaration => createDiv().style;\r\n\r\n// https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix\r\n\r\nexport const cssPrefixes: ReadonlyArray<string> = ['-webkit-', '-moz-', '-o-', '-ms-'];\r\nexport const jsPrefixes: ReadonlyArray<string> = [\r\n  'WebKit',\r\n  'Moz',\r\n  'O',\r\n  'MS',\r\n  'webkit',\r\n  'moz',\r\n  'o',\r\n  'ms',\r\n];\r\n\r\nexport const jsCache: { [key: string]: any } = {};\r\nexport const cssCache: { [key: string]: string } = {};\r\n\r\n/**\r\n * Gets the name of the given CSS property with vendor prefix if it isn't supported without it, or and empty string if unsupported.\r\n * @param name The name of the CSS property which shall be get.\r\n */\r\nexport const cssProperty = (name: string): string => {\r\n  let result: string | undefined = cssCache[name];\r\n\r\n  if (hasOwnProperty(cssCache, name)) {\r\n    return result;\r\n  }\r\n\r\n  const uppercasedName: string = firstLetterToUpper(name);\r\n  const elmStyle: CSSStyleDeclaration = getDummyStyle();\r\n\r\n  each(cssPrefixes, (prefix: string) => {\r\n    const prefixWithoutDashes: string = prefix.replace(/-/g, '');\r\n    const resultPossibilities: Array<string> = [\r\n      name, // transition\r\n      prefix + name, // -webkit-transition\r\n      prefixWithoutDashes + uppercasedName, // webkitTransition\r\n      firstLetterToUpper(prefixWithoutDashes) + uppercasedName, // WebkitTransition\r\n    ];\r\n\r\n    // eslint-disable-next-line no-return-assign\r\n    return !(result = resultPossibilities.find(\r\n      (resultPossibility: string) => elmStyle[resultPossibility] !== undefined\r\n    ));\r\n  });\r\n\r\n  // eslint-disable-next-line no-return-assign\r\n  return (cssCache[name] = result || '');\r\n};\r\n\r\n/**\r\n * Get the name of the given CSS property value(s), with vendor prefix if it isn't supported without it, or an empty string if no value is supported.\r\n * @param property The CSS property to which the CSS property value(s) belong.\r\n * @param values The value(s) separated by spaces which shall be get.\r\n * @param suffix A suffix which is added to each value in case the value is a function or something else more advanced.\r\n */\r\nexport const cssPropertyValue = (property: string, values: string, suffix?: string): string => {\r\n  const name = `${property} ${values}`;\r\n  let result: string | undefined = cssCache[name];\r\n\r\n  if (hasOwnProperty(cssCache, name)) {\r\n    return result;\r\n  }\r\n\r\n  const dummyStyle: CSSStyleDeclaration = getDummyStyle();\r\n  const possbleValues: Array<string> = values.split(' ');\r\n  const preparedSuffix: string = suffix || '';\r\n  const cssPrefixesWithFirstEmpty = [''].concat(cssPrefixes);\r\n\r\n  each(possbleValues, (possibleValue: string) => {\r\n    each(cssPrefixesWithFirstEmpty, (prefix: string) => {\r\n      const prop = prefix + possibleValue;\r\n      dummyStyle.cssText = `${property}:${prop}${preparedSuffix}`;\r\n      if (dummyStyle.length) {\r\n        result = prop;\r\n        return false;\r\n      }\r\n    });\r\n    return !result;\r\n  });\r\n\r\n  // eslint-disable-next-line no-return-assign\r\n  return (cssCache[name] = result || '');\r\n};\r\n\r\n/**\r\n * Get the requested JS function, object or constructor with vendor prefix if it isn't supported without or undefined if unsupported.\r\n * @param name The name of the JS function, object or constructor.\r\n */\r\nexport const jsAPI = <T = any>(name: string): T | undefined => {\r\n  let result: any = jsCache[name] || window[name];\r\n\r\n  if (hasOwnProperty(jsCache, name)) {\r\n    return result;\r\n  }\r\n\r\n  each(jsPrefixes, (prefix: string) => {\r\n    result = result || window[prefix + firstLetterToUpper(name)];\r\n    return !result;\r\n  });\r\n\r\n  jsCache[name] = result;\r\n  return result;\r\n};\r\n","import { jsAPI } from 'support/compatibility/vendors';\r\n\r\nexport const MutationObserverConstructor = jsAPI<typeof MutationObserver>('MutationObserver');\r\nexport const IntersectionObserverConstructor = jsAPI<typeof IntersectionObserver>(\r\n  'IntersectionObserver'\r\n);\r\nexport const ResizeObserverConstructor = jsAPI<typeof ResizeObserver>('ResizeObserver');\r\nexport const cAF = jsAPI<typeof cancelAnimationFrame>('cancelAnimationFrame');\r\nexport const rAF = jsAPI<typeof requestAnimationFrame>('requestAnimationFrame');\r\n","import { isString } from 'support/utils/types';\r\nimport { each } from 'support/utils/array';\r\nimport { keys } from 'support/utils/object';\r\n\r\nconst rnothtmlwhite = /[^\\x20\\t\\r\\n\\f]+/g;\r\nconst classListAction = (\r\n  elm: Element | false | null | undefined,\r\n  className: string | false | null | undefined,\r\n  action: (elmClassList: DOMTokenList, clazz: string) => boolean | void\r\n): boolean => {\r\n  let clazz: string;\r\n  let i = 0;\r\n  let result = false;\r\n\r\n  if (elm && className && isString(className)) {\r\n    const classes: Array<string> = className.match(rnothtmlwhite) || [];\r\n    result = classes.length > 0;\r\n    while ((clazz = classes[i++])) {\r\n      result = !!action(elm.classList, clazz) && result;\r\n    }\r\n  }\r\n  return result;\r\n};\r\n\r\n/**\r\n * Check whether the given element has the given class name(s).\r\n * @param elm The element.\r\n * @param className The class name(s).\r\n */\r\nexport const hasClass = (\r\n  elm: Element | false | null | undefined,\r\n  className: string | false | null | undefined\r\n): boolean => classListAction(elm, className, (classList, clazz) => classList.contains(clazz));\r\n\r\n/**\r\n * Removes the given class name(s) from the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be removed. (separated by spaces)\r\n */\r\nexport const removeClass = (\r\n  elm: Element | false | null | undefined,\r\n  className: string | false | null | undefined\r\n): void => {\r\n  classListAction(elm, className, (classList, clazz) => classList.remove(clazz));\r\n};\r\n\r\n/**\r\n * Adds the given class name(s) to the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be added. (separated by spaces)\r\n * @returns A function which removes the added class name(s).\r\n */\r\nexport const addClass = (\r\n  elm: Element | false | null | undefined,\r\n  className: string | false | null | undefined\r\n): (() => void) => {\r\n  classListAction(elm, className, (classList, clazz) => classList.add(clazz));\r\n  return removeClass.bind(0, elm, className);\r\n};\r\n\r\n/**\r\n * Takes two className strings, compares them and returns the difference as array.\r\n * @param classNameA ClassName A.\r\n * @param classNameB ClassName B.\r\n */\r\nexport const diffClass = (\r\n  classNameA: string | null | undefined,\r\n  classNameB: string | null | undefined\r\n) => {\r\n  const classNameASplit = classNameA && classNameA.split(' ');\r\n  const classNameBSplit = classNameB && classNameB.split(' ');\r\n  const tempObj = {};\r\n\r\n  each(classNameASplit, (className) => {\r\n    tempObj[className] = 1;\r\n  });\r\n  each(classNameBSplit, (className) => {\r\n    if (tempObj[className]) {\r\n      delete tempObj[className];\r\n    } else {\r\n      tempObj[className] = 1;\r\n    }\r\n  });\r\n\r\n  return keys(tempObj);\r\n};\r\n","import { each } from 'support/utils/array';\r\nimport { WH, XY, TRBL } from 'support/dom';\r\nimport { PlainObject } from 'typings';\r\n\r\n/**\r\n * Compares two objects and returns true if all values of the passed prop names are identical, false otherwise or if one of the two object is falsy.\r\n * @param a Object a.\r\n * @param b Object b.\r\n * @param props The props which shall be compared.\r\n */\r\nexport const equal = <T extends PlainObject>(\r\n  a: T | undefined,\r\n  b: T | undefined,\r\n  props: Array<keyof T>,\r\n  propMutation?: ((value: any) => any) | null | false\r\n): boolean => {\r\n  if (a && b) {\r\n    let result = true;\r\n    each(props, (prop) => {\r\n      const compareA = propMutation ? propMutation(a[prop]) : a[prop];\r\n      const compareB = propMutation ? propMutation(b[prop]) : b[prop];\r\n      if (compareA !== compareB) {\r\n        result = false;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalWH = <T>(a?: WH<T>, b?: WH<T>) => equal<WH<T>>(a, b, ['w', 'h']);\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalXY = <T>(a?: XY<T>, b?: XY<T>) => equal<XY<T>>(a, b, ['x', 'y']);\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalTRBL = (a?: TRBL, b?: TRBL) => equal<TRBL>(a, b, ['t', 'r', 'b', 'l']);\r\n\r\n/**\r\n * Compares two DOM Rects for their equality of their width and height properties\r\n * Also returns false if one of the DOM Rects is undefined or null.\r\n * @param a DOM Rect a.\r\n * @param b DOM Rect b.\r\n * @param round Whether the values should be rounded.\r\n */\r\nexport const equalBCRWH = (a?: DOMRect, b?: DOMRect, round?: boolean) =>\r\n  equal<DOMRect>(a, b, ['width', 'height'], round && ((value) => Math.round(value)));\r\n","import { isNumber, isFunction } from 'support/utils/types';\r\nimport { from } from 'support/utils/array';\r\nimport { rAF, cAF } from 'support/compatibility/apis';\r\n\r\nconst clearTimeouts = (id: number | undefined) => {\r\n  id && window.clearTimeout(id);\r\n  id && cAF!(id);\r\n};\r\n\r\ntype DebounceTiming = number | false | null | undefined;\r\n\r\nexport interface DebounceOptions<FunctionToDebounce extends (...args: any) => any> {\r\n  /**\r\n   * The timeout for debouncing. If null, no debounce is applied.\r\n   */\r\n  _timeout?: DebounceTiming | (() => DebounceTiming);\r\n  /**\r\n   * A maximum amount of ms. before the function will be called even with debounce.\r\n   */\r\n  _maxDelay?: DebounceTiming | (() => DebounceTiming);\r\n  /**\r\n   * Function which merges parameters for each canceled debounce.\r\n   * If parameters can't be merged the function will return null, otherwise it returns the merged parameters.\r\n   */\r\n  _mergeParams?: (\r\n    prev: Parameters<FunctionToDebounce>,\r\n    curr: Parameters<FunctionToDebounce>\r\n  ) => Parameters<FunctionToDebounce> | false | null | undefined;\r\n}\r\n\r\nexport interface Debounced<FunctionToDebounce extends (...args: any) => any> {\r\n  (...args: Parameters<FunctionToDebounce>): ReturnType<FunctionToDebounce>;\r\n  _flush(): void;\r\n}\r\n\r\nexport const noop = () => {}; // eslint-disable-line\r\n\r\n/**\r\n * Debounces the given function either with a timeout or a animation frame.\r\n * @param functionToDebounce The function which shall be debounced.\r\n * @param options Options for debouncing.\r\n */\r\nexport const debounce = <FunctionToDebounce extends (...args: any) => any>(\r\n  functionToDebounce: FunctionToDebounce,\r\n  options?: DebounceOptions<FunctionToDebounce>\r\n): Debounced<FunctionToDebounce> => {\r\n  let timeoutId: number | undefined;\r\n  let maxTimeoutId: number | undefined;\r\n  let prevArguments: Parameters<FunctionToDebounce> | null | undefined;\r\n  let latestArguments: Parameters<FunctionToDebounce> | null | undefined;\r\n  const { _timeout, _maxDelay, _mergeParams } = options || {};\r\n  const setT = window.setTimeout;\r\n\r\n  const invokeFunctionToDebounce = function (args: IArguments) {\r\n    clearTimeouts(timeoutId);\r\n    clearTimeouts(maxTimeoutId);\r\n    maxTimeoutId = timeoutId = prevArguments = undefined;\r\n    // eslint-disable-next-line\r\n    // @ts-ignore\r\n    functionToDebounce.apply(this, args);\r\n  };\r\n\r\n  const mergeParms = (\r\n    curr: Parameters<FunctionToDebounce>\r\n  ): Parameters<FunctionToDebounce> | false | null | undefined =>\r\n    _mergeParams && prevArguments ? _mergeParams(prevArguments, curr) : curr;\r\n\r\n  const flush = () => {\r\n    /* istanbul ignore next */\r\n    if (timeoutId) {\r\n      invokeFunctionToDebounce(mergeParms(latestArguments!) || latestArguments!);\r\n    }\r\n  };\r\n\r\n  const debouncedFn = function () {\r\n    // eslint-disable-next-line prefer-rest-params\r\n    const args: Parameters<FunctionToDebounce> = from(arguments) as Parameters<FunctionToDebounce>;\r\n    const finalTimeout = isFunction(_timeout) ? _timeout() : _timeout;\r\n    const hasTimeout = isNumber(finalTimeout) && finalTimeout >= 0;\r\n\r\n    if (hasTimeout) {\r\n      const finalMaxWait = isFunction(_maxDelay) ? _maxDelay() : _maxDelay;\r\n      const hasMaxWait = isNumber(finalMaxWait) && finalMaxWait >= 0;\r\n      const setTimeoutFn = finalTimeout > 0 ? setT : rAF!;\r\n      const mergeParamsResult = mergeParms(args);\r\n      const invokedArgs = mergeParamsResult || args;\r\n      const boundInvoke = invokeFunctionToDebounce.bind(0, invokedArgs);\r\n\r\n      // if (!mergeParamsResult) {\r\n      //   invokeFunctionToDebounce(prevArguments || args);\r\n      // }\r\n\r\n      clearTimeouts(timeoutId);\r\n      // @ts-ignore\r\n      timeoutId = setTimeoutFn(boundInvoke, finalTimeout as number) as number;\r\n\r\n      if (hasMaxWait && !maxTimeoutId) {\r\n        maxTimeoutId = setT(flush, finalMaxWait as number);\r\n      }\r\n\r\n      prevArguments = latestArguments = invokedArgs;\r\n    } else {\r\n      invokeFunctionToDebounce(args);\r\n    }\r\n  };\r\n  debouncedFn._flush = flush;\r\n\r\n  return debouncedFn as Debounced<FunctionToDebounce>;\r\n};\r\n","import { style } from 'support/dom/style';\r\n\r\nexport interface WH<T = number> {\r\n  w: T;\r\n  h: T;\r\n}\r\n\r\nconst elementHasDimensions = (elm: HTMLElement): boolean =>\r\n  !!(elm.offsetWidth || elm.offsetHeight || elm.getClientRects().length);\r\nconst zeroObj: WH = {\r\n  w: 0,\r\n  h: 0,\r\n};\r\n\r\n/**\r\n * Returns the window inner- width and height.\r\n */\r\nexport const windowSize = (): WH => ({\r\n  w: window.innerWidth,\r\n  h: window.innerHeight,\r\n});\r\n\r\n/**\r\n * Returns the scroll- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the scroll- width and height shall be returned.\r\n */\r\nexport const offsetSize = (elm: HTMLElement | null | undefined): WH =>\r\n  elm\r\n    ? {\r\n        w: elm.offsetWidth,\r\n        h: elm.offsetHeight,\r\n      }\r\n    : zeroObj;\r\n\r\n/**\r\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the client- width and height shall be returned.\r\n */\r\nexport const clientSize = (elm: HTMLElement | false | null | undefined): WH =>\r\n  elm\r\n    ? {\r\n        w: elm.clientWidth,\r\n        h: elm.clientHeight,\r\n      }\r\n    : zeroObj;\r\n\r\n/**\r\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the client- width and height shall be returned.\r\n */\r\nexport const scrollSize = (elm: HTMLElement | false | null | undefined): WH =>\r\n  elm\r\n    ? {\r\n        w: elm.scrollWidth,\r\n        h: elm.scrollHeight,\r\n      }\r\n    : zeroObj;\r\n\r\n/**\r\n * Returns the fractional- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the fractional- width and height shall be returned.\r\n */\r\nexport const fractionalSize = (elm: HTMLElement | false | null | undefined): WH => {\r\n  const cssHeight = parseFloat(style(elm, 'height')) || 0;\r\n  const cssWidth = parseFloat(style(elm, 'height')) || 0;\r\n  return {\r\n    w: cssWidth - Math.round(cssWidth),\r\n    h: cssHeight - Math.round(cssHeight),\r\n  };\r\n};\r\n\r\n/**\r\n * Returns the BoundingClientRect of the passed element.\r\n * @param elm The element of which the BoundingClientRect shall be returned.\r\n */\r\nexport const getBoundingClientRect = (elm: HTMLElement): DOMRect => elm.getBoundingClientRect();\r\n\r\n/**\r\n * Determines whether the passed element has any dimensions.\r\n * @param elm The element.\r\n */\r\nexport const hasDimensions = (elm: HTMLElement | false | null | undefined): boolean =>\r\n  elm ? elementHasDimensions(elm as HTMLElement) : false;\r\n","import { isUndefined } from 'support/utils/types';\r\nimport { each, push, runEach } from 'support/utils/array';\r\n\r\nlet passiveEventsSupport: boolean;\r\nconst supportPassiveEvents = (): boolean => {\r\n  if (isUndefined(passiveEventsSupport)) {\r\n    passiveEventsSupport = false;\r\n    try {\r\n      /* eslint-disable */\r\n      // @ts-ignore\r\n      window.addEventListener(\r\n        'test',\r\n        null,\r\n        Object.defineProperty({}, 'passive', {\r\n          get: function () {\r\n            passiveEventsSupport = true;\r\n          },\r\n        })\r\n      );\r\n      /* eslint-enable */\r\n    } catch (e) {}\r\n  }\r\n  return passiveEventsSupport;\r\n};\r\nconst splitEventNames = (eventNames: string) => eventNames.split(' ');\r\n\r\nexport interface OnOptions {\r\n  _capture?: boolean;\r\n  _passive?: boolean;\r\n  _once?: boolean;\r\n}\r\n\r\n/**\r\n * Removes the passed event listener for the passed events with the passed options.\r\n * @param target The element from which the listener shall be removed.\r\n * @param eventNames The eventsnames for which the listener shall be removed.\r\n * @param listener The listener which shall be removed.\r\n * @param capture The options of the removed listener.\r\n */\r\nexport const off = <T extends Event = Event>(\r\n  target: EventTarget,\r\n  eventNames: string,\r\n  listener: (event: T) => any,\r\n  capture?: boolean\r\n): void => {\r\n  each(splitEventNames(eventNames), (eventName) => {\r\n    target.removeEventListener(eventName, listener as EventListener, capture);\r\n  });\r\n};\r\n\r\n/**\r\n * Adds the passed event listener for the passed eventnames with the passed options.\r\n * @param target The element to which the listener shall be added.\r\n * @param eventNames The eventsnames for which the listener shall be called.\r\n * @param listener The listener which is called on the eventnames.\r\n * @param options The options of the added listener.\r\n */\r\nexport const on = <T extends Event = Event>(\r\n  target: EventTarget,\r\n  eventNames: string,\r\n  listener: (event: T) => any,\r\n  options?: OnOptions\r\n): (() => void) => {\r\n  const doSupportPassiveEvents = supportPassiveEvents();\r\n  const passive = (doSupportPassiveEvents && options && options._passive) || false;\r\n  const capture = (options && options._capture) || false;\r\n  const once = (options && options._once) || false;\r\n  const offListeners: (() => void)[] = [];\r\n  const nativeOptions: AddEventListenerOptions | boolean = doSupportPassiveEvents\r\n    ? {\r\n        passive,\r\n        capture,\r\n      }\r\n    : capture;\r\n\r\n  each(splitEventNames(eventNames), (eventName) => {\r\n    const finalListener = (once\r\n      ? (evt: T) => {\r\n          target.removeEventListener(eventName, finalListener, capture);\r\n          listener && listener(evt);\r\n        }\r\n      : listener) as EventListener;\r\n\r\n    push(offListeners, off.bind(null, target, eventName, finalListener, capture));\r\n    target.addEventListener(eventName, finalListener, nativeOptions);\r\n  });\r\n\r\n  return runEach.bind(0, offListeners);\r\n};\r\n\r\n/**\r\n * Shorthand for the stopPropagation event Method.\r\n * @param evt The event of which the stopPropagation method shall be called.\r\n */\r\nexport const stopPropagation = (evt: Event): void => evt.stopPropagation();\r\n\r\n/**\r\n * Shorthand for the preventDefault event Method.\r\n * @param evt The event of which the preventDefault method shall be called.\r\n */\r\nexport const preventDefault = (evt: Event): void => evt.preventDefault();\r\n\r\n/**\r\n * Shorthand for the stopPropagation and preventDefault event Method.\r\n * @param evt The event of which the stopPropagation and preventDefault methods shall be called.\r\n */\r\nexport const stopAndPrevent = (evt: Event): void =>\r\n  (stopPropagation(evt) as undefined) || (preventDefault(evt) as undefined);\r\n","import { getBoundingClientRect } from 'support/dom/dimensions';\r\n\r\nexport interface XY<T = number> {\r\n  x: T;\r\n  y: T;\r\n}\r\n\r\nconst zeroObj: XY = {\r\n  x: 0,\r\n  y: 0,\r\n};\r\n\r\n/**\r\n * Returns the offset- left and top coordinates of the passed element relative to the document. If the element is null the top and left values are 0.\r\n * @param elm The element of which the offset- top and left coordinates shall be returned.\r\n */\r\nexport const absoluteCoordinates = (elm: HTMLElement | null | undefined): XY => {\r\n  const rect = elm ? getBoundingClientRect(elm) : 0;\r\n  return rect\r\n    ? {\r\n        x: rect.left + window.pageYOffset,\r\n        y: rect.top + window.pageXOffset,\r\n      }\r\n    : zeroObj;\r\n};\r\n\r\n/**\r\n * Returns the offset- left and top coordinates of the passed element. If the element is null the top and left values are 0.\r\n * @param elm The element of which the offset- top and left coordinates shall be returned.\r\n */\r\nexport const offsetCoordinates = (elm: HTMLElement | null | undefined): XY =>\r\n  elm\r\n    ? {\r\n        x: elm.offsetLeft,\r\n        y: elm.offsetTop,\r\n      }\r\n    : zeroObj;\r\n","import { isArray } from 'support/utils/types';\r\nimport { keys } from 'support/utils/object';\r\nimport { each, from } from 'support/utils/array';\r\n\r\nexport type EventListener<\r\n  EventMap extends Record<string, any>,\r\n  Name extends keyof EventMap = keyof EventMap\r\n> = (...args: EventMap[Name] extends undefined ? [] : [args: EventMap[Name]]) => void;\r\n\r\nexport type InitialEventListeners<EventMap extends Record<string, any>> = {\r\n  [K in keyof EventMap]?: EventListener<EventMap> | EventListener<EventMap>[];\r\n};\r\n\r\nconst manageListener = <EventMap extends Record<string, any>>(\r\n  callback: (listener?: EventListener<EventMap>) => void,\r\n  listener?: EventListener<EventMap> | EventListener<EventMap>[]\r\n) => {\r\n  each(isArray(listener) ? listener : [listener], callback);\r\n};\r\n\r\nexport const createEventListenerHub = <EventMap extends Record<string, any>>(\r\n  initialEventListeners?: InitialEventListeners<EventMap>\r\n) => {\r\n  type EventListener<Name extends keyof EventMap = keyof EventMap> = (\r\n    ...args: EventMap[Name] extends undefined ? [] : [args: EventMap[Name]]\r\n  ) => void;\r\n\r\n  const events = new Map<keyof EventMap, Set<EventListener>>();\r\n\r\n  function removeEvent<Name extends keyof EventMap>(\r\n    name?: Name,\r\n    listener?: EventListener<Name>\r\n  ): void;\r\n  function removeEvent<Name extends keyof EventMap>(\r\n    name?: Name,\r\n    listener?: EventListener<Name>[]\r\n  ): void;\r\n  function removeEvent<Name extends keyof EventMap>(\r\n    name?: Name,\r\n    listener?: EventListener<Name> | EventListener<Name>[]\r\n  ): void {\r\n    if (name) {\r\n      const eventSet = events.get(name);\r\n      manageListener((currListener) => {\r\n        if (eventSet) {\r\n          eventSet[currListener ? 'delete' : 'clear'](currListener!);\r\n        }\r\n      }, listener as any);\r\n    } else {\r\n      events.forEach((eventSet) => {\r\n        eventSet.clear();\r\n      });\r\n      events.clear();\r\n    }\r\n  }\r\n\r\n  function addEvent<Name extends keyof EventMap>(\r\n    name: Name,\r\n    listener: EventListener<Name>\r\n  ): () => void;\r\n  function addEvent<Name extends keyof EventMap>(\r\n    name: Name,\r\n    listener: EventListener<Name>[]\r\n  ): () => void;\r\n  function addEvent<Name extends keyof EventMap>(\r\n    name: Name,\r\n    listener: EventListener<Name> | EventListener<Name>[]\r\n  ): () => void {\r\n    const eventSet = events.get(name) || new Set();\r\n    events.set(name, eventSet);\r\n\r\n    manageListener((currListener) => {\r\n      currListener && eventSet.add(currListener);\r\n    }, listener as any);\r\n\r\n    return removeEvent.bind(0, name as any, listener as any);\r\n  }\r\n\r\n  function triggerEvent<Name extends keyof EventMap>(\r\n    name: Name,\r\n    ...args: EventMap[Name] extends undefined ? [] : [args: EventMap[Name]]\r\n  ): void {\r\n    const eventSet = events.get(name);\r\n\r\n    each(from(eventSet), (event) => {\r\n      if (args) {\r\n        (event as (args: EventMap[keyof EventMap]) => void)(args as any);\r\n      } else {\r\n        (event as () => void)();\r\n      }\r\n    });\r\n  }\r\n\r\n  const initialListenerKeys = keys(initialEventListeners) as Extract<keyof EventMap, string>[];\r\n  each(initialListenerKeys, (key) => {\r\n    addEvent(key, initialEventListeners![key] as any);\r\n  });\r\n\r\n  return [addEvent, removeEvent, triggerEvent] as [\r\n    typeof addEvent,\r\n    typeof removeEvent,\r\n    typeof triggerEvent\r\n  ];\r\n};\r\n","import { assignDeep, hasOwnProperty } from 'support';\r\nimport type { Options, ReadonlyOSOptions } from 'options';\r\nimport type { PartialOptions } from 'typings';\r\n\r\nexport type SetupElements<T extends Record<string, any>> = [elements: T, destroy: () => void];\r\n\r\nexport type SetupUpdate<T = void> = (changedOptions: PartialOptions<Options>, force?: boolean) => T;\r\n\r\nexport type SetupUpdateCheckOption = <T>(path: string) => [value: T, changed: boolean];\r\n\r\nexport type SetupUpdateSegment<Hints extends Record<string, any>> = (\r\n  updateHints: Hints,\r\n  checkOption: SetupUpdateCheckOption,\r\n  force: boolean\r\n) => Partial<Hints> | void;\r\n\r\nexport type SetupState<T extends Record<string, any>> = [\r\n  get: () => T,\r\n  set: (newState: Partial<T>) => void\r\n];\r\n\r\nexport type Setup<DynamicState, StaticState extends Record<string, any> = Record<string, any>> = [\r\n  update: SetupUpdate,\r\n  state: (() => DynamicState) & StaticState,\r\n  destroy: () => void\r\n];\r\n\r\nconst getPropByPath = <T>(obj: any, path: string): T =>\r\n  obj\r\n    ? path.split('.').reduce((o, prop) => (o && hasOwnProperty(o, prop) ? o[prop] : undefined), obj)\r\n    : undefined;\r\n\r\nexport const createOptionCheck =\r\n  (\r\n    options: ReadonlyOSOptions,\r\n    changedOptions: PartialOptions<Options>,\r\n    force?: boolean\r\n  ): SetupUpdateCheckOption =>\r\n  (path: string) =>\r\n    [getPropByPath(options, path), force || getPropByPath(changedOptions, path) !== undefined];\r\n\r\nexport const createState = <S>(initialState: S): SetupState<S> => {\r\n  let state: S = initialState;\r\n  return [\r\n    () => state,\r\n    (newState: Partial<S>) => {\r\n      state = assignDeep({}, state, newState);\r\n    },\r\n  ];\r\n};\r\n","export const classNameEnvironment = 'os-environment';\r\nexport const classNameEnvironmentFlexboxGlue = `${classNameEnvironment}-flexbox-glue`;\r\nexport const classNameEnvironmentFlexboxGlueMax = `${classNameEnvironmentFlexboxGlue}-max`;\r\n\r\nexport const dataAttributeHost = 'data-overlayscrollbars';\r\nexport const dataAttributeHostOverflowX = `${dataAttributeHost}-overflow-x`;\r\nexport const dataAttributeHostOverflowY = `${dataAttributeHost}-overflow-y`;\r\nexport const dataValueHostOverflowVisible = 'overflowVisible';\r\nexport const dataValueHostViewportScrollbarStyling = 'viewportStyled';\r\nexport const classNamePadding = 'os-padding';\r\nexport const classNameViewport = 'os-viewport';\r\nexport const classNameViewportArrange = `${classNameViewport}-arrange`;\r\nexport const classNameContent = 'os-content';\r\nexport const classNameViewportScrollbarStyling = `${classNameViewport}-scrollbar-styled`;\r\nexport const classNameOverflowVisible = `os-overflow-visible`;\r\n\r\nexport const classNameSizeObserver = 'os-size-observer';\r\nexport const classNameSizeObserverAppear = `${classNameSizeObserver}-appear`;\r\nexport const classNameSizeObserverListener = `${classNameSizeObserver}-listener`;\r\nexport const classNameSizeObserverListenerScroll = `${classNameSizeObserverListener}-scroll`;\r\nexport const classNameSizeObserverListenerItem = `${classNameSizeObserverListener}-item`;\r\nexport const classNameSizeObserverListenerItemFinal = `${classNameSizeObserverListenerItem}-final`;\r\n\r\nexport const classNameTrinsicObserver = 'os-trinsic-observer';\r\n\r\nexport const classNameScrollbar = 'os-scrollbar';\r\nexport const classNameScrollbarHorizontal = `${classNameScrollbar}-horizontal`;\r\nexport const classNameScrollbarVertical = `${classNameScrollbar}-vertical`;\r\nexport const classNameScrollbarTrack = 'os-scrollbar-track';\r\nexport const classNameScrollbarHandle = 'os-scrollbar-handle';\r\n","import { assignDeep, each, isObject, keys, isArray, hasOwnProperty, isFunction } from 'support';\r\nimport { PartialOptions, ReadonlyOptions } from 'typings';\r\n\r\nconst opsStringify = (value: any) =>\r\n  JSON.stringify(value, (_, val) => {\r\n    if (isFunction(val)) {\r\n      throw new Error();\r\n    }\r\n    return val;\r\n  });\r\n\r\nexport type ResizeBehavior = 'none' | 'both' | 'horizontal' | 'vertical';\r\n\r\nexport type OverflowBehavior =\r\n  | 'hidden'\r\n  | 'scroll'\r\n  | 'visible'\r\n  | 'visible-hidden'\r\n  | 'visible-scroll';\r\n\r\nexport type VisibilityBehavior = 'visible' | 'hidden' | 'auto';\r\n\r\nexport type AutoHideBehavior = 'never' | 'scroll' | 'leave' | 'move';\r\n\r\nexport type ScrollBehavior = 'always' | 'ifneeded' | 'never';\r\n\r\nexport type BasicEventCallback = (this: any) => void;\r\n\r\nexport type ScrollEventCallback = (this: any, args?: UIEvent) => void;\r\n\r\nexport type OverflowChangedCallback = (this: any, args?: OverflowChangedArgs) => void;\r\n\r\nexport type OverflowAmountChangedCallback = (this: any, args?: OverflowAmountChangedArgs) => void;\r\n\r\nexport type DirectionChangedCallback = (this: any, args?: DirectionChangedArgs) => void;\r\n\r\nexport type SizeChangedCallback = (this: any, args?: SizeChangedArgs) => void;\r\n\r\nexport type UpdatedCallback = (this: any, args?: UpdatedArgs) => void;\r\n\r\nexport interface Options {\r\n  paddingAbsolute: boolean;\r\n  updating: {\r\n    elementEvents: Array<[elementSelector: string, eventNames: string]> | null;\r\n    attributes: string[] | null;\r\n    debounce: [timeout: number, maxWait: number] | number | null; // (if tuple: [timeout: 0, maxWait: 33], if number: [timeout: number, maxWait: false]) debounce for content Changes\r\n    ignoreMutation: ((mutation: MutationRecord) => any) | null;\r\n  };\r\n  overflow: {\r\n    x: OverflowBehavior;\r\n    y: OverflowBehavior;\r\n  };\r\n  scrollbars: {\r\n    visibility: VisibilityBehavior;\r\n    autoHide: AutoHideBehavior;\r\n    autoHideDelay: number;\r\n    dragScroll: boolean;\r\n    clickScroll: boolean;\r\n    touch: boolean;\r\n  };\r\n  nativeScrollbarsOverlaid: {\r\n    show: boolean;\r\n    initialize: boolean;\r\n  };\r\n}\r\n\r\nexport type ReadonlyOSOptions = ReadonlyOptions<Options>;\r\n\r\nexport interface OverflowChangedArgs {\r\n  x: boolean;\r\n  y: boolean;\r\n  xScrollable: boolean;\r\n  yScrollable: boolean;\r\n  clipped: boolean;\r\n}\r\n\r\nexport interface OverflowAmountChangedArgs {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport interface DirectionChangedArgs {\r\n  isRTL: number;\r\n  dir: string;\r\n}\r\n\r\nexport interface SizeChangedArgs {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport interface UpdatedArgs {\r\n  forced: boolean;\r\n}\r\n\r\nexport const defaultOptions: Options = {\r\n  // resize: 'none', // none || both  || horizontal || vertical || n || b || h || v\r\n  paddingAbsolute: false, // true || false\r\n  updating: {\r\n    elementEvents: [['img', 'load']], // array of tuples || null\r\n    debounce: [0, 33], // number || number array || null\r\n    attributes: null, // string array || null\r\n    ignoreMutation: null, // () => any || null\r\n  },\r\n  overflow: {\r\n    x: 'scroll', // visible-hidden  || visible-scroll || hidden || scroll || v-h || v-s || h || s\r\n    y: 'scroll', // visible-hidden  || visible-scroll || hidden || scroll || v-h || v-s || h || s\r\n  },\r\n  nativeScrollbarsOverlaid: {\r\n    show: false, // true || false\r\n    initialize: false, // true || false\r\n  },\r\n  scrollbars: {\r\n    visibility: 'auto', // visible || hidden || auto || v || h || a\r\n    autoHide: 'never', // never || scroll || leave || move || n || s || l || m\r\n    autoHideDelay: 800, // number\r\n    dragScroll: true, // true || false\r\n    clickScroll: false, // true || false\r\n    touch: true, // true || false\r\n  },\r\n  /*\r\n  textarea: {\r\n    dynWidth: false, // true || false\r\n    dynHeight: false, // true || false\r\n    inheritedAttrs: ['style', 'class'], // string || array || null\r\n  },\r\n  */\r\n};\r\n\r\nexport const getOptionsDiff = <T>(\r\n  currOptions: T,\r\n  newOptions: PartialOptions<T>\r\n): PartialOptions<T> => {\r\n  const diff: PartialOptions<T> = {};\r\n  const optionsKeys = keys(newOptions).concat(keys(currOptions));\r\n\r\n  each(optionsKeys, (optionKey) => {\r\n    const currOptionValue = currOptions[optionKey];\r\n    const newOptionValue = newOptions[optionKey];\r\n\r\n    if (isObject(currOptionValue) && isObject(newOptionValue)) {\r\n      assignDeep((diff[optionKey] = {}), getOptionsDiff(currOptionValue, newOptionValue));\r\n    } else if (hasOwnProperty(newOptions, optionKey) && newOptionValue !== currOptionValue) {\r\n      let isDiff = true;\r\n\r\n      if (isArray(currOptionValue) || isArray(newOptionValue)) {\r\n        try {\r\n          if (opsStringify(currOptionValue) === opsStringify(newOptionValue)) {\r\n            isDiff = false;\r\n          }\r\n        } catch {}\r\n      }\r\n\r\n      if (isDiff) {\r\n        diff[optionKey] = newOptionValue;\r\n      }\r\n    }\r\n  });\r\n\r\n  return diff;\r\n};\r\n","import {\r\n  createDOM,\r\n  addClass,\r\n  style,\r\n  appendChildren,\r\n  fractionalSize,\r\n  clientSize,\r\n  absoluteCoordinates,\r\n  offsetSize,\r\n  scrollLeft,\r\n  XY,\r\n  removeAttr,\r\n  removeElements,\r\n  windowSize,\r\n  equalBCRWH,\r\n  getBoundingClientRect,\r\n  assignDeep,\r\n  cssProperty,\r\n  createCache,\r\n  equalXY,\r\n  createEventListenerHub,\r\n  EventListener,\r\n} from 'support';\r\nimport {\r\n  classNameEnvironment,\r\n  classNameEnvironmentFlexboxGlue,\r\n  classNameEnvironmentFlexboxGlueMax,\r\n  classNameViewportScrollbarStyling,\r\n} from 'classnames';\r\nimport { Options, defaultOptions } from 'options';\r\nimport { PartialOptions } from 'typings';\r\nimport { InitializationStrategy } from 'initialization';\r\n\r\nexport interface EnvironmentListenersNameArgsMap {\r\n  _: undefined;\r\n}\r\n\r\nexport interface InternalEnvironment {\r\n  readonly _nativeScrollbarSize: XY;\r\n  readonly _nativeScrollbarIsOverlaid: XY<boolean>;\r\n  readonly _nativeScrollbarStyling: boolean;\r\n  readonly _rtlScrollBehavior: { n: boolean; i: boolean };\r\n  readonly _flexboxGlue: boolean;\r\n  readonly _cssCustomProperties: boolean;\r\n  readonly _defaultInitializationStrategy: InitializationStrategy;\r\n  readonly _defaultDefaultOptions: Options;\r\n  _addListener(listener: EventListener<EnvironmentListenersNameArgsMap, '_'>): () => void;\r\n  _getInitializationStrategy(): InitializationStrategy;\r\n  _setInitializationStrategy(newInitializationStrategy: Partial<InitializationStrategy>): void;\r\n  _getDefaultOptions(): Options;\r\n  _setDefaultOptions(newDefaultOptions: PartialOptions<Options>): void;\r\n}\r\n\r\nlet environmentInstance: InternalEnvironment;\r\nconst { abs, round } = Math;\r\n\r\nconst diffBiggerThanOne = (valOne: number, valTwo: number): boolean => {\r\n  const absValOne = abs(valOne);\r\n  const absValTwo = abs(valTwo);\r\n  return !(absValOne === absValTwo || absValOne + 1 === absValTwo || absValOne - 1 === absValTwo);\r\n};\r\n\r\nconst getNativeScrollbarSize = (\r\n  body: HTMLElement,\r\n  measureElm: HTMLElement,\r\n  measureElmChild: HTMLElement\r\n): XY => {\r\n  appendChildren(body, measureElm);\r\n\r\n  const cSize = clientSize(measureElm);\r\n  const oSize = offsetSize(measureElm);\r\n  const fSize = fractionalSize(measureElmChild);\r\n\r\n  return {\r\n    x: oSize.h - cSize.h + fSize.h,\r\n    y: oSize.w - cSize.w + fSize.w,\r\n  };\r\n};\r\n\r\nconst getNativeScrollbarStyling = (testElm: HTMLElement): boolean => {\r\n  let result = false;\r\n  const revertClass = addClass(testElm, classNameViewportScrollbarStyling);\r\n  try {\r\n    result =\r\n      style(testElm, cssProperty('scrollbar-width')) === 'none' ||\r\n      window.getComputedStyle(testElm, '::-webkit-scrollbar').getPropertyValue('display') ===\r\n        'none';\r\n  } catch (ex) {}\r\n  revertClass();\r\n  return result;\r\n};\r\n\r\nconst getRtlScrollBehavior = (\r\n  parentElm: HTMLElement,\r\n  childElm: HTMLElement\r\n): { i: boolean; n: boolean } => {\r\n  const strHidden = 'hidden';\r\n  style(parentElm, { overflowX: strHidden, overflowY: strHidden, direction: 'rtl' });\r\n  scrollLeft(parentElm, 0);\r\n\r\n  const parentOffset = absoluteCoordinates(parentElm);\r\n  const childOffset = absoluteCoordinates(childElm);\r\n  scrollLeft(parentElm, -999); // https://github.com/KingSora/OverlayScrollbars/issues/187\r\n  const childOffsetAfterScroll = absoluteCoordinates(childElm);\r\n  return {\r\n    /**\r\n     * origin direction = determines if the zero scroll position is on the left or right side\r\n     * 'i' means 'invert' (i === true means that the axis must be inverted to be correct)\r\n     * true = on the left side\r\n     * false = on the right side\r\n     */\r\n    i: parentOffset.x === childOffset.x,\r\n    /**\r\n     * negative = determines if the maximum scroll is positive or negative\r\n     * 'n' means 'negate' (n === true means that the axis must be negated to be correct)\r\n     * true = negative\r\n     * false = positive\r\n     */\r\n    n: childOffset.x !== childOffsetAfterScroll.x,\r\n  };\r\n};\r\n\r\nconst getFlexboxGlue = (parentElm: HTMLElement, childElm: HTMLElement): boolean => {\r\n  const revertFbxGlue = addClass(parentElm, classNameEnvironmentFlexboxGlue);\r\n  const minOffsetsizeParent = getBoundingClientRect(parentElm);\r\n  const minOffsetsize = getBoundingClientRect(childElm);\r\n  const supportsMin = equalBCRWH(minOffsetsize, minOffsetsizeParent, true);\r\n\r\n  const revertFbxGlueMax = addClass(parentElm, classNameEnvironmentFlexboxGlueMax);\r\n  const maxOffsetsizeParent = getBoundingClientRect(parentElm);\r\n  const maxOffsetsize = getBoundingClientRect(childElm);\r\n  const supportsMax = equalBCRWH(maxOffsetsize, maxOffsetsizeParent, true);\r\n\r\n  revertFbxGlue();\r\n  revertFbxGlueMax();\r\n\r\n  return supportsMin && supportsMax;\r\n};\r\n\r\nconst getWindowDPR = (): number => {\r\n  // eslint-disable-next-line\r\n  // @ts-ignore\r\n  const dDPI = window.screen.deviceXDPI || 0;\r\n  // eslint-disable-next-line\r\n  // @ts-ignore\r\n  const sDPI = window.screen.logicalXDPI || 1;\r\n  return window.devicePixelRatio || dDPI / sDPI;\r\n};\r\n\r\nconst getDefaultInitializationStrategy = (\r\n  nativeScrollbarStyling: boolean\r\n): InitializationStrategy => ({\r\n  _padding: !nativeScrollbarStyling,\r\n  _content: false,\r\n});\r\n\r\nconst createEnvironment = (): InternalEnvironment => {\r\n  const { body } = document;\r\n  const envDOM = createDOM(`<div class=\"${classNameEnvironment}\"><div></div></div>`);\r\n  const envElm = envDOM[0] as HTMLElement;\r\n  const envChildElm = envElm.firstChild as HTMLElement;\r\n  const [addEvent, , triggerEvent] = createEventListenerHub<EnvironmentListenersNameArgsMap>();\r\n  const [updateNativeScrollbarSizeCache, getNativeScrollbarSizeCache] = createCache({\r\n    _initialValue: getNativeScrollbarSize(body, envElm, envChildElm),\r\n    _equal: equalXY,\r\n  });\r\n  const [nativeScrollbarSize] = getNativeScrollbarSizeCache();\r\n  const nativeScrollbarStyling = getNativeScrollbarStyling(envElm);\r\n  const nativeScrollbarIsOverlaid = {\r\n    x: nativeScrollbarSize.x === 0,\r\n    y: nativeScrollbarSize.y === 0,\r\n  };\r\n  const initializationStrategy = getDefaultInitializationStrategy(nativeScrollbarStyling);\r\n  const defaultDefaultOptions = assignDeep({}, defaultOptions);\r\n\r\n  const env: InternalEnvironment = {\r\n    _nativeScrollbarSize: nativeScrollbarSize,\r\n    _nativeScrollbarIsOverlaid: nativeScrollbarIsOverlaid,\r\n    _nativeScrollbarStyling: nativeScrollbarStyling,\r\n    _cssCustomProperties: style(envElm, 'zIndex') === '-1',\r\n    _rtlScrollBehavior: getRtlScrollBehavior(envElm, envChildElm),\r\n    _flexboxGlue: getFlexboxGlue(envElm, envChildElm),\r\n    _addListener: (listener) => addEvent('_', listener),\r\n    _getInitializationStrategy: assignDeep<InitializationStrategy, InitializationStrategy>.bind(\r\n      0,\r\n      {} as InitializationStrategy,\r\n      initializationStrategy\r\n    ),\r\n    _setInitializationStrategy(newInitializationStrategy) {\r\n      assignDeep(initializationStrategy, newInitializationStrategy);\r\n    },\r\n    _getDefaultOptions: assignDeep<Options, Options>.bind(0, {} as Options, defaultDefaultOptions),\r\n    _setDefaultOptions(newDefaultOptions) {\r\n      assignDeep(defaultDefaultOptions, newDefaultOptions);\r\n    },\r\n    _defaultInitializationStrategy: assignDeep({}, initializationStrategy),\r\n    _defaultDefaultOptions: assignDeep({}, defaultDefaultOptions),\r\n  };\r\n\r\n  removeAttr(envElm, 'style');\r\n  removeElements(envElm);\r\n\r\n  if (!nativeScrollbarStyling && (!nativeScrollbarIsOverlaid.x || !nativeScrollbarIsOverlaid.y)) {\r\n    let size = windowSize();\r\n    let dpr = getWindowDPR();\r\n\r\n    window.addEventListener('resize', () => {\r\n      const sizeNew = windowSize();\r\n      const deltaSize = {\r\n        w: sizeNew.w - size.w,\r\n        h: sizeNew.h - size.h,\r\n      };\r\n\r\n      if (deltaSize.w === 0 && deltaSize.h === 0) return;\r\n\r\n      const deltaAbsSize = {\r\n        w: abs(deltaSize.w),\r\n        h: abs(deltaSize.h),\r\n      };\r\n      const deltaAbsRatio = {\r\n        w: abs(round(sizeNew.w / (size.w / 100.0))),\r\n        h: abs(round(sizeNew.h / (size.h / 100.0))),\r\n      };\r\n      const dprNew = getWindowDPR();\r\n      const deltaIsBigger = deltaAbsSize.w > 2 && deltaAbsSize.h > 2;\r\n      const difference = !diffBiggerThanOne(deltaAbsRatio.w, deltaAbsRatio.h);\r\n      const dprChanged = dprNew !== dpr && dpr > 0;\r\n      const isZoom = deltaIsBigger && difference && dprChanged;\r\n\r\n      if (isZoom) {\r\n        const [scrollbarSize, scrollbarSizeChanged] = updateNativeScrollbarSizeCache(\r\n          getNativeScrollbarSize(body, envElm, envChildElm)\r\n        );\r\n\r\n        assignDeep(environmentInstance._nativeScrollbarSize, scrollbarSize); // keep the object same!\r\n        removeElements(envElm);\r\n\r\n        if (scrollbarSizeChanged) {\r\n          triggerEvent('_');\r\n        }\r\n      }\r\n\r\n      size = sizeNew;\r\n      dpr = dprNew;\r\n    });\r\n  }\r\n\r\n  return env;\r\n};\r\n\r\nconst getEnvironment = (): InternalEnvironment => {\r\n  if (!environmentInstance) {\r\n    environmentInstance = createEnvironment();\r\n  }\r\n  return environmentInstance;\r\n};\r\n\r\nexport { getEnvironment };\r\n","import { isFunction, isBoolean, isNull, isUndefined } from 'support';\r\nimport type {\r\n  StructureInitialization,\r\n  StructureInitializationStrategy,\r\n} from 'setups/structureSetup';\r\nimport type {\r\n  ScrollbarsInitialization,\r\n  ScrollbarsInitializationStrategy,\r\n} from 'setups/scrollbarsSetup';\r\n\r\ntype StaticInitialization = HTMLElement | null | undefined;\r\ntype DynamicInitialization = HTMLElement | boolean | null | undefined;\r\n\r\nexport type InitializationTargetElement = HTMLElement | HTMLTextAreaElement;\r\n\r\nexport type InitializationTargetObject = StructureInitialization & ScrollbarsInitialization;\r\n\r\nexport type InitializationTarget = InitializationTargetElement | InitializationTargetObject;\r\n\r\nexport type InitializationStrategy = StructureInitializationStrategy &\r\n  ScrollbarsInitializationStrategy;\r\n\r\n/**\r\n * Static elements MUST be present.\r\n * Null or undefined behave like if this element wasn't specified during initialization.\r\n */\r\nexport type StaticInitializationElement<Args extends any[]> =\r\n  | ((...args: Args) => StaticInitialization)\r\n  | StaticInitialization;\r\n\r\n/**\r\n * Dynamic element CAN be present.\r\n * If its a element the element will be handled as the repsective element.\r\n * True means that the respective dynamic element is forced to be generated.\r\n * False means that the respective dynamic element is forced NOT to be generated.\r\n * Null or undefined behave like if this element wasn't specified during initialization.\r\n */\r\nexport type DynamicInitializationElement<Args extends any[]> =\r\n  | ((...args: Args) => DynamicInitialization)\r\n  | DynamicInitialization;\r\n\r\nexport type InitializtationElementStrategy<InitElm> = Exclude<InitElm, HTMLElement>;\r\n\r\nexport type DefaultInitializtationElementStrategy<\r\n  InitElm extends StaticInitializationElement<any> | DynamicInitializationElement<any>\r\n> = Extract<InitElm, (...args: any[]) => any> extends (...args: infer P) => any\r\n  ? (...args: P) => HTMLElement\r\n  : never;\r\n\r\nconst staticInitializationElement = <T extends StaticInitializationElement<any>>(\r\n  args: Parameters<Extract<T, (...args: any[]) => any>>,\r\n  defaultStaticInitializationElement: DefaultInitializtationElementStrategy<T>,\r\n  staticInitializationElementStrategy?: InitializtationElementStrategy<T>,\r\n  staticInitializationElementValue?: T | false\r\n): HTMLElement => {\r\n  const result =\r\n    staticInitializationElementValue ||\r\n    (isFunction(staticInitializationElementStrategy)\r\n      ? staticInitializationElementStrategy.apply(0, args)\r\n      : staticInitializationElementStrategy);\r\n\r\n  return (\r\n    (isFunction(result) ? result.apply(0, args) : result) ||\r\n    defaultStaticInitializationElement.apply(0, args)\r\n  );\r\n};\r\n\r\nconst dynamicInitializationElement = <T extends DynamicInitializationElement<any>>(\r\n  args: Parameters<Extract<T, (...args: any[]) => any>>,\r\n  defaultDynamicInitializationElement: DefaultInitializtationElementStrategy<T>,\r\n  dynamicInitializationElementStrategy?: InitializtationElementStrategy<T>,\r\n  dynamicInitializationElementValue?: T | false\r\n): HTMLElement | false => {\r\n  const takeInitializationValue =\r\n    isBoolean(dynamicInitializationElementValue) || !!dynamicInitializationElementValue;\r\n  const result = takeInitializationValue\r\n    ? (dynamicInitializationElementValue as boolean | HTMLElement)\r\n    : isFunction(dynamicInitializationElementStrategy)\r\n    ? dynamicInitializationElementStrategy.apply(0, args)\r\n    : dynamicInitializationElementStrategy;\r\n\r\n  return result === true || isNull(result) || isUndefined(result) || isFunction(result)\r\n    ? defaultDynamicInitializationElement.apply(0, args)\r\n    : result;\r\n};\r\n\r\nexport { staticInitializationElement, dynamicInitializationElement };\r\n","import {\r\n  isHTMLElement,\r\n  appendChildren,\r\n  createDiv,\r\n  is,\r\n  contents,\r\n  insertAfter,\r\n  addClass,\r\n  parent,\r\n  indexOf,\r\n  removeElements,\r\n  removeClass,\r\n  hasClass,\r\n  push,\r\n  runEach,\r\n  insertBefore,\r\n  attr,\r\n  keys,\r\n  removeAttr,\r\n  attrClass,\r\n  hasAttrClass,\r\n  ResizeObserverConstructor,\r\n} from 'support';\r\nimport {\r\n  dataAttributeHost,\r\n  dataAttributeHostOverflowX,\r\n  dataAttributeHostOverflowY,\r\n  classNamePadding,\r\n  classNameViewport,\r\n  classNameViewportArrange,\r\n  classNameContent,\r\n  classNameViewportScrollbarStyling,\r\n} from 'classnames';\r\nimport { getEnvironment } from 'environment';\r\nimport {\r\n  staticInitializationElement as generalStaticInitializationElement,\r\n  dynamicInitializationElement as generalDynamicInitializationElement,\r\n} from 'initialization';\r\nimport type { InitializationTarget, InitializationTargetElement } from 'initialization';\r\nimport type {\r\n  StructureDynamicInitializationElement,\r\n  StructureInitialization,\r\n  StructureStaticInitializationElement,\r\n} from 'setups/structureSetup/structureSetup.initialization';\r\n\r\nexport type StructureSetupElements = [targetObj: StructureSetupElementsObj, destroy: () => void];\r\n\r\nexport interface StructureSetupElementsObj {\r\n  _target: InitializationTargetElement;\r\n  _host: HTMLElement;\r\n  _viewport: HTMLElement;\r\n  _padding: HTMLElement | false;\r\n  _content: HTMLElement | false;\r\n  _viewportArrange: HTMLStyleElement | false;\r\n  // ctx ----\r\n  _isTextarea: boolean;\r\n  _isBody: boolean;\r\n  _htmlElm: HTMLHtmlElement;\r\n  _bodyElm: HTMLBodyElement;\r\n  _windowElm: Window;\r\n  _documentElm: Document;\r\n  _targetIsElm: boolean;\r\n  _viewportIsTarget: boolean;\r\n  _viewportHasClass: (className: string, attributeClassName: string) => boolean;\r\n  _viewportAddRemoveClass: (className: string, attributeClassName: string, add?: boolean) => void;\r\n}\r\n\r\nlet contentArrangeCounter = 0;\r\n\r\nconst createNewDiv = createDiv.bind(0, '');\r\n\r\nconst unwrap = (elm: HTMLElement | false | null | undefined) => {\r\n  appendChildren(parent(elm), contents(elm));\r\n  removeElements(elm);\r\n};\r\n\r\nconst createUniqueViewportArrangeElement = (): HTMLStyleElement | false => {\r\n  const { _nativeScrollbarStyling, _nativeScrollbarIsOverlaid, _cssCustomProperties } =\r\n    getEnvironment();\r\n  /* istanbul ignore next */\r\n  const create =\r\n    !_cssCustomProperties &&\r\n    !_nativeScrollbarStyling &&\r\n    (_nativeScrollbarIsOverlaid.x || _nativeScrollbarIsOverlaid.y);\r\n  const result = create ? document.createElement('style') : false;\r\n\r\n  if (result) {\r\n    attr(result, 'id', `${classNameViewportArrange}-${contentArrangeCounter}`);\r\n    contentArrangeCounter++;\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nconst addDataAttrHost = (elm: HTMLElement, value?: string | false | null | undefined) => {\r\n  attr(elm, dataAttributeHost, value || '');\r\n  return removeAttr.bind(0, elm, dataAttributeHost);\r\n};\r\n\r\nexport const createStructureSetupElements = (\r\n  target: InitializationTarget\r\n): StructureSetupElements => {\r\n  const { _getInitializationStrategy, _nativeScrollbarStyling } = getEnvironment();\r\n  const {\r\n    _host: hostInitializationStrategy,\r\n    _viewport: viewportInitializationStrategy,\r\n    _padding: paddingInitializationStrategy,\r\n    _content: contentInitializationStrategy,\r\n  } = _getInitializationStrategy();\r\n  const targetIsElm = isHTMLElement(target);\r\n  const targetStructureInitialization = target as StructureInitialization;\r\n  const targetElement = targetIsElm\r\n    ? (target as InitializationTargetElement)\r\n    : targetStructureInitialization.target;\r\n  const isTextarea = is(targetElement, 'textarea');\r\n  const isBody = !isTextarea && is(targetElement, 'body');\r\n  const ownerDocument = targetElement!.ownerDocument;\r\n  const bodyElm = ownerDocument.body as HTMLBodyElement;\r\n  const wnd = ownerDocument.defaultView as Window;\r\n  const singleElmSupport = !!ResizeObserverConstructor && _nativeScrollbarStyling;\r\n  const staticInitializationElement =\r\n    generalStaticInitializationElement<StructureStaticInitializationElement>.bind(0, [\r\n      targetElement,\r\n    ]);\r\n  const dynamicInitializationElement =\r\n    generalDynamicInitializationElement<StructureDynamicInitializationElement>.bind(0, [\r\n      targetElement,\r\n    ]);\r\n  const potentialViewportElement = staticInitializationElement(\r\n    createNewDiv,\r\n    viewportInitializationStrategy,\r\n    targetStructureInitialization.viewport\r\n  );\r\n  const potentiallySingleElm = potentialViewportElement === targetElement;\r\n  const viewportIsTarget = singleElmSupport && potentiallySingleElm;\r\n  const viewportElement =\r\n    potentiallySingleElm && !viewportIsTarget\r\n      ? staticInitializationElement(createNewDiv)\r\n      : potentialViewportElement;\r\n  const evaluatedTargetObj: StructureSetupElementsObj = {\r\n    _target: targetElement,\r\n    _host: isTextarea\r\n      ? staticInitializationElement(\r\n          createNewDiv,\r\n          hostInitializationStrategy,\r\n          targetStructureInitialization.host\r\n        )\r\n      : (targetElement as HTMLElement),\r\n    _viewport: viewportElement,\r\n    _padding: dynamicInitializationElement(\r\n      createNewDiv,\r\n      paddingInitializationStrategy,\r\n      targetStructureInitialization.padding\r\n    ),\r\n    _content: dynamicInitializationElement(\r\n      createNewDiv,\r\n      contentInitializationStrategy,\r\n      targetStructureInitialization.content\r\n    ),\r\n    _viewportArrange: !viewportIsTarget && createUniqueViewportArrangeElement(),\r\n    _windowElm: wnd,\r\n    _documentElm: ownerDocument,\r\n    _htmlElm: parent(bodyElm) as HTMLHtmlElement,\r\n    _bodyElm: bodyElm,\r\n    _isTextarea: isTextarea,\r\n    _isBody: isBody,\r\n    _targetIsElm: targetIsElm,\r\n    _viewportIsTarget: viewportIsTarget,\r\n    _viewportHasClass: (className: string, attributeClassName: string) =>\r\n      viewportIsTarget\r\n        ? hasAttrClass(viewportElement, dataAttributeHost, attributeClassName)\r\n        : hasClass(viewportElement, className),\r\n    _viewportAddRemoveClass: (className: string, attributeClassName: string, add?: boolean) =>\r\n      viewportIsTarget\r\n        ? attrClass(viewportElement, dataAttributeHost, attributeClassName, add)\r\n        : (add ? addClass : removeClass)(viewportElement, className),\r\n  };\r\n  const generatedElements = keys(evaluatedTargetObj).reduce((arr, key: string) => {\r\n    const value = evaluatedTargetObj[key];\r\n    return push(arr, value && !parent(value) ? value : false);\r\n  }, [] as HTMLElement[]);\r\n  const elementIsGenerated = (elm: HTMLElement | false) =>\r\n    elm ? indexOf(generatedElements, elm) > -1 : null;\r\n  const { _target, _host, _padding, _viewport, _content, _viewportArrange } = evaluatedTargetObj;\r\n  const destroyFns: (() => any)[] = [];\r\n  const isTextareaHostGenerated = isTextarea && elementIsGenerated(_host);\r\n  const targetContents = isTextarea\r\n    ? _target\r\n    : contents(\r\n        [_content, _viewport, _padding, _host, _target].find(\r\n          (elm) => elementIsGenerated(elm) === false\r\n        )\r\n      );\r\n  const contentSlot = _content || _viewport;\r\n  const removeHostDataAttr = addDataAttrHost(_host, viewportIsTarget ? 'viewport' : 'host');\r\n  const removePaddingClass = addClass(_padding, classNamePadding);\r\n  const removeViewportClass = addClass(_viewport, !viewportIsTarget && classNameViewport);\r\n  const removeContentClass = addClass(_content, classNameContent);\r\n\r\n  // only insert host for textarea after target if it was generated\r\n  if (isTextareaHostGenerated) {\r\n    insertAfter(_target, _host);\r\n\r\n    push(destroyFns, () => {\r\n      insertAfter(_host, _target);\r\n      removeElements(_host);\r\n    });\r\n  }\r\n\r\n  appendChildren(contentSlot, targetContents);\r\n  appendChildren(_host, _padding);\r\n  appendChildren(_padding || _host, !viewportIsTarget && _viewport);\r\n  appendChildren(_viewport, _content);\r\n\r\n  push(destroyFns, () => {\r\n    removeHostDataAttr();\r\n    removeAttr(_viewport, dataAttributeHostOverflowX);\r\n    removeAttr(_viewport, dataAttributeHostOverflowY);\r\n\r\n    if (elementIsGenerated(_content)) {\r\n      unwrap(_content);\r\n    }\r\n    if (elementIsGenerated(_viewport)) {\r\n      unwrap(_viewport);\r\n    }\r\n    if (elementIsGenerated(_padding)) {\r\n      unwrap(_padding);\r\n    }\r\n    removePaddingClass();\r\n    removeViewportClass();\r\n    removeContentClass();\r\n  });\r\n\r\n  if (_nativeScrollbarStyling && !viewportIsTarget) {\r\n    push(destroyFns, removeClass.bind(0, _viewport, classNameViewportScrollbarStyling));\r\n  }\r\n  if (_viewportArrange) {\r\n    insertBefore(_viewport, _viewportArrange);\r\n    push(destroyFns, removeElements.bind(0, _viewportArrange));\r\n  }\r\n\r\n  return [evaluatedTargetObj, runEach.bind(0, destroyFns)];\r\n};\r\n","import { style } from 'support';\r\nimport { getEnvironment } from 'environment';\r\nimport type { CreateStructureUpdateSegment } from 'setups/structureSetup/structureSetup.update';\r\n\r\n/**\r\n * Lifecycle with the responsibility to adjust the trinsic behavior of the content element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createTrinsicUpdate: CreateStructureUpdateSegment = (\r\n  structureSetupElements,\r\n  state\r\n) => {\r\n  const { _content } = structureSetupElements;\r\n  const [getState] = state;\r\n\r\n  return (updateHints) => {\r\n    const { _flexboxGlue } = getEnvironment();\r\n    const { _heightIntrinsic } = getState();\r\n    const { _heightIntrinsicChanged } = updateHints;\r\n    const heightIntrinsicChanged = (_content || !_flexboxGlue) && _heightIntrinsicChanged;\r\n\r\n    if (heightIntrinsicChanged) {\r\n      style(_content, {\r\n        height: _heightIntrinsic ? '' : '100%',\r\n      });\r\n    }\r\n\r\n    return {\r\n      _sizeChanged: heightIntrinsicChanged,\r\n      _contentMutation: heightIntrinsicChanged,\r\n    };\r\n  };\r\n};\r\n","import { createCache, topRightBottomLeft, equalTRBL, style, assignDeep } from 'support';\r\nimport { StyleObject } from 'typings';\r\nimport { getEnvironment } from 'environment';\r\nimport type { CreateStructureUpdateSegment } from 'setups/structureSetup/structureSetup.update';\r\n\r\n/**\r\n * Lifecycle with the responsibility to adjust the padding styling of the padding and viewport element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createPaddingUpdate: CreateStructureUpdateSegment = (\r\n  structureSetupElements,\r\n  state\r\n) => {\r\n  const [getState, setState] = state;\r\n  const { _host, _padding, _viewport, _viewportIsTarget: _isSingleElm } = structureSetupElements;\r\n  const [updatePaddingCache, currentPaddingCache] = createCache(\r\n    {\r\n      _equal: equalTRBL,\r\n      _initialValue: topRightBottomLeft(),\r\n    },\r\n    topRightBottomLeft.bind(0, _host, 'padding', '')\r\n  );\r\n\r\n  return (updateHints, checkOption, force) => {\r\n    let [padding, paddingChanged] = currentPaddingCache(force);\r\n    const { _nativeScrollbarStyling, _flexboxGlue } = getEnvironment();\r\n    const { _directionIsRTL } = getState();\r\n    const { _sizeChanged, _contentMutation, _directionChanged } = updateHints;\r\n    const [paddingAbsolute, paddingAbsoluteChanged] = checkOption('paddingAbsolute');\r\n    const contentMutation = !_flexboxGlue && _contentMutation;\r\n\r\n    if (_sizeChanged || paddingChanged || contentMutation) {\r\n      [padding, paddingChanged] = updatePaddingCache(force);\r\n    }\r\n\r\n    const paddingStyleChanged =\r\n      !_isSingleElm && (paddingAbsoluteChanged || _directionChanged || paddingChanged);\r\n\r\n    if (paddingStyleChanged) {\r\n      // if there is no padding element and no scrollbar styling, paddingAbsolute isn't supported\r\n      const paddingRelative = !paddingAbsolute || (!_padding && !_nativeScrollbarStyling);\r\n      const paddingHorizontal = padding.r + padding.l;\r\n      const paddingVertical = padding.t + padding.b;\r\n\r\n      const paddingStyle: StyleObject = {\r\n        marginRight: paddingRelative && !_directionIsRTL ? -paddingHorizontal : 0,\r\n        marginBottom: paddingRelative ? -paddingVertical : 0,\r\n        marginLeft: paddingRelative && _directionIsRTL ? -paddingHorizontal : 0,\r\n        top: paddingRelative ? -padding.t : 0,\r\n        right: paddingRelative ? (_directionIsRTL ? -padding.r : 'auto') : 0,\r\n        left: paddingRelative ? (_directionIsRTL ? 'auto' : -padding.l) : 0,\r\n        width: paddingRelative ? `calc(100% + ${paddingHorizontal}px)` : '',\r\n      };\r\n      const viewportStyle: StyleObject = {\r\n        paddingTop: paddingRelative ? padding.t : 0,\r\n        paddingRight: paddingRelative ? padding.r : 0,\r\n        paddingBottom: paddingRelative ? padding.b : 0,\r\n        paddingLeft: paddingRelative ? padding.l : 0,\r\n      };\r\n\r\n      // if there is no padding element apply the style to the viewport element instead\r\n      style(_padding || _viewport, paddingStyle);\r\n      style(_viewport, viewportStyle);\r\n\r\n      setState({\r\n        _padding: padding,\r\n        _paddingAbsolute: !paddingRelative,\r\n        _viewportPaddingStyle: _padding\r\n          ? viewportStyle\r\n          : assignDeep({}, paddingStyle, viewportStyle),\r\n      });\r\n    }\r\n\r\n    return {\r\n      _paddingStyleChanged: paddingStyleChanged,\r\n    };\r\n  };\r\n};\r\n","import {\r\n  createCache,\r\n  keys,\r\n  attr,\r\n  WH,\r\n  XY,\r\n  style,\r\n  scrollSize,\r\n  fractionalSize,\r\n  equalWH,\r\n  addClass,\r\n  removeClass,\r\n  clientSize,\r\n  noop,\r\n  each,\r\n  equalXY,\r\n  attrClass,\r\n} from 'support';\r\nimport { getEnvironment } from 'environment';\r\nimport {\r\n  classNameViewportArrange,\r\n  classNameViewportScrollbarStyling,\r\n  classNameOverflowVisible,\r\n  dataAttributeHost,\r\n  dataAttributeHostOverflowX,\r\n  dataAttributeHostOverflowY,\r\n  dataValueHostViewportScrollbarStyling,\r\n  dataValueHostOverflowVisible,\r\n} from 'classnames';\r\nimport type { StyleObject, OverflowStyle } from 'typings';\r\nimport type { OverflowBehavior } from 'options';\r\nimport type { CreateStructureUpdateSegment } from 'setups/structureSetup/structureSetup.update';\r\n\r\ninterface ViewportOverflowState {\r\n  _scrollbarsHideOffset: XY<number>;\r\n  _scrollbarsHideOffsetArrange: XY<boolean>;\r\n  _overflowScroll: XY<boolean>;\r\n  _overflowStyle: XY<OverflowStyle>;\r\n}\r\n\r\ntype UndoViewportArrangeResult = [\r\n  redoViewportArrange: () => void,\r\n  overflowState?: ViewportOverflowState\r\n];\r\n\r\nconst { max } = Math;\r\nconst strVisible = 'visible';\r\nconst strHidden = 'hidden';\r\nconst overlaidScrollbarsHideOffset = 42;\r\nconst whCacheOptions = {\r\n  _equal: equalWH,\r\n  _initialValue: { w: 0, h: 0 },\r\n};\r\nconst xyCacheOptions = {\r\n  _equal: equalXY,\r\n  _initialValue: { x: strHidden, y: strHidden } as XY<OverflowStyle>,\r\n};\r\n\r\nconst getOverflowAmount = (\r\n  viewportScrollSize: WH<number>,\r\n  viewportClientSize: WH<number>,\r\n  sizeFraction: WH<number>\r\n) => {\r\n  const tollerance = window.devicePixelRatio % 1 !== 0 ? 1 : 0;\r\n  const amount = {\r\n    w: max(0, viewportScrollSize.w - viewportClientSize.w - max(0, sizeFraction.w)),\r\n    h: max(0, viewportScrollSize.h - viewportClientSize.h - max(0, sizeFraction.h)),\r\n  };\r\n\r\n  return {\r\n    w: amount.w > tollerance ? amount.w : 0,\r\n    h: amount.h > tollerance ? amount.h : 0,\r\n  };\r\n};\r\n\r\nconst conditionalClass = (\r\n  elm: Element | false | null | undefined,\r\n  classNames: string,\r\n  add: boolean\r\n) => (add ? addClass(elm, classNames) : removeClass(elm, classNames));\r\n\r\nconst overflowIsVisible = (overflowBehavior: string) => overflowBehavior.indexOf(strVisible) === 0;\r\n\r\n/**\r\n * Lifecycle with the responsibility to set the correct overflow and scrollbar hiding styles of the viewport element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createOverflowUpdate: CreateStructureUpdateSegment = (\r\n  structureSetupElements,\r\n  state\r\n) => {\r\n  const [getState, setState] = state;\r\n  const {\r\n    _host,\r\n    _padding,\r\n    _viewport,\r\n    _viewportArrange,\r\n    _viewportIsTarget,\r\n    _viewportAddRemoveClass,\r\n  } = structureSetupElements;\r\n  const {\r\n    _nativeScrollbarSize,\r\n    _flexboxGlue,\r\n    _nativeScrollbarStyling,\r\n    _nativeScrollbarIsOverlaid,\r\n  } = getEnvironment();\r\n  const doViewportArrange =\r\n    !_viewportIsTarget &&\r\n    !_nativeScrollbarStyling &&\r\n    (_nativeScrollbarIsOverlaid.x || _nativeScrollbarIsOverlaid.y);\r\n\r\n  const [updateSizeFraction, getCurrentSizeFraction] = createCache<WH<number>>(\r\n    whCacheOptions,\r\n    fractionalSize.bind(0, _viewport)\r\n  );\r\n\r\n  const [updateViewportScrollSizeCache, getCurrentViewportScrollSizeCache] = createCache<\r\n    WH<number>\r\n  >(whCacheOptions, scrollSize.bind(0, _viewport));\r\n\r\n  const [updateOverflowAmountCache, getCurrentOverflowAmountCache] =\r\n    createCache<WH<number>>(whCacheOptions);\r\n\r\n  const [updateOverflowStyleCache] = createCache<XY<OverflowStyle>>(xyCacheOptions);\r\n\r\n  /**\r\n   * Applies a fixed height to the viewport so it can't overflow or underflow the host element.\r\n   * @param viewportOverflowState The current overflow state.\r\n   * @param heightIntrinsic Whether the host height is intrinsic or not.\r\n   */\r\n  const fixFlexboxGlue = (\r\n    viewportOverflowState: ViewportOverflowState,\r\n    heightIntrinsic: boolean\r\n  ) => {\r\n    style(_viewport, {\r\n      height: '',\r\n    });\r\n\r\n    if (heightIntrinsic) {\r\n      const { _paddingAbsolute, _padding: padding } = getState();\r\n      const { _overflowScroll, _scrollbarsHideOffset } = viewportOverflowState;\r\n      const fSize = fractionalSize(_host);\r\n      const hostClientSize = clientSize(_host);\r\n\r\n      // padding subtraction is only needed if padding is absolute or if viewport is content-box\r\n      const isContentBox = style(_viewport, 'boxSizing') === 'content-box';\r\n      const paddingVertical = _paddingAbsolute || isContentBox ? padding.b + padding.t : 0;\r\n      const subtractXScrollbar = !(_nativeScrollbarIsOverlaid.x && isContentBox);\r\n\r\n      style(_viewport, {\r\n        height:\r\n          hostClientSize.h +\r\n          fSize.h +\r\n          (_overflowScroll.x && subtractXScrollbar ? _scrollbarsHideOffset.x : 0) -\r\n          paddingVertical,\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Gets the current overflow state of the viewport.\r\n   * @param showNativeOverlaidScrollbars Whether native overlaid scrollbars are shown instead of hidden.\r\n   * @param viewportStyleObj The viewport style object where the overflow scroll property can be read of, or undefined if shall be determined.\r\n   * @returns A object which contains informations about the current overflow state.\r\n   */\r\n  const getViewportOverflowState = (\r\n    showNativeOverlaidScrollbars: boolean,\r\n    viewportStyleObj?: StyleObject\r\n  ): ViewportOverflowState => {\r\n    const arrangeHideOffset =\r\n      !_nativeScrollbarStyling && !showNativeOverlaidScrollbars ? overlaidScrollbarsHideOffset : 0;\r\n    const getStatePerAxis = (\r\n      styleKey: string,\r\n      isOverlaid: boolean,\r\n      nativeScrollbarSize: number\r\n    ) => {\r\n      const overflowStyle = style(_viewport, styleKey);\r\n      // can't do something like \"viewportStyleObj && viewportStyleObj[styleKey] || overflowStyle\" here!\r\n      const objectPrefferedOverflowStyle = viewportStyleObj\r\n        ? viewportStyleObj[styleKey]\r\n        : overflowStyle;\r\n      const overflowScroll = objectPrefferedOverflowStyle === 'scroll';\r\n      const nonScrollbarStylingHideOffset = isOverlaid ? arrangeHideOffset : nativeScrollbarSize;\r\n      const scrollbarsHideOffset =\r\n        overflowScroll && !_nativeScrollbarStyling ? nonScrollbarStylingHideOffset : 0;\r\n      const scrollbarsHideOffsetArrange = isOverlaid && !!arrangeHideOffset;\r\n\r\n      return [overflowStyle, overflowScroll, scrollbarsHideOffset, scrollbarsHideOffsetArrange] as [\r\n        overflowStyle: OverflowStyle,\r\n        overflowScroll: boolean,\r\n        scrollbarsHideOffset: number,\r\n        scrollbarsHideOffsetArrange: boolean\r\n      ];\r\n    };\r\n\r\n    const [xOverflowStyle, xOverflowScroll, xScrollbarsHideOffset, xScrollbarsHideOffsetArrange] =\r\n      getStatePerAxis('overflowX', _nativeScrollbarIsOverlaid.x, _nativeScrollbarSize.x);\r\n    const [yOverflowStyle, yOverflowScroll, yScrollbarsHideOffset, yScrollbarsHideOffsetArrange] =\r\n      getStatePerAxis('overflowY', _nativeScrollbarIsOverlaid.y, _nativeScrollbarSize.y);\r\n\r\n    return {\r\n      _overflowStyle: {\r\n        x: xOverflowStyle,\r\n        y: yOverflowStyle,\r\n      },\r\n      _overflowScroll: {\r\n        x: xOverflowScroll,\r\n        y: yOverflowScroll,\r\n      },\r\n      _scrollbarsHideOffset: {\r\n        x: xScrollbarsHideOffset,\r\n        y: yScrollbarsHideOffset,\r\n      },\r\n      _scrollbarsHideOffsetArrange: {\r\n        x: xScrollbarsHideOffsetArrange,\r\n        y: yScrollbarsHideOffsetArrange,\r\n      },\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Sets the overflow property of the viewport and calculates the a overflow state according to the new parameters.\r\n   * @param showNativeOverlaidScrollbars Whether to show natively overlaid scrollbars.\r\n   * @param overflowAmount The overflow amount.\r\n   * @param overflow The overflow behavior according to the options.\r\n   * @param viewportStyleObj The viewport style object to which the overflow style shall be applied.\r\n   * @returns A object which represents the newly set overflow state.\r\n   */\r\n  const setViewportOverflowState = (\r\n    showNativeOverlaidScrollbars: boolean,\r\n    hasOverflow: XY<boolean>,\r\n    overflowOption: XY<OverflowBehavior>,\r\n    viewportStyleObj: StyleObject\r\n  ): ViewportOverflowState => {\r\n    const setAxisOverflowStyle = (behavior: OverflowBehavior, hasOverflowAxis: boolean) => {\r\n      const overflowVisible = overflowIsVisible(behavior);\r\n      const overflowVisibleBehavior =\r\n        (hasOverflowAxis && overflowVisible && behavior.replace(`${strVisible}-`, '')) || '';\r\n      return [\r\n        hasOverflowAxis && !overflowVisible ? behavior : '',\r\n        overflowIsVisible(overflowVisibleBehavior) ? 'hidden' : overflowVisibleBehavior,\r\n      ];\r\n    };\r\n\r\n    const [overflowX, visibleBehaviorX] = setAxisOverflowStyle(overflowOption.x, hasOverflow.x);\r\n    const [overflowY, visibleBehaviorY] = setAxisOverflowStyle(overflowOption.y, hasOverflow.y);\r\n\r\n    viewportStyleObj.overflowX = visibleBehaviorX && overflowY ? visibleBehaviorX : overflowX;\r\n    viewportStyleObj.overflowY = visibleBehaviorY && overflowX ? visibleBehaviorY : overflowY;\r\n\r\n    return getViewportOverflowState(showNativeOverlaidScrollbars, viewportStyleObj);\r\n  };\r\n\r\n  /**\r\n   * Sets the styles of the viewport arrange element.\r\n   * @param viewportOverflowState The viewport overflow state according to which the scrollbars shall be hidden.\r\n   * @param viewportScrollSize The content scroll size.\r\n   * @param directionIsRTL Whether the direction is RTL or not.\r\n   * @returns A boolean which indicates whether the viewport arrange element was adjusted.\r\n   */\r\n  const arrangeViewport = (\r\n    viewportOverflowState: ViewportOverflowState,\r\n    viewportScrollSize: WH<number>,\r\n    sizeFraction: WH<number>,\r\n    directionIsRTL: boolean\r\n  ) => {\r\n    if (doViewportArrange) {\r\n      const { _viewportPaddingStyle } = getState();\r\n      const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } = viewportOverflowState;\r\n      const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n      const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\r\n      const viewportArrangeHorizontalPaddingKey: keyof StyleObject = directionIsRTL\r\n        ? 'paddingRight'\r\n        : 'paddingLeft';\r\n      const viewportArrangeHorizontalPaddingValue = _viewportPaddingStyle[\r\n        viewportArrangeHorizontalPaddingKey\r\n      ] as number;\r\n      const viewportArrangeVerticalPaddingValue = _viewportPaddingStyle.paddingTop as number;\r\n      const fractionalContentWidth = viewportScrollSize.w + sizeFraction.w;\r\n      const fractionalContenHeight = viewportScrollSize.h + sizeFraction.h;\r\n      const arrangeSize = {\r\n        w:\r\n          hideOffsetY && arrangeY\r\n            ? `${hideOffsetY + fractionalContentWidth - viewportArrangeHorizontalPaddingValue}px`\r\n            : '',\r\n        h:\r\n          hideOffsetX && arrangeX\r\n            ? `${hideOffsetX + fractionalContenHeight - viewportArrangeVerticalPaddingValue}px`\r\n            : '',\r\n      };\r\n\r\n      // adjust content arrange / before element\r\n      if (_viewportArrange) {\r\n        const { sheet } = _viewportArrange;\r\n        if (sheet) {\r\n          const { cssRules } = sheet;\r\n          if (cssRules) {\r\n            if (!cssRules.length) {\r\n              sheet.insertRule(\r\n                `#${attr(_viewportArrange, 'id')} + .${classNameViewportArrange}::before {}`,\r\n                0\r\n              );\r\n            }\r\n\r\n            // @ts-ignore\r\n            const ruleStyle = cssRules[0].style;\r\n\r\n            ruleStyle.width = arrangeSize.w;\r\n            ruleStyle.height = arrangeSize.h;\r\n          }\r\n        }\r\n      } else {\r\n        style<'--os-vaw' | '--os-vah'>(_viewport, {\r\n          '--os-vaw': arrangeSize.w,\r\n          '--os-vah': arrangeSize.h,\r\n        });\r\n      }\r\n    }\r\n\r\n    return doViewportArrange;\r\n  };\r\n\r\n  /**\r\n   * Hides the native scrollbars according to the passed parameters.\r\n   * @param viewportOverflowState The viewport overflow state.\r\n   * @param directionIsRTL Whether the direction is RTL or not.\r\n   * @param viewportArrange Whether special styles related to the viewport arrange strategy shall be applied.\r\n   * @param viewportStyleObj The viewport style object to which the needed styles shall be applied.\r\n   */\r\n  const hideNativeScrollbars = (\r\n    viewportOverflowState: ViewportOverflowState,\r\n    directionIsRTL: boolean,\r\n    viewportArrange: boolean,\r\n    viewportStyleObj: StyleObject\r\n  ) => {\r\n    const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } = viewportOverflowState;\r\n    const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n    const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\r\n    const { _viewportPaddingStyle: viewportPaddingStyle } = getState();\r\n    const horizontalMarginKey: keyof StyleObject = directionIsRTL ? 'marginLeft' : 'marginRight';\r\n    const viewportHorizontalPaddingKey: keyof StyleObject = directionIsRTL\r\n      ? 'paddingLeft'\r\n      : 'paddingRight';\r\n    const horizontalMarginValue = viewportPaddingStyle[horizontalMarginKey] as number;\r\n    const verticalMarginValue = viewportPaddingStyle.marginBottom as number;\r\n    const horizontalPaddingValue = viewportPaddingStyle[viewportHorizontalPaddingKey] as number;\r\n    const verticalPaddingValue = viewportPaddingStyle.paddingBottom as number;\r\n\r\n    // horizontal\r\n    viewportStyleObj.width = `calc(100% + ${hideOffsetY + horizontalMarginValue * -1}px)`;\r\n    viewportStyleObj[horizontalMarginKey] = -hideOffsetY + horizontalMarginValue;\r\n\r\n    // vertical\r\n    viewportStyleObj.marginBottom = -hideOffsetX + verticalMarginValue;\r\n\r\n    // viewport arrange additional styles\r\n    if (viewportArrange) {\r\n      viewportStyleObj[viewportHorizontalPaddingKey] =\r\n        horizontalPaddingValue + (arrangeY ? hideOffsetY : 0);\r\n      viewportStyleObj.paddingBottom = verticalPaddingValue + (arrangeX ? hideOffsetX : 0);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Removes all styles applied because of the viewport arrange strategy.\r\n   * @param showNativeOverlaidScrollbars Whether native overlaid scrollbars are shown instead of hidden.\r\n   * @param directionIsRTL Whether the direction is RTL or not.\r\n   * @param viewportOverflowState The currentviewport overflow state or undefined if it has to be determined.\r\n   * @returns A object with a function which applies all the removed styles and the determined viewport vverflow state.\r\n   */\r\n  const undoViewportArrange = (\r\n    showNativeOverlaidScrollbars: boolean,\r\n    directionIsRTL: boolean,\r\n    viewportOverflowState?: ViewportOverflowState\r\n  ): UndoViewportArrangeResult => {\r\n    if (doViewportArrange) {\r\n      const finalViewportOverflowState =\r\n        viewportOverflowState || getViewportOverflowState(showNativeOverlaidScrollbars);\r\n      const { _viewportPaddingStyle: viewportPaddingStyle } = getState();\r\n      const { _scrollbarsHideOffsetArrange } = finalViewportOverflowState;\r\n      const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n      const finalPaddingStyle: StyleObject = {};\r\n      const assignProps = (props: string) =>\r\n        each(props.split(' '), (prop) => {\r\n          finalPaddingStyle[prop] = viewportPaddingStyle[prop];\r\n        });\r\n\r\n      if (arrangeX) {\r\n        assignProps('marginBottom paddingTop paddingBottom');\r\n      }\r\n\r\n      if (arrangeY) {\r\n        assignProps('marginLeft marginRight paddingLeft paddingRight');\r\n      }\r\n\r\n      const prevStyle = style(_viewport, keys(finalPaddingStyle));\r\n\r\n      removeClass(_viewport, classNameViewportArrange);\r\n\r\n      if (!_flexboxGlue) {\r\n        finalPaddingStyle.height = '';\r\n      }\r\n\r\n      style(_viewport, finalPaddingStyle);\r\n\r\n      return [\r\n        () => {\r\n          hideNativeScrollbars(\r\n            finalViewportOverflowState,\r\n            directionIsRTL,\r\n            doViewportArrange,\r\n            prevStyle\r\n          );\r\n          style(_viewport, prevStyle);\r\n          addClass(_viewport, classNameViewportArrange);\r\n        },\r\n        finalViewportOverflowState,\r\n      ];\r\n    }\r\n    return [noop];\r\n  };\r\n\r\n  return (updateHints, checkOption, force) => {\r\n    const {\r\n      _sizeChanged,\r\n      _hostMutation,\r\n      _contentMutation,\r\n      _paddingStyleChanged,\r\n      _heightIntrinsicChanged,\r\n      _directionChanged,\r\n    } = updateHints;\r\n    const { _heightIntrinsic, _directionIsRTL } = getState();\r\n    const [showNativeOverlaidScrollbarsOption, showNativeOverlaidScrollbarsChanged] =\r\n      checkOption<boolean>('nativeScrollbarsOverlaid.show');\r\n    const [overflow, overflowChanged] = checkOption<XY<OverflowBehavior>>('overflow');\r\n\r\n    const showNativeOverlaidScrollbars =\r\n      showNativeOverlaidScrollbarsOption &&\r\n      _nativeScrollbarIsOverlaid.x &&\r\n      _nativeScrollbarIsOverlaid.y;\r\n    const adjustFlexboxGlue =\r\n      !_viewportIsTarget &&\r\n      !_flexboxGlue &&\r\n      (_sizeChanged ||\r\n        _contentMutation ||\r\n        _hostMutation ||\r\n        showNativeOverlaidScrollbarsChanged ||\r\n        _heightIntrinsicChanged);\r\n    const overflowXVisible = overflowIsVisible(overflow.x);\r\n    const overflowYVisible = overflowIsVisible(overflow.y);\r\n    const overflowVisible = overflowXVisible || overflowYVisible;\r\n\r\n    let sizeFractionCache = getCurrentSizeFraction(force);\r\n    let viewportScrollSizeCache = getCurrentViewportScrollSizeCache(force);\r\n    let overflowAmuntCache = getCurrentOverflowAmountCache(force);\r\n\r\n    let preMeasureViewportOverflowState: ViewportOverflowState | undefined;\r\n\r\n    if (showNativeOverlaidScrollbarsChanged && _nativeScrollbarStyling) {\r\n      _viewportAddRemoveClass(\r\n        classNameViewportScrollbarStyling,\r\n        dataValueHostViewportScrollbarStyling,\r\n        !showNativeOverlaidScrollbars\r\n      );\r\n    }\r\n\r\n    if (adjustFlexboxGlue) {\r\n      preMeasureViewportOverflowState = getViewportOverflowState(showNativeOverlaidScrollbars);\r\n      fixFlexboxGlue(preMeasureViewportOverflowState, _heightIntrinsic);\r\n    }\r\n\r\n    if (\r\n      _sizeChanged ||\r\n      _paddingStyleChanged ||\r\n      _contentMutation ||\r\n      _directionChanged ||\r\n      showNativeOverlaidScrollbarsChanged\r\n    ) {\r\n      if (overflowVisible) {\r\n        _viewportAddRemoveClass(classNameOverflowVisible, dataValueHostOverflowVisible, false);\r\n      }\r\n\r\n      const [redoViewportArrange, undoViewportArrangeOverflowState] = undoViewportArrange(\r\n        showNativeOverlaidScrollbars,\r\n        _directionIsRTL,\r\n        preMeasureViewportOverflowState\r\n      );\r\n      const [sizeFraction, sizeFractionChanged] = (sizeFractionCache = updateSizeFraction(force));\r\n      const [viewportScrollSize, viewportScrollSizeChanged] = (viewportScrollSizeCache =\r\n        updateViewportScrollSizeCache(force));\r\n      const viewportclientSize = clientSize(_viewport);\r\n      let arrangedViewportScrollSize = viewportScrollSize;\r\n      let arrangedViewportClientSize = viewportclientSize;\r\n\r\n      redoViewportArrange();\r\n\r\n      // if re measure is required (only required if content arrange strategy is used)\r\n      if (\r\n        (viewportScrollSizeChanged || sizeFractionChanged || showNativeOverlaidScrollbarsChanged) &&\r\n        undoViewportArrangeOverflowState &&\r\n        !showNativeOverlaidScrollbars &&\r\n        arrangeViewport(\r\n          undoViewportArrangeOverflowState,\r\n          viewportScrollSize,\r\n          sizeFraction,\r\n          _directionIsRTL\r\n        )\r\n      ) {\r\n        arrangedViewportClientSize = clientSize(_viewport);\r\n        arrangedViewportScrollSize = scrollSize(_viewport);\r\n      }\r\n\r\n      overflowAmuntCache = updateOverflowAmountCache(\r\n        getOverflowAmount(\r\n          {\r\n            w: max(viewportScrollSize.w, arrangedViewportScrollSize.w),\r\n            h: max(viewportScrollSize.h, arrangedViewportScrollSize.h),\r\n          }, // scroll size\r\n          {\r\n            w: arrangedViewportClientSize.w + max(0, viewportclientSize.w - viewportScrollSize.w),\r\n            h: arrangedViewportClientSize.h + max(0, viewportclientSize.h - viewportScrollSize.h),\r\n          }, // client size\r\n          sizeFraction\r\n        ),\r\n        force\r\n      );\r\n    }\r\n\r\n    const [overflowAmount, overflowAmountChanged] = overflowAmuntCache;\r\n    const [viewportScrollSize, viewportScrollSizeChanged] = viewportScrollSizeCache;\r\n    const [sizeFraction, sizeFractionChanged] = sizeFractionCache;\r\n    const hasOverflow = {\r\n      x: overflowAmount.w > 0,\r\n      y: overflowAmount.h > 0,\r\n    };\r\n    const removeClipping =\r\n      (overflowXVisible && overflowYVisible && (hasOverflow.x || hasOverflow.y)) ||\r\n      (overflowXVisible && hasOverflow.x && !hasOverflow.y) ||\r\n      (overflowYVisible && hasOverflow.y && !hasOverflow.x);\r\n\r\n    if (\r\n      _paddingStyleChanged ||\r\n      _directionChanged ||\r\n      sizeFractionChanged ||\r\n      viewportScrollSizeChanged ||\r\n      overflowAmountChanged ||\r\n      overflowChanged ||\r\n      showNativeOverlaidScrollbarsChanged ||\r\n      adjustFlexboxGlue\r\n    ) {\r\n      const viewportStyle: StyleObject = {\r\n        marginRight: 0,\r\n        marginBottom: 0,\r\n        marginLeft: 0,\r\n        width: '',\r\n        overflowY: '',\r\n        overflowX: '',\r\n      };\r\n      const viewportOverflowState = setViewportOverflowState(\r\n        showNativeOverlaidScrollbars,\r\n        hasOverflow,\r\n        overflow,\r\n        viewportStyle\r\n      );\r\n      const viewportArranged = arrangeViewport(\r\n        viewportOverflowState,\r\n        viewportScrollSize,\r\n        sizeFraction,\r\n        _directionIsRTL\r\n      );\r\n\r\n      if (!_viewportIsTarget) {\r\n        hideNativeScrollbars(\r\n          viewportOverflowState,\r\n          _directionIsRTL,\r\n          viewportArranged,\r\n          viewportStyle\r\n        );\r\n      }\r\n\r\n      if (adjustFlexboxGlue) {\r\n        fixFlexboxGlue(viewportOverflowState, _heightIntrinsic);\r\n      }\r\n\r\n      if (_viewportIsTarget) {\r\n        attr(_host, dataAttributeHostOverflowX, viewportStyle.overflowX as string);\r\n        attr(_host, dataAttributeHostOverflowY, viewportStyle.overflowY as string);\r\n      } else {\r\n        style(_viewport, viewportStyle);\r\n      }\r\n    }\r\n\r\n    attrClass(_host, dataAttributeHost, dataValueHostOverflowVisible, removeClipping);\r\n    conditionalClass(_padding, classNameOverflowVisible, removeClipping);\r\n    !_viewportIsTarget && conditionalClass(_viewport, classNameOverflowVisible, overflowVisible);\r\n\r\n    const [overflowStyle, overflowStyleChanged] = updateOverflowStyleCache(\r\n      getViewportOverflowState(showNativeOverlaidScrollbars)._overflowStyle\r\n    );\r\n\r\n    setState({\r\n      _overflowStyle: overflowStyle,\r\n      _overflowAmount: {\r\n        x: overflowAmount.w,\r\n        y: overflowAmount.h,\r\n      },\r\n      _hasOverflow: hasOverflow,\r\n    });\r\n\r\n    return {\r\n      _overflowStyleChanged: overflowStyleChanged,\r\n      _overflowAmountChanged: overflowAmountChanged,\r\n    };\r\n  };\r\n};\r\n","import { each, isNumber, scrollLeft, scrollTop, assignDeep, keys } from 'support';\r\nimport { getEnvironment } from 'environment';\r\nimport {\r\n  createTrinsicUpdate,\r\n  createPaddingUpdate,\r\n  createOverflowUpdate,\r\n} from 'setups/structureSetup/updateSegments';\r\nimport type { SetupState, SetupUpdateSegment, SetupUpdateCheckOption } from 'setups';\r\nimport type { StructureSetupState } from 'setups/structureSetup';\r\nimport type { StructureSetupElementsObj } from 'setups/structureSetup/structureSetup.elements';\r\n\r\nexport type CreateStructureUpdateSegment = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  state: SetupState<StructureSetupState>\r\n) => StructureSetupUpdateSegment;\r\n\r\nexport type StructureSetupUpdateSegment = SetupUpdateSegment<StructureSetupUpdateHints>;\r\n\r\nexport type StructureSetupUpdate = (\r\n  checkOption: SetupUpdateCheckOption,\r\n  updateHints: Partial<StructureSetupUpdateHints>,\r\n  force?: boolean\r\n) => StructureSetupUpdateHints;\r\n\r\nexport interface StructureSetupUpdateHints {\r\n  _sizeChanged: boolean;\r\n  _directionChanged: boolean;\r\n  _heightIntrinsicChanged: boolean;\r\n  _overflowAmountChanged: boolean;\r\n  _overflowStyleChanged: boolean;\r\n  _paddingStyleChanged: boolean;\r\n  _hostMutation: boolean;\r\n  _contentMutation: boolean;\r\n}\r\n\r\nconst prepareUpdateHints = <T extends StructureSetupUpdateHints>(\r\n  leading: Required<T>,\r\n  adaptive?: Partial<T>,\r\n  force?: boolean\r\n): Required<T> => {\r\n  const result = {};\r\n  const finalAdaptive = adaptive || {};\r\n  const objKeys = keys(leading).concat(keys(finalAdaptive));\r\n\r\n  each(objKeys, (key) => {\r\n    const leadingValue = leading[key];\r\n    const adaptiveValue = finalAdaptive[key];\r\n    result[key] = !!(force || leadingValue || adaptiveValue);\r\n  });\r\n\r\n  return result as Required<T>;\r\n};\r\n\r\nexport const createStructureSetupUpdate = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  state: SetupState<StructureSetupState>\r\n): StructureSetupUpdate => {\r\n  const { _viewport } = structureSetupElements;\r\n  const { _nativeScrollbarStyling, _nativeScrollbarIsOverlaid, _flexboxGlue } = getEnvironment();\r\n  const doViewportArrange =\r\n    !_nativeScrollbarStyling && (_nativeScrollbarIsOverlaid.x || _nativeScrollbarIsOverlaid.y);\r\n\r\n  const updateSegments: StructureSetupUpdateSegment[] = [\r\n    createTrinsicUpdate(structureSetupElements, state),\r\n    createPaddingUpdate(structureSetupElements, state),\r\n    createOverflowUpdate(structureSetupElements, state),\r\n  ];\r\n\r\n  return (\r\n    checkOption: SetupUpdateCheckOption,\r\n    updateHints: Partial<StructureSetupUpdateHints>,\r\n    force?: boolean\r\n  ) => {\r\n    const initialUpdateHints = prepareUpdateHints(\r\n      assignDeep(\r\n        {\r\n          _sizeChanged: false,\r\n          _paddingStyleChanged: false,\r\n          _directionChanged: false,\r\n          _heightIntrinsicChanged: false,\r\n          _overflowAmountChanged: false,\r\n          _overflowStyleChanged: false,\r\n          _hostMutation: false,\r\n          _contentMutation: false,\r\n        },\r\n        updateHints\r\n      ),\r\n      {},\r\n      force\r\n    );\r\n    const adjustScrollOffset = doViewportArrange || !_flexboxGlue;\r\n    const scrollOffsetX = adjustScrollOffset && scrollLeft(_viewport);\r\n    const scrollOffsetY = adjustScrollOffset && scrollTop(_viewport);\r\n\r\n    let adaptivedUpdateHints: Required<StructureSetupUpdateHints> = initialUpdateHints;\r\n    each(updateSegments, (updateSegment) => {\r\n      adaptivedUpdateHints = prepareUpdateHints<StructureSetupUpdateHints>(\r\n        adaptivedUpdateHints,\r\n        updateSegment(adaptivedUpdateHints, checkOption, !!force) || {},\r\n        force\r\n      );\r\n    });\r\n\r\n    if (isNumber(scrollOffsetX)) {\r\n      scrollLeft(_viewport, scrollOffsetX);\r\n    }\r\n    if (isNumber(scrollOffsetY)) {\r\n      scrollTop(_viewport, scrollOffsetY);\r\n    }\r\n\r\n    return adaptivedUpdateHints;\r\n  };\r\n};\r\n","import {\r\n  Cache,\r\n  CacheValues,\r\n  createCache,\r\n  createDOM,\r\n  style,\r\n  appendChildren,\r\n  offsetSize,\r\n  scrollLeft,\r\n  scrollTop,\r\n  runEach,\r\n  prependChildren,\r\n  removeElements,\r\n  on,\r\n  stopAndPrevent,\r\n  addClass,\r\n  equalWH,\r\n  push,\r\n  cAF,\r\n  rAF,\r\n  ResizeObserverConstructor,\r\n  isArray,\r\n  isBoolean,\r\n  removeClass,\r\n  isObject,\r\n} from 'support';\r\nimport { getEnvironment } from 'environment';\r\nimport {\r\n  classNameSizeObserver,\r\n  classNameSizeObserverAppear,\r\n  classNameSizeObserverListener,\r\n  classNameSizeObserverListenerScroll,\r\n  classNameSizeObserverListenerItem,\r\n  classNameSizeObserverListenerItemFinal,\r\n} from 'classnames';\r\n\r\nexport interface SizeObserverOptions {\r\n  _direction?: boolean;\r\n  _appear?: boolean;\r\n}\r\n\r\nexport interface SizeObserverCallbackParams {\r\n  _sizeChanged: boolean;\r\n  _directionIsRTLCache?: CacheValues<boolean>;\r\n  _appear?: boolean;\r\n}\r\n\r\nexport type DestroySizeObserver = () => void;\r\n\r\nconst animationStartEventName = 'animationstart';\r\nconst scrollEventName = 'scroll';\r\nconst scrollAmount = 3333333;\r\nconst getElmDirectionIsRTL = (elm: HTMLElement): boolean => style(elm, 'direction') === 'rtl';\r\nconst domRectHasDimensions = (rect?: DOMRectReadOnly) => rect && (rect.height || rect.width);\r\n\r\n/**\r\n * Creates a size observer which observes any size, padding, border, margin and box-sizing changes of the target element. Depending on the options also direction and appear can be observed.\r\n * @param target The target element which shall be observed.\r\n * @param onSizeChangedCallback The callback which gets called after a size change was detected.\r\n * @param options The options for size detection, whether to observe also direction and appear.\r\n * @returns A object which represents the instance of the size observer.\r\n */\r\nexport const createSizeObserver = (\r\n  target: HTMLElement,\r\n  onSizeChangedCallback: (params: SizeObserverCallbackParams) => any,\r\n  options?: SizeObserverOptions\r\n): DestroySizeObserver => {\r\n  const { _direction: observeDirectionChange = false, _appear: observeAppearChange = false } =\r\n    options || {};\r\n  const { _rtlScrollBehavior: rtlScrollBehavior } = getEnvironment();\r\n  const baseElements = createDOM(\r\n    `<div class=\"${classNameSizeObserver}\"><div class=\"${classNameSizeObserverListener}\"></div></div>`\r\n  );\r\n  const sizeObserver = baseElements[0] as HTMLElement;\r\n  const listenerElement = sizeObserver.firstChild as HTMLElement;\r\n  const getIsDirectionRTL = getElmDirectionIsRTL.bind(0, sizeObserver);\r\n  const [updateResizeObserverContentRectCache] = createCache<DOMRectReadOnly | undefined>({\r\n    _initialValue: undefined,\r\n    _alwaysUpdateValues: true,\r\n    _equal: (currVal, newVal) =>\r\n      !(\r\n        !currVal || // if no initial value\r\n        // if from display: none to display: block\r\n        (!domRectHasDimensions(currVal) && domRectHasDimensions(newVal))\r\n      ),\r\n  });\r\n  const onSizeChangedCallbackProxy = (\r\n    sizeChangedContext?: CacheValues<boolean> | ResizeObserverEntry[] | Event | boolean\r\n  ) => {\r\n    const isResizeObserverCall =\r\n      isArray(sizeChangedContext) &&\r\n      sizeChangedContext.length > 0 &&\r\n      isObject(sizeChangedContext[0]);\r\n\r\n    const hasDirectionCache =\r\n      !isResizeObserverCall && isBoolean((sizeChangedContext as CacheValues<boolean>)[0]);\r\n\r\n    let skip = false;\r\n    let appear: boolean | number | undefined = false;\r\n    let doDirectionScroll = true; // always true if sizeChangedContext is Event (appear callback or RO. Polyfill)\r\n\r\n    // if triggered from RO.\r\n    if (isResizeObserverCall) {\r\n      const [currRContentRect, , prevContentRect] = updateResizeObserverContentRectCache(\r\n        (sizeChangedContext as ResizeObserverEntry[]).pop()!.contentRect\r\n      );\r\n      const hasDimensions = domRectHasDimensions(currRContentRect);\r\n      const hadDimensions = domRectHasDimensions(prevContentRect);\r\n      skip = !prevContentRect || !hasDimensions; // skip on initial RO. call or if display is none\r\n      appear = !hadDimensions && hasDimensions;\r\n\r\n      doDirectionScroll = !skip; // direction scroll when not skipping\r\n    }\r\n    // else if its triggered with DirectionCache\r\n    else if (hasDirectionCache) {\r\n      [, doDirectionScroll] = sizeChangedContext as CacheValues<boolean>; // direction scroll when DirectionCache changed, false otherwise\r\n    }\r\n    // else if it triggered with appear from polyfill\r\n    else {\r\n      appear = sizeChangedContext === true;\r\n    }\r\n\r\n    if (observeDirectionChange && doDirectionScroll) {\r\n      const rtl = hasDirectionCache\r\n        ? (sizeChangedContext as CacheValues<boolean>)[0]\r\n        : getElmDirectionIsRTL(sizeObserver);\r\n      scrollLeft(\r\n        sizeObserver,\r\n        rtl\r\n          ? rtlScrollBehavior.n\r\n            ? -scrollAmount\r\n            : rtlScrollBehavior.i\r\n            ? 0\r\n            : scrollAmount\r\n          : scrollAmount\r\n      );\r\n      scrollTop(sizeObserver, scrollAmount);\r\n    }\r\n\r\n    if (!skip) {\r\n      onSizeChangedCallback({\r\n        _sizeChanged: !hasDirectionCache,\r\n        _directionIsRTLCache: hasDirectionCache\r\n          ? (sizeChangedContext as CacheValues<boolean>)\r\n          : undefined,\r\n        _appear: !!appear,\r\n      });\r\n    }\r\n  };\r\n  const offListeners: (() => void)[] = [];\r\n  let appearCallback: ((...args: any) => any) | false = observeAppearChange\r\n    ? onSizeChangedCallbackProxy\r\n    : false;\r\n  let directionIsRTLCache: Cache<boolean> | undefined;\r\n\r\n  if (ResizeObserverConstructor) {\r\n    const resizeObserverInstance = new ResizeObserverConstructor(onSizeChangedCallbackProxy);\r\n    resizeObserverInstance.observe(listenerElement);\r\n    push(offListeners, () => {\r\n      resizeObserverInstance.disconnect();\r\n    });\r\n  } else {\r\n    const observerElementChildren = createDOM(\r\n      `<div class=\"${classNameSizeObserverListenerItem}\" dir=\"ltr\"><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\"></div></div><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\" style=\"width: 200%; height: 200%\"></div></div></div>`\r\n    );\r\n    appendChildren(listenerElement, observerElementChildren);\r\n    addClass(listenerElement, classNameSizeObserverListenerScroll);\r\n    const observerElementChildrenRoot = observerElementChildren[0] as HTMLElement;\r\n    const shrinkElement = observerElementChildrenRoot.lastChild as HTMLElement;\r\n    const expandElement = observerElementChildrenRoot.firstChild as HTMLElement;\r\n    const expandElementChild = expandElement?.firstChild as HTMLElement;\r\n\r\n    let cacheSize = offsetSize(observerElementChildrenRoot);\r\n    let currSize = cacheSize;\r\n    let isDirty = false;\r\n    let rAFId: number;\r\n\r\n    const reset = () => {\r\n      scrollLeft(expandElement, scrollAmount);\r\n      scrollTop(expandElement, scrollAmount);\r\n      scrollLeft(shrinkElement, scrollAmount);\r\n      scrollTop(shrinkElement, scrollAmount);\r\n    };\r\n    const onResized = (appear?: unknown) => {\r\n      rAFId = 0;\r\n      if (isDirty) {\r\n        cacheSize = currSize;\r\n        onSizeChangedCallbackProxy(appear === true);\r\n      }\r\n    };\r\n    const onScroll = (scrollEvent?: Event | false) => {\r\n      currSize = offsetSize(observerElementChildrenRoot);\r\n      isDirty = !scrollEvent || !equalWH(currSize, cacheSize);\r\n\r\n      if (scrollEvent) {\r\n        stopAndPrevent(scrollEvent);\r\n\r\n        if (isDirty && !rAFId) {\r\n          cAF!(rAFId);\r\n          rAFId = rAF!(onResized);\r\n        }\r\n      } else {\r\n        onResized(scrollEvent === false);\r\n      }\r\n\r\n      reset();\r\n    };\r\n\r\n    push(offListeners, [\r\n      on(expandElement, scrollEventName, onScroll),\r\n      on(shrinkElement, scrollEventName, onScroll),\r\n    ]);\r\n\r\n    // lets assume that the divs will never be that large and a constant value is enough\r\n    style(expandElementChild, {\r\n      width: scrollAmount,\r\n      height: scrollAmount,\r\n    });\r\n\r\n    reset();\r\n\r\n    appearCallback = observeAppearChange ? onScroll.bind(0, false) : reset;\r\n  }\r\n\r\n  if (observeDirectionChange) {\r\n    directionIsRTLCache = createCache(\r\n      {\r\n        _initialValue: !getIsDirectionRTL(), // invert current value to trigger initial change\r\n      },\r\n      getIsDirectionRTL\r\n    );\r\n    const [updateDirectionIsRTLCache] = directionIsRTLCache;\r\n\r\n    push(\r\n      offListeners,\r\n      on(sizeObserver, scrollEventName, (event: Event) => {\r\n        const directionIsRTLCacheValues = updateDirectionIsRTLCache();\r\n        const [directionIsRTL, directionIsRTLChanged] = directionIsRTLCacheValues;\r\n\r\n        if (directionIsRTLChanged) {\r\n          removeClass(listenerElement, 'ltr rtl');\r\n          if (directionIsRTL) {\r\n            addClass(listenerElement, 'rtl');\r\n          } else {\r\n            addClass(listenerElement, 'ltr');\r\n          }\r\n          onSizeChangedCallbackProxy(directionIsRTLCacheValues);\r\n        }\r\n\r\n        stopAndPrevent(event);\r\n      })\r\n    );\r\n  }\r\n\r\n  // appearCallback is always needed on scroll-observer strategy to reset it\r\n  if (appearCallback) {\r\n    addClass(sizeObserver, classNameSizeObserverAppear);\r\n    push(\r\n      offListeners,\r\n      on(sizeObserver, animationStartEventName, appearCallback, {\r\n        // Fire only once for \"CSS is ready\" event if ResizeObserver strategy is used\r\n        _once: !!ResizeObserverConstructor,\r\n      })\r\n    );\r\n  }\r\n\r\n  prependChildren(target, sizeObserver);\r\n\r\n  return () => {\r\n    runEach(offListeners);\r\n    removeElements(sizeObserver);\r\n  };\r\n};\r\n","import {\r\n  WH,\r\n  CacheValues,\r\n  createDiv,\r\n  offsetSize,\r\n  runEach,\r\n  prependChildren,\r\n  removeElements,\r\n  createCache,\r\n  push,\r\n  IntersectionObserverConstructor,\r\n} from 'support';\r\nimport { createSizeObserver } from 'observers/sizeObserver';\r\nimport { classNameTrinsicObserver } from 'classnames';\r\n\r\nexport type DestroyTrinsicObserver = () => void;\r\n\r\nconst isHeightIntrinsic = (ioEntryOrSize: IntersectionObserverEntry | WH<number>): boolean =>\r\n  (ioEntryOrSize as WH<number>).h === 0 ||\r\n  (ioEntryOrSize as IntersectionObserverEntry).isIntersecting ||\r\n  (ioEntryOrSize as IntersectionObserverEntry).intersectionRatio > 0;\r\n\r\n/**\r\n * Creates a trinsic observer which observes changes to intrinsic or extrinsic sizing for the height of the target element.\r\n * @param target The element which shall be observed.\r\n * @param onTrinsicChangedCallback The callback which gets called after a change was detected.\r\n * @returns A object which represents the instance of the trinsic observer.\r\n */\r\nexport const createTrinsicObserver = (\r\n  target: HTMLElement,\r\n  onTrinsicChangedCallback: (heightIntrinsic: CacheValues<boolean>) => any\r\n): DestroyTrinsicObserver => {\r\n  const trinsicObserver = createDiv(classNameTrinsicObserver);\r\n  const offListeners: (() => void)[] = [];\r\n  const [updateHeightIntrinsicCache] = createCache({\r\n    _initialValue: false,\r\n  });\r\n\r\n  const triggerOnTrinsicChangedCallback = (\r\n    updateValue?: IntersectionObserverEntry | WH<number>\r\n  ) => {\r\n    if (updateValue) {\r\n      const heightIntrinsic = updateHeightIntrinsicCache(isHeightIntrinsic(updateValue));\r\n      const [, heightIntrinsicChanged] = heightIntrinsic;\r\n\r\n      if (heightIntrinsicChanged) {\r\n        onTrinsicChangedCallback(heightIntrinsic);\r\n      }\r\n    }\r\n  };\r\n\r\n  if (IntersectionObserverConstructor) {\r\n    const intersectionObserverInstance: IntersectionObserver = new IntersectionObserverConstructor(\r\n      (entries: IntersectionObserverEntry[]) => {\r\n        if (entries && entries.length > 0) {\r\n          triggerOnTrinsicChangedCallback(entries.pop());\r\n        }\r\n      },\r\n      { root: target }\r\n    );\r\n    intersectionObserverInstance.observe(trinsicObserver);\r\n    push(offListeners, () => {\r\n      intersectionObserverInstance.disconnect();\r\n    });\r\n  } else {\r\n    const onSizeChanged = () => {\r\n      const newSize = offsetSize(trinsicObserver);\r\n      triggerOnTrinsicChangedCallback(newSize);\r\n    };\r\n    push(offListeners, createSizeObserver(trinsicObserver, onSizeChanged));\r\n    onSizeChanged();\r\n  }\r\n\r\n  prependChildren(target, trinsicObserver);\r\n\r\n  return () => {\r\n    runEach(offListeners);\r\n    removeElements(trinsicObserver);\r\n  };\r\n};\r\n","import {\r\n  each,\r\n  noop,\r\n  debounce,\r\n  indexOf,\r\n  isString,\r\n  MutationObserverConstructor,\r\n  isEmptyArray,\r\n  on,\r\n  attr,\r\n  is,\r\n  find,\r\n  push,\r\n} from 'support';\r\n\r\ntype DOMContentObserverCallback = (contentChangedTroughEvent: boolean) => any;\r\n\r\ntype DOMTargetObserverCallback = (targetChangedAttrs: string[], targetStyleChanged: boolean) => any;\r\n\r\ninterface DOMObserverOptionsBase {\r\n  _attributes?: string[];\r\n  _styleChangingAttributes?: string[];\r\n  /**\r\n   * A function which can ignore a changed attribute if it returns true.\r\n   * for DOMTargetObserver this applies to the changes to the observed target\r\n   * for DOMContentObserver this applies to changes to nested targets -> nested targets are elements which match the \"_nestedTargetSelector\" selector\r\n   */\r\n  _ignoreTargetChange?: DOMObserverIgnoreTargetChange;\r\n}\r\n\r\ninterface DOMContentObserverOptions extends DOMObserverOptionsBase {\r\n  _eventContentChange?: DOMObserverEventContentChange; // [selector, eventname(s) | function returning eventname(s)] -> eventnames divided by whitespaces\r\n  _nestedTargetSelector?: string;\r\n  _ignoreContentChange?: DOMObserverIgnoreContentChange; // function which will prevent marking certain dom changes as content change if it returns true\r\n}\r\n\r\ntype DOMTargetObserverOptions = DOMObserverOptionsBase;\r\n\r\ntype ContentChangeArrayItem = [selector?: string, eventNames?: string] | null | undefined;\r\n\r\nexport type DOMObserverEventContentChange =\r\n  | Array<ContentChangeArrayItem>\r\n  | false\r\n  | null\r\n  | undefined;\r\n\r\nexport type DOMObserverIgnoreContentChange = (\r\n  mutation: MutationRecord,\r\n  isNestedTarget: boolean,\r\n  domObserverTarget: HTMLElement,\r\n  domObserverOptions?: DOMContentObserverOptions\r\n) => boolean;\r\n\r\nexport type DOMObserverIgnoreTargetChange = (\r\n  target: Node,\r\n  attributeName: string,\r\n  oldAttributeValue: string | null,\r\n  newAttributeValue: string | null\r\n) => boolean;\r\n\r\nexport type DOMObserverCallback<ContentObserver extends boolean> = ContentObserver extends true\r\n  ? DOMContentObserverCallback\r\n  : DOMTargetObserverCallback;\r\n\r\nexport type DOMObserverOptions<ContentObserver extends boolean> = ContentObserver extends true\r\n  ? DOMContentObserverOptions\r\n  : DOMTargetObserverOptions;\r\n\r\nexport type DOMObserver = [destroy: () => void, update: () => void];\r\n\r\ntype EventContentChangeUpdateElement = (getElements?: (selector: string) => Node[]) => void;\r\ntype EventContentChange = [destroy: () => void, updateElements: EventContentChangeUpdateElement];\r\n\r\n/**\r\n * Creates a set of helper functions to observe events of elements inside the target element.\r\n * @param target The target element of which the children elements shall be observed. (not only direct children but also nested ones)\r\n * @param eventContentChange The event content change array. (array of tuples: selector and eventname(s))\r\n * @param callback Callback which is called if one of the elements emits the corresponding event.\r\n * @returns A object which contains a set of helper functions to destroy and update the observation of elements.\r\n */\r\nconst createEventContentChange = (\r\n  target: Element,\r\n  callback: (...args: any) => any,\r\n  eventContentChange?: DOMObserverEventContentChange\r\n): EventContentChange => {\r\n  let map: WeakMap<Node, [string, () => any]> | undefined; // weak map to prevent memory leak for detached elements\r\n  let destroyed = false;\r\n  const destroy = () => {\r\n    destroyed = true;\r\n  };\r\n  const updateElements: EventContentChangeUpdateElement = (getElements?) => {\r\n    if (eventContentChange) {\r\n      const eventElmList = eventContentChange.reduce<Array<[Node[], string]>>((arr, item) => {\r\n        if (item) {\r\n          const selector = item[0];\r\n          const eventNames = item[1];\r\n          const elements =\r\n            eventNames &&\r\n            selector &&\r\n            (getElements ? getElements(selector) : find(selector, target));\r\n\r\n          if (elements && elements.length && eventNames && isString(eventNames)) {\r\n            push(arr, [elements, eventNames.trim()], true);\r\n          }\r\n        }\r\n        return arr;\r\n      }, []);\r\n\r\n      each(eventElmList, (item) =>\r\n        each(item[0], (elm) => {\r\n          const eventNames = item[1];\r\n          const entry = map!.get(elm);\r\n\r\n          if (entry) {\r\n            const entryEventNames = entry[0];\r\n            const entryOff = entry[1];\r\n\r\n            // in case an already registered element is registered again, unregister the previous events\r\n            if (entryEventNames === eventNames) {\r\n              entryOff();\r\n            }\r\n          }\r\n\r\n          const off = on(elm, eventNames, (event: Event) => {\r\n            if (destroyed) {\r\n              off();\r\n              map!.delete(elm);\r\n            } else {\r\n              callback(event);\r\n            }\r\n          });\r\n          map!.set(elm, [eventNames, off]);\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  if (eventContentChange) {\r\n    map = new WeakMap();\r\n    updateElements();\r\n  }\r\n\r\n  return [destroy, updateElements];\r\n};\r\n\r\n/**\r\n * Creates a DOM observer which observes DOM changes to either the target element or its children.\r\n * @param target The element which shall be observed.\r\n * @param isContentObserver Whether this observer is just observing the target or just the targets children. (not only direct children but also nested ones)\r\n * @param callback The callback which gets called if a change was detected.\r\n * @param options The options for DOM change detection.\r\n * @returns A object which represents the instance of the DOM observer.\r\n */\r\nexport const createDOMObserver = <ContentObserver extends boolean>(\r\n  target: HTMLElement,\r\n  isContentObserver: ContentObserver,\r\n  callback: DOMObserverCallback<ContentObserver>,\r\n  options?: DOMObserverOptions<ContentObserver>\r\n): DOMObserver => {\r\n  let isConnected = false;\r\n  const {\r\n    _attributes,\r\n    _styleChangingAttributes,\r\n    _eventContentChange,\r\n    _nestedTargetSelector,\r\n    _ignoreTargetChange,\r\n    _ignoreContentChange,\r\n  } = (options as DOMContentObserverOptions & DOMTargetObserverOptions) || {};\r\n  const [destroyEventContentChange, updateEventContentChangeElements] = createEventContentChange(\r\n    target,\r\n    debounce(\r\n      () => {\r\n        if (isConnected) {\r\n          (callback as DOMContentObserverCallback)(true);\r\n        }\r\n      },\r\n      { _timeout: 33, _maxDelay: 99 }\r\n    ),\r\n    _eventContentChange\r\n  );\r\n\r\n  // MutationObserver\r\n  const finalAttributes = _attributes || [];\r\n  const finalStyleChangingAttributes = _styleChangingAttributes || [];\r\n  const observedAttributes = finalAttributes.concat(finalStyleChangingAttributes);\r\n  const observerCallback = (mutations: MutationRecord[]) => {\r\n    const ignoreTargetChange = _ignoreTargetChange || noop;\r\n    const ignoreContentChange = _ignoreContentChange || noop;\r\n    const targetChangedAttrs: string[] = [];\r\n    const totalAddedNodes: Node[] = [];\r\n    let targetStyleChanged = false;\r\n    let contentChanged = false;\r\n    let childListChanged = false;\r\n    each(mutations, (mutation) => {\r\n      const { attributeName, target: mutationTarget, type, oldValue, addedNodes } = mutation;\r\n      const isAttributesType = type === 'attributes';\r\n      const isChildListType = type === 'childList';\r\n      const targetIsMutationTarget = target === mutationTarget;\r\n      const attributeValue =\r\n        isAttributesType && isString(attributeName)\r\n          ? attr(mutationTarget as HTMLElement, attributeName!)\r\n          : 0;\r\n      const attributeChanged = attributeValue !== 0 && oldValue !== attributeValue;\r\n      const styleChangingAttrChanged =\r\n        indexOf(finalStyleChangingAttributes, attributeName) > -1 && attributeChanged;\r\n\r\n      // if is content observer and something changed in children\r\n      if (isContentObserver && !targetIsMutationTarget) {\r\n        const notOnlyAttrChanged = !isAttributesType;\r\n        const contentAttrChanged = isAttributesType && styleChangingAttrChanged;\r\n        const isNestedTarget =\r\n          contentAttrChanged && _nestedTargetSelector && is(mutationTarget, _nestedTargetSelector);\r\n        const baseAssertion = isNestedTarget\r\n          ? !ignoreTargetChange(mutationTarget, attributeName!, oldValue, attributeValue)\r\n          : notOnlyAttrChanged || contentAttrChanged;\r\n        const contentFinalChanged =\r\n          baseAssertion && !ignoreContentChange(mutation, !!isNestedTarget, target, options);\r\n\r\n        push(totalAddedNodes, addedNodes);\r\n\r\n        contentChanged = contentChanged || contentFinalChanged;\r\n        childListChanged = childListChanged || isChildListType;\r\n      }\r\n      // if is target observer and target attr changed\r\n      if (\r\n        !isContentObserver &&\r\n        targetIsMutationTarget &&\r\n        attributeChanged &&\r\n        !ignoreTargetChange(mutationTarget, attributeName!, oldValue, attributeValue)\r\n      ) {\r\n        push(targetChangedAttrs, attributeName!);\r\n        targetStyleChanged = targetStyleChanged || styleChangingAttrChanged;\r\n      }\r\n    });\r\n\r\n    if (childListChanged && !isEmptyArray(totalAddedNodes)) {\r\n      // adds / removes the new elements from the event content change\r\n      updateEventContentChangeElements((selector) =>\r\n        totalAddedNodes.reduce<Node[]>((arr, node) => {\r\n          push(arr, find(selector, node));\r\n          return is(node, selector) ? push(arr, node) : arr;\r\n        }, [])\r\n      );\r\n    }\r\n\r\n    if (isContentObserver) {\r\n      contentChanged && (callback as DOMContentObserverCallback)(false);\r\n    } else if (!isEmptyArray(targetChangedAttrs) || targetStyleChanged) {\r\n      (callback as DOMTargetObserverCallback)(targetChangedAttrs, targetStyleChanged);\r\n    }\r\n  };\r\n  const mutationObserver: MutationObserver = new MutationObserverConstructor!(observerCallback);\r\n\r\n  // Connect\r\n  mutationObserver.observe(target, {\r\n    attributes: true,\r\n    attributeOldValue: true,\r\n    attributeFilter: observedAttributes,\r\n    subtree: isContentObserver,\r\n    childList: isContentObserver,\r\n    characterData: isContentObserver,\r\n  });\r\n  isConnected = true;\r\n\r\n  return [\r\n    () => {\r\n      if (isConnected) {\r\n        destroyEventContentChange();\r\n        mutationObserver.disconnect();\r\n        isConnected = false;\r\n      }\r\n    },\r\n    () => {\r\n      if (isConnected) {\r\n        observerCallback(mutationObserver.takeRecords());\r\n      }\r\n    },\r\n  ];\r\n};\r\n","import {\r\n  debounce,\r\n  isArray,\r\n  isNumber,\r\n  each,\r\n  indexOf,\r\n  isString,\r\n  attr,\r\n  removeAttr,\r\n  CacheValues,\r\n  keys,\r\n  liesBetween,\r\n  scrollSize,\r\n  equalWH,\r\n  createCache,\r\n  WH,\r\n  fractionalSize,\r\n  isFunction,\r\n  ResizeObserverConstructor,\r\n} from 'support';\r\nimport { getEnvironment } from 'environment';\r\nimport {\r\n  dataAttributeHost,\r\n  dataValueHostOverflowVisible,\r\n  classNameViewport,\r\n  classNameOverflowVisible,\r\n} from 'classnames';\r\nimport { createSizeObserver, SizeObserverCallbackParams } from 'observers/sizeObserver';\r\nimport { createTrinsicObserver } from 'observers/trinsicObserver';\r\nimport { createDOMObserver, DOMObserver } from 'observers/domObserver';\r\nimport type { SetupState, SetupUpdateCheckOption } from 'setups';\r\nimport type { StructureSetupState } from 'setups/structureSetup';\r\nimport type { StructureSetupElementsObj } from 'setups/structureSetup/structureSetup.elements';\r\nimport type {\r\n  StructureSetupUpdate,\r\n  StructureSetupUpdateHints,\r\n} from 'setups/structureSetup/structureSetup.update';\r\n\r\nexport type StructureSetupObserversUpdate = (checkOption: SetupUpdateCheckOption) => void;\r\n\r\nexport type StructureSetupObservers = [\r\n  updateObserverOptions: StructureSetupObserversUpdate,\r\n  destroy: () => void\r\n];\r\n\r\ntype ExcludeFromTuple<T extends readonly any[], E> = T extends [infer F, ...infer R]\r\n  ? [F] extends [E]\r\n    ? ExcludeFromTuple<R, E>\r\n    : [F, ...ExcludeFromTuple<R, E>]\r\n  : [];\r\n\r\nconst hostSelector = `[${dataAttributeHost}]`;\r\n\r\n// TODO: observer textarea attrs if textarea\r\n\r\nconst viewportSelector = `.${classNameViewport}`;\r\nconst viewportAttrsFromTarget = ['tabindex'];\r\nconst baseStyleChangingAttrsTextarea = ['wrap', 'cols', 'rows'];\r\nconst baseStyleChangingAttrs = ['id', 'class', 'style', 'open'];\r\n\r\nexport const createStructureSetupObservers = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  state: SetupState<StructureSetupState>,\r\n  structureSetupUpdate: (\r\n    ...args: ExcludeFromTuple<Parameters<StructureSetupUpdate>, Parameters<StructureSetupUpdate>[0]>\r\n  ) => any\r\n): StructureSetupObservers => {\r\n  let debounceTimeout: number | false | undefined;\r\n  let debounceMaxDelay: number | false | undefined;\r\n  let contentMutationObserver: DOMObserver | undefined;\r\n  const [, setState] = state;\r\n  const {\r\n    _host,\r\n    _viewport,\r\n    _content,\r\n    _isTextarea,\r\n    _viewportIsTarget,\r\n    _viewportHasClass,\r\n    _viewportAddRemoveClass,\r\n  } = structureSetupElements;\r\n  const { _nativeScrollbarStyling, _flexboxGlue } = getEnvironment();\r\n\r\n  const [updateContentSizeCache] = createCache<WH<number>>(\r\n    {\r\n      _equal: equalWH,\r\n      _initialValue: { w: 0, h: 0 },\r\n    },\r\n    () => {\r\n      const has = _viewportHasClass(classNameOverflowVisible, dataValueHostOverflowVisible);\r\n      has && _viewportAddRemoveClass(classNameOverflowVisible, dataValueHostOverflowVisible);\r\n\r\n      const contentScroll = scrollSize(_content);\r\n      const viewportScroll = scrollSize(_viewport);\r\n      const fractional = fractionalSize(_viewport);\r\n\r\n      has && _viewportAddRemoveClass(classNameOverflowVisible, dataValueHostOverflowVisible, true);\r\n      return {\r\n        w: viewportScroll.w + contentScroll.w + fractional.w,\r\n        h: viewportScroll.h + contentScroll.h + fractional.h,\r\n      };\r\n    }\r\n  );\r\n  const contentMutationObserverAttr = _isTextarea\r\n    ? baseStyleChangingAttrsTextarea\r\n    : baseStyleChangingAttrs.concat(baseStyleChangingAttrsTextarea);\r\n  const structureSetupUpdateWithDebouncedAdaptiveUpdateHints = debounce(structureSetupUpdate, {\r\n    _timeout: () => debounceTimeout,\r\n    _maxDelay: () => debounceMaxDelay,\r\n    _mergeParams(prev, curr) {\r\n      const [prevObj] = prev;\r\n      const [currObj] = curr;\r\n      return [\r\n        keys(prevObj)\r\n          .concat(keys(currObj))\r\n          .reduce((obj, key) => {\r\n            obj[key] = prevObj[key] || currObj[key];\r\n            return obj;\r\n          }, {}),\r\n      ] as [Partial<StructureSetupUpdateHints>];\r\n    },\r\n  });\r\n\r\n  const updateViewportAttrsFromHost = (attributes?: string[]) => {\r\n    each(attributes || viewportAttrsFromTarget, (attribute) => {\r\n      if (indexOf(viewportAttrsFromTarget, attribute) > -1) {\r\n        const hostAttr = attr(_host, attribute);\r\n        if (isString(hostAttr)) {\r\n          attr(_viewport, attribute, hostAttr);\r\n        } else {\r\n          removeAttr(_viewport, attribute);\r\n        }\r\n      }\r\n    });\r\n  };\r\n  const onTrinsicChanged = (heightIntrinsicCache: CacheValues<boolean>) => {\r\n    const [heightIntrinsic, heightIntrinsicChanged] = heightIntrinsicCache;\r\n    setState({ _heightIntrinsic: heightIntrinsic });\r\n    structureSetupUpdate({ _heightIntrinsicChanged: heightIntrinsicChanged });\r\n  };\r\n  const onSizeChanged = ({\r\n    _sizeChanged,\r\n    _directionIsRTLCache,\r\n    _appear,\r\n  }: SizeObserverCallbackParams) => {\r\n    const updateFn =\r\n      !_sizeChanged || _appear\r\n        ? structureSetupUpdate\r\n        : structureSetupUpdateWithDebouncedAdaptiveUpdateHints;\r\n\r\n    let directionChanged = false;\r\n    if (_directionIsRTLCache) {\r\n      const [directionIsRTL, directionIsRTLChanged] = _directionIsRTLCache;\r\n      directionChanged = directionIsRTLChanged;\r\n      setState({ _directionIsRTL: directionIsRTL });\r\n    }\r\n\r\n    updateFn({ _sizeChanged, _directionChanged: directionChanged });\r\n  };\r\n  const onContentMutation = (contentChangedTroughEvent: boolean) => {\r\n    const [, contentSizeChanged] = updateContentSizeCache();\r\n    // if contentChangedTroughEvent is true its already debounced\r\n    const updateFn = contentChangedTroughEvent\r\n      ? structureSetupUpdate\r\n      : structureSetupUpdateWithDebouncedAdaptiveUpdateHints;\r\n\r\n    if (contentSizeChanged) {\r\n      updateFn({\r\n        _contentMutation: true,\r\n      });\r\n    }\r\n  };\r\n  const onHostMutation = (targetChangedAttrs: string[], targetStyleChanged: boolean) => {\r\n    if (targetStyleChanged) {\r\n      structureSetupUpdateWithDebouncedAdaptiveUpdateHints({\r\n        _hostMutation: true,\r\n      });\r\n    } else if (!_viewportIsTarget) {\r\n      updateViewportAttrsFromHost(targetChangedAttrs);\r\n    }\r\n  };\r\n\r\n  const destroyTrinsicObserver =\r\n    (_content || !_flexboxGlue) && createTrinsicObserver(_host, onTrinsicChanged);\r\n  const destroySizeObserver =\r\n    !_viewportIsTarget &&\r\n    createSizeObserver(_host, onSizeChanged, {\r\n      _appear: true,\r\n      _direction: !_nativeScrollbarStyling,\r\n    });\r\n  const [destroyHostMutationObserver] = createDOMObserver(_host, false, onHostMutation, {\r\n    _styleChangingAttributes: baseStyleChangingAttrs,\r\n    _attributes: baseStyleChangingAttrs.concat(viewportAttrsFromTarget),\r\n  });\r\n\r\n  const viewportIsTargetResizeObserver =\r\n    _viewportIsTarget &&\r\n    new ResizeObserverConstructor!(onSizeChanged.bind(0, { _sizeChanged: true }));\r\n\r\n  viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.observe(_host);\r\n  updateViewportAttrsFromHost();\r\n\r\n  return [\r\n    (checkOption) => {\r\n      const [ignoreMutation] = checkOption<string[] | null>('updating.ignoreMutation');\r\n      const [attributes, attributesChanged] = checkOption<string[] | null>('updating.attributes');\r\n      const [elementEvents, elementEventsChanged] = checkOption<Array<[string, string]> | null>(\r\n        'updating.elementEvents'\r\n      );\r\n      const [debounceValue, debounceChanged] = checkOption<Array<number> | number | null>(\r\n        'updating.debounce'\r\n      );\r\n      const updateContentMutationObserver = elementEventsChanged || attributesChanged;\r\n      const ignoreMutationFromOptions = (mutation: MutationRecord) =>\r\n        isFunction(ignoreMutation) && ignoreMutation(mutation);\r\n\r\n      if (updateContentMutationObserver) {\r\n        if (contentMutationObserver) {\r\n          contentMutationObserver[1](); // update\r\n          contentMutationObserver[0](); // destroy\r\n        }\r\n        contentMutationObserver = createDOMObserver(\r\n          _content || _viewport,\r\n          true,\r\n          onContentMutation,\r\n          {\r\n            _styleChangingAttributes: contentMutationObserverAttr.concat(attributes || []),\r\n            _attributes: contentMutationObserverAttr.concat(attributes || []),\r\n            _eventContentChange: elementEvents,\r\n            _nestedTargetSelector: hostSelector,\r\n            _ignoreContentChange: (mutation, isNestedTarget) => {\r\n              const { target, attributeName } = mutation;\r\n              const ignore =\r\n                !isNestedTarget && attributeName\r\n                  ? liesBetween(target as Element, hostSelector, viewportSelector)\r\n                  : false;\r\n              return ignore || !!ignoreMutationFromOptions(mutation);\r\n            },\r\n          }\r\n        );\r\n      }\r\n\r\n      if (debounceChanged) {\r\n        structureSetupUpdateWithDebouncedAdaptiveUpdateHints._flush();\r\n        if (isArray(debounceValue)) {\r\n          const timeout = debounceValue[0];\r\n          const maxWait = debounceValue[1];\r\n          debounceTimeout = isNumber(timeout) ? timeout : false;\r\n          debounceMaxDelay = isNumber(maxWait) ? maxWait : false;\r\n        } else if (isNumber(debounceValue)) {\r\n          debounceTimeout = debounceValue;\r\n          debounceMaxDelay = false;\r\n        } else {\r\n          debounceTimeout = false;\r\n          debounceMaxDelay = false;\r\n        }\r\n      }\r\n    },\r\n    () => {\r\n      contentMutationObserver && contentMutationObserver[0](); // destroy\r\n      destroyTrinsicObserver && destroyTrinsicObserver();\r\n      destroySizeObserver && destroySizeObserver();\r\n      viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.disconnect();\r\n      destroyHostMutationObserver();\r\n    },\r\n  ];\r\n};\r\n","import { runEach } from 'support';\r\nimport { createState, createOptionCheck } from 'setups/setups';\r\nimport { createStructureSetupElements } from 'setups/structureSetup/structureSetup.elements';\r\nimport { createStructureSetupUpdate } from 'setups/structureSetup/structureSetup.update';\r\nimport { createStructureSetupObservers } from 'setups/structureSetup/structureSetup.observers';\r\nimport type { StructureSetupUpdateHints } from 'setups/structureSetup/structureSetup.update';\r\nimport type { StructureSetupElementsObj } from 'setups/structureSetup/structureSetup.elements';\r\nimport type { TRBL, XY } from 'support';\r\nimport type { Options, ReadonlyOSOptions } from 'options';\r\nimport type { Setup } from 'setups';\r\nimport type { InitializationTarget } from 'initialization';\r\nimport type { PartialOptions, StyleObject, OverflowStyle } from 'typings';\r\n\r\nexport interface StructureSetupState {\r\n  _padding: TRBL;\r\n  _paddingAbsolute: boolean;\r\n  _viewportPaddingStyle: StyleObject;\r\n  _overflowAmount: XY<number>;\r\n  _overflowStyle: XY<OverflowStyle>;\r\n  _hasOverflow: XY<boolean>;\r\n  _heightIntrinsic: boolean;\r\n  _directionIsRTL: boolean;\r\n}\r\n\r\nexport interface StructureSetupStaticState {\r\n  _elements: StructureSetupElementsObj;\r\n  _addOnUpdatedListener: (listener: OnUpdatedListener) => void;\r\n}\r\n\r\nexport type OnUpdatedListener = (\r\n  updateHints: StructureSetupUpdateHints,\r\n  changedOptions: PartialOptions<Options>,\r\n  force: boolean\r\n) => void;\r\n\r\nconst initialStructureSetupUpdateState: StructureSetupState = {\r\n  _padding: {\r\n    t: 0,\r\n    r: 0,\r\n    b: 0,\r\n    l: 0,\r\n  },\r\n  _paddingAbsolute: false,\r\n  _viewportPaddingStyle: {\r\n    marginRight: 0,\r\n    marginBottom: 0,\r\n    marginLeft: 0,\r\n    paddingTop: 0,\r\n    paddingRight: 0,\r\n    paddingBottom: 0,\r\n    paddingLeft: 0,\r\n  },\r\n  _overflowAmount: {\r\n    x: 0,\r\n    y: 0,\r\n  },\r\n  _overflowStyle: {\r\n    x: 'hidden',\r\n    y: 'hidden',\r\n  },\r\n  _hasOverflow: {\r\n    x: false,\r\n    y: false,\r\n  },\r\n  _heightIntrinsic: false,\r\n  _directionIsRTL: false,\r\n};\r\n\r\nexport const createStructureSetup = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOSOptions\r\n): Setup<StructureSetupState, StructureSetupStaticState> => {\r\n  const checkOptionsFallback = createOptionCheck(options, {});\r\n  const state = createState(initialStructureSetupUpdateState);\r\n  const onUpdatedListeners = new Set<OnUpdatedListener>();\r\n  const [getState] = state;\r\n  const runOnUpdatedListeners = (\r\n    updateHints: StructureSetupUpdateHints,\r\n    changedOptions?: PartialOptions<Options>,\r\n    force?: boolean\r\n  ) => {\r\n    runEach(onUpdatedListeners, [updateHints, changedOptions || {}, !!force]);\r\n  };\r\n\r\n  const [elements, destroyElements] = createStructureSetupElements(target);\r\n  const updateStructure = createStructureSetupUpdate(elements, state);\r\n  const [updateObservers, destroyObservers] = createStructureSetupObservers(\r\n    elements,\r\n    state,\r\n    (updateHints) => {\r\n      runOnUpdatedListeners(updateStructure(checkOptionsFallback, updateHints));\r\n    }\r\n  );\r\n\r\n  const structureSetupState = getState.bind(0) as (() => StructureSetupState) &\r\n    StructureSetupStaticState;\r\n  structureSetupState._addOnUpdatedListener = (listener) => {\r\n    onUpdatedListeners.add(listener);\r\n  };\r\n  structureSetupState._elements = elements;\r\n\r\n  return [\r\n    (changedOptions, force?) => {\r\n      const checkOption = createOptionCheck(options, changedOptions, force);\r\n      updateObservers(checkOption);\r\n      runOnUpdatedListeners(updateStructure(checkOption, {}, force));\r\n    },\r\n    structureSetupState,\r\n    () => {\r\n      onUpdatedListeners.clear();\r\n      destroyObservers();\r\n      destroyElements();\r\n    },\r\n  ];\r\n};\r\n","import { appendChildren, createDiv, removeElements } from 'support';\r\nimport {\r\n  classNameScrollbar,\r\n  classNameScrollbarHorizontal,\r\n  classNameScrollbarVertical,\r\n  classNameScrollbarTrack,\r\n  classNameScrollbarHandle,\r\n} from 'classnames';\r\nimport { getEnvironment } from 'environment';\r\nimport { dynamicInitializationElement as generalDynamicInitializationElement } from 'initialization';\r\nimport type { InitializationTarget } from 'initialization';\r\nimport type { StructureSetupElementsObj } from 'setups/structureSetup/structureSetup.elements';\r\nimport type {\r\n  ScrollbarsInitialization,\r\n  ScrollbarsInitializationStrategy,\r\n  ScrollbarsDynamicInitializationElement,\r\n} from 'setups/scrollbarsSetup/scrollbarsSetup.initialization';\r\n\r\nexport interface ScrollbarStructure {\r\n  _scrollbar: HTMLElement;\r\n  _track: HTMLElement;\r\n  _handle: HTMLElement;\r\n}\r\n\r\nexport interface ScrollbarsSetupElementsObj {\r\n  _horizontalScrollbarStructure: ScrollbarStructure;\r\n  _verticalScrollbarStructure: ScrollbarStructure;\r\n}\r\n\r\nexport type ScrollbarsSetupElements = [elements: ScrollbarsSetupElementsObj, destroy: () => void];\r\n\r\nconst generateScrollbarDOM = (scrollbarClassName: string): ScrollbarStructure => {\r\n  const scrollbar = createDiv(`${classNameScrollbar} ${scrollbarClassName}`);\r\n  const track = createDiv(classNameScrollbarTrack);\r\n  const handle = createDiv(classNameScrollbarHandle);\r\n\r\n  appendChildren(scrollbar, track);\r\n  appendChildren(track, handle);\r\n\r\n  return {\r\n    _scrollbar: scrollbar,\r\n    _track: track,\r\n    _handle: handle,\r\n  };\r\n};\r\n\r\nexport const createScrollbarsSetupElements = (\r\n  target: InitializationTarget,\r\n  structureSetupElements: StructureSetupElementsObj\r\n): ScrollbarsSetupElements => {\r\n  const { _getInitializationStrategy } = getEnvironment();\r\n  const { _scrollbarsSlot: environmentScrollbarSlot } =\r\n    _getInitializationStrategy() as ScrollbarsInitializationStrategy;\r\n  const { _target, _host, _viewport, _targetIsElm } = structureSetupElements;\r\n  const initializationScrollbarSlot =\r\n    !_targetIsElm && (target as ScrollbarsInitialization).scrollbarsSlot;\r\n  const evaluatedScrollbarSlot =\r\n    generalDynamicInitializationElement<ScrollbarsDynamicInitializationElement>(\r\n      [_target, _host, _viewport],\r\n      () => _host,\r\n      environmentScrollbarSlot,\r\n      initializationScrollbarSlot\r\n    );\r\n\r\n  const horizontalScrollbarStructure = generateScrollbarDOM(classNameScrollbarHorizontal);\r\n  const verticalScrollbarStructure = generateScrollbarDOM(classNameScrollbarVertical);\r\n\r\n  const { _scrollbar: horizontalScrollbar } = horizontalScrollbarStructure;\r\n  const { _scrollbar: verticalScrollbar } = verticalScrollbarStructure;\r\n\r\n  appendChildren(evaluatedScrollbarSlot, horizontalScrollbar);\r\n  appendChildren(evaluatedScrollbarSlot, verticalScrollbar);\r\n\r\n  return [\r\n    {\r\n      _horizontalScrollbarStructure: horizontalScrollbarStructure,\r\n      _verticalScrollbarStructure: verticalScrollbarStructure,\r\n    },\r\n    removeElements.bind(0, [horizontalScrollbar, verticalScrollbar]),\r\n  ];\r\n};\r\n","import { createState, createOptionCheck } from 'setups/setups';\r\nimport {\r\n  createScrollbarsSetupElements,\r\n  ScrollbarsSetupElementsObj,\r\n} from 'setups/scrollbarsSetup/scrollbarsSetup.elements';\r\nimport type { StructureSetupElementsObj } from 'setups/structureSetup/structureSetup.elements';\r\nimport type { ReadonlyOSOptions } from 'options';\r\nimport type { Setup } from 'setups';\r\nimport type { InitializationTarget } from 'initialization';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\r\nexport interface ScrollbarsSetupState {}\r\n\r\nexport interface ScrollbarsSetupStaticState {\r\n  _elements: ScrollbarsSetupElementsObj;\r\n}\r\n\r\nexport const createScrollbarsSetup = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOSOptions,\r\n  structureSetupElements: StructureSetupElementsObj\r\n): Setup<ScrollbarsSetupState, ScrollbarsSetupStaticState> => {\r\n  const state = createState({});\r\n  const [getState] = state;\r\n\r\n  const [elements, destroyElements] = createScrollbarsSetupElements(target, structureSetupElements);\r\n\r\n  const scrollbarsSetupState = getState.bind(0) as (() => ScrollbarsSetupState) &\r\n    ScrollbarsSetupStaticState;\r\n  scrollbarsSetupState._elements = elements;\r\n\r\n  return [\r\n    (changedOptions, force?) => {\r\n      const checkOption = createOptionCheck(options, changedOptions, force);\r\n      // eslint-disable-next-line no-console\r\n      console.log(checkOption);\r\n    },\r\n    scrollbarsSetupState,\r\n    () => {\r\n      destroyElements();\r\n    },\r\n  ];\r\n};\r\n","import { assignDeep, each, isArray } from 'support';\r\nimport { OverlayScrollbars, OverlayScrollbarsStatic } from 'overlayscrollbars';\r\n\r\nexport type OSPluginInstance =\r\n  | Record<string, unknown>\r\n  | ((staticObj: OverlayScrollbarsStatic, instanceObj: OverlayScrollbars) => void);\r\nexport type OSPlugin<T extends OSPluginInstance = OSPluginInstance> = [string, T];\r\n\r\nconst pluginRegistry: Record<string, OSPluginInstance> = {};\r\n\r\nexport const getPlugins = () => assignDeep({}, pluginRegistry);\r\n\r\nexport const addPlugin = (addedPlugin: OSPlugin | OSPlugin[]) =>\r\n  each((isArray(addedPlugin) ? addedPlugin : [addedPlugin]) as OSPlugin[], (plugin) => {\r\n    pluginRegistry[plugin[0]] = plugin[1];\r\n  });\r\n","import { each, hasOwnProperty, keys, push, isEmptyObject } from 'support/utils';\r\nimport { type, isArray, isUndefined, isPlainObject, isString } from 'support/utils/types';\r\nimport { PlainObject, PartialOptions } from 'typings';\r\n\r\nexport type OptionsObjectType = Record<string, unknown>;\r\nexport type OptionsFunctionType = (this: any, ...args: any[]) => any;\r\nexport type OptionsTemplateType<T extends OptionsTemplateNativeTypes> = ExtractPropsKey<\r\n  OptionsTemplateTypeMap,\r\n  T\r\n>;\r\nexport type OptionsTemplateTypes = keyof OptionsTemplateTypeMap;\r\nexport type OptionsTemplateNativeTypes = OptionsTemplateTypeMap[keyof OptionsTemplateTypeMap];\r\n\r\nexport type OptionsTemplateValue<T extends OptionsTemplateNativeTypes = string> = T extends string\r\n  ? string extends T\r\n    ? OptionsTemplateValueNonEnum<T>\r\n    : string\r\n  : OptionsTemplateValueNonEnum<T>;\r\n\r\nexport type OptionsTemplate<T> = {\r\n  [P in keyof T]: T[P] extends OptionsObjectType\r\n    ? OptionsTemplate<T[P]>\r\n    : T[P] extends OptionsTemplateNativeTypes\r\n    ? OptionsTemplateValue<T[P]>\r\n    : never;\r\n};\r\n\r\nexport type OptionsValidationResult<T> = [\r\n  PartialOptions<T>, // validated\r\n  Record<string, unknown> // foreign\r\n];\r\n\r\ntype OptionsTemplateTypeMap = {\r\n  __TPL_boolean_TYPE__: boolean;\r\n  __TPL_number_TYPE__: number;\r\n  __TPL_string_TYPE__: string;\r\n  __TPL_array_TYPE__: Array<any> | ReadonlyArray<any>;\r\n  __TPL_function_TYPE__: OptionsFunctionType;\r\n  __TPL_null_TYPE__: null;\r\n  __TPL_object_TYPE__: OptionsObjectType;\r\n};\r\n\r\ntype OptionsTemplateValueNonEnum<T extends OptionsTemplateNativeTypes> =\r\n  | OptionsTemplateType<T>\r\n  | [OptionsTemplateType<T>, ...Array<OptionsTemplateTypes>];\r\n\r\ntype ExtractPropsKey<T, TProps extends T[keyof T]> = {\r\n  [P in keyof T]: TProps extends T[P] ? P : never;\r\n}[keyof T];\r\n\r\ntype OptionsTemplateTypesDictionary = {\r\n  readonly boolean: OptionsTemplateType<boolean>;\r\n  readonly number: OptionsTemplateType<number>;\r\n  readonly string: OptionsTemplateType<string>;\r\n  readonly array: OptionsTemplateType<Array<any>>;\r\n  readonly object: OptionsTemplateType<OptionsObjectType>;\r\n  readonly function: OptionsTemplateType<OptionsFunctionType>;\r\n  readonly null: OptionsTemplateType<null>;\r\n};\r\n\r\nconst optionsTemplateTypes: OptionsTemplateTypesDictionary = {\r\n  boolean: '__TPL_boolean_TYPE__',\r\n  number: '__TPL_number_TYPE__',\r\n  string: '__TPL_string_TYPE__',\r\n  array: '__TPL_array_TYPE__',\r\n  object: '__TPL_object_TYPE__',\r\n  function: '__TPL_function_TYPE__',\r\n  null: '__TPL_null_TYPE__',\r\n};\r\n\r\n/**\r\n * Validates the given options object according to the given template object and returns a object which looks like:\r\n * {\r\n *  foreign   : a object which consists of properties which aren't defined inside the template. (foreign properties)\r\n *  validated : a object which consists only of valid properties. (property name is inside the template and value has a correct type)\r\n * }\r\n * @param template The template according to which the options object shall be validated.\r\n * @param options The options object which shall be validated.\r\n * @param optionsDiff When provided the returned validated object will only have properties which are different to this objects properties.\r\n * Example (assume all properties are valid to the template):\r\n * Options object            : { a: 'a', b: 'b', c: 'c' }\r\n * optionsDiff object        : { a: 'a', b: 'b', c: undefined }\r\n * Returned validated object : { c: 'c' }\r\n * Because the value of the properties a and b didn't change, they aren't included in the returned object.\r\n * Without the optionsDiff object the returned validated object would be: { a: 'a', b: 'b', c: 'c' }\r\n * @param doWriteErrors True if errors shall be logged into the console, false otherwise.\r\n * @param propPath The propertyPath which lead to this object. (used for error logging)\r\n */\r\nconst validateRecursive = <T extends PlainObject>(\r\n  template: OptionsTemplate<T>,\r\n  options: PartialOptions<T>,\r\n  doWriteErrors?: boolean,\r\n  propPath?: string\r\n): OptionsValidationResult<T> => {\r\n  const validatedOptions: PartialOptions<T> = {};\r\n  const optionsCopy: PartialOptions<T> = { ...options };\r\n  const props = keys(template).filter((prop) => hasOwnProperty(options, prop));\r\n\r\n  each(props, (prop: Extract<keyof T, string>) => {\r\n    const optionsValue: any = options[prop];\r\n    const templateValue: PlainObject | string | OptionsTemplateTypes | Array<OptionsTemplateTypes> =\r\n      template[prop];\r\n    const templateIsComplex = isPlainObject(templateValue);\r\n    const propPrefix = propPath ? `${propPath}.` : '';\r\n\r\n    // if the template has a object as value, it means that the options are complex (verschachtelt)\r\n    if (templateIsComplex && isPlainObject(optionsValue)) {\r\n      const [validated, foreign] = validateRecursive(\r\n        templateValue as T,\r\n        optionsValue,\r\n        doWriteErrors,\r\n        propPrefix + prop\r\n      );\r\n      validatedOptions[prop] = validated as any;\r\n      optionsCopy[prop] = foreign as any;\r\n\r\n      each([optionsCopy, validatedOptions], (value) => {\r\n        if (isEmptyObject(value[prop])) {\r\n          delete value[prop];\r\n        }\r\n      });\r\n    } else if (!templateIsComplex) {\r\n      let isValid = false;\r\n      const errorEnumStrings: Array<string> = [];\r\n      const errorPossibleTypes: Array<string> = [];\r\n      const optionsValueType = type(optionsValue);\r\n      const templateValueArr: Array<string | OptionsTemplateTypes> = !isArray(templateValue)\r\n        ? [templateValue as string | OptionsTemplateTypes]\r\n        : (templateValue as Array<OptionsTemplateTypes>);\r\n\r\n      each(templateValueArr, (currTemplateType) => {\r\n        // if currType value isn't inside possibleTemplateTypes we assume its a enum string value\r\n        let typeString: string | undefined;\r\n        each(optionsTemplateTypes, (value: string, key: string) => {\r\n          if (value === currTemplateType) {\r\n            typeString = key;\r\n          }\r\n        });\r\n        const isEnumString = isUndefined(typeString);\r\n        if (isEnumString && isString(optionsValue)) {\r\n          // split it into a array which contains all possible values for example: [\"yes\", \"no\", \"maybe\"]\r\n          const enumStringSplit = currTemplateType.split(' ');\r\n          isValid = !!enumStringSplit.find((possibility) => possibility === optionsValue);\r\n\r\n          // build error message\r\n          push(errorEnumStrings, enumStringSplit);\r\n        } else {\r\n          isValid = optionsTemplateTypes[optionsValueType] === currTemplateType;\r\n        }\r\n\r\n        // build error message\r\n        push(errorPossibleTypes, isEnumString ? optionsTemplateTypes.string : typeString!);\r\n\r\n        // continue if invalid, break if valid\r\n        return !isValid;\r\n      });\r\n\r\n      if (isValid) {\r\n        validatedOptions[prop] = optionsValue;\r\n      } else if (doWriteErrors) {\r\n        console.warn(\r\n          `${\r\n            `The option \"${propPrefix}${prop}\" wasn't set, because it doesn't accept the type [ ${optionsValueType.toUpperCase()} ] with the value of \"${optionsValue}\".\\r\\n` +\r\n            `Accepted types are: [ ${errorPossibleTypes.join(', ').toUpperCase()} ].\\r\\n`\r\n          }${\r\n            errorEnumStrings.length > 0\r\n              ? `\\r\\nValid strings are: [ ${errorEnumStrings.join(', ')} ].`\r\n              : ''\r\n          }`\r\n        );\r\n      }\r\n\r\n      delete optionsCopy[prop];\r\n    }\r\n  });\r\n\r\n  return [validatedOptions, optionsCopy]; // optionsCopy equals now to foreign options\r\n};\r\n\r\n/**\r\n * Validates the given options object according to the given template object and returns a tuple which looks like:\r\n * [\r\n *  validated : a object which consists only of valid properties. (property name is inside the template and value has a correct type)\r\n *  foreign   : a object which consists of properties which aren't defined inside the template. (foreign properties)\r\n * ]\r\n * @param template The template according to which the options object shall be validated.\r\n * @param options The options object which shall be validated.\r\n * @param doWriteErrors True if errors shall be logged into the console, false otherwise.\r\n */\r\nconst validateOptions = <T extends PlainObject>(\r\n  template: OptionsTemplate<T>,\r\n  options: PartialOptions<T>,\r\n  doWriteErrors?: boolean\r\n): OptionsValidationResult<T> => validateRecursive<T>(template, options, doWriteErrors);\r\n\r\nexport { validateOptions, optionsTemplateTypes };\r\n","import { OSPlugin } from 'plugins';\r\nimport { Options, OverflowBehavior, VisibilityBehavior, AutoHideBehavior } from 'options';\r\nimport {\r\n  validateOptions,\r\n  OptionsTemplate,\r\n  OptionsTemplateValue,\r\n  optionsTemplateTypes as oTypes,\r\n} from 'plugins/optionsValidation/validation';\r\nimport { PartialOptions } from 'typings';\r\n\r\nconst numberAllowedValues: OptionsTemplateValue<number> = oTypes.number;\r\nconst booleanAllowedValues: OptionsTemplateValue<boolean> = oTypes.boolean;\r\nconst arrayNullValues: OptionsTemplateValue<Array<unknown> | null> = [oTypes.array, oTypes.null];\r\nconst overflowAllowedValues: OptionsTemplateValue<OverflowBehavior> =\r\n  'hidden scroll visible visible-hidden';\r\nconst scrollbarsVisibilityAllowedValues: OptionsTemplateValue<VisibilityBehavior> =\r\n  'visible hidden auto';\r\nconst scrollbarsAutoHideAllowedValues: OptionsTemplateValue<AutoHideBehavior> =\r\n  'never scroll leavemove';\r\n\r\nconst optionsTemplate: OptionsTemplate<Options> = {\r\n  // resize: resizeAllowedValues, // none || both  || horizontal || vertical || n || b ||\r\n  paddingAbsolute: booleanAllowedValues, // true || false\r\n  updating: {\r\n    elementEvents: arrayNullValues, // array of tuples || null\r\n    attributes: arrayNullValues,\r\n    debounce: [oTypes.number, oTypes.array, oTypes.null], // number || number array || null\r\n    ignoreMutation: [oTypes.function, oTypes.null], // function || null\r\n  },\r\n  overflow: {\r\n    x: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scrol\r\n    y: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scrol\r\n  },\r\n  scrollbars: {\r\n    visibility: scrollbarsVisibilityAllowedValues, // visible || hidden || auto || v ||\r\n    autoHide: scrollbarsAutoHideAllowedValues, // never || scroll || leave || move ||\r\n    autoHideDelay: numberAllowedValues, // number\r\n    dragScroll: booleanAllowedValues, // true || false\r\n    clickScroll: booleanAllowedValues, // true || false\r\n    touch: booleanAllowedValues, // true || false\r\n  },\r\n  /*\r\n  textarea: {\r\n    dynWidth: booleanAllowedValues, // true || false\r\n    dynHeight: booleanAllowedValues, // true || false\r\n    inheritedAttrs: stringArrayNullAllowedValues, // string || array || nul\r\n  },\r\n  */\r\n  nativeScrollbarsOverlaid: {\r\n    show: booleanAllowedValues, // true || false\r\n    initialize: booleanAllowedValues, // true || false\r\n  },\r\n};\r\n\r\nexport type OptionsValidationPluginInstance = {\r\n  _: (options: PartialOptions<Options>, doWriteErrors?: boolean) => PartialOptions<Options>;\r\n};\r\n\r\nexport const optionsValidationPluginName = '__osOptionsValidationPlugin';\r\n\r\nexport const optionsValidationPlugin: OSPlugin<OptionsValidationPluginInstance> = [\r\n  optionsValidationPluginName,\r\n  {\r\n    _: (options: PartialOptions<Options>, doWriteErrors?: boolean) => {\r\n      const [validated, foreign] = validateOptions(optionsTemplate, options, doWriteErrors);\r\n      return { ...foreign, ...validated };\r\n    },\r\n  },\r\n];\r\n","import { OverlayScrollbars } from 'overlayscrollbars';\r\n\r\nconst targets: Set<Element> = new Set();\r\nconst targetInstanceMap: WeakMap<Element, OverlayScrollbars> = new WeakMap();\r\n\r\n/**\r\n * Adds the given OverlayScrollbars instance to the given element.\r\n * @param target The element which is the target of the OverlayScrollbars instance.\r\n * @param osInstance The OverlayScrollbars instance.\r\n */\r\nexport const addInstance = (target: Element, osInstance: OverlayScrollbars): void => {\r\n  targetInstanceMap.set(target, osInstance);\r\n  targets.add(target);\r\n};\r\n\r\n/**\r\n * Removes a OverlayScrollbars instance from the given element.\r\n * @param target The element from which its OverlayScrollbars instance shall be removed.\r\n */\r\nexport const removeInstance = (target: Element): void => {\r\n  targetInstanceMap.delete(target);\r\n  targets.delete(target);\r\n};\r\n\r\n/**\r\n * Gets the OverlayScrollbars from the given element or undefined if it doesn't have one.\r\n * @param target The element of which its OverlayScrollbars instance shall be get.\r\n */\r\nexport const getInstance = (target: Element): OverlayScrollbars | undefined =>\r\n  targetInstanceMap.get(target);\r\n\r\n/**\r\n * Gets a Map which represents all active OverayScrollbars instances.\r\n * The Key is the element and the value is the instance.\r\n */\r\nexport const allInstances = (): ReadonlyMap<Element, OverlayScrollbars> => {\r\n  const validTargetInstanceMap: Map<Element, OverlayScrollbars> = new Map();\r\n\r\n  targets.forEach((target: Element) => {\r\n    /* istanbul ignore else */\r\n    if (targetInstanceMap.has(target)) {\r\n      validTargetInstanceMap.set(target, targetInstanceMap.get(target)!);\r\n    }\r\n  });\r\n\r\n  targets.clear();\r\n\r\n  validTargetInstanceMap.forEach((instance: OverlayScrollbars, validTarget: Element) => {\r\n    targets.add(validTarget);\r\n  });\r\n\r\n  return validTargetInstanceMap;\r\n};\r\n","import {\r\n  assignDeep,\r\n  isEmptyObject,\r\n  each,\r\n  isFunction,\r\n  keys,\r\n  isHTMLElement,\r\n  XY,\r\n  TRBL,\r\n  createEventListenerHub,\r\n} from 'support';\r\nimport { createStructureSetup, createScrollbarsSetup } from 'setups';\r\nimport { getOptionsDiff, Options, ReadonlyOSOptions } from 'options';\r\nimport { getEnvironment } from 'environment';\r\nimport {\r\n  getPlugins,\r\n  addPlugin,\r\n  optionsValidationPluginName,\r\n  OSPlugin,\r\n  OptionsValidationPluginInstance,\r\n} from 'plugins';\r\nimport { addInstance, getInstance, removeInstance } from 'instances';\r\nimport type { PartialOptions, OverflowStyle } from 'typings';\r\nimport type {\r\n  InitializationTarget,\r\n  InitializationTargetObject,\r\n  InitializationStrategy,\r\n} from 'initialization';\r\nimport type {\r\n  InitialEventListeners as GeneralInitialEventListeners,\r\n  EventListener as GeneralEventListener,\r\n} from 'support/eventListeners';\r\n\r\n/*\r\nonScrollStart               : null,\r\nonScroll                    : null,\r\nonScrollStop                : null,\r\nonOverflowChanged           : null,\r\nonOverflowAmountChanged     : null, // fusion with onOverflowChanged\r\nonDirectionChanged          : null, // gone\r\nonContentSizeChanged        : null, // gone\r\nonHostSizeChanged           : null, // gone\r\n*/\r\n\r\nexport interface OverlayScrollbarsStatic {\r\n  (\r\n    target: InitializationTarget | InitializationTargetObject,\r\n    options?: PartialOptions<Options>,\r\n    eventListeners?: GeneralInitialEventListeners<EventListenerMap>\r\n  ): OverlayScrollbars;\r\n\r\n  plugin(osPlugin: OSPlugin | OSPlugin[]): void;\r\n  env(): Environment;\r\n}\r\n\r\nexport interface Environment {\r\n  scrollbarSize: XY<number>;\r\n  scrollbarIsOverlaid: XY<boolean>;\r\n  scrollbarStyling: boolean;\r\n  rtlScrollBehavior: { n: boolean; i: boolean };\r\n  flexboxGlue: boolean;\r\n  cssCustomProperties: boolean;\r\n  defaultInitializationStrategy: InitializationStrategy;\r\n  defaultDefaultOptions: Options;\r\n\r\n  getInitializationStrategy(): InitializationStrategy;\r\n  setInitializationStrategy(newInitializationStrategy: Partial<InitializationStrategy>): void;\r\n  getDefaultOptions(): Options;\r\n  setDefaultOptions(newDefaultOptions: PartialOptions<Options>): void;\r\n}\r\n\r\nexport interface State {\r\n  padding: TRBL;\r\n  paddingAbsolute: boolean;\r\n  overflowAmount: XY<number>;\r\n  overflowStyle: XY<OverflowStyle>;\r\n  hasOverflow: XY<boolean>;\r\n}\r\n\r\nexport interface Elements {\r\n  target: HTMLElement;\r\n  host: HTMLElement;\r\n  padding: HTMLElement;\r\n  viewport: HTMLElement;\r\n  content: HTMLElement;\r\n}\r\n\r\nexport interface OnUpdatedEventListenerArgs {\r\n  updateHints: {\r\n    sizeChanged: boolean;\r\n    directionChanged: boolean;\r\n    heightIntrinsicChanged: boolean;\r\n    overflowAmountChanged: boolean;\r\n    overflowStyleChanged: boolean;\r\n    hostMutation: boolean;\r\n    contentMutation: boolean;\r\n  };\r\n  changedOptions: PartialOptions<Options>;\r\n  force: boolean;\r\n}\r\n\r\nexport interface EventListenerMap {\r\n  initialized: undefined;\r\n  initializationWithdrawn: undefined;\r\n  updated: OnUpdatedEventListenerArgs;\r\n  destroyed: undefined;\r\n}\r\n\r\nexport type InitialEventListeners = GeneralInitialEventListeners<EventListenerMap>;\r\n\r\nexport type EventListener<Name extends keyof EventListenerMap> = GeneralEventListener<\r\n  EventListenerMap,\r\n  Name\r\n>;\r\n\r\nexport interface OverlayScrollbars {\r\n  options(): Options;\r\n  options(newOptions?: PartialOptions<Options>): Options;\r\n\r\n  update(force?: boolean): void;\r\n\r\n  destroy(): void;\r\n\r\n  state(): State;\r\n\r\n  elements(): Elements;\r\n\r\n  on<Name extends keyof EventListenerMap>(name: Name, listener: EventListener<Name>): () => void;\r\n  on<Name extends keyof EventListenerMap>(name: Name, listener: EventListener<Name>[]): () => void;\r\n\r\n  off<Name extends keyof EventListenerMap>(name: Name, listener?: EventListener<Name>): void;\r\n  off<Name extends keyof EventListenerMap>(name: Name, listener?: EventListener<Name>[]): void;\r\n}\r\n\r\n/**\r\n * Notes:\r\n * Height intrinsic detection use \"content: true\" init strategy - or open ticket for custom height intrinsic observer\r\n */\r\n\r\nexport const OverlayScrollbars: OverlayScrollbarsStatic = (\r\n  target,\r\n  options?,\r\n  eventListeners?\r\n): OverlayScrollbars => {\r\n  const {\r\n    _getDefaultOptions,\r\n    _nativeScrollbarIsOverlaid,\r\n    _addListener: addEnvListener,\r\n  } = getEnvironment();\r\n  const plugins = getPlugins();\r\n  const instanceTarget = isHTMLElement(target) ? target : target.target;\r\n  const potentialInstance = getInstance(instanceTarget);\r\n  if (potentialInstance) {\r\n    return potentialInstance;\r\n  }\r\n\r\n  const optionsValidationPlugin = plugins[\r\n    optionsValidationPluginName\r\n  ] as OptionsValidationPluginInstance;\r\n  const validateOptions = (newOptions?: PartialOptions<Options>) => {\r\n    const opts = newOptions || {};\r\n    const validate = optionsValidationPlugin && optionsValidationPlugin._;\r\n    return validate ? validate(opts, true) : opts;\r\n  };\r\n  const currentOptions: ReadonlyOSOptions = assignDeep(\r\n    {},\r\n    _getDefaultOptions(),\r\n    validateOptions(options)\r\n  );\r\n  const [addEvent, removeEvent, triggerEvent] = createEventListenerHub(eventListeners);\r\n\r\n  if (\r\n    _nativeScrollbarIsOverlaid.x &&\r\n    _nativeScrollbarIsOverlaid.y &&\r\n    !currentOptions.nativeScrollbarsOverlaid.initialize\r\n  ) {\r\n    triggerEvent('initializationWithdrawn');\r\n  }\r\n\r\n  const [updateStructure, structureState, destroyStructure] = createStructureSetup(\r\n    target,\r\n    currentOptions\r\n  );\r\n  const [updateScrollbars, , destroyScrollbars] = createScrollbarsSetup(\r\n    target,\r\n    currentOptions,\r\n    structureState._elements\r\n  );\r\n\r\n  const update = (changedOptions: PartialOptions<Options>, force?: boolean) => {\r\n    updateStructure(changedOptions, force);\r\n    updateScrollbars(changedOptions, force);\r\n  };\r\n\r\n  const removeEnvListener = addEnvListener(update.bind(0, {}, true));\r\n\r\n  structureState._addOnUpdatedListener((updateHints, changedOptions, force) => {\r\n    const {\r\n      _sizeChanged,\r\n      _directionChanged,\r\n      _heightIntrinsicChanged,\r\n      _overflowAmountChanged,\r\n      _overflowStyleChanged,\r\n      _contentMutation,\r\n      _hostMutation,\r\n    } = updateHints;\r\n\r\n    triggerEvent('updated', {\r\n      updateHints: {\r\n        sizeChanged: _sizeChanged,\r\n        directionChanged: _directionChanged,\r\n        heightIntrinsicChanged: _heightIntrinsicChanged,\r\n        overflowAmountChanged: _overflowAmountChanged,\r\n        overflowStyleChanged: _overflowStyleChanged,\r\n        contentMutation: _contentMutation,\r\n        hostMutation: _hostMutation,\r\n      },\r\n      changedOptions,\r\n      force,\r\n    });\r\n  });\r\n\r\n  const instance: OverlayScrollbars = {\r\n    options(newOptions?: PartialOptions<Options>) {\r\n      if (newOptions) {\r\n        const changedOptions = getOptionsDiff(currentOptions, validateOptions(newOptions));\r\n\r\n        if (!isEmptyObject(changedOptions)) {\r\n          assignDeep(currentOptions, changedOptions);\r\n          update(changedOptions);\r\n        }\r\n      }\r\n      return assignDeep({}, currentOptions);\r\n    },\r\n    on: addEvent,\r\n    off: removeEvent,\r\n    state() {\r\n      const { _overflowAmount, _overflowStyle, _hasOverflow, _padding, _paddingAbsolute } =\r\n        structureState();\r\n      return assignDeep(\r\n        {},\r\n        {\r\n          overflowAmount: _overflowAmount,\r\n          overflowStyle: _overflowStyle,\r\n          hasOverflow: _hasOverflow,\r\n          padding: _padding,\r\n          paddingAbsolute: _paddingAbsolute,\r\n        }\r\n      );\r\n    },\r\n    elements() {\r\n      const { _target, _host, _padding, _viewport, _content } = structureState._elements;\r\n      return assignDeep(\r\n        {},\r\n        {\r\n          target: _target,\r\n          host: _host,\r\n          padding: _padding || _viewport,\r\n          viewport: _viewport,\r\n          content: _content || _viewport,\r\n        }\r\n      );\r\n    },\r\n    update(force?: boolean) {\r\n      update({}, force);\r\n    },\r\n    destroy: () => {\r\n      removeInstance(instanceTarget);\r\n      removeEnvListener();\r\n      removeEvent();\r\n\r\n      destroyScrollbars();\r\n      destroyStructure();\r\n\r\n      triggerEvent('destroyed');\r\n    },\r\n  };\r\n\r\n  each(keys(plugins), (pluginName) => {\r\n    const pluginInstance = plugins[pluginName];\r\n    if (isFunction(pluginInstance)) {\r\n      pluginInstance(OverlayScrollbars, instance);\r\n    }\r\n  });\r\n\r\n  instance.update(true);\r\n\r\n  addInstance(instanceTarget, instance);\r\n\r\n  triggerEvent('initialized');\r\n\r\n  return instance;\r\n};\r\n\r\nOverlayScrollbars.plugin = addPlugin;\r\nOverlayScrollbars.env = () => {\r\n  const {\r\n    _nativeScrollbarSize,\r\n    _nativeScrollbarIsOverlaid,\r\n    _nativeScrollbarStyling,\r\n    _rtlScrollBehavior,\r\n    _flexboxGlue,\r\n    _cssCustomProperties,\r\n    _defaultInitializationStrategy,\r\n    _defaultDefaultOptions,\r\n    _getInitializationStrategy,\r\n    _setInitializationStrategy,\r\n    _getDefaultOptions,\r\n    _setDefaultOptions,\r\n  } = getEnvironment();\r\n  return assignDeep(\r\n    {},\r\n    {\r\n      scrollbarSize: _nativeScrollbarSize,\r\n      scrollbarIsOverlaid: _nativeScrollbarIsOverlaid,\r\n      scrollbarStyling: _nativeScrollbarStyling,\r\n      rtlScrollBehavior: _rtlScrollBehavior,\r\n      flexboxGlue: _flexboxGlue,\r\n      cssCustomProperties: _cssCustomProperties,\r\n      defaultInitializationStrategy: _defaultInitializationStrategy,\r\n      defaultDefaultOptions: _defaultDefaultOptions,\r\n\r\n      getInitializationStrategy: _getInitializationStrategy,\r\n      setInitializationStrategy: _setInitializationStrategy,\r\n      getDefaultOptions: _getDefaultOptions,\r\n      setDefaultOptions: _setDefaultOptions,\r\n    }\r\n  );\r\n};\r\n"],"names":["createCache","options","update","o","u","_equal","_","_alwaysUpdateValues","_value","_initialValue","_previous","cacheUpdateContextual","newValue","force","curr","newVal","changed","cacheUpdateIsolated","getCurrentCache","isUndefined","obj","undefined","isNull","isNumber","isString","isBoolean","isFunction","isArray","Array","isObject","isArrayLike","length","lengthCorrectFormat","isPlainObject","type","key","cstr","ctor","ctorProto","prototype","hasOwnConstructor","hasOwnProperty","call","hasIsPrototypeOf","isHTMLElement","instanceofObj","window","HTMLElement","nodeType","ElementNodeType","isElement","Element","each","source","callback","i","Object","keys","assignDeep","target","object1","object2","object3","object4","object5","object6","sources","copy","copyIsArray","src","clone","isEmptyObject","name","getSetProp","topLeft","fallback","elm","value","attr","attrName","getAttribute","setAttribute","scrollLeft","scrollTop","style","styles","getSingleStyle","getStyles","getStylesResult","computedStyle","getComputedStyle","getCSSVal","reduce","result","setCSSVal","Node","ELEMENT_NODE","toString","replace","toLowerCase","indexOf","arr","item","fromIndex","push","array","items","arrayIsSingleItem","apply","from","Set","forEach","isEmptyArray","runEach","args","runFn","fn","prop","attrClass","add","currValues","currValuesSet","split","join","trim","hasAttrClass","has","removeAttr","removeAttribute","elmPrototype","find","selector","rootElm","document","querySelectorAll","findFirst","querySelector","is","matches","msMatchesSelector","contents","childNodes","parent","parentElement","closest","closestFn","liesBetween","highBoundarySelector","deepBoundarySelector","closestHighBoundaryElm","closestDeepBoundaryElm","before","parentElm","preferredAnchor","insertedElms","anchor","fragment","createDocumentFragment","insertedElm","previousSibling","appendChild","firstChild","nextSibling","insertBefore","appendChildren","node","children","prependChildren","insertedNodes","insertAfter","removeElements","nodes","e","removeChild","createDiv","classNames","div","createElement","createDOM","html","createdDiv","innerHTML","firstLetterToUpper","str","charAt","toUpperCase","slice","getDummyStyle","cssPrefixes","jsPrefixes","jsCache","cssCache","cssProperty","uppercasedName","elmStyle","prefix","prefixWithoutDashes","resultPossibilities","resultPossibility","jsAPI","MutationObserverConstructor","IntersectionObserverConstructor","ResizeObserverConstructor","cAF","rAF","rnothtmlwhite","classListAction","className","action","clazz","classes","match","classList","hasClass","contains","removeClass","remove","addClass","bind","equal","a","b","props","propMutation","compareA","compareB","equalWH","equalXY","equalTRBL","equalBCRWH","round","Math","clearTimeouts","id","clearTimeout","noop","debounce","functionToDebounce","timeoutId","maxTimeoutId","prevArguments","latestArguments","g","_timeout","p","_maxDelay","v","_mergeParams","setT","setTimeout","invokeFunctionToDebounce","this","mergeParms","flush","debouncedFn","arguments","finalTimeout","hasTimeout","finalMaxWait","hasMaxWait","setTimeoutFn","mergeParamsResult","invokedArgs","boundInvoke","_flush","cssNumber","opacity","zindex","parseToZeroOrNumber","toFloat","num","parseFloat","parseInt","Number","isNaN","adaptCSSVal","val","getPropertyValue","setProperty","topRightBottomLeft","propertyPrefix","propertySuffix","finalPrefix","finalSuffix","top","right","bottom","left","t","r","l","zeroObj","w","h","windowSize","innerWidth","innerHeight","offsetSize","offsetWidth","offsetHeight","clientSize","clientWidth","clientHeight","scrollSize","scrollWidth","scrollHeight","fractionalSize","cssHeight","cssWidth","getBoundingClientRect","passiveEventsSupport","supportPassiveEvents","addEventListener","defineProperty","get","splitEventNames","eventNames","off","listener","capture","eventName","removeEventListener","on","doSupportPassiveEvents","passive","_passive","_capture","once","_once","offListeners","nativeOptions","finalListener","evt","stopPropagation","preventDefault","stopAndPrevent","x","y","absoluteCoordinates","rect","pageYOffset","pageXOffset","manageListener","createEventListenerHub","initialEventListeners","removeEvent","eventSet","events","currListener","clear","addEvent","set","triggerEvent","event","Map","initialListenerKeys","getPropByPath","path","createOptionCheck","changedOptions","createState","initialState","state","newState","classNameEnvironment","classNameEnvironmentFlexboxGlue","classNameEnvironmentFlexboxGlueMax","dataAttributeHost","dataAttributeHostOverflowX","dataAttributeHostOverflowY","dataValueHostOverflowVisible","dataValueHostViewportScrollbarStyling","classNamePadding","classNameViewport","classNameViewportArrange","classNameContent","classNameViewportScrollbarStyling","classNameOverflowVisible","classNameSizeObserver","classNameSizeObserverAppear","classNameSizeObserverListener","classNameSizeObserverListenerScroll","classNameSizeObserverListenerItem","classNameSizeObserverListenerItemFinal","classNameTrinsicObserver","classNameScrollbar","classNameScrollbarHorizontal","classNameScrollbarVertical","classNameScrollbarTrack","classNameScrollbarHandle","opsStringify","JSON","stringify","Error","defaultOptions","paddingAbsolute","updating","elementEvents","attributes","ignoreMutation","overflow","nativeScrollbarsOverlaid","show","initialize","scrollbars","visibility","autoHide","autoHideDelay","dragScroll","clickScroll","touch","getOptionsDiff","currOptions","newOptions","diff","optionsKeys","concat","optionKey","currOptionValue","newOptionValue","isDiff","environmentInstance","abs","diffBiggerThanOne","valOne","valTwo","absValOne","absValTwo","getNativeScrollbarSize","body","measureElm","measureElmChild","cSize","oSize","fSize","getNativeScrollbarStyling","testElm","revertClass","ex","getRtlScrollBehavior","childElm","strHidden","overflowX","overflowY","direction","parentOffset","childOffset","childOffsetAfterScroll","n","getFlexboxGlue","revertFbxGlue","minOffsetsizeParent","minOffsetsize","supportsMin","revertFbxGlueMax","maxOffsetsizeParent","maxOffsetsize","supportsMax","getWindowDPR","dDPI","screen","deviceXDPI","sDPI","logicalXDPI","devicePixelRatio","getDefaultInitializationStrategy","nativeScrollbarStyling","_padding","_content","createEnvironment","envDOM","envElm","envChildElm","updateNativeScrollbarSizeCache","getNativeScrollbarSizeCache","nativeScrollbarSize","nativeScrollbarIsOverlaid","initializationStrategy","defaultDefaultOptions","env","_nativeScrollbarSize","_nativeScrollbarIsOverlaid","_nativeScrollbarStyling","_cssCustomProperties","_rtlScrollBehavior","_flexboxGlue","_addListener","_getInitializationStrategy","_setInitializationStrategy","newInitializationStrategy","_getDefaultOptions","_setDefaultOptions","newDefaultOptions","_defaultInitializationStrategy","_defaultDefaultOptions","size","dpr","sizeNew","deltaSize","deltaAbsSize","deltaAbsRatio","dprNew","deltaIsBigger","difference","dprChanged","isZoom","scrollbarSize","scrollbarSizeChanged","getEnvironment","staticInitializationElement","defaultStaticInitializationElement","staticInitializationElementStrategy","staticInitializationElementValue","dynamicInitializationElement","defaultDynamicInitializationElement","dynamicInitializationElementStrategy","dynamicInitializationElementValue","takeInitializationValue","contentArrangeCounter","createNewDiv","unwrap","createUniqueViewportArrangeElement","T","I","D","create","addDataAttrHost","createStructureSetupElements","N","_host","hostInitializationStrategy","_viewport","viewportInitializationStrategy","paddingInitializationStrategy","contentInitializationStrategy","targetIsElm","targetStructureInitialization","targetElement","isTextarea","isBody","ownerDocument","bodyElm","wnd","defaultView","singleElmSupport","generalStaticInitializationElement","generalDynamicInitializationElement","potentialViewportElement","viewport","potentiallySingleElm","viewportIsTarget","viewportElement","evaluatedTargetObj","_target","host","padding","content","_viewportArrange","_windowElm","_documentElm","_htmlElm","_bodyElm","_isTextarea","_isBody","_targetIsElm","_viewportIsTarget","_viewportHasClass","attributeClassName","_viewportAddRemoveClass","generatedElements","elementIsGenerated","Y","V","A","U","$","q","destroyFns","isTextareaHostGenerated","targetContents","contentSlot","removeHostDataAttr","removePaddingClass","removeViewportClass","removeContentClass","createTrinsicUpdate","structureSetupElements","getState","updateHints","M","st","_heightIntrinsic","ct","_heightIntrinsicChanged","heightIntrinsicChanged","height","_sizeChanged","_contentMutation","createPaddingUpdate","setState","_isSingleElm","updatePaddingCache","currentPaddingCache","checkOption","paddingChanged","lt","_directionIsRTL","it","rt","ut","_directionChanged","paddingAbsoluteChanged","contentMutation","paddingStyleChanged","paddingRelative","paddingHorizontal","paddingVertical","paddingStyle","marginRight","marginBottom","marginLeft","width","viewportStyle","paddingTop","paddingRight","paddingBottom","paddingLeft","_paddingAbsolute","_viewportPaddingStyle","_paddingStyleChanged","max","strVisible","overlaidScrollbarsHideOffset","whCacheOptions","xyCacheOptions","getOverflowAmount","viewportScrollSize","viewportClientSize","sizeFraction","tollerance","amount","conditionalClass","overflowIsVisible","overflowBehavior","createOverflowUpdate","nt","et","L","doViewportArrange","updateSizeFraction","getCurrentSizeFraction","updateViewportScrollSizeCache","getCurrentViewportScrollSizeCache","updateOverflowAmountCache","getCurrentOverflowAmountCache","updateOverflowStyleCache","fixFlexboxGlue","viewportOverflowState","heightIntrinsic","ft","gt","_overflowScroll","ht","_scrollbarsHideOffset","hostClientSize","isContentBox","subtractXScrollbar","getViewportOverflowState","showNativeOverlaidScrollbars","viewportStyleObj","arrangeHideOffset","getStatePerAxis","styleKey","isOverlaid","overflowStyle","objectPrefferedOverflowStyle","overflowScroll","nonScrollbarStylingHideOffset","scrollbarsHideOffset","scrollbarsHideOffsetArrange","xOverflowStyle","xOverflowScroll","xScrollbarsHideOffset","xScrollbarsHideOffsetArrange","yOverflowStyle","yOverflowScroll","yScrollbarsHideOffset","yScrollbarsHideOffsetArrange","_overflowStyle","_scrollbarsHideOffsetArrange","setViewportOverflowState","hasOverflow","overflowOption","setAxisOverflowStyle","behavior","hasOverflowAxis","overflowVisible","overflowVisibleBehavior","visibleBehaviorX","visibleBehaviorY","arrangeViewport","directionIsRTL","dt","wt","arrangeX","arrangeY","hideOffsetX","hideOffsetY","viewportArrangeHorizontalPaddingKey","viewportArrangeHorizontalPaddingValue","viewportArrangeVerticalPaddingValue","fractionalContentWidth","fractionalContenHeight","arrangeSize","sheet","cssRules","insertRule","ruleStyle","hideNativeScrollbars","viewportArrange","viewportPaddingStyle","horizontalMarginKey","viewportHorizontalPaddingKey","horizontalMarginValue","verticalMarginValue","horizontalPaddingValue","verticalPaddingValue","undoViewportArrange","finalViewportOverflowState","finalPaddingStyle","assignProps","prevStyle","bt","_hostMutation","_t","showNativeOverlaidScrollbarsOption","showNativeOverlaidScrollbarsChanged","overflowChanged","adjustFlexboxGlue","overflowXVisible","overflowYVisible","sizeFractionCache","viewportScrollSizeCache","overflowAmuntCache","preMeasureViewportOverflowState","redoViewportArrange","undoViewportArrangeOverflowState","sizeFractionChanged","viewportScrollSizeChanged","viewportclientSize","arrangedViewportScrollSize","arrangedViewportClientSize","overflowAmount","overflowAmountChanged","removeClipping","viewportArranged","overflowStyleChanged","_overflowAmount","_hasOverflow","_overflowStyleChanged","_overflowAmountChanged","prepareUpdateHints","leading","adaptive","finalAdaptive","objKeys","leadingValue","adaptiveValue","createStructureSetupUpdate","updateSegments","initialUpdateHints","adjustScrollOffset","scrollOffsetX","scrollOffsetY","adaptivedUpdateHints","updateSegment","animationStartEventName","scrollEventName","scrollAmount","getElmDirectionIsRTL","domRectHasDimensions","createSizeObserver","onSizeChangedCallback","_direction","observeDirectionChange","_appear","observeAppearChange","rtlScrollBehavior","baseElements","sizeObserver","listenerElement","getIsDirectionRTL","updateResizeObserverContentRectCache","currVal","onSizeChangedCallbackProxy","sizeChangedContext","isResizeObserverCall","hasDirectionCache","skip","appear","doDirectionScroll","currRContentRect","prevContentRect","pop","contentRect","hasDimensions","hadDimensions","rtl","_directionIsRTLCache","appearCallback","directionIsRTLCache","resizeObserverInstance","observe","disconnect","observerElementChildren","observerElementChildrenRoot","shrinkElement","lastChild","expandElement","expandElementChild","cacheSize","currSize","isDirty","rAFId","reset","onResized","onScroll","scrollEvent","updateDirectionIsRTLCache","directionIsRTLCacheValues","directionIsRTLChanged","isHeightIntrinsic","ioEntryOrSize","isIntersecting","intersectionRatio","createTrinsicObserver","onTrinsicChangedCallback","trinsicObserver","updateHeightIntrinsicCache","triggerOnTrinsicChangedCallback","updateValue","intersectionObserverInstance","entries","root","onSizeChanged","newSize","createEventContentChange","eventContentChange","map","destroyed","destroy","updateElements","getElements","eventElmList","elements","entry","entryEventNames","entryOff","delete","WeakMap","createDOMObserver","isContentObserver","isConnected","Lt","_attributes","It","_styleChangingAttributes","Tt","_eventContentChange","zt","_nestedTargetSelector","Dt","_ignoreTargetChange","Et","_ignoreContentChange","destroyEventContentChange","updateEventContentChangeElements","finalAttributes","finalStyleChangingAttributes","observedAttributes","observerCallback","mutations","ignoreTargetChange","ignoreContentChange","targetChangedAttrs","totalAddedNodes","targetStyleChanged","contentChanged","childListChanged","mutation","attributeName","mutationTarget","oldValue","addedNodes","isAttributesType","isChildListType","targetIsMutationTarget","attributeValue","attributeChanged","styleChangingAttrChanged","notOnlyAttrChanged","contentAttrChanged","isNestedTarget","baseAssertion","contentFinalChanged","mutationObserver","attributeOldValue","attributeFilter","subtree","childList","characterData","takeRecords","hostSelector","viewportSelector","viewportAttrsFromTarget","baseStyleChangingAttrsTextarea","baseStyleChangingAttrs","createStructureSetupObservers","structureSetupUpdate","debounceTimeout","debounceMaxDelay","contentMutationObserver","K","ot","updateContentSizeCache","contentScroll","viewportScroll","fractional","contentMutationObserverAttr","structureSetupUpdateWithDebouncedAdaptiveUpdateHints","prev","prevObj","currObj","updateViewportAttrsFromHost","attribute","hostAttr","onTrinsicChanged","heightIntrinsicCache","updateFn","directionChanged","onContentMutation","contentChangedTroughEvent","contentSizeChanged","onHostMutation","destroyTrinsicObserver","destroySizeObserver","destroyHostMutationObserver","viewportIsTargetResizeObserver","attributesChanged","elementEventsChanged","debounceValue","debounceChanged","updateContentMutationObserver","ignoreMutationFromOptions","ignore","timeout","maxWait","initialStructureSetupUpdateState","createStructureSetup","checkOptionsFallback","onUpdatedListeners","runOnUpdatedListeners","destroyElements","updateStructure","updateObservers","destroyObservers","structureSetupState","_addOnUpdatedListener","_elements","generateScrollbarDOM","scrollbarClassName","scrollbar","track","handle","_scrollbar","_track","_handle","createScrollbarsSetupElements","_scrollbarsSlot","environmentScrollbarSlot","tt","initializationScrollbarSlot","scrollbarsSlot","evaluatedScrollbarSlot","horizontalScrollbarStructure","verticalScrollbarStructure","horizontalScrollbar","verticalScrollbar","_horizontalScrollbarStructure","_verticalScrollbarStructure","createScrollbarsSetup","scrollbarsSetupState","console","log","pluginRegistry","getPlugins","addPlugin","addedPlugin","plugin","optionsTemplateTypes","boolean","number","string","object","function","null","numberAllowedValues","oTypes","booleanAllowedValues","arrayNullValues","overflowAllowedValues","scrollbarsVisibilityAllowedValues","scrollbarsAutoHideAllowedValues","optionsValidationPluginName","targets","targetInstanceMap","addInstance","osInstance","removeInstance","getInstance","OverlayScrollbars","eventListeners","F","addEnvListener","plugins","instanceTarget","potentialInstance","optionsValidationPlugin","validateOptions","opts","validate","currentOptions","structureState","destroyStructure","updateScrollbars","destroyScrollbars","removeEnvListener","xt","Ct","sizeChanged","hostMutation","instance","yt","vt","St","pluginName","pluginInstance","P","k","B","R","H","scrollbarIsOverlaid","scrollbarStyling","flexboxGlue","cssCustomProperties","defaultInitializationStrategy","getInitializationStrategy","setInitializationStrategy","getDefaultOptions","setDefaultOptions"],"mappings":"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"}