{"version":3,"file":"overlayscrollbars.js","sources":["../src/core/utils/types.ts","../src/core/utils/object.ts","../src/core/utils/array.ts","../src/core/dom/traversal.ts","../src/core/dom/manipulation.ts","../src/core/dom/create.ts","../src/index.ts"],"sourcesContent":["import { PlainObject } from 'core/typings';\n\nexport const type: (obj: any) => string = (obj) => {\n  if (obj === undefined) return `${obj}`;\n  if (obj === null) return `${obj}`;\n  return Object.prototype.toString\n    .call(obj)\n    .replace(/^\\[object (.+)\\]$/, '$1')\n    .toLowerCase();\n};\n\nexport function isNumber(obj: any): obj is number {\n  return typeof obj === 'number';\n}\n\nexport function isString(obj: any): obj is string {\n  return typeof obj === 'string';\n}\n\nexport function isBoolean(obj: any): obj is boolean {\n  return typeof obj === 'boolean';\n}\n\nexport function isFunction(obj: any): obj is (...args: Array<unknown>) => unknown {\n  return typeof obj === 'function';\n}\n\nexport function isUndefined(obj: any): obj is undefined {\n  return obj === undefined;\n}\n\nexport function isNull(obj: any): obj is null {\n  return obj === null;\n}\n\nexport function isArray(obj: any): obj is Array<any> {\n  return Array.isArray(obj);\n}\n\nexport function isObject(obj: any): boolean {\n  return typeof obj === 'object' && !isArray(obj) && !isNull(obj);\n}\n\n/**\n * Returns true if the given object is array like, false otherwise.\n * @param obj The Object\n */\nexport function isArrayLike<T extends PlainObject = any>(obj: any): obj is ArrayLike<T> {\n  const length = !!obj && obj.length;\n  return isArray(obj) || (!isFunction(obj) && isNumber(length) && length > -1 && length % 1 == 0); // eslint-disable-line eqeqeq\n}\n\n/**\n * Returns true if the given object is a \"plain\" (e.g. { key: value }) object, false otherwise.\n * @param obj The Object.\n */\nexport function isPlainObject<T = any>(obj: any): obj is PlainObject<T> {\n  if (!obj || !isObject(obj) || type(obj) !== 'object') return false;\n\n  let key;\n  const proto = 'prototype';\n  const { hasOwnProperty } = Object[proto];\n  const hasOwnConstructor = hasOwnProperty.call(obj, 'constructor');\n  const hasIsPrototypeOf = obj.constructor && obj.constructor[proto] && hasOwnProperty.call(obj.constructor[proto], 'isPrototypeOf');\n\n  if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n    return false;\n  }\n\n  /* eslint-disable no-restricted-syntax */\n  for (key in obj) {\n    /**/\n  }\n  /* eslint-enable */\n\n  return isUndefined(key) || hasOwnProperty.call(obj, key);\n}\n\n/**\n * Checks whether the given object is a HTMLElement.\n * @param obj The object which shall be checked.\n */\nexport function isHTMLElement(obj: any): obj is HTMLElement {\n  const instaceOfRightHandSide = window.HTMLElement;\n  const doInstanceOf = isObject(instaceOfRightHandSide) || isFunction(instaceOfRightHandSide);\n  return !!(doInstanceOf ? obj instanceof instaceOfRightHandSide : obj && isObject(obj) && obj.nodeType === 1 && isString(obj.nodeName));\n}\n\n/**\n * Returns true if the given object is empty, false otherwise.\n * @param obj The Object.\n */\nexport function isEmptyObject(obj: any): boolean {\n  /* eslint-disable no-restricted-syntax, guard-for-in */\n  for (const name in obj) return false;\n  return true;\n  /* eslint-enable */\n}\n","/**\r\n * Determines whether the passed object has a property with the passed name.\r\n * @param obj The object.\r\n * @param prop The name of the property.\r\n */\r\nexport const hasOwnProperty: (obj: any, prop: string | number | symbol) => boolean = (obj: any, prop: string | number | symbol) =>\r\n  Object.prototype.hasOwnProperty.call(obj, prop);\r\n\r\n/**\r\n * Returns the names of the enumerable string properties and methods of an object.\r\n * @param obj The object of which the properties shall be returned.\r\n */\r\nexport const keys: (obj: any) => Array<string> = (obj: any) => (obj ? Object.keys(obj) : []);\r\n","import { keys } from 'core/utils/object';\nimport { isArrayLike } from 'core/utils/types';\nimport { PlainObject } from 'core/typings';\n\n/**\n * Iterates through a array or object\n * @param arrayLikeOrObject The array or object through which shall be iterated.\n * @param callback The function which is responsible for the iteration.\n * If the function returns true its treated like a \"continue\" statement.\n * If the function returns false its treated like a \"break\" statement.\n */\nexport function each<T>(\n  array: Array<T> | ReadonlyArray<T>,\n  callback: (value: T, indexOrKey: number, source: Array<T>) => boolean | void,\n): Array<T> | ReadonlyArray<T>;\nexport function each<T>(\n  array: Array<T> | ReadonlyArray<T> | null,\n  callback: (value: T, indexOrKey: number, source: Array<T>) => boolean | void,\n): Array<T> | ReadonlyArray<T> | null;\nexport function each<T>(\n  arrayLikeObject: ArrayLike<T>,\n  callback: (value: T, indexOrKey: number, source: ArrayLike<T>) => boolean | void,\n): ArrayLike<T>;\nexport function each<T>(\n  arrayLikeObject: ArrayLike<T> | null,\n  callback: (value: T, indexOrKey: number, source: ArrayLike<T>) => boolean | void,\n): ArrayLike<T> | null;\nexport function each(obj: PlainObject, callback: (value: any, indexOrKey: string, source: PlainObject) => boolean | void): PlainObject;\nexport function each(obj: PlainObject | null, callback: (value: any, indexOrKey: string, source: PlainObject) => boolean | void): PlainObject | null;\nexport function each<T>(\n  source: ArrayLike<T> | PlainObject | null,\n  callback: (value: T | any, indexOrKey: any, source: any) => boolean | void,\n): Array<T> | ReadonlyArray<T> | ArrayLike<T> | PlainObject | null {\n  if (isArrayLike(source)) {\n    for (let i = 0; i < source.length; i++) {\n      if (callback(source[i], i, source) === false) {\n        break;\n      }\n    }\n  } else if (source) {\n    each(keys(source), (key) => callback(source[key], key, source));\n  }\n  return source;\n}\n\n/**\n * Returns the index of the given inside the given array or -1 if the given item isn't part of the given array.\n * @param arr The array.\n * @param item The item.\n * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\n */\nexport const indexOf: <T = any>(arr: Array<T>, item: T, fromIndex?: number) => number = (arr, item, fromIndex) => arr.indexOf(item, fromIndex);\n","import { each } from 'core/utils/array';\n\nconst elementIsVisible: (elm: HTMLElement) => boolean = (elm) => !!(elm.offsetWidth || elm.offsetHeight || elm.getClientRects().length);\n\nexport const find: (selector: string, elm?: Element | null) => ReadonlyArray<Element> = (selector, elm?) => {\n  const arr: Array<Element> = [];\n\n  each((elm || document).querySelectorAll(selector), (e: Element) => {\n    arr.push(e);\n  });\n\n  return arr;\n};\n\nexport const findFirst: (selector: string, elm?: Element | null) => Element | null = (selector, elm?) => (elm || document).querySelector(selector);\n\nexport const is: (elm: Element | null, selector: string) => boolean = (elm, selector) => {\n  if (elm) {\n    if (selector === ':visible') {\n      return elementIsVisible(elm as HTMLElement);\n    }\n    if (selector === ':hidden') {\n      return !elementIsVisible(elm as HTMLElement);\n    }\n    if (elm.matches(selector)) {\n      return true;\n    }\n  }\n  return false;\n};\n\nexport const children: (elm: Element | null, selector?: string) => ReadonlyArray<Element> = (elm, selector?) => {\n  const childs: Array<Element> = [];\n\n  each(elm && elm.children, (child: Element) => {\n    if (selector) {\n      if (child.matches(selector)) {\n        childs.push(child);\n      }\n    } else {\n      childs.push(child);\n    }\n  });\n\n  return childs;\n};\n\nexport const contents: (elm: Element | null) => ReadonlyArray<ChildNode> = (elm) => (elm ? Array.from<ChildNode>(elm.childNodes) : []);\n\nexport const parent: (elm: Node | null) => Node | null = (elm) => (elm ? elm.parentElement : null);\n","import { isArrayLike } from 'core/utils/types';\nimport { each } from 'core/utils/array';\nimport { parent } from 'core/dom/traversal';\n\ntype NodeCollection = ArrayLike<Node> | Node | undefined | null;\n\n/**\n * Inserts Nodes before the given preferredAnchor element.\n * @param parentElm The parent of the preferredAnchor element or the element which shall be the parent of the inserted Nodes.\n * @param preferredAnchor The element before which the Nodes shall be inserted or null if the elements shall be appended at the end.\n * @param insertedElms The Nodes which shall be inserted.\n */\nconst before: (parentElm: Node | null, preferredAnchor: Node | null, insertedElms: NodeCollection) => void = (\n  parentElm,\n  preferredAnchor,\n  insertedElms,\n) => {\n  if (insertedElms) {\n    let anchor: Node | null = preferredAnchor;\n    let fragment: DocumentFragment | Node | undefined | null;\n\n    // parent must be defined\n    if (parentElm) {\n      if (isArrayLike(insertedElms)) {\n        fragment = document.createDocumentFragment();\n\n        // append all insertedElms to the fragment and if one of these is the anchor, change the anchor\n        each(insertedElms, (insertedElm) => {\n          if (insertedElm === anchor) {\n            anchor = insertedElm.previousSibling;\n          }\n          fragment!.appendChild(insertedElm);\n        });\n      } else {\n        fragment = insertedElms;\n      }\n\n      // if the preferred anchor isn't null set it to a valid anchor\n      if (preferredAnchor) {\n        if (!anchor) {\n          anchor = parentElm.firstChild;\n        } else if (anchor !== preferredAnchor) {\n          anchor = anchor.nextSibling;\n        }\n      }\n\n      parentElm.insertBefore(fragment, anchor);\n    }\n  }\n};\n\n/**\n * Appends the given children at the end of the given Node.\n * @param node The Node to which the children shall be appended.\n * @param children The Nodes which shall be appended.\n */\nexport const appendChildren: (node: Node | null, children: NodeCollection) => void = (node, children) => {\n  before(node, null, children);\n};\n\n/**\n * Prepends the given children at the start of the given Node.\n * @param node The Node to which the children shall be prepended.\n * @param children The Nodes which shall be prepended.\n */\nexport const prependChildren: (node: Node | null, children: NodeCollection) => void = (node, children) => {\n  before(node, node && node.firstChild, children);\n};\n\n/**\n * Inserts the given Nodes before the given Node.\n * @param node The Node before which the given Nodes shall be inserted.\n * @param insertedNodes The Nodes which shall be inserted.\n */\nexport const insertBefore: (node: Node | null, insertedNodes: NodeCollection) => void = (node, insertedNodes) => {\n  before(parent(node), node, insertedNodes);\n};\n\n/**\n * Inserts the given Nodes after the given Node.\n * @param node The Node after which the given Nodes shall be inserted.\n * @param insertedNodes The Nodes which shall be inserted.\n */\nexport const insertAfter: (node: Node | null, insertedNodes: NodeCollection) => void = (node, insertedNodes) => {\n  before(parent(node), node && node.nextSibling, insertedNodes);\n};\n\n/**\n * Removes the given Nodes from their parent.\n * @param nodes The Nodes which shall be removed.\n */\nexport const removeElements: (nodes: NodeCollection) => void = (nodes) => {\n  if (isArrayLike(nodes)) {\n    each(Array.from(nodes), (e) => removeElements(e));\n  } else if (nodes) {\n    const { parentNode } = nodes;\n    if (parentNode) {\n      parentNode.removeChild(nodes);\n    }\n  }\n};\n","import { each } from 'core/utils/array';\nimport { contents } from 'core/dom/traversal';\nimport { removeElements } from 'core/dom/manipulation';\n\nexport const createDiv: () => HTMLDivElement = () => document.createElement('div');\n\nexport const createDOM: (html: string) => ReadonlyArray<Node> = (html) => {\n  const createdDiv = createDiv();\n  createdDiv.innerHTML = html.trim();\n\n  return each(contents(createdDiv), (elm) => removeElements(elm));\n};\n","import { createDOM } from 'core/dom';\n\n/*\nexport * from 'core/compatibility';\nexport * from 'core/utils';\nexport * from 'core/dom';\nexport * from 'core/options';\nexport * from 'instances';\n*/\n\nconst abc = {\n  a: 1,\n  b: 1,\n  c: 1,\n};\n\nexport default () => {\n  const { a, b, c } = abc;\n  return [\n    createDOM(\n      '\\\n    <div class=\"os-host\">\\\n        <div class=\"os-resize-observer-host\"></div>\\\n        <div class=\"os-padding\">\\\n            <div class=\"os-viewport\">\\\n                <div class=\"os-content\">\\\n                    fdfhdfgh\\\n                </div>\\\n            </div>\\\n        </div>\\\n        <div class=\"os-scrollbar os-scrollbar-horizontal\">\\\n            <div class=\"os-scrollbar-track\">\\\n                <div class=\"os-scrollbar-handle\"></div>\\\n            </div>\\\n        </div>\\\n        <div class=\"os-scrollbar os-scrollbar-vertical\">\\\n            <div class=\"os-scrollbar-track\">\\\n                <div class=\"os-scrollbar-handle\"></div>\\\n            </div>\\\n        </div>\\\n        <div class=\"os-scrollbar-corner\"></div>\\\n    </div>'\n    ),\n    a,\n    b,\n    c,\n  ];\n};\n"],"names":["isNumber","obj","isFunction","isArray","Array","isArrayLike","length","keys","Object","each","source","callback","i","key","contents","elm","from","childNodes","removeElements","nodes","e","parentNode","removeChild","createDiv","document","createElement","createDOM","html","createdDiv","innerHTML","trim","abc","a","b","c"],"mappings":"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"}