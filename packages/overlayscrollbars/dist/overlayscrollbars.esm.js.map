{"version":3,"file":"overlayscrollbars.esm.js","sources":["../src/support/utils/types.ts","../src/support/dom/attribute.ts","../src/support/dom/class.ts","../src/support/utils/array.ts","../src/support/dom/traversal.ts","../src/support/dom/manipulation.ts","../src/support/dom/create.ts","../src/support/dom/dimensions.ts","../src/support/utils/object.ts","../src/support/dom/style.ts","../src/support/dom/offset.ts","../../../node_modules/@babel/runtime/helpers/classPrivateFieldGet.js","../../../node_modules/@babel/runtime/helpers/classPrivateFieldSet.js","../src/support/compatibility/vendors.ts","../src/support/compatibility/apis.ts","../../../node_modules/@babel/runtime/helpers/extends.js","../src/support/options/validation.ts","../src/environment/environment.ts","../src/index.ts"],"sourcesContent":["import { PlainObject } from 'typings';\r\n\r\nexport const type: (obj: any) => string = (obj) => {\r\n  if (obj === undefined) return `${obj}`;\r\n  if (obj === null) return `${obj}`;\r\n  return Object.prototype.toString\r\n    .call(obj)\r\n    .replace(/^\\[object (.+)\\]$/, '$1')\r\n    .toLowerCase();\r\n};\r\n\r\nexport function isNumber(obj: any): obj is number {\r\n  return typeof obj === 'number';\r\n}\r\n\r\nexport function isString(obj: any): obj is string {\r\n  return typeof obj === 'string';\r\n}\r\n\r\nexport function isBoolean(obj: any): obj is boolean {\r\n  return typeof obj === 'boolean';\r\n}\r\n\r\nexport function isFunction(obj: any): obj is (...args: Array<unknown>) => unknown {\r\n  return typeof obj === 'function';\r\n}\r\n\r\nexport function isUndefined(obj: any): obj is undefined {\r\n  return obj === undefined;\r\n}\r\n\r\nexport function isNull(obj: any): obj is null {\r\n  return obj === null;\r\n}\r\n\r\nexport function isArray(obj: any): obj is Array<any> {\r\n  return Array.isArray(obj);\r\n}\r\n\r\nexport function isObject(obj: any): boolean {\r\n  return typeof obj === 'object' && !isArray(obj) && !isNull(obj);\r\n}\r\n\r\n/**\r\n * Returns true if the given object is array like, false otherwise.\r\n * @param obj The Object\r\n */\r\nexport function isArrayLike<T extends PlainObject = any>(obj: any): obj is ArrayLike<T> {\r\n  const length = !!obj && obj.length;\r\n  return isArray(obj) || (!isFunction(obj) && isNumber(length) && length > -1 && length % 1 == 0); // eslint-disable-line eqeqeq\r\n}\r\n\r\n/**\r\n * Returns true if the given object is a \"plain\" (e.g. { key: value }) object, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport function isPlainObject<T = any>(obj: any): obj is PlainObject<T> {\r\n  if (!obj || !isObject(obj) || type(obj) !== 'object') return false;\r\n\r\n  let key;\r\n  const proto = 'prototype';\r\n  const { hasOwnProperty } = Object[proto];\r\n  const hasOwnConstructor = hasOwnProperty.call(obj, 'constructor');\r\n  const hasIsPrototypeOf = obj.constructor && obj.constructor[proto] && hasOwnProperty.call(obj.constructor[proto], 'isPrototypeOf');\r\n\r\n  if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\r\n    return false;\r\n  }\r\n\r\n  /* eslint-disable no-restricted-syntax */\r\n  for (key in obj) {\r\n    /**/\r\n  }\r\n  /* eslint-enable */\r\n\r\n  return isUndefined(key) || hasOwnProperty.call(obj, key);\r\n}\r\n\r\n/**\r\n * Checks whether the given object is a HTMLElement.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport function isHTMLElement(obj: any): obj is HTMLElement {\r\n  const instaceOfRightHandSide = window.HTMLElement;\r\n  const doInstanceOf = isObject(instaceOfRightHandSide) || isFunction(instaceOfRightHandSide);\r\n  return !!(doInstanceOf ? obj instanceof instaceOfRightHandSide : obj && isObject(obj) && obj.nodeType === 1 && isString(obj.nodeName));\r\n}\r\n\r\n/**\r\n * Returns true if the given object is empty, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport function isEmptyObject(obj: any): boolean {\r\n  /* eslint-disable no-restricted-syntax, guard-for-in */\r\n  for (const name in obj) return false;\r\n  return true;\r\n  /* eslint-enable */\r\n}\r\n","import { isUndefined } from 'support/utils/types';\r\n\r\ntype GetSetPropName = 'scrollLeft' | 'scrollTop' | 'value';\r\n\r\nfunction getSetProp(\r\n  topLeft: GetSetPropName,\r\n  fallback: number | string,\r\n  elm: HTMLElement | HTMLInputElement | null,\r\n  value?: number | string\r\n): number | string | void {\r\n  if (isUndefined(value)) {\r\n    return elm ? elm[topLeft] : fallback;\r\n  }\r\n  elm && (elm[topLeft] = value);\r\n}\r\n\r\n/**\r\n * Gets or sets a attribute with the given attribute of the given element depending whether the value attribute is given.\r\n * Returns null if the element has no attribute with the given name.\r\n * @param elm The element of which the attribute shall be get or set.\r\n * @param attrName The attribute name which shall be get or set.\r\n * @param value The value of the attribute which shall be set.\r\n */\r\nexport function attr(elm: HTMLElement | null, attrName: string): string | null;\r\nexport function attr(elm: HTMLElement | null, attrName: string, value: string): void;\r\nexport function attr(elm: HTMLElement | null, attrName: string, value?: string): string | null | void {\r\n  if (isUndefined(value)) {\r\n    return elm ? elm.getAttribute(attrName) : null;\r\n  }\r\n  elm && elm.setAttribute(attrName, value);\r\n}\r\n\r\n/**\r\n * Removes the given attribute from the given element.\r\n * @param elm The element of which the attribute shall be removed.\r\n * @param attrName The attribute name.\r\n */\r\nexport const removeAttr = (elm: Element | null, attrName: string): void => {\r\n  elm?.removeAttribute(attrName);\r\n};\r\n\r\n/**\r\n * Gets or sets the scrollLeft value of the given element depending whether the value attribute is given.\r\n * @param elm The element of which the scrollLeft value shall be get or set.\r\n * @param value The scrollLeft value which shall be set.\r\n */\r\nexport function scrollLeft(elm: HTMLElement | null): number;\r\nexport function scrollLeft(elm: HTMLElement | null, value: number): void;\r\nexport function scrollLeft(elm: HTMLElement | null, value?: number): number | void {\r\n  return getSetProp('scrollLeft', 0, elm, value) as number;\r\n}\r\n\r\n/**\r\n * Gets or sets the scrollTop value of the given element depending whether the value attribute is given.\r\n * @param elm The element of which the scrollTop value shall be get or set.\r\n * @param value The scrollTop value which shall be set.\r\n */\r\nexport function scrollTop(elm: HTMLElement | null): number;\r\nexport function scrollTop(elm: HTMLElement | null, value: number): void;\r\nexport function scrollTop(elm: HTMLElement | null, value?: number): number | void {\r\n  return getSetProp('scrollTop', 0, elm, value) as number;\r\n}\r\n\r\n/**\r\n * Gets or sets the value of the given input element depending whether the value attribute is given.\r\n * @param elm The input element of which the value shall be get or set.\r\n * @param value The value which shall be set.\r\n */\r\nexport function val(elm: HTMLInputElement | null): string;\r\nexport function val(elm: HTMLInputElement | null, value: string): void;\r\nexport function val(elm: HTMLInputElement | null, value?: string): string | void {\r\n  return getSetProp('value', '', elm, value) as string;\r\n}\r\n","import { isString } from 'support/utils/types';\r\n\r\nconst rnothtmlwhite = /[^\\x20\\t\\r\\n\\f]+/g;\r\nconst classListAction = (elm: Element | null, className: string, action: (elmClassList: DOMTokenList, clazz: string) => boolean | void): boolean => {\r\n  let clazz: string;\r\n  let i = 0;\r\n  let result = false;\r\n\r\n  if (elm && isString(className)) {\r\n    const classes: Array<string> = className.match(rnothtmlwhite) || [];\r\n    result = classes.length > 0;\r\n    while ((clazz = classes[i++])) {\r\n      result = (action(elm.classList, clazz) as boolean) && result;\r\n    }\r\n  }\r\n  return result;\r\n};\r\n\r\n/**\r\n * Check whether the given element has the given class name(s).\r\n * @param elm The element.\r\n * @param className The class name(s).\r\n */\r\nexport const hasClass = (elm: Element | null, className: string): boolean =>\r\n  classListAction(elm, className, (classList, clazz) => classList.contains(clazz));\r\n\r\n/**\r\n * Adds the given class name(s) to the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be added. (separated by spaces)\r\n */\r\nexport const addClass = (elm: Element | null, className: string): void => {\r\n  classListAction(elm, className, (classList, clazz) => classList.add(clazz));\r\n};\r\n\r\n/**\r\n * Removes the given class name(s) from the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be removed. (separated by spaces)\r\n */\r\nexport const removeClass = (elm: Element | null, className: string): void => {\r\n  classListAction(elm, className, (classList, clazz) => classList.remove(clazz));\r\n};\r\n","import { isArrayLike } from 'support/utils/types';\r\nimport { PlainObject } from 'typings';\r\n\r\n/**\r\n * Iterates through a array or object\r\n * @param arrayLikeOrObject The array or object through which shall be iterated.\r\n * @param callback The function which is responsible for the iteration.\r\n * If the function returns true its treated like a \"continue\" statement.\r\n * If the function returns false its treated like a \"break\" statement.\r\n */\r\nexport function each<T>(\r\n  array: Array<T> | ReadonlyArray<T>,\r\n  callback: (value: T, indexOrKey: number, source: Array<T>) => boolean | void\r\n): Array<T> | ReadonlyArray<T>;\r\nexport function each<T>(\r\n  array: Array<T> | ReadonlyArray<T> | null,\r\n  callback: (value: T, indexOrKey: number, source: Array<T>) => boolean | void\r\n): Array<T> | ReadonlyArray<T> | null;\r\nexport function each<T>(\r\n  arrayLikeObject: ArrayLike<T>,\r\n  callback: (value: T, indexOrKey: number, source: ArrayLike<T>) => boolean | void\r\n): ArrayLike<T>;\r\nexport function each<T>(\r\n  arrayLikeObject: ArrayLike<T> | null,\r\n  callback: (value: T, indexOrKey: number, source: ArrayLike<T>) => boolean | void\r\n): ArrayLike<T> | null;\r\nexport function each(obj: PlainObject, callback: (value: any, indexOrKey: string, source: PlainObject) => boolean | void): PlainObject;\r\nexport function each(obj: PlainObject | null, callback: (value: any, indexOrKey: string, source: PlainObject) => boolean | void): PlainObject | null;\r\nexport function each<T>(\r\n  source: ArrayLike<T> | PlainObject | null,\r\n  callback: (value: T | any, indexOrKey: any, source: any) => boolean | void\r\n): Array<T> | ReadonlyArray<T> | ArrayLike<T> | PlainObject | null {\r\n  if (isArrayLike(source)) {\r\n    for (let i = 0; i < source.length; i++) {\r\n      if (callback(source[i], i, source) === false) {\r\n        break;\r\n      }\r\n    }\r\n  } else if (source) {\r\n    each(Object.keys(source), (key) => callback(source[key], key, source));\r\n  }\r\n  return source;\r\n}\r\n\r\n/**\r\n * Returns the index of the given inside the given array or -1 if the given item isn't part of the given array.\r\n * @param arr The array.\r\n * @param item The item.\r\n * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\r\n */\r\nexport const indexOf = <T = any>(arr: Array<T>, item: T, fromIndex?: number): number => arr.indexOf(item, fromIndex);\r\n\r\n/**\r\n * Creates a shallow-copied Array instance from an array-like or iterable object.\r\n * @param arr The object from which the array instance shall be created.\r\n */\r\nexport const from = <T = any>(arr: ArrayLike<T>) => {\r\n  if (Array.from) {\r\n    return Array.from(arr);\r\n  }\r\n  const result: Array<T> = [];\r\n  each(arr, (elm) => {\r\n    result.push(elm);\r\n  });\r\n  return result;\r\n};\r\n","import { each, from } from 'support/utils/array';\r\n\r\nconst elementIsVisible = (elm: HTMLElement): boolean => !!(elm.offsetWidth || elm.offsetHeight || elm.getClientRects().length);\r\n\r\n/**\r\n * Find all elements with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nexport const find = (selector: string, elm?: Element | null): ReadonlyArray<Element> => {\r\n  const arr: Array<Element> = [];\r\n\r\n  each((elm || document).querySelectorAll(selector), (e: Element) => {\r\n    arr.push(e);\r\n  });\r\n\r\n  return arr;\r\n};\r\n\r\n/**\r\n * Find the first element with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nexport const findFirst = (selector: string, elm?: Element | null): Element | null => (elm || document).querySelector(selector);\r\n\r\n/**\r\n * Determines whether the passed element is matching with the passed selector.\r\n * @param elm The element which has to be compared with the passed selector.\r\n * @param selector The selector which has to be compared with the passed element. Additional selectors: ':visible' and ':hidden'.\r\n */\r\nexport const is = (elm: Element | null, selector: string): boolean => {\r\n  if (elm) {\r\n    if (selector === ':visible') {\r\n      return elementIsVisible(elm as HTMLElement);\r\n    }\r\n    if (selector === ':hidden') {\r\n      return !elementIsVisible(elm as HTMLElement);\r\n    }\r\n    if (elm.matches(selector)) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * Returns the children (no text-nodes or comments) of the passed element which are matching the passed selector. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the children shall be returned.\r\n * @param selector The selector which must match with the children elements.\r\n */\r\nexport const children = (elm: Element | null, selector?: string): ReadonlyArray<Element> => {\r\n  const childs: Array<Element> = [];\r\n\r\n  each(elm && elm.children, (child: Element) => {\r\n    if (selector) {\r\n      if (child.matches(selector)) {\r\n        childs.push(child);\r\n      }\r\n    } else {\r\n      childs.push(child);\r\n    }\r\n  });\r\n\r\n  return childs;\r\n};\r\n\r\n/**\r\n * Returns the childNodes (incl. text-nodes or comments etc.) of the passed element. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the childNodes shall be returned.\r\n */\r\nexport const contents = (elm: Element | null): ReadonlyArray<ChildNode> => (elm ? from(elm.childNodes) : []);\r\n\r\n/**\r\n * Returns the parent element of the passed element, or null if the passed element is null.\r\n * @param elm The element of which the parent element shall be returned.\r\n */\r\nexport const parent = (elm: Node | null): Node | null => (elm ? elm.parentElement : null);\r\n","import { isArrayLike } from 'support/utils/types';\r\nimport { each, from } from 'support/utils/array';\r\nimport { parent } from 'support/dom/traversal';\r\n\r\ntype NodeCollection = ArrayLike<Node> | Node | undefined | null;\r\n\r\n/**\r\n * Inserts Nodes before the given preferredAnchor element.\r\n * @param parentElm The parent of the preferredAnchor element or the element which shall be the parent of the inserted Nodes.\r\n * @param preferredAnchor The element before which the Nodes shall be inserted or null if the elements shall be appended at the end.\r\n * @param insertedElms The Nodes which shall be inserted.\r\n */\r\nconst before = (parentElm: Node | null, preferredAnchor: Node | null, insertedElms: NodeCollection): void => {\r\n  if (insertedElms) {\r\n    let anchor: Node | null = preferredAnchor;\r\n    let fragment: DocumentFragment | Node | undefined | null;\r\n\r\n    // parent must be defined\r\n    if (parentElm) {\r\n      if (isArrayLike(insertedElms)) {\r\n        fragment = document.createDocumentFragment();\r\n\r\n        // append all insertedElms to the fragment and if one of these is the anchor, change the anchor\r\n        each(insertedElms, (insertedElm) => {\r\n          if (insertedElm === anchor) {\r\n            anchor = insertedElm.previousSibling;\r\n          }\r\n          fragment!.appendChild(insertedElm);\r\n        });\r\n      } else {\r\n        fragment = insertedElms;\r\n      }\r\n\r\n      // if the preferred anchor isn't null set it to a valid anchor\r\n      if (preferredAnchor) {\r\n        if (!anchor) {\r\n          anchor = parentElm.firstChild;\r\n        } else if (anchor !== preferredAnchor) {\r\n          anchor = anchor.nextSibling;\r\n        }\r\n      }\r\n\r\n      parentElm.insertBefore(fragment, anchor);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Appends the given children at the end of the given Node.\r\n * @param node The Node to which the children shall be appended.\r\n * @param children The Nodes which shall be appended.\r\n */\r\nexport const appendChildren = (node: Node | null, children: NodeCollection): void => {\r\n  before(node, null, children);\r\n};\r\n\r\n/**\r\n * Prepends the given children at the start of the given Node.\r\n * @param node The Node to which the children shall be prepended.\r\n * @param children The Nodes which shall be prepended.\r\n */\r\nexport const prependChildren = (node: Node | null, children: NodeCollection): void => {\r\n  before(node, node && node.firstChild, children);\r\n};\r\n\r\n/**\r\n * Inserts the given Nodes before the given Node.\r\n * @param node The Node before which the given Nodes shall be inserted.\r\n * @param insertedNodes The Nodes which shall be inserted.\r\n */\r\nexport const insertBefore = (node: Node | null, insertedNodes: NodeCollection): void => {\r\n  before(parent(node), node, insertedNodes);\r\n};\r\n\r\n/**\r\n * Inserts the given Nodes after the given Node.\r\n * @param node The Node after which the given Nodes shall be inserted.\r\n * @param insertedNodes The Nodes which shall be inserted.\r\n */\r\nexport const insertAfter = (node: Node | null, insertedNodes: NodeCollection): void => {\r\n  before(parent(node), node && node.nextSibling, insertedNodes);\r\n};\r\n\r\n/**\r\n * Removes the given Nodes from their parent.\r\n * @param nodes The Nodes which shall be removed.\r\n */\r\nexport const removeElements = (nodes: NodeCollection): void => {\r\n  if (isArrayLike(nodes)) {\r\n    each(from(nodes), (e) => removeElements(e));\r\n  } else if (nodes) {\r\n    const parentElm = parent(nodes);\r\n    if (parentElm) {\r\n      parentElm.removeChild(nodes);\r\n    }\r\n  }\r\n};\r\n","import { each } from 'support/utils/array';\r\nimport { contents } from 'support/dom/traversal';\r\nimport { removeElements } from 'support/dom/manipulation';\r\n\r\n/**\r\n * Creates a div DOM node.\r\n */\r\nexport const createDiv = (): HTMLDivElement => document.createElement('div');\r\n\r\n/**\r\n * Creates DOM nodes modeled after the passed html string and returns the root dom nodes as a array.\r\n * @param html The html string after which the DOM nodes shall be created.\r\n */\r\nexport const createDOM = (html: string): ReadonlyArray<Node> => {\r\n  const createdDiv = createDiv();\r\n  createdDiv.innerHTML = html.trim();\r\n\r\n  return each(contents(createdDiv), (elm) => removeElements(elm));\r\n};\r\n","import { WH } from 'support/dom';\r\n\r\nconst zeroObj: WH = {\r\n  w: 0,\r\n  h: 0,\r\n};\r\n\r\n/**\r\n * Returns the window inner- width and height.\r\n */\r\nexport const windowSize = (): WH => ({\r\n  w: window.innerWidth,\r\n  h: window.innerHeight,\r\n});\r\n\r\n/**\r\n * Returns the offset- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the offset- width and height shall be returned.\r\n */\r\nexport const offsetSize = (elm: HTMLElement | null): WH =>\r\n  elm\r\n    ? {\r\n        w: elm.offsetWidth,\r\n        h: elm.offsetHeight,\r\n      }\r\n    : zeroObj;\r\n\r\n/**\r\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the client- width and height shall be returned.\r\n */\r\nexport const clientSize = (elm: HTMLElement | null): WH =>\r\n  elm\r\n    ? {\r\n        w: elm.clientWidth,\r\n        h: elm.clientHeight,\r\n      }\r\n    : zeroObj;\r\n\r\n/**\r\n * Returns the BoundingClientRect of the passed element.\r\n * @param elm The element of which the BoundingClientRect shall be returned.\r\n */\r\nexport const getBoundingClientRect = (elm: HTMLElement): DOMRect => elm.getBoundingClientRect();\r\n","import { isArray, isFunction, isPlainObject, isNull } from 'support/utils/types';\r\nimport { each } from 'support/utils/array';\r\n\r\n/**\r\n * Determines whether the passed object has a property with the passed name.\r\n * @param obj The object.\r\n * @param prop The name of the property.\r\n */\r\nexport const hasOwnProperty = (obj: any, prop: string | number | symbol): boolean => Object.prototype.hasOwnProperty.call(obj, prop);\r\n\r\n/**\r\n * Returns the names of the enumerable string properties and methods of an object.\r\n * @param obj The object of which the properties shall be returned.\r\n */\r\nexport const keys = (obj: any): Array<string> => (obj ? Object.keys(obj) : []);\r\n\r\n// https://github.com/jquery/jquery/blob/master/src/core.js#L116\r\nexport function assignDeep<T, U>(target: T, object1: U): T & U;\r\nexport function assignDeep<T, U, V>(target: T, object1: U, object2: V): T & U & V;\r\nexport function assignDeep<T, U, V, W>(target: T, object1: U, object2: V, object3: W): T & U & V & W;\r\nexport function assignDeep<T, U, V, W, X>(target: T, object1: U, object2: V, object3: W, object4: X): T & U & V & W & X;\r\nexport function assignDeep<T, U, V, W, X, Y>(target: T, object1: U, object2: V, object3: W, object4: X, object5: Y): T & U & V & W & X & Y;\r\nexport function assignDeep<T, U, V, W, X, Y, Z>(\r\n  target: T,\r\n  object1?: U,\r\n  object2?: V,\r\n  object3?: W,\r\n  object4?: X,\r\n  object5?: Y,\r\n  object6?: Z\r\n): T & U & V & W & X & Y & Z {\r\n  const sources: Array<any> = [object1, object2, object3, object4, object5, object6];\r\n\r\n  // Handle case when target is a string or something (possible in deep copy)\r\n  if ((typeof target !== 'object' || isNull(target)) && !isFunction(target)) {\r\n    target = {} as T;\r\n  }\r\n\r\n  each(sources, (source) => {\r\n    // Extend the base object\r\n    each(keys(source), (key) => {\r\n      const copy: any = source[key];\r\n\r\n      // Prevent Object.prototype pollution\r\n      // Prevent never-ending loop\r\n      if (target === copy) {\r\n        return true;\r\n      }\r\n\r\n      const copyIsArray = isArray(copy);\r\n\r\n      // Recurse if we're merging plain objects or arrays\r\n      if (copy && (isPlainObject(copy) || copyIsArray)) {\r\n        const src = target[key];\r\n        let clone: any = src;\r\n\r\n        // Ensure proper type for the source value\r\n        if (copyIsArray && !isArray(src)) {\r\n          clone = [];\r\n        } else if (!copyIsArray && !isPlainObject(src)) {\r\n          clone = {};\r\n        }\r\n\r\n        // Never move original objects, clone them\r\n        target[key] = assignDeep(clone, copy) as any;\r\n      } else {\r\n        target[key] = copy;\r\n      }\r\n    });\r\n  });\r\n\r\n  // Return the modified object\r\n  return target as any;\r\n}\r\n","import { each, keys } from 'support/utils';\r\nimport { isString, isNumber, isArray } from 'support/utils/types';\r\nimport { PlainObject } from 'typings';\r\n\r\ntype CssStyles = { [key: string]: string | number };\r\nconst cssNumber = {\r\n  animationiterationcount: 1,\r\n  columncount: 1,\r\n  fillopacity: 1,\r\n  flexgrow: 1,\r\n  flexshrink: 1,\r\n  fontweight: 1,\r\n  lineheight: 1,\r\n  opacity: 1,\r\n  order: 1,\r\n  orphans: 1,\r\n  widows: 1,\r\n  zindex: 1,\r\n  zoom: 1,\r\n};\r\n\r\nconst adaptCSSVal = (prop: string, val: string | number): string | number => (!cssNumber[prop.toLowerCase()] && isNumber(val) ? `${val}px` : val);\r\nconst getCSSVal = (elm: HTMLElement, computedStyle: CSSStyleDeclaration, prop: string): string =>\r\n  /* istanbul ignore next */\r\n  computedStyle != null ? computedStyle.getPropertyValue(prop) : elm.style[prop];\r\nconst setCSSVal = (elm: HTMLElement | null, prop: string, val: string | number): void => {\r\n  try {\r\n    if (elm && elm.style[prop] !== undefined) {\r\n      elm.style[prop] = adaptCSSVal(prop, val);\r\n    }\r\n  } catch (e) {}\r\n};\r\n\r\n/**\r\n * Gets or sets the passed styles to the passed element.\r\n * @param elm The element to which the styles shall be applied to / be read from.\r\n * @param styles The styles which shall be set or read.\r\n */\r\nexport function style(elm: HTMLElement | null, styles: CssStyles): void;\r\nexport function style(elm: HTMLElement | null, styles: string): string;\r\nexport function style(elm: HTMLElement | null, styles: Array<string> | string): { [key: string]: string };\r\nexport function style(elm: HTMLElement | null, styles: CssStyles | Array<string> | string): { [key: string]: string } | string | void {\r\n  const getSingleStyle = isString(styles);\r\n  const getStyles = isArray(styles) || getSingleStyle;\r\n\r\n  if (getStyles) {\r\n    let getStylesResult: string | PlainObject = getSingleStyle ? '' : {};\r\n    if (elm) {\r\n      const computedStyle: CSSStyleDeclaration = window.getComputedStyle(elm, null);\r\n      getStylesResult = getSingleStyle\r\n        ? getCSSVal(elm, computedStyle, styles as string)\r\n        : (styles as Array<string>).reduce((result, key) => {\r\n            result[key] = getCSSVal(elm, computedStyle, key as string);\r\n            return result;\r\n          }, getStylesResult);\r\n    }\r\n    return getStylesResult;\r\n  }\r\n  each(keys(styles), (key) => setCSSVal(elm, key, styles[key]));\r\n}\r\n\r\n/**\r\n * Hides the passed element (display: none).\r\n * @param elm The element which shall be hidden.\r\n */\r\nexport const hide = (elm: HTMLElement | null): void => {\r\n  style(elm, { display: 'none' });\r\n};\r\n\r\n/**\r\n * Shows the passed element (display: block).\r\n * @param elm The element which shall be shown.\r\n */\r\nexport const show = (elm: HTMLElement | null): void => {\r\n  style(elm, { display: 'block' });\r\n};\r\n","import { getBoundingClientRect } from 'support/dom/dimensions';\r\nimport { XY } from 'support/dom';\r\n\r\nconst zeroObj: XY = {\r\n  x: 0,\r\n  y: 0,\r\n};\r\n\r\n/**\r\n * Returns the offset- left and top coordinates of the passed element relative to the document. If the element is null the top and left values are 0.\r\n * @param elm The element of which the offset- top and left coordinates shall be returned.\r\n */\r\nexport const absoluteCoordinates = (elm: HTMLElement | null): XY => {\r\n  const rect = elm ? getBoundingClientRect(elm) : 0;\r\n  return rect\r\n    ? {\r\n        x: rect.left + window.pageYOffset,\r\n        y: rect.top + window.pageXOffset,\r\n      }\r\n    : zeroObj;\r\n};\r\n\r\n/**\r\n * Returns the offset- left and top coordinates of the passed element. If the element is null the top and left values are 0.\r\n * @param elm The element of which the offset- top and left coordinates shall be returned.\r\n */\r\nexport const offsetCoordinates = (elm: HTMLElement | null): XY =>\r\n  elm\r\n    ? {\r\n        x: elm.offsetLeft,\r\n        y: elm.offsetTop,\r\n      }\r\n    : zeroObj;\r\n","function _classPrivateFieldGet(receiver, privateMap) {\n  var descriptor = privateMap.get(receiver);\n\n  if (!descriptor) {\n    throw new TypeError(\"attempted to get private field on non-instance\");\n  }\n\n  if (descriptor.get) {\n    return descriptor.get.call(receiver);\n  }\n\n  return descriptor.value;\n}\n\nmodule.exports = _classPrivateFieldGet;","function _classPrivateFieldSet(receiver, privateMap, value) {\n  var descriptor = privateMap.get(receiver);\n\n  if (!descriptor) {\n    throw new TypeError(\"attempted to set private field on non-instance\");\n  }\n\n  if (descriptor.set) {\n    descriptor.set.call(receiver, value);\n  } else {\n    if (!descriptor.writable) {\n      throw new TypeError(\"attempted to set read only private field\");\n    }\n\n    descriptor.value = value;\n  }\n\n  return value;\n}\n\nmodule.exports = _classPrivateFieldSet;","import { each, hasOwnProperty } from 'support/utils';\r\nimport { createDiv } from 'support/dom';\r\n\r\nconst firstLetterToUpper = (str: string): string => str.charAt(0).toUpperCase() + str.slice(1);\r\nconst getDummyStyle = (): CSSStyleDeclaration => createDiv().style;\r\n\r\n// https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix\r\n\r\nexport const cssPrefixes: ReadonlyArray<string> = ['-webkit-', '-moz-', '-o-', '-ms-'];\r\nexport const jsPrefixes: ReadonlyArray<string> = ['WebKit', 'Moz', 'O', 'MS', 'webkit', 'moz', 'o', 'ms'];\r\n\r\nexport const jsCache: { [key: string]: any } = {};\r\nexport const cssCache: { [key: string]: string } = {};\r\n\r\n/**\r\n * Gets the name of the given CSS property with vendor prefix if it isn't supported without, or undefined if unsupported.\r\n * @param name The name of the CSS property which shall be get.\r\n */\r\nexport const cssProperty = (name: string): string | undefined => {\r\n  let result: string | undefined = cssCache[name];\r\n\r\n  if (hasOwnProperty(cssCache, name)) {\r\n    return result;\r\n  }\r\n\r\n  const uppercasedName: string = firstLetterToUpper(name);\r\n  const elmStyle: CSSStyleDeclaration = getDummyStyle();\r\n\r\n  each(cssPrefixes, (prefix: string) => {\r\n    const prefixWithoutDashes: string = prefix.replace(/-/g, '');\r\n    const resultPossibilities: Array<string> = [\r\n      name, // transition\r\n      prefix + name, // -webkit-transition\r\n      prefixWithoutDashes + uppercasedName, // webkitTransition\r\n      firstLetterToUpper(prefixWithoutDashes) + uppercasedName, // WebkitTransition\r\n    ];\r\n    result = resultPossibilities.find((resultPossibility: string) => elmStyle[resultPossibility] !== undefined);\r\n    return !result;\r\n  });\r\n\r\n  cssCache[name] = result;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Get the name of the given CSS property value(s), with vendor prefix if it isn't supported wuthout, or undefined if no value is supported.\r\n * @param property The CSS property to which the CSS property value(s) belong.\r\n * @param values The value(s) separated by spaces which shall be get.\r\n * @param suffix A suffix which is added to each value in case the value is a function or something else more advanced.\r\n */\r\nexport const cssPropertyValue = (property: string, values: string, suffix?: string): string | undefined => {\r\n  const name = `${property} ${values}`;\r\n  let result: string | undefined = cssCache[name];\r\n\r\n  if (hasOwnProperty(cssCache, name)) {\r\n    return result;\r\n  }\r\n\r\n  const dummyStyle: CSSStyleDeclaration = getDummyStyle();\r\n  const possbleValues: Array<string> = values.split(' ');\r\n  const preparedSuffix: string = suffix || '';\r\n  const cssPrefixesWithFirstEmpty = [''].concat(cssPrefixes);\r\n\r\n  each(possbleValues, (possibleValue: string) => {\r\n    each(cssPrefixesWithFirstEmpty, (prefix: string) => {\r\n      const prop = prefix + possibleValue;\r\n      dummyStyle.cssText = `${property}:${prop}${preparedSuffix}`;\r\n      if (dummyStyle.length) {\r\n        result = prop;\r\n        return false;\r\n      }\r\n    });\r\n    return !result;\r\n  });\r\n\r\n  cssCache[name] = result;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Get the requested JS function, object or constructor with vendor prefix if it isn't supported without or undefined if unsupported.\r\n * @param name The name of the JS function, object or constructor.\r\n */\r\nexport const jsAPI = <T = any>(name: string): T | undefined => {\r\n  let result: any = jsCache[name] || window[name];\r\n\r\n  if (hasOwnProperty(jsCache, name)) {\r\n    return result;\r\n  }\r\n\r\n  each(jsPrefixes, (prefix: string) => {\r\n    result = result || window[prefix + firstLetterToUpper(name)];\r\n    return !result;\r\n  });\r\n\r\n  jsCache[name] = result;\r\n  return result;\r\n};\r\n","import { jsAPI } from 'support/compatibility/vendors';\r\n\r\nexport const resizeObserver: any | undefined = jsAPI('ResizeObserver');\r\n","function _extends() {\n  module.exports = _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nmodule.exports = _extends;","import { each, indexOf, hasOwnProperty, keys } from 'support/utils';\r\nimport { type, isArray, isUndefined, isEmptyObject, isPlainObject, isString } from 'support/utils/types';\r\nimport { OptionsTemplate, OptionsTemplateTypes, OptionsTemplateType, Func, OptionsValidatedResult } from 'support/options';\r\nimport { PlainObject } from 'typings';\r\n\r\nconst { stringify } = JSON;\r\n\r\n/**\r\n * A prefix and suffix tuple which serves as recognition pattern for template types.\r\n */\r\nconst templateTypePrefixSuffix: readonly [string, string] = ['__TPL_', '_TYPE__'];\r\n/**\r\n * A object which serves as a mapping for \"normal\" types and template types.\r\n * Key   = normal type string\r\n * value = template type string\r\n */\r\nconst optionsTemplateTypes: OptionsTemplateTypesDictionary = ['boolean', 'number', 'string', 'array', 'object', 'function', 'null'].reduce(\r\n  (result, item) => {\r\n    result[item] = templateTypePrefixSuffix[0] + item + templateTypePrefixSuffix[1];\r\n    return result;\r\n  },\r\n  {} as OptionsTemplateTypesDictionary\r\n);\r\n\r\n/**\r\n * Validates the given options object according to the given template object and returns a object which looks like:\r\n * {\r\n *  foreign   : a object which consists of properties which aren't defined inside the template. (foreign properties)\r\n *  validated : a object which consists only of valid properties. (property name is inside the template and value has a correct type)\r\n * }\r\n * @param options The options object which shall be validated.\r\n * @param template The template according to which the options object shall be validated.\r\n * @param optionsDiff When provided the returned validated object will only have properties which are different to this objects properties.\r\n * Example (assume all properties are valid to the template):\r\n * Options object            : { a: 'a', b: 'b', c: 'c' }\r\n * optionsDiff object        : { a: 'a', b: 'b', c: undefined }\r\n * Returned validated object : { c: 'c' }\r\n * Because the value of the properties a and b didn't change, they aren't included in the returned object.\r\n * Without the optionsDiff object the returned validated object would be: { a: 'a', b: 'b', c: 'c' }\r\n * @param doWriteErrors True if errors shall be logged into the console, false otherwise.\r\n * @param propPath The propertyPath which lead to this object. (used for error logging)\r\n */\r\nconst validateRecursive = <T extends PlainObject>(\r\n  options: T,\r\n  template: OptionsTemplate<Required<T>>,\r\n  optionsDiff: T,\r\n  doWriteErrors?: boolean,\r\n  propPath?: string\r\n): OptionsValidatedResult<T> => {\r\n  const validatedOptions: T = {} as T;\r\n  const optionsCopy: T = { ...options };\r\n  const props = keys(template).filter((prop) => hasOwnProperty(options, prop));\r\n\r\n  each(props, (prop: Extract<keyof T, string>) => {\r\n    const optionsDiffValue: any = isUndefined(optionsDiff[prop]) ? {} : optionsDiff[prop];\r\n    const optionsValue: any = options[prop];\r\n    const templateValue: PlainObject | string | OptionsTemplateTypes | Array<OptionsTemplateTypes> = template[prop];\r\n    const templateIsComplex = isPlainObject(templateValue);\r\n    const propPrefix = propPath ? `${propPath}.` : '';\r\n\r\n    // if the template has a object as value, it means that the options are complex (verschachtelt)\r\n    if (templateIsComplex && isPlainObject(optionsValue)) {\r\n      const validatedResult = validateRecursive(optionsValue, templateValue as PlainObject, optionsDiffValue, doWriteErrors, propPrefix + prop);\r\n      validatedOptions[prop] = validatedResult.validated;\r\n      optionsCopy[prop] = validatedResult.foreign as any;\r\n\r\n      each([optionsCopy, validatedOptions], (value) => {\r\n        if (isEmptyObject(value[prop])) {\r\n          delete value[prop];\r\n        }\r\n      });\r\n    } else if (!templateIsComplex) {\r\n      let isValid = false;\r\n      const errorEnumStrings: Array<string> = [];\r\n      const errorPossibleTypes: Array<string> = [];\r\n      const optionsValueType = type(optionsValue);\r\n      const templateValueArr: Array<string | OptionsTemplateTypes> = !isArray(templateValue)\r\n        ? [templateValue as string | OptionsTemplateTypes]\r\n        : (templateValue as Array<OptionsTemplateTypes>);\r\n\r\n      each(templateValueArr, (currTemplateType) => {\r\n        // if currType value isn't inside possibleTemplateTypes we assume its a enum string value\r\n        const isEnumString = indexOf(Object.values(optionsTemplateTypes), currTemplateType) < 0;\r\n        if (isEnumString && isString(optionsValue)) {\r\n          // split it into a array which contains all possible values for example: [\"yes\", \"no\", \"maybe\"]\r\n          const enumStringSplit = currTemplateType.split(' ');\r\n          isValid = !!enumStringSplit.find((possibility) => possibility === optionsValue);\r\n\r\n          // build error message\r\n          errorEnumStrings.push(...enumStringSplit);\r\n        } else {\r\n          isValid = optionsTemplateTypes[optionsValueType] === currTemplateType;\r\n        }\r\n\r\n        // build error message\r\n        errorPossibleTypes.push(isEnumString ? optionsTemplateTypes.string : currTemplateType);\r\n\r\n        // continue if invalid, break if valid\r\n        return !isValid;\r\n      });\r\n\r\n      if (isValid) {\r\n        const doStringifyComparison = isArray(optionsValue) || isPlainObject(optionsValue);\r\n        if (doStringifyComparison ? stringify(optionsValue) !== stringify(optionsDiffValue) : optionsValue !== optionsDiffValue) {\r\n          validatedOptions[prop] = optionsValue;\r\n        }\r\n      } else if (doWriteErrors) {\r\n        console.warn(\r\n          `${\r\n            `The option \"${propPrefix}${prop}\" wasn't set, because it doesn't accept the type [ ${optionsValueType.toUpperCase()} ] with the value of \"${optionsValue}\".\\r\\n` +\r\n            `Accepted types are: [ ${errorPossibleTypes.join(', ').toUpperCase()} ].\\r\\n`\r\n          }${errorEnumStrings.length > 0 ? `\\r\\nValid strings are: [ ${errorEnumStrings.join(', ')} ].` : ''}`\r\n        );\r\n      }\r\n\r\n      delete optionsCopy[prop];\r\n    }\r\n  });\r\n\r\n  return {\r\n    foreign: optionsCopy,\r\n    validated: validatedOptions,\r\n  };\r\n};\r\n\r\n/**\r\n * Validates the given options object according to the given template object and returns a object which looks like:\r\n * {\r\n *  foreign   : a object which consists of properties which aren't defined inside the template. (foreign properties)\r\n *  validated : a object which consists only of valid properties. (property name is inside the template and value has a correct type)\r\n * }\r\n * @param options The options object which shall be validated.\r\n * @param template The template according to which the options object shall be validated.\r\n * @param optionsDiff When provided the returned validated object will only have properties which are different to this objects properties.\r\n * Example (assume all properties are valid to the template):\r\n * Options object            : { a: 'a', b: 'b', c: 'c' }\r\n * optionsDiff object        : { a: 'a', b: 'b', c: undefined }\r\n * Returned validated object : { c: 'c' }\r\n * Because the value of the properties a and b didn't change, they aren't included in the returned object.\r\n * Without the optionsDiff object the returned validated object would be: { a: 'a', b: 'b', c: 'c' }\r\n * @param doWriteErrors True if errors shall be logged into the console, false otherwise.\r\n */\r\nconst validate = <T extends PlainObject>(\r\n  options: T,\r\n  template: OptionsTemplate<Required<T>>,\r\n  optionsDiff?: T,\r\n  doWriteErrors?: boolean\r\n): OptionsValidatedResult<T> => {\r\n  /*\r\n    if (!isEmptyObject(foreign) && doWriteErrors)\r\n        console.warn(`The following options are discarded due to invalidity:\\r\\n ${window.JSON.stringify(foreign, null, 2)}`);\r\n\r\n    //add values, which aren't specified in the template, to the finished validated object to prevent them from being discarded\r\n    if (keepForeignProps) {\r\n        Object.assign(result.validated, foreign);\r\n    }\r\n    */\r\n  return validateRecursive<T>(options, template, optionsDiff || ({} as T), doWriteErrors || false);\r\n};\r\n\r\nexport { validate, optionsTemplateTypes };\r\n\r\ntype OptionsTemplateTypesDictionary = {\r\n  readonly boolean: OptionsTemplateType<boolean>;\r\n  readonly number: OptionsTemplateType<number>;\r\n  readonly string: OptionsTemplateType<string>;\r\n  readonly array: OptionsTemplateType<Array<any>>;\r\n  readonly object: OptionsTemplateType<object>; // eslint-disable-line @typescript-eslint/ban-types\r\n  readonly function: OptionsTemplateType<Func>;\r\n  readonly null: OptionsTemplateType<null>;\r\n};\r\n","import {\r\n  createDOM,\r\n  addClass,\r\n  style,\r\n  appendChildren,\r\n  clientSize,\r\n  absoluteCoordinates,\r\n  offsetSize,\r\n  scrollLeft,\r\n  jsAPI,\r\n  XY,\r\n  removeAttr,\r\n  removeElements,\r\n  windowSize,\r\n} from 'support';\r\n\r\ntype OnEnvironmentChanged = (env: Environment) => void;\r\n\r\nconst { abs, round } = Math;\r\nconst envornmentElmId = 'os-envornment';\r\n\r\nconst nativeScrollbarSize = (body: HTMLElement, measureElm: HTMLElement): XY => {\r\n  appendChildren(body, measureElm);\r\n  const cSize = clientSize(measureElm);\r\n  const oSize = offsetSize(measureElm);\r\n\r\n  return {\r\n    x: oSize.h - cSize.h,\r\n    y: oSize.w - cSize.w,\r\n  };\r\n};\r\n\r\nconst nativeScrollbarStyling = (testElm: HTMLElement): boolean => {\r\n  let result = false;\r\n  addClass(testElm, 'os-viewport-native-scrollbars-invisible');\r\n  try {\r\n    result =\r\n      style(testElm, 'scrollbar-width') === 'none' || window.getComputedStyle(testElm, '::-webkit-scrollbar').getPropertyValue('display') === 'none';\r\n  } catch (ex) {}\r\n\r\n  return result;\r\n};\r\n\r\nconst rtlScrollBehavior = (parentElm: HTMLElement, childElm: HTMLElement): { i: boolean; n: boolean } => {\r\n  const strHidden = 'hidden';\r\n  style(parentElm, { overflowX: strHidden, overflowY: strHidden, direction: 'rtl' });\r\n  scrollLeft(parentElm, 0);\r\n\r\n  const parentOffset = absoluteCoordinates(parentElm);\r\n  const childOffset = absoluteCoordinates(childElm);\r\n  scrollLeft(parentElm, -999); // https://github.com/KingSora/OverlayScrollbars/issues/187\r\n  const childOffsetAfterScroll = absoluteCoordinates(childElm);\r\n  return {\r\n    /**\r\n     * origin direction = determines if the zero scroll position is on the left or right side\r\n     * 'i' means 'invert' (i === true means that the axis must be inverted to be correct)\r\n     * true = on the left side\r\n     * false = on the right side\r\n     */\r\n    i: parentOffset.x === childOffset.x,\r\n    /**\r\n     * negative = determines if the maximum scroll is positive or negative\r\n     * 'n' means 'negate' (n === true means that the axis must be negated to be correct)\r\n     * true = negative\r\n     * false = positive\r\n     */\r\n    n: childOffset.x !== childOffsetAfterScroll.x,\r\n  };\r\n};\r\n\r\nconst passiveEvents = (): boolean => {\r\n  let supportsPassive = false;\r\n  try {\r\n    /* eslint-disable */\r\n    // @ts-ignore\r\n    window.addEventListener(\r\n      'test',\r\n      null,\r\n      Object.defineProperty({}, 'passive', {\r\n        get: function () {\r\n          supportsPassive = true;\r\n        },\r\n      })\r\n    );\r\n    /* eslint-enable */\r\n  } catch (e) {}\r\n  return supportsPassive;\r\n};\r\n\r\nconst windowDPR = (): number => {\r\n  // eslint-disable-next-line\r\n  // @ts-ignore\r\n  const dDPI = window.screen.deviceXDPI || 0;\r\n  // eslint-disable-next-line\r\n  // @ts-ignore\r\n  const sDPI = window.screen.logicalXDPI || 1;\r\n  return window.devicePixelRatio || dDPI / sDPI;\r\n};\r\n\r\nconst diffBiggerThanOne = (valOne: number, valTwo: number): boolean => {\r\n  const absValOne = abs(valOne);\r\n  const absValTwo = abs(valTwo);\r\n  return !(absValOne === absValTwo || absValOne + 1 === absValTwo || absValOne - 1 === absValTwo);\r\n};\r\n\r\nexport class Environment {\r\n  #onChangedListener: Set<OnEnvironmentChanged> = new Set();\r\n\r\n  _autoUpdateLoop!: boolean;\r\n\r\n  _nativeScrollbarSize!: XY;\r\n\r\n  _nativeScrollbarIsOverlaid!: XY<boolean>;\r\n\r\n  _nativeScrollbarStyling!: boolean;\r\n\r\n  _rtlScrollBehavior!: { n: boolean; i: boolean };\r\n\r\n  _supportPassiveEvents!: boolean;\r\n\r\n  _supportResizeObserver!: boolean;\r\n\r\n  constructor() {\r\n    const _self = this;\r\n    const { body } = document;\r\n    const envDOM = createDOM(`<div id=\"${envornmentElmId}\"><div></div></div>`);\r\n    const envElm = envDOM[0] as HTMLElement;\r\n    const envChildElm = envElm.firstChild as HTMLElement;\r\n\r\n    const nScrollBarSize = nativeScrollbarSize(body, envElm);\r\n    const nativeScrollbarIsOverlaid = {\r\n      x: nScrollBarSize.x === 0,\r\n      y: nScrollBarSize.y === 0,\r\n    };\r\n\r\n    _self._autoUpdateLoop = false;\r\n    _self._nativeScrollbarSize = nScrollBarSize;\r\n    _self._nativeScrollbarIsOverlaid = nativeScrollbarIsOverlaid;\r\n    _self._nativeScrollbarStyling = nativeScrollbarStyling(envElm);\r\n    _self._rtlScrollBehavior = rtlScrollBehavior(envElm, envChildElm);\r\n    _self._supportPassiveEvents = passiveEvents();\r\n    _self._supportResizeObserver = !!jsAPI('ResizeObserver');\r\n\r\n    removeAttr(envElm, 'style');\r\n    removeElements(envElm);\r\n\r\n    if (!nativeScrollbarIsOverlaid.x || !nativeScrollbarIsOverlaid.y) {\r\n      let size = windowSize();\r\n      let dpr = windowDPR();\r\n      const onChangedListener = this.#onChangedListener;\r\n\r\n      window.addEventListener('resize', () => {\r\n        if (onChangedListener.size) {\r\n          const sizeNew = windowSize();\r\n          const deltaSize = {\r\n            w: sizeNew.w - size.w,\r\n            h: sizeNew.h - size.h,\r\n          };\r\n\r\n          if (deltaSize.w === 0 && deltaSize.h === 0) return;\r\n\r\n          const deltaAbsSize = {\r\n            w: abs(deltaSize.w),\r\n            h: abs(deltaSize.h),\r\n          };\r\n          const deltaAbsRatio = {\r\n            w: abs(round(sizeNew.w / (size.w / 100.0))),\r\n            h: abs(round(sizeNew.h / (size.h / 100.0))),\r\n          };\r\n          const dprNew = windowDPR();\r\n          const deltaIsBigger = deltaAbsSize.w > 2 && deltaAbsSize.h > 2;\r\n          const difference = !diffBiggerThanOne(deltaAbsRatio.w, deltaAbsRatio.h);\r\n          const dprChanged = dprNew !== dpr && dpr > 0;\r\n          const isZoom = deltaIsBigger && difference && dprChanged;\r\n\r\n          const oldScrollbarSize = _self._nativeScrollbarSize;\r\n          let newScrollbarSize;\r\n\r\n          if (isZoom) {\r\n            newScrollbarSize = _self._nativeScrollbarSize = nativeScrollbarSize(body, envElm);\r\n            removeElements(envElm);\r\n\r\n            if (oldScrollbarSize.x !== newScrollbarSize.x || oldScrollbarSize.y !== newScrollbarSize.y) {\r\n              onChangedListener.forEach((listener) => listener && listener(_self));\r\n            }\r\n          }\r\n\r\n          size = sizeNew;\r\n          dpr = dprNew;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  addListener(listener: OnEnvironmentChanged): void {\r\n    this.#onChangedListener.add(listener);\r\n  }\r\n\r\n  removeListener(listener: OnEnvironmentChanged): void {\r\n    this.#onChangedListener.delete(listener);\r\n  }\r\n}\r\n","import { createDOM } from 'support/dom';\r\nimport { Environment } from 'environment';\r\n\r\nconst abc = {\r\n  a: 1,\r\n  b: 1,\r\n  c: 1,\r\n};\r\n\r\nexport default () => {\r\n  return [\r\n    new Environment(),\r\n    createDOM(\r\n      '\\\r\n    <div class=\"os-host\">\\\r\n        <div class=\"os-resize-observer-host\"></div>\\\r\n        <div class=\"os-padding\">\\\r\n            <div class=\"os-viewport\">\\\r\n                <div class=\"os-content\">\\\r\n                    fdfhdfgh\\\r\n                </div>\\\r\n            </div>\\\r\n        </div>\\\r\n        <div class=\"os-scrollbar os-scrollbar-horizontal\">\\\r\n            <div class=\"os-scrollbar-track\">\\\r\n                <div class=\"os-scrollbar-handle\"></div>\\\r\n            </div>\\\r\n        </div>\\\r\n        <div class=\"os-scrollbar os-scrollbar-vertical\">\\\r\n            <div class=\"os-scrollbar-track\">\\\r\n                <div class=\"os-scrollbar-handle\"></div>\\\r\n            </div>\\\r\n        </div>\\\r\n        <div class=\"os-scrollbar-corner\"></div>\\\r\n    </div>'\r\n    ),\r\n  ];\r\n};\r\n"],"names":["isNumber","obj","isString","isFunction","isUndefined","undefined","isArray","Array","isArrayLike","length","getSetProp","topLeft","fallback","elm","value","removeAttr","attrName","removeAttribute","scrollLeft","rnothtmlwhite","classListAction","className","action","clazz","i","result","classes","match","classList","addClass","add","each","source","callback","Object","keys","key","from","arr","push","contents","childNodes","parent","parentElement","before","parentElm","preferredAnchor","insertedElms","anchor","fragment","document","createDocumentFragment","insertedElm","previousSibling","appendChild","firstChild","nextSibling","insertBefore","appendChildren","node","children","removeElements","nodes","e","removeChild","createDiv","createElement","createDOM","html","createdDiv","innerHTML","trim","zeroObj","w","h","windowSize","window","innerWidth","innerHeight","offsetSize","offsetWidth","offsetHeight","clientSize","clientWidth","clientHeight","getBoundingClientRect","hasOwnProperty","prop","prototype","call","cssNumber","animationiterationcount","columncount","fillopacity","flexgrow","flexshrink","fontweight","lineheight","opacity","order","orphans","widows","zindex","zoom","adaptCSSVal","val","toLowerCase","getCSSVal","computedStyle","getPropertyValue","style","setCSSVal","styles","getSingleStyle","getStyles","getStylesResult","getComputedStyle","reduce","x","y","absoluteCoordinates","rect","left","pageYOffset","top","pageXOffset","_classPrivateFieldGet","receiver","privateMap","descriptor","get","TypeError","_classPrivateFieldSet","set","writable","firstLetterToUpper","str","charAt","toUpperCase","slice","jsPrefixes","jsCache","jsAPI","name","prefix","resizeObserver","_extends","module","assign","target","arguments","apply","templateTypePrefixSuffix","optionsTemplateTypes","item","abs","round","Math","envornmentElmId","nativeScrollbarSize","body","measureElm","cSize","oSize","nativeScrollbarStyling","testElm","ex","rtlScrollBehavior","childElm","strHidden","overflowX","overflowY","direction","parentOffset","childOffset","childOffsetAfterScroll","n","passiveEvents","supportsPassive","addEventListener","defineProperty","windowDPR","dDPI","screen","deviceXDPI","sDPI","logicalXDPI","devicePixelRatio","diffBiggerThanOne","valOne","valTwo","absValOne","absValTwo","Environment","constructor","Set","_self","envDOM","envElm","envChildElm","nScrollBarSize","nativeScrollbarIsOverlaid","_autoUpdateLoop","_nativeScrollbarSize","_nativeScrollbarIsOverlaid","_nativeScrollbarStyling","_rtlScrollBehavior","_supportPassiveEvents","_supportResizeObserver","size","dpr","onChangedListener","sizeNew","deltaSize","deltaAbsSize","deltaAbsRatio","dprNew","deltaIsBigger","difference","dprChanged","isZoom","oldScrollbarSize","newScrollbarSize","forEach","listener","addListener","removeListener","delete"],"mappings":"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"}