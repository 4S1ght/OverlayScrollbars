{"version":3,"file":"overlayscrollbars.js","sources":["../src/support/utils/array.ts","../src/support/dom/style.ts","../src/support/cache.ts","../src/support/utils/types.ts","../src/support/utils/object.ts","../src/support/dom/attribute.ts","../src/support/dom/traversal.ts","../src/support/dom/manipulation.ts","../src/support/dom/create.ts","../src/support/compatibility/vendors.ts","../src/support/compatibility/apis.ts","../src/support/dom/class.ts","../src/support/utils/equal.ts","../src/support/utils/function.ts","../src/support/dom/dimensions.ts","../src/support/dom/events.ts","../src/support/dom/offset.ts","../src/support/eventListeners.ts","../src/options.ts","../src/classnames.ts","../src/plugins/plugins.ts","../../../node_modules/@babel/runtime/helpers/extends.js","../src/plugins/optionsValidationPlugin/validation.ts","../src/plugins/optionsValidationPlugin/optionsValidationPlugin.ts","../src/plugins/sizeObserverPlugin/sizeObserverPlugin.ts","../src/plugins/scrollbarsHidingPlugin/scrollbarsHidingPlugin.ts","../src/environment.ts","../src/initialization.ts","../src/instances.ts","../src/setups/setups.ts","../src/setups/structureSetup/structureSetup.elements.ts","../src/setups/structureSetup/updateSegments/trinsicUpdateSegment.ts","../src/setups/structureSetup/updateSegments/paddingUpdateSegment.ts","../src/setups/structureSetup/updateSegments/overflowUpdateSegment.ts","../src/setups/structureSetup/structureSetup.update.ts","../src/observers/sizeObserver.ts","../src/observers/trinsicObserver.ts","../src/observers/domObserver.ts","../src/setups/structureSetup/structureSetup.observers.ts","../src/setups/structureSetup/structureSetup.ts","../src/setups/scrollbarsSetup/scrollbarsSetup.events.ts","../src/setups/scrollbarsSetup/scrollbarsSetup.calculations.ts","../src/setups/scrollbarsSetup/scrollbarsSetup.elements.ts","../src/setups/scrollbarsSetup/scrollbarsSetup.ts","../src/overlayscrollbars.ts"],"sourcesContent":["import { isArrayLike, isString } from 'support/utils/types';\r\nimport { PlainObject } from 'typings';\r\n\r\ntype RunEachItem = ((...args: any) => any | any[]) | null | undefined;\r\n\r\n/**\r\n * Iterates through a array or object\r\n * @param arrayLikeOrObject The array or object through which shall be iterated.\r\n * @param callback The function which is responsible for the iteration.\r\n * If the function returns true its treated like a \"continue\" statement.\r\n * If the function returns false its treated like a \"break\" statement.\r\n */\r\nexport function each<T>(\r\n  array: Array<T> | ReadonlyArray<T>,\r\n  callback: (value: T, indexOrKey: number, source: Array<T>) => boolean | unknown\r\n): Array<T> | ReadonlyArray<T>;\r\nexport function each<T>(\r\n  array: Array<T> | ReadonlyArray<T> | false | null | undefined,\r\n  callback: (value: T, indexOrKey: number, source: Array<T>) => boolean | unknown\r\n): Array<T> | ReadonlyArray<T> | false | null | undefined;\r\nexport function each<T>(\r\n  arrayLikeObject: ArrayLike<T>,\r\n  callback: (value: T, indexOrKey: number, source: ArrayLike<T>) => boolean | unknown\r\n): ArrayLike<T>;\r\nexport function each<T>(\r\n  arrayLikeObject: ArrayLike<T> | false | null | undefined,\r\n  callback: (value: T, indexOrKey: number, source: ArrayLike<T>) => boolean | unknown\r\n): ArrayLike<T> | false | null | undefined;\r\nexport function each(\r\n  obj: PlainObject,\r\n  callback: (value: any, indexOrKey: string, source: PlainObject) => boolean | unknown\r\n): PlainObject;\r\nexport function each(\r\n  obj: PlainObject | false | null | undefined,\r\n  callback: (value: any, indexOrKey: string, source: PlainObject) => boolean | unknown\r\n): PlainObject | false | null | undefined;\r\nexport function each<T>(\r\n  source: Array<T> | ArrayLike<T> | ReadonlyArray<T> | PlainObject | false | null | undefined,\r\n  callback: (value: T, indexOrKey: any, source: any) => boolean | unknown\r\n): Array<T> | ArrayLike<T> | ReadonlyArray<T> | PlainObject | false | null | undefined {\r\n  if (isArrayLike(source)) {\r\n    for (let i = 0; i < source.length; i++) {\r\n      if (callback(source[i], i, source) === false) {\r\n        break;\r\n      }\r\n    }\r\n  } else if (source) {\r\n    each(Object.keys(source), (key) => callback(source[key], key, source));\r\n  }\r\n  return source;\r\n}\r\n\r\n/**\r\n * Returns the index of the given inside the given array or -1 if the given item isn't part of the given array.\r\n * @param arr The array.\r\n * @param item The item.\r\n * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\r\n */\r\nexport const indexOf = <T = any>(arr: T[], item: T, fromIndex?: number): number =>\r\n  arr.indexOf(item, fromIndex);\r\n\r\n/**\r\n * Pushesh all given items into the given array and returns it.\r\n * @param array The array the items shall be pushed into.\r\n * @param items The items which shall be pushed into the array.\r\n */\r\nexport const push = <T>(array: T[], items: T | ArrayLike<T>, arrayIsSingleItem?: boolean): T[] => {\r\n  !arrayIsSingleItem && !isString(items) && isArrayLike(items)\r\n    ? Array.prototype.push.apply(array, items as T[])\r\n    : array.push(items as T);\r\n  return array;\r\n};\r\n\r\n/**\r\n * Creates a shallow-copied Array instance from an array-like or iterable object.\r\n * @param arr The object from which the array instance shall be created.\r\n */\r\nexport const from = <T = any>(arr?: ArrayLike<T> | Set<T>) => {\r\n  const original = Array.from;\r\n  const result: T[] = [];\r\n\r\n  if (original && arr) {\r\n    return original(arr);\r\n  }\r\n\r\n  if (arr instanceof Set) {\r\n    arr.forEach((value) => {\r\n      push(result, value);\r\n    });\r\n  } else {\r\n    each(arr, (elm) => {\r\n      push(result, elm);\r\n    });\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Check whether the passed array is empty.\r\n * @param array The array which shall be checked.\r\n */\r\nexport const isEmptyArray = (array: any[] | null | undefined): boolean =>\r\n  !!array && array.length === 0;\r\n\r\n/**\r\n * Calls all functions in the passed array/set of functions.\r\n * @param arr The array filled with function which shall be called.\r\n * @param args The args with which each function is called.\r\n * @param keep True when the Set / array should not be cleared afterwards, false otherwise.\r\n */\r\nexport const runEachAndClear = (arr: RunEachItem[], args?: any[], keep?: boolean): void => {\r\n  // eslint-disable-next-line prefer-spread\r\n  const runFn = (fn: RunEachItem) => fn && fn.apply(undefined, args || []);\r\n  each(arr, runFn);\r\n  !keep && ((arr as any[]).length = 0);\r\n};\r\n","import { each, keys } from 'support/utils';\r\nimport { isString, isNumber, isArray, isUndefined } from 'support/utils/types';\r\nimport { PlainObject, StyleObject } from 'typings';\r\n\r\nexport interface TRBL {\r\n  t: number;\r\n  r: number;\r\n  b: number;\r\n  l: number;\r\n}\r\n\r\nconst cssNumber = {\r\n  // animationiterationcount: 1,\r\n  // columncount: 1,\r\n  // fillopacity: 1,\r\n  // flexgrow: 1,\r\n  // flexshrink: 1,\r\n  // fontweight: 1,\r\n  // lineheight: 1,\r\n  // order: 1,\r\n  // orphans: 1,\r\n  // widows: 1,\r\n  // zoom: 1,\r\n  opacity: 1,\r\n  zindex: 1,\r\n};\r\n\r\nconst parseToZeroOrNumber = (value: string, toFloat?: boolean): number => {\r\n  /* istanbul ignore next */\r\n  const num = toFloat ? parseFloat(value) : parseInt(value, 10);\r\n  // num === num means num is not NaN\r\n  /* istanbul ignore next */\r\n  return num === num ? num : 0; // eslint-disable-line no-self-compare\r\n};\r\n\r\nconst adaptCSSVal = (prop: string, val: string | number): string | number =>\r\n  !cssNumber[prop.toLowerCase()] && isNumber(val) ? `${val}px` : val;\r\n\r\nconst getCSSVal = (elm: HTMLElement, computedStyle: CSSStyleDeclaration, prop: string): string =>\r\n  /* istanbul ignore next */\r\n  computedStyle != null\r\n    ? computedStyle[prop] || computedStyle.getPropertyValue(prop)\r\n    : elm.style[prop];\r\n\r\nconst setCSSVal = (elm: HTMLElement, prop: string, val: string | number): void => {\r\n  try {\r\n    const { style: elmStyle } = elm;\r\n    if (!isUndefined(elmStyle[prop])) {\r\n      elmStyle[prop] = adaptCSSVal(prop, val);\r\n    } else {\r\n      elmStyle.setProperty(prop, val as string);\r\n    }\r\n  } catch (e) {}\r\n};\r\n\r\n/**\r\n * Gets or sets the passed styles to the passed element.\r\n * @param elm The element to which the styles shall be applied to / be read from.\r\n * @param styles The styles which shall be set or read.\r\n */\r\nexport function style<CustomCssProps>(\r\n  elm: HTMLElement | false | null | undefined,\r\n  styles: StyleObject<CustomCssProps>\r\n): void;\r\nexport function style(elm: HTMLElement | false | null | undefined, styles: string): string;\r\nexport function style(\r\n  elm: HTMLElement | false | null | undefined,\r\n  styles: Array<string> | string\r\n): { [key: string]: string };\r\nexport function style<CustomCssProps>(\r\n  elm: HTMLElement | false | null | undefined,\r\n  styles: StyleObject<CustomCssProps> | Array<string> | string\r\n): { [key: string]: string } | string | void {\r\n  const getSingleStyle = isString(styles);\r\n  const getStyles = isArray(styles) || getSingleStyle;\r\n\r\n  if (getStyles) {\r\n    let getStylesResult: string | PlainObject = getSingleStyle ? '' : {};\r\n    if (elm) {\r\n      const computedStyle: CSSStyleDeclaration = window.getComputedStyle(elm, null);\r\n      getStylesResult = getSingleStyle\r\n        ? getCSSVal(elm, computedStyle, styles as string)\r\n        : (styles as Array<string>).reduce((result, key) => {\r\n            result[key] = getCSSVal(elm, computedStyle, key as string);\r\n            return result;\r\n          }, getStylesResult);\r\n    }\r\n    return getStylesResult;\r\n  }\r\n  elm && each(keys(styles), (key) => setCSSVal(elm, key, styles[key]));\r\n}\r\n\r\n/**\r\n * Hides the passed element (display: none).\r\n * @param elm The element which shall be hidden.\r\n */\r\nexport const hide = (elm: HTMLElement | false | null | undefined): void => {\r\n  style(elm, { display: 'none' });\r\n};\r\n\r\n/**\r\n * Shows the passed element (display: block).\r\n * @param elm The element which shall be shown.\r\n */\r\nexport const show = (elm: HTMLElement | false | null | undefined): void => {\r\n  style(elm, { display: 'block' });\r\n};\r\n\r\nexport const directionIsRTL = (elm: HTMLElement | false | null | undefined): boolean =>\r\n  style(elm, 'direction') === 'rtl';\r\n\r\n/**\r\n * Returns the top right bottom left values of the passed css property.\r\n * @param elm The element of which the values shall be returned.\r\n * @param propertyPrefix The css property prefix. (e.g. \"border\")\r\n * @param propertySuffix The css property suffix. (e.g. \"width\")\r\n */\r\nexport const topRightBottomLeft = (\r\n  elm?: HTMLElement | false | null | undefined,\r\n  propertyPrefix?: string,\r\n  propertySuffix?: string\r\n): TRBL => {\r\n  const finalPrefix = propertyPrefix ? `${propertyPrefix}-` : '';\r\n  const finalSuffix = propertySuffix ? `-${propertySuffix}` : '';\r\n  const top = `${finalPrefix}top${finalSuffix}`;\r\n  const right = `${finalPrefix}right${finalSuffix}`;\r\n  const bottom = `${finalPrefix}bottom${finalSuffix}`;\r\n  const left = `${finalPrefix}left${finalSuffix}`;\r\n  const result = style(elm, [top, right, bottom, left]);\r\n  return {\r\n    t: parseToZeroOrNumber(result[top]),\r\n    r: parseToZeroOrNumber(result[right]),\r\n    b: parseToZeroOrNumber(result[bottom]),\r\n    l: parseToZeroOrNumber(result[left]),\r\n  };\r\n};\r\n","export interface CacheOptions<Value> {\r\n  // initial value of _value.\r\n  _initialValue: Value;\r\n  // Custom comparison function if shallow compare isn't enough. Returns true if nothing changed.\r\n  _equal?: EqualCachePropFunction<Value>;\r\n  // If true always updates _value and _previous, otherwise they update only when they changed.\r\n  _alwaysUpdateValues?: boolean;\r\n}\r\n\r\nexport type CacheValues<T> = [value: T, changed: boolean, previous?: T];\r\n\r\nexport type EqualCachePropFunction<Value> = (currentVal: Value, newVal: Value) => boolean;\r\n\r\nexport type CacheUpdater<Value> = (current: Value, previous?: Value) => Value;\r\n\r\nexport type UpdateCacheContextual<Value> = (newValue: Value, force?: boolean) => CacheValues<Value>;\r\n\r\nexport type UpdateCache<Value> = (force?: boolean) => CacheValues<Value>;\r\n\r\nexport type GetCurrentCache<Value> = (force?: boolean) => CacheValues<Value>;\r\n\r\nexport type Cache<Value> = [UpdateCache<Value>, GetCurrentCache<Value>];\r\n\r\nexport type CacheContextual<Value> = [UpdateCacheContextual<Value>, GetCurrentCache<Value>];\r\n\r\ntype CreateCache = {\r\n  <Value>(options: CacheOptions<Value>): CacheContextual<Value>;\r\n  <Value>(options: CacheOptions<Value>, update: CacheUpdater<Value>): Cache<Value>;\r\n  <Value>(options: CacheOptions<Value>, update?: CacheUpdater<Value>):\r\n    | CacheContextual<Value>\r\n    | Cache<Value>;\r\n};\r\n\r\nexport const createCache: CreateCache = <Value>(\r\n  options: CacheOptions<Value>,\r\n  update?: CacheUpdater<Value>\r\n): CacheContextual<Value> | Cache<Value> => {\r\n  const { _initialValue, _equal, _alwaysUpdateValues } = options;\r\n  let _value: Value = _initialValue;\r\n  let _previous: Value | undefined;\r\n\r\n  const cacheUpdateContextual: UpdateCacheContextual<Value> = (newValue, force?) => {\r\n    const curr = _value;\r\n\r\n    const newVal = newValue;\r\n    const changed = force || (_equal ? !_equal(curr, newVal) : curr !== newVal);\r\n\r\n    if (changed || _alwaysUpdateValues) {\r\n      _value = newVal;\r\n      _previous = curr;\r\n    }\r\n\r\n    return [_value, changed, _previous];\r\n  };\r\n  const cacheUpdateIsolated: UpdateCache<Value> = (force?) =>\r\n    cacheUpdateContextual(update!(_value, _previous), force);\r\n\r\n  const getCurrentCache: GetCurrentCache<Value> = (force?: boolean) => [\r\n    _value,\r\n    !!force, // changed\r\n    _previous,\r\n  ];\r\n\r\n  return [update ? cacheUpdateIsolated : cacheUpdateContextual, getCurrentCache] as\r\n    | CacheContextual<Value>\r\n    | Cache<Value>;\r\n};\r\n","import { PlainObject } from 'typings';\r\n\r\nconst ElementNodeType = Node.ELEMENT_NODE;\r\nconst { toString, hasOwnProperty } = Object.prototype;\r\n\r\nexport const isUndefined = (obj: any): obj is undefined => obj === undefined;\r\n\r\nexport const isNull = (obj: any): obj is null => obj === null;\r\n\r\nexport const type = (obj: any): string =>\r\n  isUndefined(obj) || isNull(obj)\r\n    ? `${obj}`\r\n    : toString\r\n        .call(obj)\r\n        .replace(/^\\[object (.+)\\]$/, '$1')\r\n        .toLowerCase();\r\n\r\nexport const isNumber = (obj: any): obj is number => typeof obj === 'number';\r\n\r\nexport const isString = (obj: any): obj is string => typeof obj === 'string';\r\n\r\nexport const isBoolean = (obj: any): obj is boolean => typeof obj === 'boolean';\r\n\r\nexport const isFunction = (obj: any): obj is (...args: any[]) => any => typeof obj === 'function';\r\n\r\nexport const isArray = <T = any>(obj: any): obj is Array<T> => Array.isArray(obj);\r\n\r\nexport const isObject = (obj: any): boolean =>\r\n  typeof obj === 'object' && !isArray(obj) && !isNull(obj);\r\n\r\n/**\r\n * Returns true if the given object is array like, false otherwise.\r\n * @param obj The Object\r\n */\r\nexport const isArrayLike = <T extends PlainObject = any>(obj: any): obj is ArrayLike<T> => {\r\n  const length = !!obj && obj.length;\r\n  const lengthCorrectFormat = isNumber(length) && length > -1 && length % 1 == 0; // eslint-disable-line eqeqeq\r\n\r\n  return isArray(obj) || (!isFunction(obj) && lengthCorrectFormat)\r\n    ? length > 0 && isObject(obj)\r\n      ? length - 1 in obj\r\n      : true\r\n    : false;\r\n};\r\n\r\n/**\r\n * Returns true if the given object is a \"plain\" (e.g. { key: value }) object, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport const isPlainObject = <T = any>(obj: any): obj is PlainObject<T> => {\r\n  if (!obj || !isObject(obj) || type(obj) !== 'object') return false;\r\n\r\n  let key;\r\n  const cstr = 'constructor';\r\n  const ctor = obj[cstr];\r\n  const ctorProto = ctor && ctor.prototype;\r\n  const hasOwnConstructor = hasOwnProperty.call(obj, cstr);\r\n  const hasIsPrototypeOf = ctorProto && hasOwnProperty.call(ctorProto, 'isPrototypeOf');\r\n\r\n  if (ctor && !hasOwnConstructor && !hasIsPrototypeOf) {\r\n    return false;\r\n  }\r\n\r\n  /* eslint-disable no-restricted-syntax */\r\n  for (key in obj) {\r\n    /**/\r\n  }\r\n  /* eslint-enable */\r\n\r\n  return isUndefined(key) || hasOwnProperty.call(obj, key);\r\n};\r\n\r\n/**\r\n * Checks whether the given object is a HTMLElement.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport const isHTMLElement = (obj: any): obj is HTMLElement => {\r\n  const instanceofObj = HTMLElement;\r\n  return obj\r\n    ? instanceofObj\r\n      ? obj instanceof instanceofObj\r\n      : obj.nodeType === ElementNodeType\r\n    : false;\r\n};\r\n\r\n/**\r\n * Checks whether the given object is a Element.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport const isElement = (obj: any): obj is Element => {\r\n  const instanceofObj = Element;\r\n  return obj\r\n    ? instanceofObj\r\n      ? obj instanceof instanceofObj\r\n      : obj.nodeType === ElementNodeType\r\n    : false;\r\n};\r\n","import { isArray, isFunction, isPlainObject, isNull } from 'support/utils/types';\r\nimport { each } from 'support/utils/array';\r\n\r\n/**\r\n * Determines whether the passed object has a property with the passed name.\r\n * @param obj The object.\r\n * @param prop The name of the property.\r\n */\r\nexport const hasOwnProperty = (obj: any, prop: string | number | symbol): boolean =>\r\n  Object.prototype.hasOwnProperty.call(obj, prop);\r\n\r\n/**\r\n * Returns the names of the enumerable string properties and methods of an object.\r\n * @param obj The object of which the properties shall be returned.\r\n */\r\nexport const keys = (obj: any): Array<string> => (obj ? Object.keys(obj) : []);\r\n\r\ntype AssignDeep = {\r\n  <T, U>(target: T, object1: U): T & U;\r\n  <T, U, V>(target: T, object1: U, object2: V): T & U & V;\r\n  <T, U, V, W>(target: T, object1: U, object2: V, object3: W): T & U & V & W;\r\n  <T, U, V, W, X>(target: T, object1: U, object2: V, object3: W, object4: X): T & U & V & W & X;\r\n  <T, U, V, W, X, Y>(target: T, object1: U, object2: V, object3: W, object4: X, object5: Y): T &\r\n    U &\r\n    V &\r\n    W &\r\n    X &\r\n    Y;\r\n  <T, U, V, W, X, Y, Z>(\r\n    target: T,\r\n    object1?: U,\r\n    object2?: V,\r\n    object3?: W,\r\n    object4?: X,\r\n    object5?: Y,\r\n    object6?: Z\r\n  ): T & U & V & W & X & Y & Z;\r\n};\r\n\r\n// https://github.com/jquery/jquery/blob/master/src/core.js#L116\r\nexport const assignDeep: AssignDeep = <T, U, V, W, X, Y, Z>(\r\n  target: T,\r\n  object1?: U,\r\n  object2?: V,\r\n  object3?: W,\r\n  object4?: X,\r\n  object5?: Y,\r\n  object6?: Z\r\n): T & U & V & W & X & Y & Z => {\r\n  const sources: Array<any> = [object1, object2, object3, object4, object5, object6];\r\n\r\n  // Handle case when target is a string or something (possible in deep copy)\r\n  if ((typeof target !== 'object' || isNull(target)) && !isFunction(target)) {\r\n    target = {} as T;\r\n  }\r\n\r\n  each(sources, (source) => {\r\n    // Extend the base object\r\n    each(keys(source), (key) => {\r\n      const copy: any = source[key];\r\n\r\n      // Prevent Object.prototype pollution\r\n      // Prevent never-ending loop\r\n      if (target === copy) {\r\n        return true;\r\n      }\r\n\r\n      const copyIsArray = isArray(copy);\r\n\r\n      // Recurse if we're merging plain objects or arrays\r\n      if (copy && (isPlainObject(copy) || copyIsArray)) {\r\n        const src = target[key];\r\n        let clone: any = src;\r\n\r\n        // Ensure proper type for the source value\r\n        if (copyIsArray && !isArray(src)) {\r\n          clone = [];\r\n        } else if (!copyIsArray && !isPlainObject(src)) {\r\n          clone = {};\r\n        }\r\n\r\n        // Never move original objects, clone them\r\n        target[key] = assignDeep(clone, copy) as any;\r\n      } else {\r\n        target[key] = copy;\r\n      }\r\n    });\r\n  });\r\n\r\n  // Return the modified object\r\n  return target as any;\r\n};\r\n\r\n/**\r\n * Returns true if the given object is empty, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport const isEmptyObject = (obj: any): boolean => {\r\n  // eslint-disable-next-line no-restricted-syntax, no-unreachable-loop, guard-for-in\r\n  for (const name in obj) return false;\r\n  return true;\r\n  /* eslint-enable */\r\n};\r\n","import { from } from 'support/utils/array';\r\nimport { isNull, isUndefined } from 'support/utils/types';\r\n\r\ntype GetSetPropName = 'scrollLeft' | 'scrollTop' | 'value';\r\n\r\ntype Attr = {\r\n  (elm: HTMLElement | false | null | undefined, attrName: string): string | null;\r\n  (elm: HTMLElement | false | null | undefined, attrName: string, value: string): void;\r\n  (elm: HTMLElement | false | null | undefined, attrName: string, value?: string):\r\n    | string\r\n    | null\r\n    | void;\r\n};\r\n\r\ntype GetSetProp<T> = {\r\n  (elm: HTMLElement | false | null | undefined): T;\r\n  (elm: HTMLElement | false | null | undefined, value: T | false | null): void;\r\n  (elm: HTMLElement | false | null | undefined, value?: T | false | null): T | void;\r\n};\r\n\r\nconst getSetProp = (\r\n  topLeft: GetSetPropName,\r\n  fallback: number | string,\r\n  elm: HTMLElement | HTMLInputElement | false | null | undefined,\r\n  value?: number | string | false | null\r\n): number | string | void => {\r\n  if (isUndefined(value)) {\r\n    return elm ? elm[topLeft] : fallback;\r\n  }\r\n  elm && !isNull(value) && value !== false && (elm[topLeft] = value);\r\n};\r\n\r\n/**\r\n * Gets or sets a attribute with the given attribute of the given element depending whether the value attribute is given.\r\n * Returns null if the element has no attribute with the given name.\r\n * @param elm The element of which the attribute shall be get or set.\r\n * @param attrName The attribute name which shall be get or set.\r\n * @param value The value of the attribute which shall be set.\r\n */\r\nexport const attr = ((\r\n  elm: HTMLElement | false | null | undefined,\r\n  attrName: string,\r\n  value?: string\r\n): string | null | void => {\r\n  if (isUndefined(value)) {\r\n    return elm ? elm.getAttribute(attrName) : null;\r\n  }\r\n  elm && elm.setAttribute(attrName, value);\r\n}) as Attr;\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and adds or removes the given value from it.\r\n * @param elm The element.\r\n * @param attrName The attributeName to which the value shall be added or removed.\r\n * @param value The value which shall be added or removed.\r\n * @param add True if the value shall be added, false otherwise.\r\n */\r\nexport const attrClass = (\r\n  elm: HTMLElement | false | null | undefined,\r\n  attrName: string,\r\n  value: string,\r\n  add?: boolean\r\n) => {\r\n  if (value) {\r\n    const currValues = attr(elm, attrName) || '';\r\n    const currValuesSet = new Set(currValues.split(' '));\r\n    currValuesSet[add ? 'add' : 'delete'](value);\r\n\r\n    attr(elm, attrName, from(currValuesSet).join(' ').trim());\r\n  }\r\n};\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and checks if the given value is in it.\r\n * @param elm The element.\r\n * @param attrName The attributeName from which the content shall be checked.\r\n * @param value The value.\r\n * @returns True if the given attribute has the value in it, false otherwise.\r\n */\r\nexport const hasAttrClass = (\r\n  elm: HTMLElement | false | null | undefined,\r\n  attrName: string,\r\n  value: string\r\n) => {\r\n  const currValues = attr(elm, attrName) || '';\r\n  const currValuesSet = new Set(currValues.split(' '));\r\n  return currValuesSet.has(value);\r\n};\r\n\r\n/**\r\n * Removes the given attribute from the given element.\r\n * @param elm The element of which the attribute shall be removed.\r\n * @param attrName The attribute name.\r\n */\r\nexport const removeAttr = (elm: Element | false | null | undefined, attrName: string): void => {\r\n  elm && elm.removeAttribute(attrName);\r\n};\r\n\r\n/**\r\n * Gets or sets the scrollLeft value of the given element depending whether the value attribute is given.\r\n * @param elm The element of which the scrollLeft value shall be get or set.\r\n * @param value The scrollLeft value which shall be set.\r\n */\r\nexport const scrollLeft = ((\r\n  elm: HTMLElement | false | null | undefined,\r\n  value?: number | false | null\r\n): number | void => getSetProp('scrollLeft', 0, elm, value) as number) as GetSetProp<number>;\r\n\r\n/**\r\n * Gets or sets the scrollTop value of the given element depending whether the value attribute is given.\r\n * @param elm The element of which the scrollTop value shall be get or set.\r\n * @param value The scrollTop value which shall be set.\r\n */\r\nexport const scrollTop = ((\r\n  elm: HTMLElement | false | null | undefined,\r\n  value?: number | false | null\r\n): number | void => getSetProp('scrollTop', 0, elm, value) as number) as GetSetProp<number>;\r\n\r\n/**\r\n * Gets or sets the value of the given input element depending whether the value attribute is given.\r\n * @param elm The input element of which the value shall be get or set.\r\n * @param value The value which shall be set.\r\n */\r\nexport const val = ((\r\n  elm: HTMLInputElement | false | null | undefined,\r\n  value?: string\r\n): string | void => getSetProp('value', '', elm, value) as string) as GetSetProp<string>;\r\n","import { isElement } from 'support/utils/types';\r\nimport { push, from } from 'support/utils/array';\r\n\r\ntype InputElementType = Node | Element | Node | false | null | undefined;\r\ntype OutputElementType = Node | Element | null;\r\n\r\nconst elmPrototype = Element.prototype;\r\n\r\n/**\r\n * Find all elements with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nconst find = (selector: string, elm?: InputElementType): Element[] => {\r\n  const arr: Array<Element> = [];\r\n  const rootElm = elm ? (isElement(elm) ? elm : null) : document;\r\n\r\n  return rootElm ? push(arr, rootElm.querySelectorAll(selector)) : arr;\r\n};\r\n\r\n/**\r\n * Find the first element with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nconst findFirst = (selector: string, elm?: InputElementType): OutputElementType => {\r\n  const rootElm = elm ? (isElement(elm) ? elm : null) : document;\r\n\r\n  return rootElm ? rootElm.querySelector(selector) : null;\r\n};\r\n\r\n/**\r\n * Determines whether the passed element is matching with the passed selector.\r\n * @param elm The element which has to be compared with the passed selector.\r\n * @param selector The selector which has to be compared with the passed element. Additional selectors: ':visible' and ':hidden'.\r\n */\r\nconst is = (elm: InputElementType, selector: string): boolean => {\r\n  if (isElement(elm)) {\r\n    /* istanbul ignore next */\r\n    // eslint-disable-next-line\r\n    // @ts-ignore\r\n    const fn: (...args: any) => boolean = elmPrototype.matches || elmPrototype.msMatchesSelector;\r\n    return fn.call(elm, selector);\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * Returns the children (no text-nodes or comments) of the passed element which are matching the passed selector. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the children shall be returned.\r\n * @param selector The selector which must match with the children elements.\r\n */\r\nconst children = (elm: InputElementType, selector?: string): ReadonlyArray<Element> => {\r\n  const childs: Array<Element> = [];\r\n\r\n  return isElement(elm)\r\n    ? push(\r\n        childs,\r\n        from(elm.children).filter((child) => (selector ? is(child, selector) : child))\r\n      )\r\n    : childs;\r\n};\r\n\r\n/**\r\n * Returns the childNodes (incl. text-nodes or comments etc.) of the passed element. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the childNodes shall be returned.\r\n */\r\nconst contents = (elm: InputElementType): ReadonlyArray<ChildNode> =>\r\n  elm ? from(elm.childNodes) : [];\r\n\r\n/**\r\n * Returns the parent element of the passed element, or null if the passed element is null.\r\n * @param elm The element of which the parent element shall be returned.\r\n */\r\nconst parent = (elm: InputElementType): OutputElementType => (elm ? elm.parentElement : null);\r\n\r\nconst closest = (elm: InputElementType, selector: string): OutputElementType => {\r\n  if (isElement(elm)) {\r\n    const closestFn = elmPrototype.closest;\r\n    if (closestFn) {\r\n      return closestFn.call(elm, selector);\r\n    }\r\n\r\n    do {\r\n      if (is(elm, selector)) {\r\n        return elm as Element;\r\n      }\r\n      elm = parent(elm);\r\n    } while (elm);\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\n/**\r\n * Determines whether the given element lies between two selectors in the DOM.\r\n * @param elm The element.\r\n * @param highBoundarySelector The high boundary selector.\r\n * @param deepBoundarySelector The deep boundary selector.\r\n */\r\nconst liesBetween = (\r\n  elm: InputElementType,\r\n  highBoundarySelector: string,\r\n  deepBoundarySelector: string\r\n): boolean => {\r\n  const closestHighBoundaryElm = elm && closest(elm, highBoundarySelector);\r\n  const closestDeepBoundaryElm = elm && findFirst(deepBoundarySelector, closestHighBoundaryElm);\r\n  const deepBoundaryIsValid =\r\n    closest(closestDeepBoundaryElm, highBoundarySelector) === closestHighBoundaryElm;\r\n\r\n  return closestHighBoundaryElm && closestDeepBoundaryElm\r\n    ? closestHighBoundaryElm === elm ||\r\n        closestDeepBoundaryElm === elm ||\r\n        (deepBoundaryIsValid &&\r\n          closest(closest(elm, deepBoundarySelector), highBoundarySelector) !==\r\n            closestHighBoundaryElm)\r\n    : false;\r\n};\r\n\r\nexport { find, findFirst, is, children, contents, parent, liesBetween, closest };\r\n","import { isArrayLike } from 'support/utils/types';\r\nimport { each, from } from 'support/utils/array';\r\nimport { parent } from 'support/dom/traversal';\r\n\r\ntype NodeCollection = ArrayLike<Node> | Node | false | null | undefined;\r\n\r\n/**\r\n * Inserts Nodes before the given preferredAnchor element.\r\n * @param parentElm The parent of the preferredAnchor element or the element which shall be the parent of the inserted Nodes.\r\n * @param preferredAnchor The element before which the Nodes shall be inserted or null if the elements shall be appended at the end.\r\n * @param insertedElms The Nodes which shall be inserted.\r\n */\r\nconst before = (\r\n  parentElm: Node | false | null | undefined,\r\n  preferredAnchor: Node | false | null | undefined,\r\n  insertedElms: NodeCollection\r\n): void => {\r\n  if (insertedElms && parentElm) {\r\n    let anchor: Node | false | null | undefined = preferredAnchor;\r\n    let fragment: DocumentFragment | Node | null | undefined;\r\n\r\n    if (isArrayLike(insertedElms)) {\r\n      fragment = document.createDocumentFragment();\r\n\r\n      // append all insertedElms to the fragment and if one of these is the anchor, change the anchor\r\n      each(insertedElms, (insertedElm) => {\r\n        if (insertedElm === anchor) {\r\n          anchor = insertedElm.previousSibling;\r\n        }\r\n        fragment!.appendChild(insertedElm);\r\n      });\r\n    } else {\r\n      fragment = insertedElms;\r\n    }\r\n\r\n    // if the preferred anchor isn't null set it to a valid anchor\r\n    if (preferredAnchor) {\r\n      if (!anchor) {\r\n        anchor = parentElm.firstChild;\r\n      } else if (anchor !== preferredAnchor) {\r\n        anchor = anchor.nextSibling;\r\n      }\r\n    }\r\n\r\n    parentElm.insertBefore(fragment, anchor || null);\r\n  }\r\n};\r\n\r\n/**\r\n * Appends the given children at the end of the given Node.\r\n * @param node The Node to which the children shall be appended.\r\n * @param children The Nodes which shall be appended.\r\n */\r\nexport const appendChildren = (\r\n  node: Node | false | null | undefined,\r\n  children: NodeCollection\r\n): void => {\r\n  before(node, null, children);\r\n};\r\n\r\n/**\r\n * Prepends the given children at the start of the given Node.\r\n * @param node The Node to which the children shall be prepended.\r\n * @param children The Nodes which shall be prepended.\r\n */\r\nexport const prependChildren = (\r\n  node: Node | false | null | undefined,\r\n  children: NodeCollection\r\n): void => {\r\n  before(node, node && node.firstChild, children);\r\n};\r\n\r\n/**\r\n * Inserts the given Nodes before the given Node.\r\n * @param node The Node before which the given Nodes shall be inserted.\r\n * @param insertedNodes The Nodes which shall be inserted.\r\n */\r\nexport const insertBefore = (\r\n  node: Node | false | null | undefined,\r\n  insertedNodes: NodeCollection\r\n): void => {\r\n  before(parent(node), node, insertedNodes);\r\n};\r\n\r\n/**\r\n * Inserts the given Nodes after the given Node.\r\n * @param node The Node after which the given Nodes shall be inserted.\r\n * @param insertedNodes The Nodes which shall be inserted.\r\n */\r\nexport const insertAfter = (\r\n  node: Node | false | null | undefined,\r\n  insertedNodes: NodeCollection\r\n): void => {\r\n  before(parent(node), node && node.nextSibling, insertedNodes);\r\n};\r\n\r\n/**\r\n * Removes the given Nodes from their parent.\r\n * @param nodes The Nodes which shall be removed.\r\n */\r\nexport const removeElements = (nodes: NodeCollection): void => {\r\n  if (isArrayLike(nodes)) {\r\n    each(from(nodes), (e) => removeElements(e));\r\n  } else if (nodes) {\r\n    const parentElm = parent(nodes);\r\n    if (parentElm) {\r\n      parentElm.removeChild(nodes);\r\n    }\r\n  }\r\n};\r\n","import { each } from 'support/utils/array';\r\nimport { attr } from 'support/dom/attribute';\r\nimport { contents } from 'support/dom/traversal';\r\nimport { removeElements } from 'support/dom/manipulation';\r\n\r\n/**\r\n * Creates a div DOM node.\r\n */\r\nexport const createDiv = (classNames?: string): HTMLDivElement => {\r\n  const div = document.createElement('div');\r\n  if (classNames) {\r\n    attr(div, 'class', classNames);\r\n  }\r\n  return div;\r\n};\r\n\r\n/**\r\n * Creates DOM nodes modeled after the passed html string and returns the root dom nodes as a array.\r\n * @param html The html string after which the DOM nodes shall be created.\r\n */\r\nexport const createDOM = (html: string): ReadonlyArray<Node> => {\r\n  const createdDiv = createDiv();\r\n  createdDiv.innerHTML = html.trim();\r\n\r\n  return each(contents(createdDiv), (elm) => removeElements(elm));\r\n};\r\n","import { each } from 'support/utils/array';\r\nimport { hasOwnProperty } from 'support/utils/object';\r\nimport { createDiv } from 'support/dom/create';\r\n\r\nconst firstLetterToUpper = (str: string): string => str.charAt(0).toUpperCase() + str.slice(1);\r\nconst getDummyStyle = (): CSSStyleDeclaration => createDiv().style;\r\n\r\n// https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix\r\n\r\nexport const cssPrefixes: ReadonlyArray<string> = ['-webkit-', '-moz-', '-o-', '-ms-'];\r\nexport const jsPrefixes: ReadonlyArray<string> = [\r\n  'WebKit',\r\n  'Moz',\r\n  'O',\r\n  'MS',\r\n  'webkit',\r\n  'moz',\r\n  'o',\r\n  'ms',\r\n];\r\n\r\nexport const jsCache: { [key: string]: any } = {};\r\nexport const cssCache: { [key: string]: string } = {};\r\n\r\n/**\r\n * Gets the name of the given CSS property with vendor prefix if it isn't supported without it, or and empty string if unsupported.\r\n * @param name The name of the CSS property which shall be get.\r\n */\r\nexport const cssProperty = (name: string): string => {\r\n  let result: string | undefined = cssCache[name];\r\n\r\n  if (hasOwnProperty(cssCache, name)) {\r\n    return result;\r\n  }\r\n\r\n  const uppercasedName: string = firstLetterToUpper(name);\r\n  const elmStyle: CSSStyleDeclaration = getDummyStyle();\r\n\r\n  each(cssPrefixes, (prefix: string) => {\r\n    const prefixWithoutDashes: string = prefix.replace(/-/g, '');\r\n    const resultPossibilities: Array<string> = [\r\n      name, // transition\r\n      prefix + name, // -webkit-transition\r\n      prefixWithoutDashes + uppercasedName, // webkitTransition\r\n      firstLetterToUpper(prefixWithoutDashes) + uppercasedName, // WebkitTransition\r\n    ];\r\n\r\n    // eslint-disable-next-line no-return-assign\r\n    return !(result = resultPossibilities.find(\r\n      (resultPossibility: string) => elmStyle[resultPossibility] !== undefined\r\n    ));\r\n  });\r\n\r\n  // eslint-disable-next-line no-return-assign\r\n  return (cssCache[name] = result || '');\r\n};\r\n\r\n/**\r\n * Get the name of the given CSS property value(s), with vendor prefix if it isn't supported without it, or an empty string if no value is supported.\r\n * @param property The CSS property to which the CSS property value(s) belong.\r\n * @param values The value(s) separated by spaces which shall be get.\r\n * @param suffix A suffix which is added to each value in case the value is a function or something else more advanced.\r\n */\r\nexport const cssPropertyValue = (property: string, values: string, suffix?: string): string => {\r\n  const name = `${property} ${values}`;\r\n  let result: string | undefined = cssCache[name];\r\n\r\n  if (hasOwnProperty(cssCache, name)) {\r\n    return result;\r\n  }\r\n\r\n  const dummyStyle: CSSStyleDeclaration = getDummyStyle();\r\n  const possbleValues: Array<string> = values.split(' ');\r\n  const preparedSuffix: string = suffix || '';\r\n  const cssPrefixesWithFirstEmpty = [''].concat(cssPrefixes);\r\n\r\n  each(possbleValues, (possibleValue: string) => {\r\n    each(cssPrefixesWithFirstEmpty, (prefix: string) => {\r\n      const prop = prefix + possibleValue;\r\n      dummyStyle.cssText = `${property}:${prop}${preparedSuffix}`;\r\n      if (dummyStyle.length) {\r\n        result = prop;\r\n        return false;\r\n      }\r\n    });\r\n    return !result;\r\n  });\r\n\r\n  // eslint-disable-next-line no-return-assign\r\n  return (cssCache[name] = result || '');\r\n};\r\n\r\n/**\r\n * Get the requested JS function, object or constructor with vendor prefix if it isn't supported without or undefined if unsupported.\r\n * @param name The name of the JS function, object or constructor.\r\n */\r\nexport const jsAPI = <T = any>(name: string): T | undefined => {\r\n  let result: any = jsCache[name] || window[name];\r\n\r\n  if (hasOwnProperty(jsCache, name)) {\r\n    return result;\r\n  }\r\n\r\n  each(jsPrefixes, (prefix: string) => {\r\n    result = result || window[prefix + firstLetterToUpper(name)];\r\n    return !result;\r\n  });\r\n\r\n  jsCache[name] = result;\r\n  return result;\r\n};\r\n","import { jsAPI } from 'support/compatibility/vendors';\r\n\r\nexport const MutationObserverConstructor = jsAPI<typeof MutationObserver>('MutationObserver');\r\nexport const IntersectionObserverConstructor =\r\n  jsAPI<typeof IntersectionObserver>('IntersectionObserver');\r\nexport const ResizeObserverConstructor = jsAPI<typeof ResizeObserver>('ResizeObserver');\r\nexport const cAF = jsAPI<typeof cancelAnimationFrame>('cancelAnimationFrame');\r\nexport const rAF = jsAPI<typeof requestAnimationFrame>('requestAnimationFrame');\r\nexport const setT = window.setTimeout as (handler: TimerHandler, timeout?: number) => number;\r\nexport const clearT = window.clearTimeout as (id?: number) => void;\r\n","import { isString } from 'support/utils/types';\r\nimport { each } from 'support/utils/array';\r\nimport { keys } from 'support/utils/object';\r\n\r\ntype ClassContainingElement = Node | Element | false | null | undefined;\r\ntype ClassName = string | false | null | undefined;\r\n\r\nconst rnothtmlwhite = /[^\\x20\\t\\r\\n\\f]+/g;\r\nconst classListAction = (\r\n  elm: ClassContainingElement,\r\n  className: ClassName,\r\n  action: (elmClassList: DOMTokenList, clazz: string) => boolean | void\r\n): boolean => {\r\n  const classList = elm && (elm as Element).classList;\r\n  let clazz: string;\r\n  let i = 0;\r\n  let result = false;\r\n\r\n  if (classList && className && isString(className)) {\r\n    const classes: Array<string> = className.match(rnothtmlwhite) || [];\r\n    result = classes.length > 0;\r\n    while ((clazz = classes[i++])) {\r\n      result = !!action(classList, clazz) && result;\r\n    }\r\n  }\r\n  return result;\r\n};\r\n\r\n/**\r\n * Check whether the given element has the given class name(s).\r\n * @param elm The element.\r\n * @param className The class name(s).\r\n */\r\nexport const hasClass = (elm: ClassContainingElement, className: ClassName): boolean =>\r\n  classListAction(elm, className, (classList, clazz) => classList.contains(clazz));\r\n\r\n/**\r\n * Removes the given class name(s) from the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be removed. (separated by spaces)\r\n */\r\nexport const removeClass = (elm: ClassContainingElement, className: ClassName): void => {\r\n  classListAction(elm, className, (classList, clazz) => classList.remove(clazz));\r\n};\r\n\r\n/**\r\n * Adds the given class name(s) to the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be added. (separated by spaces)\r\n * @returns A function which removes the added class name(s).\r\n */\r\nexport const addClass = (elm: ClassContainingElement, className: ClassName): (() => void) => {\r\n  classListAction(elm, className, (classList, clazz) => classList.add(clazz));\r\n  return removeClass.bind(0, elm, className);\r\n};\r\n\r\n/**\r\n * Takes two className strings, compares them and returns the difference as array.\r\n * @param classNameA ClassName A.\r\n * @param classNameB ClassName B.\r\n */\r\nexport const diffClass = (classNameA: ClassName, classNameB: ClassName) => {\r\n  const classNameASplit = classNameA && classNameA.split(' ');\r\n  const classNameBSplit = classNameB && classNameB.split(' ');\r\n  const tempObj = {};\r\n\r\n  each(classNameASplit, (className) => {\r\n    tempObj[className] = 1;\r\n  });\r\n  each(classNameBSplit, (className) => {\r\n    if (tempObj[className]) {\r\n      delete tempObj[className];\r\n    } else {\r\n      tempObj[className] = 1;\r\n    }\r\n  });\r\n\r\n  return keys(tempObj);\r\n};\r\n","import { each } from 'support/utils/array';\r\nimport { WH, XY, TRBL } from 'support/dom';\r\nimport { PlainObject } from 'typings';\r\n\r\n/**\r\n * Compares two objects and returns true if all values of the passed prop names are identical, false otherwise or if one of the two object is falsy.\r\n * @param a Object a.\r\n * @param b Object b.\r\n * @param props The props which shall be compared.\r\n */\r\nexport const equal = <T extends PlainObject>(\r\n  a: T | undefined,\r\n  b: T | undefined,\r\n  props: Array<keyof T>,\r\n  propMutation?: ((value: any) => any) | null | false\r\n): boolean => {\r\n  if (a && b) {\r\n    let result = true;\r\n    each(props, (prop) => {\r\n      const compareA = propMutation ? propMutation(a[prop]) : a[prop];\r\n      const compareB = propMutation ? propMutation(b[prop]) : b[prop];\r\n      if (compareA !== compareB) {\r\n        result = false;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalWH = <T>(a?: WH<T>, b?: WH<T>) => equal<WH<T>>(a, b, ['w', 'h']);\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalXY = <T>(a?: XY<T>, b?: XY<T>) => equal<XY<T>>(a, b, ['x', 'y']);\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalTRBL = (a?: TRBL, b?: TRBL) => equal<TRBL>(a, b, ['t', 'r', 'b', 'l']);\r\n\r\n/**\r\n * Compares two DOM Rects for their equality of their width and height properties\r\n * Also returns false if one of the DOM Rects is undefined or null.\r\n * @param a DOM Rect a.\r\n * @param b DOM Rect b.\r\n * @param round Whether the values should be rounded.\r\n */\r\nexport const equalBCRWH = (a?: DOMRect, b?: DOMRect, round?: boolean) =>\r\n  equal<DOMRect>(a, b, ['width', 'height'], round && ((value) => Math.round(value)));\r\n","import { isNumber, isFunction } from 'support/utils/types';\r\nimport { from } from 'support/utils/array';\r\nimport { rAF, cAF, setT, clearT } from 'support/compatibility/apis';\r\n\r\ntype DebounceTiming = number | false | null | undefined;\r\n\r\nexport interface DebounceOptions<FunctionToDebounce extends (...args: any) => any> {\r\n  /**\r\n   * The timeout for debouncing. If null, no debounce is applied.\r\n   */\r\n  _timeout?: DebounceTiming | (() => DebounceTiming);\r\n  /**\r\n   * A maximum amount of ms. before the function will be called even with debounce.\r\n   */\r\n  _maxDelay?: DebounceTiming | (() => DebounceTiming);\r\n  /**\r\n   * Function which merges parameters for each canceled debounce.\r\n   * If parameters can't be merged the function will return null, otherwise it returns the merged parameters.\r\n   */\r\n  _mergeParams?: (\r\n    prev: Parameters<FunctionToDebounce>,\r\n    curr: Parameters<FunctionToDebounce>\r\n  ) => Parameters<FunctionToDebounce> | false | null | undefined;\r\n}\r\n\r\nexport interface Debounced<FunctionToDebounce extends (...args: any) => any> {\r\n  (...args: Parameters<FunctionToDebounce>): ReturnType<FunctionToDebounce>;\r\n  _flush(): void;\r\n}\r\n\r\nexport const noop = () => {}; // eslint-disable-line\r\n\r\n/**\r\n * Debounces the given function either with a timeout or a animation frame.\r\n * @param functionToDebounce The function which shall be debounced.\r\n * @param options Options for debouncing.\r\n */\r\nexport const debounce = <FunctionToDebounce extends (...args: any) => any>(\r\n  functionToDebounce: FunctionToDebounce,\r\n  options?: DebounceOptions<FunctionToDebounce>\r\n): Debounced<FunctionToDebounce> => {\r\n  let maxTimeoutId: number | undefined;\r\n  let prevArguments: Parameters<FunctionToDebounce> | null | undefined;\r\n  let latestArguments: Parameters<FunctionToDebounce> | null | undefined;\r\n  let clear: () => void = noop;\r\n  const { _timeout, _maxDelay, _mergeParams } = options || {};\r\n\r\n  const invokeFunctionToDebounce = function (args: IArguments) {\r\n    clear();\r\n    clearT(maxTimeoutId);\r\n    maxTimeoutId = prevArguments = undefined;\r\n    clear = noop;\r\n    // eslint-disable-next-line\r\n    // @ts-ignore\r\n    functionToDebounce.apply(this, args);\r\n  };\r\n\r\n  const mergeParms = (\r\n    curr: Parameters<FunctionToDebounce>\r\n  ): Parameters<FunctionToDebounce> | false | null | undefined =>\r\n    _mergeParams && prevArguments ? _mergeParams(prevArguments, curr) : curr;\r\n\r\n  const flush = () => {\r\n    /* istanbul ignore next */\r\n    if (clear !== noop) {\r\n      invokeFunctionToDebounce(mergeParms(latestArguments!) || latestArguments!);\r\n    }\r\n  };\r\n\r\n  const debouncedFn = function () {\r\n    // eslint-disable-next-line prefer-rest-params\r\n    const args: Parameters<FunctionToDebounce> = from(arguments) as Parameters<FunctionToDebounce>;\r\n    const finalTimeout = isFunction(_timeout) ? _timeout() : _timeout;\r\n    const hasTimeout = isNumber(finalTimeout) && finalTimeout >= 0;\r\n\r\n    if (hasTimeout) {\r\n      const finalMaxWait = isFunction(_maxDelay) ? _maxDelay() : _maxDelay;\r\n      const hasMaxWait = isNumber(finalMaxWait) && finalMaxWait >= 0;\r\n      const setTimeoutFn = finalTimeout > 0 ? setT : rAF!;\r\n      const clearTimeoutFn = finalTimeout > 0 ? clearT : cAF!;\r\n      const mergeParamsResult = mergeParms(args);\r\n      const invokedArgs = mergeParamsResult || args;\r\n      const boundInvoke = invokeFunctionToDebounce.bind(0, invokedArgs);\r\n\r\n      // if (!mergeParamsResult) {\r\n      //   invokeFunctionToDebounce(prevArguments || args);\r\n      // }\r\n\r\n      clear();\r\n      // @ts-ignore\r\n      const timeoutId = setTimeoutFn(boundInvoke, finalTimeout);\r\n      clear = () => clearTimeoutFn(timeoutId);\r\n\r\n      if (hasMaxWait && !maxTimeoutId) {\r\n        maxTimeoutId = setT(flush, finalMaxWait as number);\r\n      }\r\n\r\n      prevArguments = latestArguments = invokedArgs;\r\n    } else {\r\n      invokeFunctionToDebounce(args);\r\n    }\r\n  };\r\n  debouncedFn._flush = flush;\r\n\r\n  return debouncedFn as Debounced<FunctionToDebounce>;\r\n};\r\n","import { style } from 'support/dom/style';\r\n\r\nexport interface WH<T = number> {\r\n  w: T;\r\n  h: T;\r\n}\r\n\r\nconst { round } = Math;\r\nconst elementHasDimensions = (elm: HTMLElement): boolean =>\r\n  !!(elm.offsetWidth || elm.offsetHeight || elm.getClientRects().length);\r\nconst zeroObj: WH = {\r\n  w: 0,\r\n  h: 0,\r\n};\r\n\r\n/**\r\n * Returns the window inner- width and height.\r\n */\r\nexport const windowSize = (): WH => ({\r\n  w: window.innerWidth,\r\n  h: window.innerHeight,\r\n});\r\n\r\n/**\r\n * Returns the scroll- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the scroll- width and height shall be returned.\r\n */\r\nexport const offsetSize = (elm: HTMLElement | null | undefined): WH =>\r\n  elm\r\n    ? {\r\n        w: elm.offsetWidth,\r\n        h: elm.offsetHeight,\r\n      }\r\n    : zeroObj;\r\n\r\n/**\r\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the client- width and height shall be returned.\r\n */\r\nexport const clientSize = (elm: HTMLElement | false | null | undefined): WH =>\r\n  elm\r\n    ? {\r\n        w: elm.clientWidth,\r\n        h: elm.clientHeight,\r\n      }\r\n    : zeroObj;\r\n\r\n/**\r\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the client- width and height shall be returned.\r\n */\r\nexport const scrollSize = (elm: HTMLElement | false | null | undefined): WH =>\r\n  elm\r\n    ? {\r\n        w: elm.scrollWidth,\r\n        h: elm.scrollHeight,\r\n      }\r\n    : zeroObj;\r\n\r\n/**\r\n * Returns the fractional- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the fractional- width and height shall be returned.\r\n */\r\nexport const fractionalSize = (elm: HTMLElement | false | null | undefined): WH => {\r\n  const cssHeight = parseFloat(style(elm, 'height')) || 0;\r\n  const cssWidth = parseFloat(style(elm, 'width')) || 0;\r\n  return {\r\n    w: cssWidth - round(cssWidth),\r\n    h: cssHeight - round(cssHeight),\r\n  };\r\n};\r\n\r\n/**\r\n * Returns the BoundingClientRect of the passed element.\r\n * @param elm The element of which the BoundingClientRect shall be returned.\r\n */\r\nexport const getBoundingClientRect = (elm: HTMLElement): DOMRect => elm.getBoundingClientRect();\r\n\r\n/**\r\n * Determines whether the passed element has any dimensions.\r\n * @param elm The element.\r\n */\r\nexport const hasDimensions = (elm: HTMLElement | false | null | undefined): boolean =>\r\n  elm ? elementHasDimensions(elm as HTMLElement) : false;\r\n","import { isUndefined } from 'support/utils/types';\r\nimport { each, push, runEachAndClear } from 'support/utils/array';\r\n\r\nlet passiveEventsSupport: boolean;\r\nconst supportPassiveEvents = (): boolean => {\r\n  if (isUndefined(passiveEventsSupport)) {\r\n    passiveEventsSupport = false;\r\n    try {\r\n      /* eslint-disable */\r\n      // @ts-ignore\r\n      window.addEventListener(\r\n        'test',\r\n        null,\r\n        Object.defineProperty({}, 'passive', {\r\n          get() {\r\n            passiveEventsSupport = true;\r\n          },\r\n        })\r\n      );\r\n      /* eslint-enable */\r\n    } catch (e) {}\r\n  }\r\n  return passiveEventsSupport;\r\n};\r\nconst splitEventNames = (eventNames: string) => eventNames.split(' ');\r\n\r\nexport interface OnOptions {\r\n  _capture?: boolean;\r\n  _passive?: boolean;\r\n  _once?: boolean;\r\n}\r\n\r\n/**\r\n * Removes the passed event listener for the passed events with the passed options.\r\n * @param target The element from which the listener shall be removed.\r\n * @param eventNames The eventsnames for which the listener shall be removed.\r\n * @param listener The listener which shall be removed.\r\n * @param capture The options of the removed listener.\r\n */\r\nexport const off = <T extends Event = Event>(\r\n  target: EventTarget,\r\n  eventNames: string,\r\n  listener: (event: T) => any,\r\n  capture?: boolean\r\n): void => {\r\n  each(splitEventNames(eventNames), (eventName) => {\r\n    target.removeEventListener(eventName, listener as EventListener, capture);\r\n  });\r\n};\r\n\r\n/**\r\n * Adds the passed event listener for the passed eventnames with the passed options.\r\n * @param target The element to which the listener shall be added.\r\n * @param eventNames The eventsnames for which the listener shall be called.\r\n * @param listener The listener which is called on the eventnames.\r\n * @param options The options of the added listener.\r\n */\r\nexport const on = <T extends Event = Event>(\r\n  target: EventTarget,\r\n  eventNames: string,\r\n  listener: (event: T) => any,\r\n  options?: OnOptions\r\n): (() => void) => {\r\n  const doSupportPassiveEvents = supportPassiveEvents();\r\n  const passive = (doSupportPassiveEvents && options && options._passive) ?? doSupportPassiveEvents;\r\n  const capture = (options && options._capture) || false;\r\n  const once = (options && options._once) || false;\r\n  const offListeners: (() => void)[] = [];\r\n  const nativeOptions: AddEventListenerOptions | boolean = doSupportPassiveEvents\r\n    ? {\r\n        passive,\r\n        capture,\r\n      }\r\n    : capture;\r\n\r\n  each(splitEventNames(eventNames), (eventName) => {\r\n    const finalListener = (\r\n      once\r\n        ? (evt: T) => {\r\n            target.removeEventListener(eventName, finalListener, capture);\r\n            listener && listener(evt);\r\n          }\r\n        : listener\r\n    ) as EventListener;\r\n\r\n    push(offListeners, off.bind(null, target, eventName, finalListener, capture));\r\n    target.addEventListener(eventName, finalListener, nativeOptions);\r\n  });\r\n\r\n  return runEachAndClear.bind(0, offListeners);\r\n};\r\n\r\n/**\r\n * Shorthand for the stopPropagation event Method.\r\n * @param evt The event of which the stopPropagation method shall be called.\r\n */\r\nexport const stopPropagation = (evt: Event): void => evt.stopPropagation();\r\n\r\n/**\r\n * Shorthand for the preventDefault event Method.\r\n * @param evt The event of which the preventDefault method shall be called.\r\n */\r\nexport const preventDefault = (evt: Event): void => evt.preventDefault();\r\n\r\n/**\r\n * Shorthand for the stopPropagation and preventDefault event Method.\r\n * @param evt The event of which the stopPropagation and preventDefault methods shall be called.\r\n */\r\nexport const stopAndPrevent = (evt: Event): void =>\r\n  (stopPropagation(evt) as undefined) || (preventDefault(evt) as undefined);\r\n","import { getBoundingClientRect } from 'support/dom/dimensions';\r\n\r\nexport interface XY<T = number> {\r\n  x: T;\r\n  y: T;\r\n}\r\n\r\nconst zeroObj: XY = {\r\n  x: 0,\r\n  y: 0,\r\n};\r\n\r\n/**\r\n * Returns the offset- left and top coordinates of the passed element relative to the document. If the element is null the top and left values are 0.\r\n * @param elm The element of which the offset- top and left coordinates shall be returned.\r\n */\r\nexport const absoluteCoordinates = (elm: HTMLElement | null | undefined): XY => {\r\n  const rect = elm ? getBoundingClientRect(elm) : 0;\r\n  return rect\r\n    ? {\r\n        x: rect.left + window.pageYOffset,\r\n        y: rect.top + window.pageXOffset,\r\n      }\r\n    : zeroObj;\r\n};\r\n\r\n/**\r\n * Returns the offset- left and top coordinates of the passed element. If the element is null the top and left values are 0.\r\n * @param elm The element of which the offset- top and left coordinates shall be returned.\r\n */\r\nexport const offsetCoordinates = (elm: HTMLElement | null | undefined): XY =>\r\n  elm\r\n    ? {\r\n        x: elm.offsetLeft,\r\n        y: elm.offsetTop,\r\n      }\r\n    : zeroObj;\r\n","import { isArray } from 'support/utils/types';\r\nimport { keys } from 'support/utils/object';\r\nimport { each, from, isEmptyArray } from 'support/utils/array';\r\n\r\nexport type EventListener<\r\n  EventMap extends Record<string, any[]>,\r\n  N extends keyof EventMap = keyof EventMap\r\n> = (...args: EventMap[N]) => void;\r\n\r\nexport type InitialEventListeners<EventMap extends Record<string, any[]>> = {\r\n  [K in keyof EventMap]?: EventListener<EventMap> | EventListener<EventMap>[];\r\n};\r\n\r\nconst manageListener = <EventMap extends Record<string, any[]>>(\r\n  callback: (listener?: EventListener<EventMap>) => void,\r\n  listener?: EventListener<EventMap> | EventListener<EventMap>[]\r\n) => {\r\n  each(isArray(listener) ? listener : [listener], callback);\r\n};\r\n\r\nexport const createEventListenerHub = <EventMap extends Record<string, any[]>>(\r\n  initialEventListeners?: InitialEventListeners<EventMap>\r\n) => {\r\n  // eslint-disable-next-line @typescript-eslint/no-shadow\r\n  type EventListener<N extends keyof EventMap = keyof EventMap> = (...args: EventMap[N]) => void;\r\n  type RemoveEvent = {\r\n    <N extends keyof EventMap>(name?: N, listener?: EventListener<N>): void;\r\n    <N extends keyof EventMap>(name?: N, listener?: EventListener<N>[]): void;\r\n    <N extends keyof EventMap>(name?: N, listener?: EventListener<N> | EventListener<N>[]): void;\r\n  };\r\n  type AddEvent = {\r\n    <N extends keyof EventMap>(name: N, listener: EventListener<N>): () => void;\r\n    <N extends keyof EventMap>(name: N, listener: EventListener<N>[]): () => void;\r\n    <N extends keyof EventMap>(\r\n      name: N,\r\n      listener: EventListener<N> | EventListener<N>[]\r\n    ): () => void;\r\n  };\r\n  type TriggerEvent = {\r\n    <N extends keyof EventMap>(name: N, args?: EventMap[N]): void;\r\n  };\r\n\r\n  const events = new Map<keyof EventMap, Set<EventListener>>();\r\n\r\n  const removeEvent: RemoveEvent = <N extends keyof EventMap>(\r\n    name?: N,\r\n    listener?: EventListener<N> | EventListener<N>[]\r\n  ): void => {\r\n    if (name) {\r\n      const eventSet = events.get(name);\r\n      manageListener((currListener) => {\r\n        if (eventSet) {\r\n          eventSet[currListener ? 'delete' : 'clear'](currListener!);\r\n        }\r\n      }, listener as any);\r\n    } else {\r\n      events.forEach((eventSet) => {\r\n        eventSet.clear();\r\n      });\r\n      events.clear();\r\n    }\r\n  };\r\n\r\n  const addEvent: AddEvent = <N extends keyof EventMap>(\r\n    name: N,\r\n    listener: EventListener<N> | EventListener<N>[]\r\n  ): (() => void) => {\r\n    const eventSet = events.get(name) || new Set();\r\n    events.set(name, eventSet);\r\n\r\n    manageListener((currListener) => {\r\n      currListener && eventSet.add(currListener);\r\n    }, listener as any);\r\n\r\n    return removeEvent.bind(0, name as any, listener as any);\r\n  };\r\n\r\n  const triggerEvent: TriggerEvent = <N extends keyof EventMap>(\r\n    name: N,\r\n    args?: EventMap[N]\r\n  ): void => {\r\n    const eventSet = events.get(name);\r\n\r\n    each(from(eventSet), (event) => {\r\n      if (args && !isEmptyArray(args)) {\r\n        (event as (...eventArgs: EventMap[keyof EventMap]) => void).apply(0, args as any);\r\n      } else {\r\n        (event as () => void)();\r\n      }\r\n    });\r\n  };\r\n\r\n  const initialListenerKeys = keys(initialEventListeners) as Extract<keyof EventMap, string>[];\r\n  each(initialListenerKeys, (key) => {\r\n    addEvent(key, initialEventListeners![key] as any);\r\n  });\r\n\r\n  return [addEvent, removeEvent, triggerEvent] as [AddEvent, RemoveEvent, TriggerEvent];\r\n};\r\n","import { assignDeep, each, isObject, keys, isArray, hasOwnProperty, isFunction } from 'support';\r\nimport { DeepPartial, DeepReadonly } from 'typings';\r\n\r\nconst opsStringify = (value: any) =>\r\n  JSON.stringify(value, (_, val) => {\r\n    if (isFunction(val)) {\r\n      throw new Error();\r\n    }\r\n    return val;\r\n  });\r\n\r\nexport type OverflowBehavior =\r\n  | 'hidden'\r\n  | 'scroll'\r\n  | 'visible'\r\n  | 'visible-hidden'\r\n  | 'visible-scroll';\r\n\r\nexport type ScrollbarVisibilityBehavior = 'visible' | 'hidden' | 'auto';\r\n\r\nexport type ScrollbarAutoHideBehavior = 'never' | 'scroll' | 'leave' | 'move';\r\n\r\nexport interface Options {\r\n  paddingAbsolute: boolean;\r\n  showNativeOverlaidScrollbars: boolean;\r\n  updating: {\r\n    elementEvents: Array<[elementSelector: string, eventNames: string]> | null;\r\n    attributes: string[] | null;\r\n    debounce: [timeout: number, maxWait: number] | number | null; // (if tuple: [timeout: 0, maxWait: 33], if number: [timeout: number, maxWait: false]) debounce for content Changes\r\n    ignoreMutation: ((mutation: MutationRecord) => any) | null;\r\n  };\r\n  overflow: {\r\n    x: OverflowBehavior;\r\n    y: OverflowBehavior;\r\n  };\r\n  scrollbars: {\r\n    theme: string | null;\r\n    visibility: ScrollbarVisibilityBehavior;\r\n    autoHide: ScrollbarAutoHideBehavior;\r\n    autoHideDelay: number;\r\n    dragScroll: boolean;\r\n    clickScroll: boolean;\r\n    pointers: string[] | null;\r\n  };\r\n}\r\n\r\nexport type ReadonlyOptions = DeepReadonly<Options>;\r\n\r\nexport const defaultOptions: Options = {\r\n  // resize: 'none', // none || both  || horizontal || vertical || n || b || h || v\r\n  paddingAbsolute: false, // true || false\r\n  showNativeOverlaidScrollbars: false, // true || false\r\n  updating: {\r\n    elementEvents: [['img', 'load']], // array of tuples || null\r\n    debounce: [0, 33], // number || number array || null\r\n    attributes: null, // string array || null\r\n    ignoreMutation: null, // () => any || null\r\n  },\r\n  overflow: {\r\n    x: 'scroll', // visible-hidden  || visible-scroll || hidden || scroll || v-h || v-s || h || s\r\n    y: 'scroll', // visible-hidden  || visible-scroll || hidden || scroll || v-h || v-s || h || s\r\n  },\r\n  scrollbars: {\r\n    theme: 'os-theme-dark',\r\n    visibility: 'auto', // visible || hidden || auto || v || h || a\r\n    autoHide: 'never', // never || scroll || leave || move || n || s || l || m\r\n    autoHideDelay: 1300, // number\r\n    dragScroll: true, // true || false\r\n    clickScroll: false, // true || false\r\n    pointers: ['mouse', 'touch', 'pen'], // null || array of supported pointers: https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType\r\n  },\r\n};\r\n\r\nexport const getOptionsDiff = <T>(currOptions: T, newOptions: DeepPartial<T>): DeepPartial<T> => {\r\n  const diff: DeepPartial<T> = {};\r\n  const optionsKeys = keys(newOptions).concat(keys(currOptions));\r\n\r\n  each(optionsKeys, (optionKey) => {\r\n    const currOptionValue = currOptions[optionKey];\r\n    const newOptionValue = newOptions[optionKey];\r\n\r\n    if (isObject(currOptionValue) && isObject(newOptionValue)) {\r\n      assignDeep((diff[optionKey] = {}), getOptionsDiff(currOptionValue, newOptionValue));\r\n    } else if (hasOwnProperty(newOptions, optionKey) && newOptionValue !== currOptionValue) {\r\n      let isDiff = true;\r\n\r\n      if (isArray(currOptionValue) || isArray(newOptionValue)) {\r\n        try {\r\n          if (opsStringify(currOptionValue) === opsStringify(newOptionValue)) {\r\n            isDiff = false;\r\n          }\r\n        } catch {}\r\n      }\r\n\r\n      if (isDiff) {\r\n        diff[optionKey] = newOptionValue;\r\n      }\r\n    }\r\n  });\r\n\r\n  return diff;\r\n};\r\n","export const classNameEnvironment = 'os-environment';\r\nexport const classNameEnvironmentFlexboxGlue = `${classNameEnvironment}-flexbox-glue`;\r\nexport const classNameEnvironmentFlexboxGlueMax = `${classNameEnvironmentFlexboxGlue}-max`;\r\n\r\nexport const dataAttributeHost = 'data-overlayscrollbars';\r\nexport const dataAttributeHostOverflowX = `${dataAttributeHost}-overflow-x`;\r\nexport const dataAttributeHostOverflowY = `${dataAttributeHost}-overflow-y`;\r\nexport const dataValueHostOverflowVisible = 'overflowVisible';\r\nexport const dataValueHostScrollbarHidden = 'scrollbarHidden';\r\nexport const dataValueHostUpdating = 'updating';\r\nexport const classNamePadding = 'os-padding';\r\nexport const classNameViewport = 'os-viewport';\r\nexport const classNameViewportArrange = `${classNameViewport}-arrange`;\r\nexport const classNameContent = 'os-content';\r\nexport const classNameViewportScrollbarHidden = `${classNameViewport}-scrollbar-hidden`;\r\nexport const classNameOverflowVisible = `os-overflow-visible`;\r\n\r\nexport const classNameSizeObserver = 'os-size-observer';\r\nexport const classNameSizeObserverAppear = `${classNameSizeObserver}-appear`;\r\nexport const classNameSizeObserverListener = `${classNameSizeObserver}-listener`;\r\nexport const classNameSizeObserverListenerScroll = `${classNameSizeObserverListener}-scroll`;\r\nexport const classNameSizeObserverListenerItem = `${classNameSizeObserverListener}-item`;\r\nexport const classNameSizeObserverListenerItemFinal = `${classNameSizeObserverListenerItem}-final`;\r\n\r\nexport const classNameTrinsicObserver = 'os-trinsic-observer';\r\n\r\nexport const classNameScrollbar = 'os-scrollbar';\r\nexport const classNameScrollbarRtl = `${classNameScrollbar}-rtl`;\r\nexport const classNameScrollbarHorizontal = `${classNameScrollbar}-horizontal`;\r\nexport const classNameScrollbarVertical = `${classNameScrollbar}-vertical`;\r\nexport const classNameScrollbarTrack = `${classNameScrollbar}-track`;\r\nexport const classNameScrollbarHandle = `${classNameScrollbar}-handle`;\r\nexport const classNamesScrollbarVisible = `${classNameScrollbar}-visible`;\r\nexport const classNamesScrollbarCornerless = `${classNameScrollbar}-cornerless`;\r\nexport const classNamesScrollbarTransitionless = `${classNameScrollbar}-transitionless`;\r\nexport const classNamesScrollbarInteraction = `${classNameScrollbar}-interaction`;\r\nexport const classNamesScrollbarUnusable = `${classNameScrollbar}-unusable`;\r\nexport const classNamesScrollbarAutoHidden = `${classNameScrollbar}-auto-hidden`;\r\nexport const classNamesScrollbarTrackInteractive = `${classNameScrollbarTrack}-interactive`;\r\nexport const classNamesScrollbarHandleInteractive = `${classNameScrollbarHandle}-interactive`;\r\n","import { each, isArray, keys } from 'support';\r\nimport { OverlayScrollbars, OverlayScrollbarsStatic } from 'overlayscrollbars';\r\n\r\nexport type PluginInstance =\r\n  | Record<string, unknown>\r\n  | ((staticObj: OverlayScrollbarsStatic, instanceObj: OverlayScrollbars) => void);\r\nexport type Plugin<T extends PluginInstance = PluginInstance> = {\r\n  [pluginName: string]: T;\r\n};\r\n\r\nconst pluginRegistry: Record<string, PluginInstance> = {};\r\n\r\nexport const getPlugins = () => pluginRegistry;\r\n\r\nexport const addPlugin = (addedPlugin: Plugin | Plugin[]): void => {\r\n  each((isArray(addedPlugin) ? addedPlugin : [addedPlugin]) as Plugin[], (plugin) => {\r\n    const pluginName = keys(plugin)[0];\r\n    pluginRegistry[pluginName] = plugin[pluginName];\r\n  });\r\n};\r\n","function _extends() {\n  module.exports = _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _extends.apply(this, arguments);\n}\n\nmodule.exports = _extends, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","import { each, hasOwnProperty, keys, push, isEmptyObject } from 'support/utils';\r\nimport { type, isArray, isUndefined, isPlainObject, isString } from 'support/utils/types';\r\nimport { PlainObject, DeepPartial } from 'typings';\r\n\r\nexport type OptionsObjectType = Record<string, unknown>;\r\nexport type OptionsFunctionType = (this: any, ...args: any[]) => any;\r\nexport type OptionsTemplateType<T extends OptionsTemplateNativeTypes> = ExtractPropsKey<\r\n  OptionsTemplateTypeMap,\r\n  T\r\n>;\r\nexport type OptionsTemplateTypes = keyof OptionsTemplateTypeMap;\r\nexport type OptionsTemplateNativeTypes = OptionsTemplateTypeMap[keyof OptionsTemplateTypeMap];\r\n\r\nexport type OptionsTemplateValue<T extends OptionsTemplateNativeTypes = string> = T extends string\r\n  ? string extends T\r\n    ? OptionsTemplateValueNonEnum<T>\r\n    : string\r\n  : OptionsTemplateValueNonEnum<T>;\r\n\r\nexport type OptionsTemplate<T> = {\r\n  [P in keyof T]: T[P] extends OptionsObjectType\r\n    ? OptionsTemplate<T[P]>\r\n    : T[P] extends OptionsTemplateNativeTypes\r\n    ? OptionsTemplateValue<T[P]>\r\n    : never;\r\n};\r\n\r\nexport type OptionsValidationResult<T> = [\r\n  DeepPartial<T>, // validated\r\n  Record<string, unknown> // foreign\r\n];\r\n\r\ntype OptionsTemplateTypeMap = {\r\n  __TPL_boolean_TYPE__: boolean;\r\n  __TPL_number_TYPE__: number;\r\n  __TPL_string_TYPE__: string;\r\n  __TPL_array_TYPE__: Array<any> | ReadonlyArray<any>;\r\n  __TPL_function_TYPE__: OptionsFunctionType;\r\n  __TPL_null_TYPE__: null;\r\n  __TPL_object_TYPE__: OptionsObjectType;\r\n};\r\n\r\ntype OptionsTemplateValueNonEnum<T extends OptionsTemplateNativeTypes> =\r\n  | OptionsTemplateType<T>\r\n  | [OptionsTemplateType<T>, ...Array<OptionsTemplateTypes>];\r\n\r\ntype ExtractPropsKey<T, TProps extends T[keyof T]> = {\r\n  [P in keyof T]: TProps extends T[P] ? P : never;\r\n}[keyof T];\r\n\r\ntype OptionsTemplateTypesDictionary = {\r\n  readonly boolean: OptionsTemplateType<boolean>;\r\n  readonly number: OptionsTemplateType<number>;\r\n  readonly string: OptionsTemplateType<string>;\r\n  readonly array: OptionsTemplateType<Array<any>>;\r\n  readonly object: OptionsTemplateType<OptionsObjectType>;\r\n  readonly function: OptionsTemplateType<OptionsFunctionType>;\r\n  readonly null: OptionsTemplateType<null>;\r\n};\r\n\r\nconst optionsTemplateTypes: OptionsTemplateTypesDictionary = {\r\n  boolean: '__TPL_boolean_TYPE__',\r\n  number: '__TPL_number_TYPE__',\r\n  string: '__TPL_string_TYPE__',\r\n  array: '__TPL_array_TYPE__',\r\n  object: '__TPL_object_TYPE__',\r\n  function: '__TPL_function_TYPE__',\r\n  null: '__TPL_null_TYPE__',\r\n};\r\n\r\n/**\r\n * Validates the given options object according to the given template object and returns a object which looks like:\r\n * {\r\n *  foreign   : a object which consists of properties which aren't defined inside the template. (foreign properties)\r\n *  validated : a object which consists only of valid properties. (property name is inside the template and value has a correct type)\r\n * }\r\n * @param template The template according to which the options object shall be validated.\r\n * @param options The options object which shall be validated.\r\n * @param optionsDiff When provided the returned validated object will only have properties which are different to this objects properties.\r\n * Example (assume all properties are valid to the template):\r\n * Options object            : { a: 'a', b: 'b', c: 'c' }\r\n * optionsDiff object        : { a: 'a', b: 'b', c: undefined }\r\n * Returned validated object : { c: 'c' }\r\n * Because the value of the properties a and b didn't change, they aren't included in the returned object.\r\n * Without the optionsDiff object the returned validated object would be: { a: 'a', b: 'b', c: 'c' }\r\n * @param doWriteErrors True if errors shall be logged into the console, false otherwise.\r\n * @param propPath The propertyPath which lead to this object. (used for error logging)\r\n */\r\nconst validateRecursive = <T extends PlainObject>(\r\n  template: OptionsTemplate<T>,\r\n  options: DeepPartial<T>,\r\n  doWriteErrors?: boolean,\r\n  propPath?: string\r\n): OptionsValidationResult<T> => {\r\n  const validatedOptions: DeepPartial<T> = {};\r\n  const optionsCopy: DeepPartial<T> = { ...options };\r\n  const props = keys(template).filter((prop) => hasOwnProperty(options, prop));\r\n\r\n  each(props, (prop: Extract<keyof T, string>) => {\r\n    const optionsValue: any = options[prop];\r\n    const templateValue: PlainObject | string | OptionsTemplateTypes | Array<OptionsTemplateTypes> =\r\n      template[prop];\r\n    const templateIsComplex = isPlainObject(templateValue);\r\n    const propPrefix = propPath ? `${propPath}.` : '';\r\n\r\n    // if the template has a object as value, it means that the options are complex (verschachtelt)\r\n    if (templateIsComplex && isPlainObject(optionsValue)) {\r\n      const [validated, foreign] = validateRecursive(\r\n        templateValue as T,\r\n        optionsValue,\r\n        doWriteErrors,\r\n        propPrefix + prop\r\n      );\r\n      validatedOptions[prop] = validated as any;\r\n      optionsCopy[prop] = foreign as any;\r\n\r\n      each([optionsCopy, validatedOptions], (value) => {\r\n        if (isEmptyObject(value[prop])) {\r\n          delete value[prop];\r\n        }\r\n      });\r\n    } else if (!templateIsComplex) {\r\n      let isValid = false;\r\n      const errorEnumStrings: Array<string> = [];\r\n      const errorPossibleTypes: Array<string> = [];\r\n      const optionsValueType = type(optionsValue);\r\n      const templateValueArr: Array<string | OptionsTemplateTypes> = !isArray(templateValue)\r\n        ? [templateValue as string | OptionsTemplateTypes]\r\n        : (templateValue as Array<OptionsTemplateTypes>);\r\n\r\n      each(templateValueArr, (currTemplateType) => {\r\n        // if currType value isn't inside possibleTemplateTypes we assume its a enum string value\r\n        let typeString: string | undefined;\r\n        each(optionsTemplateTypes, (value: string, key: string) => {\r\n          if (value === currTemplateType) {\r\n            typeString = key;\r\n          }\r\n        });\r\n        const isEnumString = isUndefined(typeString);\r\n        if (isEnumString && isString(optionsValue)) {\r\n          // split it into a array which contains all possible values for example: [\"yes\", \"no\", \"maybe\"]\r\n          const enumStringSplit = currTemplateType.split(' ');\r\n          isValid = !!enumStringSplit.find((possibility) => possibility === optionsValue);\r\n\r\n          // build error message\r\n          push(errorEnumStrings, enumStringSplit);\r\n        } else {\r\n          isValid = optionsTemplateTypes[optionsValueType] === currTemplateType;\r\n        }\r\n\r\n        // build error message\r\n        push(errorPossibleTypes, isEnumString ? optionsTemplateTypes.string : typeString!);\r\n\r\n        // continue if invalid, break if valid\r\n        return !isValid;\r\n      });\r\n\r\n      if (isValid) {\r\n        validatedOptions[prop] = optionsValue;\r\n      } else if (doWriteErrors) {\r\n        console.warn(\r\n          `${\r\n            `The option \"${propPrefix}${prop}\" wasn't set, because it doesn't accept the type [ ${optionsValueType.toUpperCase()} ] with the value of \"${optionsValue}\".\\r\\n` +\r\n            `Accepted types are: [ ${errorPossibleTypes.join(', ').toUpperCase()} ].\\r\\n`\r\n          }${\r\n            errorEnumStrings.length > 0\r\n              ? `\\r\\nValid strings are: [ ${errorEnumStrings.join(', ')} ].`\r\n              : ''\r\n          }`\r\n        );\r\n      }\r\n\r\n      delete optionsCopy[prop];\r\n    }\r\n  });\r\n\r\n  return [validatedOptions, optionsCopy]; // optionsCopy equals now to foreign options\r\n};\r\n\r\n/**\r\n * Validates the given options object according to the given template object and returns a tuple which looks like:\r\n * [\r\n *  validated : a object which consists only of valid properties. (property name is inside the template and value has a correct type)\r\n *  foreign   : a object which consists of properties which aren't defined inside the template. (foreign properties)\r\n * ]\r\n * @param template The template according to which the options object shall be validated.\r\n * @param options The options object which shall be validated.\r\n * @param doWriteErrors True if errors shall be logged into the console, false otherwise.\r\n */\r\nconst validateOptions = <T extends PlainObject>(\r\n  template: OptionsTemplate<T>,\r\n  options: DeepPartial<T>,\r\n  doWriteErrors?: boolean\r\n): OptionsValidationResult<T> => validateRecursive<T>(template, options, doWriteErrors);\r\n\r\nexport { validateOptions, optionsTemplateTypes };\r\n","import {\r\n  Options,\r\n  OverflowBehavior,\r\n  ScrollbarVisibilityBehavior,\r\n  ScrollbarAutoHideBehavior,\r\n} from 'options';\r\nimport {\r\n  validateOptions,\r\n  OptionsTemplate,\r\n  OptionsTemplateValue,\r\n  optionsTemplateTypes as oTypes,\r\n} from 'plugins/optionsValidationPlugin/validation';\r\nimport type { DeepPartial } from 'typings';\r\nimport type { Plugin } from 'plugins';\r\n\r\nconst numberAllowedValues: OptionsTemplateValue<number> = oTypes.number;\r\nconst booleanAllowedValues: OptionsTemplateValue<boolean> = oTypes.boolean;\r\nconst arrayNullValues: OptionsTemplateValue<Array<unknown> | null> = [oTypes.array, oTypes.null];\r\nconst overflowAllowedValues: OptionsTemplateValue<OverflowBehavior> =\r\n  'hidden scroll visible visible-hidden';\r\nconst scrollbarsVisibilityAllowedValues: OptionsTemplateValue<ScrollbarVisibilityBehavior> =\r\n  'visible hidden auto';\r\nconst scrollbarsAutoHideAllowedValues: OptionsTemplateValue<ScrollbarAutoHideBehavior> =\r\n  'never scroll leavemove';\r\n\r\nconst optionsTemplate: OptionsTemplate<Options> = {\r\n  // resize: resizeAllowedValues, // none || both  || horizontal || vertical || n || b ||\r\n  paddingAbsolute: booleanAllowedValues, // true || false\r\n  showNativeOverlaidScrollbars: booleanAllowedValues, // true || false\r\n  updating: {\r\n    elementEvents: arrayNullValues, // array of tuples || null\r\n    attributes: arrayNullValues,\r\n    debounce: [oTypes.number, oTypes.array, oTypes.null], // number || number array || null\r\n    ignoreMutation: [oTypes.function, oTypes.null], // function || null\r\n  },\r\n  overflow: {\r\n    x: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scrol\r\n    y: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scrol\r\n  },\r\n  scrollbars: {\r\n    theme: [oTypes.string, oTypes.null], // string || null\r\n    visibility: scrollbarsVisibilityAllowedValues, // visible || hidden || auto || v ||\r\n    autoHide: scrollbarsAutoHideAllowedValues, // never || scroll || leave || move ||\r\n    autoHideDelay: numberAllowedValues, // number\r\n    dragScroll: booleanAllowedValues, // true || false\r\n    clickScroll: booleanAllowedValues, // true || false\r\n    pointers: [oTypes.array, oTypes.null], // string array\r\n  },\r\n  /*\r\n  textarea: {\r\n    dynWidth: booleanAllowedValues, // true || false\r\n    dynHeight: booleanAllowedValues, // true || false\r\n    inheritedAttrs: stringArrayNullAllowedValues, // string || array || nul\r\n  },\r\n  */\r\n};\r\n\r\nexport type OptionsValidationPluginInstance = {\r\n  _: (options: DeepPartial<Options>, doWriteErrors?: boolean) => DeepPartial<Options>;\r\n};\r\n\r\nexport const optionsValidationPluginName = '__osOptionsValidationPlugin';\r\n\r\nexport const optionsValidationPlugin: Plugin<OptionsValidationPluginInstance> = {\r\n  [optionsValidationPluginName]: {\r\n    _: (options: DeepPartial<Options>, doWriteErrors?: boolean) => {\r\n      const [validated, foreign] = validateOptions(optionsTemplate, options, doWriteErrors);\r\n      return { ...foreign, ...validated };\r\n    },\r\n  },\r\n};\r\n","import {\r\n  createDOM,\r\n  style,\r\n  appendChildren,\r\n  offsetSize,\r\n  scrollLeft,\r\n  scrollTop,\r\n  on,\r\n  addClass,\r\n  equalWH,\r\n  push,\r\n  cAF,\r\n  rAF,\r\n  stopPropagation,\r\n} from 'support';\r\nimport {\r\n  classNameSizeObserverListenerScroll,\r\n  classNameSizeObserverListenerItem,\r\n  classNameSizeObserverListenerItemFinal,\r\n} from 'classnames';\r\nimport type { Plugin } from 'plugins';\r\n\r\nexport type SizeObserverPluginInstance = {\r\n  _: (\r\n    listenerElement: HTMLElement,\r\n    onSizeChangedCallback: (appear: boolean) => any,\r\n    observeAppearChange: boolean\r\n  ) => [appearCallback: () => any, offFns: (() => any)[]];\r\n};\r\n\r\nconst scrollAmount = 3333333;\r\nconst scrollEventName = 'scroll';\r\nexport const sizeObserverPluginName = '__osSizeObserverPlugin';\r\n\r\nexport const sizeObserverPlugin: Plugin<SizeObserverPluginInstance> = {\r\n  [sizeObserverPluginName]: {\r\n    _: (listenerElement, onSizeChangedCallback, observeAppearChange) => {\r\n      const observerElementChildren = createDOM(\r\n        `<div class=\"${classNameSizeObserverListenerItem}\" dir=\"ltr\"><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\"></div></div><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\" style=\"width: 200%; height: 200%\"></div></div></div>`\r\n      );\r\n      appendChildren(listenerElement, observerElementChildren);\r\n      addClass(listenerElement, classNameSizeObserverListenerScroll);\r\n      const observerElementChildrenRoot = observerElementChildren[0] as HTMLElement;\r\n      const shrinkElement = observerElementChildrenRoot.lastChild as HTMLElement;\r\n      const expandElement = observerElementChildrenRoot.firstChild as HTMLElement;\r\n      const expandElementChild = expandElement?.firstChild as HTMLElement;\r\n\r\n      let cacheSize = offsetSize(observerElementChildrenRoot);\r\n      let currSize = cacheSize;\r\n      let isDirty = false;\r\n      let rAFId: number;\r\n\r\n      const reset = () => {\r\n        scrollLeft(expandElement, scrollAmount);\r\n        scrollTop(expandElement, scrollAmount);\r\n        scrollLeft(shrinkElement, scrollAmount);\r\n        scrollTop(shrinkElement, scrollAmount);\r\n      };\r\n      const onResized = (appear?: unknown) => {\r\n        rAFId = 0;\r\n        if (isDirty) {\r\n          cacheSize = currSize;\r\n          onSizeChangedCallback(appear === true);\r\n        }\r\n      };\r\n      const onScroll = (scrollEvent?: Event | false) => {\r\n        currSize = offsetSize(observerElementChildrenRoot);\r\n        isDirty = !scrollEvent || !equalWH(currSize, cacheSize);\r\n\r\n        if (scrollEvent) {\r\n          stopPropagation(scrollEvent);\r\n\r\n          if (isDirty && !rAFId) {\r\n            cAF!(rAFId);\r\n            rAFId = rAF!(onResized);\r\n          }\r\n        } else {\r\n          onResized(scrollEvent === false);\r\n        }\r\n\r\n        reset();\r\n      };\r\n      const offListeners = push(\r\n        [],\r\n        [on(expandElement, scrollEventName, onScroll), on(shrinkElement, scrollEventName, onScroll)]\r\n      );\r\n\r\n      // lets assume that the divs will never be that large and a constant value is enough\r\n      style(expandElementChild, {\r\n        width: scrollAmount,\r\n        height: scrollAmount,\r\n      });\r\n\r\n      rAF!(reset);\r\n\r\n      return [observeAppearChange ? onScroll.bind(0, false) : reset, offListeners];\r\n    },\r\n  },\r\n};\r\n","import {\r\n  keys,\r\n  attr,\r\n  WH,\r\n  style,\r\n  addClass,\r\n  removeClass,\r\n  noop,\r\n  each,\r\n  assignDeep,\r\n  windowSize,\r\n  UpdateCache,\r\n  XY,\r\n} from 'support';\r\nimport { classNameViewportArrange } from 'classnames';\r\nimport type { StyleObject } from 'typings';\r\nimport type { StructureSetupState } from 'setups/structureSetup';\r\nimport type {\r\n  ViewportOverflowState,\r\n  GetViewportOverflowState,\r\n  HideNativeScrollbars,\r\n} from 'setups/structureSetup/updateSegments/overflowUpdateSegment';\r\nimport type { InternalEnvironment } from 'environment';\r\nimport type { Plugin } from 'plugins';\r\n\r\nexport type ArrangeViewport = (\r\n  viewportOverflowState: ViewportOverflowState,\r\n  viewportScrollSize: WH<number>,\r\n  sizeFraction: WH<number>,\r\n  directionIsRTL: boolean\r\n) => boolean;\r\n\r\nexport type UndoViewportArrangeResult = [\r\n  redoViewportArrange: () => void,\r\n  overflowState?: ViewportOverflowState\r\n];\r\n\r\nexport type UndoArrangeViewport = (\r\n  showNativeOverlaidScrollbars: boolean,\r\n  directionIsRTL: boolean,\r\n  viewportOverflowState?: ViewportOverflowState\r\n) => UndoViewportArrangeResult;\r\n\r\nexport type ScrollbarsHidingPluginInstance = {\r\n  _createUniqueViewportArrangeElement(env: InternalEnvironment): HTMLStyleElement | false;\r\n  _overflowUpdateSegment(\r\n    doViewportArrange: boolean,\r\n    flexboxGlue: boolean,\r\n    viewport: HTMLElement,\r\n    viewportArrange: HTMLStyleElement | false | null | undefined,\r\n    getState: () => StructureSetupState,\r\n    getViewportOverflowState: GetViewportOverflowState,\r\n    hideNativeScrollbars: HideNativeScrollbars\r\n  ): [ArrangeViewport, UndoArrangeViewport];\r\n  _envWindowZoom(): (\r\n    envInstance: InternalEnvironment,\r\n    updateNativeScrollbarSizeCache: UpdateCache<XY<number>>,\r\n    triggerEvent: () => void\r\n  ) => void;\r\n};\r\n\r\nlet contentArrangeCounter = 0;\r\nconst { round, abs } = Math;\r\nconst getWindowDPR = (): number => {\r\n  // eslint-disable-next-line\r\n  // @ts-ignore\r\n  const dDPI = window.screen.deviceXDPI || 0;\r\n  // eslint-disable-next-line\r\n  // @ts-ignore\r\n  const sDPI = window.screen.logicalXDPI || 1;\r\n  return window.devicePixelRatio || dDPI / sDPI;\r\n};\r\n\r\nconst diffBiggerThanOne = (valOne: number, valTwo: number): boolean => {\r\n  const absValOne = abs(valOne);\r\n  const absValTwo = abs(valTwo);\r\n  return !(absValOne === absValTwo || absValOne + 1 === absValTwo || absValOne - 1 === absValTwo);\r\n};\r\n\r\nexport const scrollbarsHidingPluginName = '__osScrollbarsHidingPlugin';\r\n\r\nexport const scrollbarsHidingPlugin: Plugin<ScrollbarsHidingPluginInstance> = {\r\n  [scrollbarsHidingPluginName]: {\r\n    _createUniqueViewportArrangeElement: (env: InternalEnvironment) => {\r\n      const { _nativeScrollbarsHiding, _nativeScrollbarsOverlaid, _cssCustomProperties } = env;\r\n      const create =\r\n        !_cssCustomProperties &&\r\n        !_nativeScrollbarsHiding &&\r\n        (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n      const result = create ? document.createElement('style') : false;\r\n\r\n      if (result) {\r\n        attr(result, 'id', `${classNameViewportArrange}-${contentArrangeCounter}`);\r\n        contentArrangeCounter++;\r\n      }\r\n\r\n      return result;\r\n    },\r\n    _overflowUpdateSegment: (\r\n      doViewportArrange,\r\n      flexboxGlue,\r\n      viewport,\r\n      viewportArrange,\r\n      getState,\r\n      getViewportOverflowState,\r\n      hideNativeScrollbars\r\n    ) => {\r\n      /**\r\n       * Sets the styles of the viewport arrange element.\r\n       * @param viewportOverflowState The viewport overflow state according to which the scrollbars shall be hidden.\r\n       * @param viewportScrollSize The content scroll size.\r\n       * @param directionIsRTL Whether the direction is RTL or not.\r\n       * @returns A boolean which indicates whether the viewport arrange element was adjusted.\r\n       */\r\n      const arrangeViewport: ArrangeViewport = (\r\n        viewportOverflowState,\r\n        viewportScrollSize,\r\n        sizeFraction,\r\n        directionIsRTL\r\n      ) => {\r\n        if (doViewportArrange) {\r\n          const { _viewportPaddingStyle } = getState();\r\n          const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } = viewportOverflowState;\r\n          const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n          const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\r\n          const viewportArrangeHorizontalPaddingKey: keyof StyleObject = directionIsRTL\r\n            ? 'paddingRight'\r\n            : 'paddingLeft';\r\n          const viewportArrangeHorizontalPaddingValue = _viewportPaddingStyle[\r\n            viewportArrangeHorizontalPaddingKey\r\n          ] as number;\r\n          const viewportArrangeVerticalPaddingValue = _viewportPaddingStyle.paddingTop as number;\r\n          const fractionalContentWidth = viewportScrollSize.w + sizeFraction.w;\r\n          const fractionalContenHeight = viewportScrollSize.h + sizeFraction.h;\r\n          const arrangeSize = {\r\n            w:\r\n              hideOffsetY && arrangeY\r\n                ? `${\r\n                    hideOffsetY + fractionalContentWidth - viewportArrangeHorizontalPaddingValue\r\n                  }px`\r\n                : '',\r\n            h:\r\n              hideOffsetX && arrangeX\r\n                ? `${hideOffsetX + fractionalContenHeight - viewportArrangeVerticalPaddingValue}px`\r\n                : '',\r\n          };\r\n\r\n          // adjust content arrange / before element\r\n          if (viewportArrange) {\r\n            const { sheet } = viewportArrange;\r\n            if (sheet) {\r\n              const { cssRules } = sheet;\r\n              if (cssRules) {\r\n                if (!cssRules.length) {\r\n                  sheet.insertRule(\r\n                    `#${attr(viewportArrange, 'id')} + .${classNameViewportArrange}::before {}`,\r\n                    0\r\n                  );\r\n                }\r\n\r\n                // @ts-ignore\r\n                const ruleStyle = cssRules[0].style;\r\n\r\n                ruleStyle.width = arrangeSize.w;\r\n                ruleStyle.height = arrangeSize.h;\r\n              }\r\n            }\r\n          } else {\r\n            style<'--os-vaw' | '--os-vah'>(viewport, {\r\n              '--os-vaw': arrangeSize.w,\r\n              '--os-vah': arrangeSize.h,\r\n            });\r\n          }\r\n        }\r\n\r\n        return doViewportArrange;\r\n      };\r\n\r\n      /**\r\n       * Removes all styles applied because of the viewport arrange strategy.\r\n       * @param showNativeOverlaidScrollbars Whether native overlaid scrollbars are shown instead of hidden.\r\n       * @param directionIsRTL Whether the direction is RTL or not.\r\n       * @param viewportOverflowState The currentviewport overflow state or undefined if it has to be determined.\r\n       * @returns A object with a function which applies all the removed styles and the determined viewport vverflow state.\r\n       */\r\n      const undoViewportArrange: UndoArrangeViewport = (\r\n        showNativeOverlaidScrollbars,\r\n        directionIsRTL,\r\n        viewportOverflowState?\r\n      ) => {\r\n        if (doViewportArrange) {\r\n          const finalViewportOverflowState =\r\n            viewportOverflowState || getViewportOverflowState(showNativeOverlaidScrollbars);\r\n          const { _viewportPaddingStyle: viewportPaddingStyle } = getState();\r\n          const { _scrollbarsHideOffsetArrange } = finalViewportOverflowState;\r\n          const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n          const finalPaddingStyle: StyleObject = {};\r\n          const assignProps = (props: string) =>\r\n            each(props.split(' '), (prop) => {\r\n              finalPaddingStyle[prop] = viewportPaddingStyle[prop];\r\n            });\r\n\r\n          if (arrangeX) {\r\n            assignProps('marginBottom paddingTop paddingBottom');\r\n          }\r\n\r\n          if (arrangeY) {\r\n            assignProps('marginLeft marginRight paddingLeft paddingRight');\r\n          }\r\n\r\n          const prevStyle = style(viewport, keys(finalPaddingStyle));\r\n\r\n          removeClass(viewport, classNameViewportArrange);\r\n\r\n          if (!flexboxGlue) {\r\n            finalPaddingStyle.height = '';\r\n          }\r\n\r\n          style(viewport, finalPaddingStyle);\r\n\r\n          return [\r\n            () => {\r\n              hideNativeScrollbars(\r\n                finalViewportOverflowState,\r\n                directionIsRTL,\r\n                doViewportArrange,\r\n                prevStyle\r\n              );\r\n              style(viewport, prevStyle);\r\n              addClass(viewport, classNameViewportArrange);\r\n            },\r\n            finalViewportOverflowState,\r\n          ];\r\n        }\r\n        return [noop];\r\n      };\r\n\r\n      return [arrangeViewport, undoViewportArrange];\r\n    },\r\n    _envWindowZoom: () => {\r\n      let size = { w: 0, h: 0 };\r\n      let dpr = 0;\r\n\r\n      return (envInstance, updateNativeScrollbarSizeCache, triggerEvent) => {\r\n        const sizeNew = windowSize();\r\n        const deltaSize = {\r\n          w: sizeNew.w - size.w,\r\n          h: sizeNew.h - size.h,\r\n        };\r\n\r\n        if (deltaSize.w === 0 && deltaSize.h === 0) {\r\n          return;\r\n        }\r\n\r\n        const deltaAbsSize = {\r\n          w: abs(deltaSize.w),\r\n          h: abs(deltaSize.h),\r\n        };\r\n        const deltaAbsRatio = {\r\n          w: abs(round(sizeNew.w / (size.w / 100.0))),\r\n          h: abs(round(sizeNew.h / (size.h / 100.0))),\r\n        };\r\n        const dprNew = getWindowDPR();\r\n        const deltaIsBigger = deltaAbsSize.w > 2 && deltaAbsSize.h > 2;\r\n        const difference = !diffBiggerThanOne(deltaAbsRatio.w, deltaAbsRatio.h);\r\n        const dprChanged = dprNew !== dpr && dprNew > 0;\r\n        const isZoom = deltaIsBigger && difference && dprChanged;\r\n\r\n        if (isZoom) {\r\n          const [scrollbarSize, scrollbarSizeChanged] = updateNativeScrollbarSizeCache();\r\n\r\n          assignDeep(envInstance._nativeScrollbarsSize, scrollbarSize); // keep the object same!\r\n\r\n          if (scrollbarSizeChanged) {\r\n            triggerEvent();\r\n          }\r\n        }\r\n\r\n        size = sizeNew;\r\n        dpr = dprNew;\r\n      };\r\n    },\r\n  },\r\n};\r\n","import {\r\n  createDOM,\r\n  addClass,\r\n  style,\r\n  appendChildren,\r\n  fractionalSize,\r\n  clientSize,\r\n  absoluteCoordinates,\r\n  offsetSize,\r\n  scrollLeft,\r\n  XY,\r\n  removeAttr,\r\n  removeElements,\r\n  equalBCRWH,\r\n  getBoundingClientRect,\r\n  assignDeep,\r\n  cssProperty,\r\n  createCache,\r\n  equalXY,\r\n  createEventListenerHub,\r\n  EventListener,\r\n} from 'support';\r\nimport {\r\n  classNameEnvironment,\r\n  classNameEnvironmentFlexboxGlue,\r\n  classNameEnvironmentFlexboxGlueMax,\r\n  classNameViewportScrollbarHidden,\r\n} from 'classnames';\r\nimport { Options, defaultOptions } from 'options';\r\nimport { DeepPartial } from 'typings';\r\nimport { Initialization } from 'initialization';\r\nimport { getPlugins, ScrollbarsHidingPluginInstance, scrollbarsHidingPluginName } from 'plugins';\r\n\r\ntype EnvironmentEventMap = {\r\n  _: [];\r\n};\r\n\r\nexport interface InternalEnvironment {\r\n  readonly _nativeScrollbarsSize: XY;\r\n  readonly _nativeScrollbarsOverlaid: XY<boolean>;\r\n  readonly _nativeScrollbarsHiding: boolean;\r\n  readonly _rtlScrollBehavior: { n: boolean; i: boolean };\r\n  readonly _flexboxGlue: boolean;\r\n  readonly _cssCustomProperties: boolean;\r\n  readonly _staticDefaultInitialization: Initialization;\r\n  readonly _staticDefaultOptions: Options;\r\n  _addListener(listener: EventListener<EnvironmentEventMap, '_'>): () => void;\r\n  _getDefaultInitialization(): Initialization;\r\n  _setDefaultInitialization(newInitialization: DeepPartial<Initialization>): void;\r\n  _getDefaultOptions(): Options;\r\n  _setDefaultOptions(newDefaultOptions: DeepPartial<Options>): void;\r\n}\r\n\r\nlet environmentInstance: InternalEnvironment;\r\n\r\nconst getNativeScrollbarSize = (\r\n  body: HTMLElement,\r\n  measureElm: HTMLElement,\r\n  measureElmChild: HTMLElement,\r\n  clear?: boolean\r\n): XY => {\r\n  appendChildren(body, measureElm);\r\n\r\n  const cSize = clientSize(measureElm);\r\n  const oSize = offsetSize(measureElm);\r\n  const fSize = fractionalSize(measureElmChild);\r\n\r\n  clear && removeElements(measureElm);\r\n\r\n  return {\r\n    x: oSize.h - cSize.h + fSize.h,\r\n    y: oSize.w - cSize.w + fSize.w,\r\n  };\r\n};\r\n\r\nconst getNativeScrollbarsHiding = (testElm: HTMLElement): boolean => {\r\n  let result = false;\r\n  const revertClass = addClass(testElm, classNameViewportScrollbarHidden);\r\n  try {\r\n    result =\r\n      style(testElm, cssProperty('scrollbar-width')) === 'none' ||\r\n      window.getComputedStyle(testElm, '::-webkit-scrollbar').getPropertyValue('display') ===\r\n        'none';\r\n  } catch (ex) {}\r\n  revertClass();\r\n  return result;\r\n};\r\n\r\nconst getRtlScrollBehavior = (\r\n  parentElm: HTMLElement,\r\n  childElm: HTMLElement\r\n): { i: boolean; n: boolean } => {\r\n  const strHidden = 'hidden';\r\n  style(parentElm, { overflowX: strHidden, overflowY: strHidden, direction: 'rtl' });\r\n  scrollLeft(parentElm, 0);\r\n\r\n  const parentOffset = absoluteCoordinates(parentElm);\r\n  const childOffset = absoluteCoordinates(childElm);\r\n  scrollLeft(parentElm, -999); // https://github.com/KingSora/OverlayScrollbars/issues/187\r\n  const childOffsetAfterScroll = absoluteCoordinates(childElm);\r\n  return {\r\n    /**\r\n     * origin direction = determines if the zero scroll position is on the left or right side\r\n     * 'i' means 'invert' (i === true means that the axis must be inverted to be correct)\r\n     * true = on the left side\r\n     * false = on the right side\r\n     */\r\n    i: parentOffset.x === childOffset.x,\r\n    /**\r\n     * negative = determines if the maximum scroll is positive or negative\r\n     * 'n' means 'negate' (n === true means that the axis must be negated to be correct)\r\n     * true = negative\r\n     * false = positive\r\n     */\r\n    n: childOffset.x !== childOffsetAfterScroll.x,\r\n  };\r\n};\r\n\r\nconst getFlexboxGlue = (parentElm: HTMLElement, childElm: HTMLElement): boolean => {\r\n  const revertFbxGlue = addClass(parentElm, classNameEnvironmentFlexboxGlue);\r\n  const minOffsetsizeParent = getBoundingClientRect(parentElm);\r\n  const minOffsetsize = getBoundingClientRect(childElm);\r\n  const supportsMin = equalBCRWH(minOffsetsize, minOffsetsizeParent, true);\r\n\r\n  const revertFbxGlueMax = addClass(parentElm, classNameEnvironmentFlexboxGlueMax);\r\n  const maxOffsetsizeParent = getBoundingClientRect(parentElm);\r\n  const maxOffsetsize = getBoundingClientRect(childElm);\r\n  const supportsMax = equalBCRWH(maxOffsetsize, maxOffsetsizeParent, true);\r\n\r\n  revertFbxGlue();\r\n  revertFbxGlueMax();\r\n\r\n  return supportsMin && supportsMax;\r\n};\r\n\r\nconst createEnvironment = (): InternalEnvironment => {\r\n  const { body } = document;\r\n  const envDOM = createDOM(`<div class=\"${classNameEnvironment}\"><div></div></div>`);\r\n  const envElm = envDOM[0] as HTMLElement;\r\n  const envChildElm = envElm.firstChild as HTMLElement;\r\n  const [addEvent, , triggerEvent] = createEventListenerHub<EnvironmentEventMap>();\r\n  const [updateNativeScrollbarSizeCache, getNativeScrollbarSizeCache] = createCache(\r\n    {\r\n      _initialValue: getNativeScrollbarSize(body, envElm, envChildElm),\r\n      _equal: equalXY,\r\n    },\r\n    getNativeScrollbarSize.bind(0, body, envElm, envChildElm, true)\r\n  );\r\n  const [nativeScrollbarsSize] = getNativeScrollbarSizeCache();\r\n  const nativeScrollbarsHiding = getNativeScrollbarsHiding(envElm);\r\n  const nativeScrollbarsOverlaid = {\r\n    x: nativeScrollbarsSize.x === 0,\r\n    y: nativeScrollbarsSize.y === 0,\r\n  };\r\n  const staticDefaultInitialization: Initialization = {\r\n    host: null,\r\n    padding: !nativeScrollbarsHiding,\r\n    viewport: (target) => nativeScrollbarsHiding && target === target.ownerDocument.body && target,\r\n    content: false,\r\n    scrollbarsSlot: true,\r\n    cancel: {\r\n      nativeScrollbarsOverlaid: true,\r\n      body: null,\r\n    },\r\n  };\r\n  const staticDefaultOptions = assignDeep({}, defaultOptions);\r\n\r\n  const env: InternalEnvironment = {\r\n    _nativeScrollbarsSize: nativeScrollbarsSize,\r\n    _nativeScrollbarsOverlaid: nativeScrollbarsOverlaid,\r\n    _nativeScrollbarsHiding: nativeScrollbarsHiding,\r\n    _cssCustomProperties: style(envElm, 'zIndex') === '-1',\r\n    _rtlScrollBehavior: getRtlScrollBehavior(envElm, envChildElm),\r\n    _flexboxGlue: getFlexboxGlue(envElm, envChildElm),\r\n    _addListener: (listener) => addEvent('_', listener),\r\n    _getDefaultInitialization: assignDeep<Initialization, Initialization>.bind(\r\n      0,\r\n      {} as Initialization,\r\n      staticDefaultInitialization\r\n    ),\r\n    _setDefaultInitialization(newInitializationStrategy) {\r\n      assignDeep(staticDefaultInitialization, newInitializationStrategy);\r\n    },\r\n    _getDefaultOptions: assignDeep<Options, Options>.bind(0, {} as Options, staticDefaultOptions),\r\n    _setDefaultOptions(newDefaultOptions) {\r\n      assignDeep(staticDefaultOptions, newDefaultOptions);\r\n    },\r\n    _staticDefaultInitialization: assignDeep({}, staticDefaultInitialization),\r\n    _staticDefaultOptions: assignDeep({}, staticDefaultOptions),\r\n  };\r\n\r\n  removeAttr(envElm, 'style');\r\n  removeElements(envElm);\r\n\r\n  if (!nativeScrollbarsHiding && (!nativeScrollbarsOverlaid.x || !nativeScrollbarsOverlaid.y)) {\r\n    let resizeFn: undefined | ReturnType<ScrollbarsHidingPluginInstance['_envWindowZoom']>;\r\n    window.addEventListener('resize', () => {\r\n      const scrollbarsHidingPlugin = getPlugins()[scrollbarsHidingPluginName] as\r\n        | ScrollbarsHidingPluginInstance\r\n        | undefined;\r\n\r\n      resizeFn = resizeFn || (scrollbarsHidingPlugin && scrollbarsHidingPlugin._envWindowZoom());\r\n      resizeFn && resizeFn(env, updateNativeScrollbarSizeCache, triggerEvent.bind(0, '_'));\r\n    });\r\n  }\r\n\r\n  return env;\r\n};\r\n\r\nconst getEnvironment = (): InternalEnvironment => {\r\n  if (!environmentInstance) {\r\n    environmentInstance = createEnvironment();\r\n  }\r\n  return environmentInstance;\r\n};\r\n\r\nexport { getEnvironment };\r\n","import { isFunction, isHTMLElement, isNull, isUndefined } from 'support';\r\nimport type { StructureInitialization } from 'setups/structureSetup';\r\nimport type { ScrollbarsInitialization } from 'setups/scrollbarsSetup';\r\nimport { getEnvironment } from 'environment';\r\nimport { DeepPartial } from 'typings';\r\nimport { StructureSetupElementsObj } from 'setups/structureSetup/structureSetup.elements';\r\n\r\ntype StaticInitialization = HTMLElement | false | null;\r\ntype DynamicInitialization = HTMLElement | boolean | null;\r\n\r\nexport type Initialization = StructureInitialization &\r\n  ScrollbarsInitialization & {\r\n    cancel: {\r\n      nativeScrollbarsOverlaid: boolean;\r\n      body: boolean | null;\r\n    };\r\n  };\r\n\r\nexport type InitializationTargetElement = HTMLElement | HTMLTextAreaElement;\r\n\r\nexport type InitializationTargetObject = DeepPartial<Initialization> & {\r\n  target: InitializationTargetElement;\r\n};\r\n\r\nexport type InitializationTarget = InitializationTargetElement | InitializationTargetObject;\r\n\r\n/**\r\n * Static elements MUST be present.\r\n * With false, null or undefined the element will be generated, otherwise the specified element is taken.\r\n */\r\nexport type StaticInitializationElement<Args extends any[]> =\r\n  | ((...args: Args) => StaticInitialization)\r\n  | StaticInitialization;\r\n\r\n/**\r\n * Dynamic element CAN be present.\r\n * If its a element the element will be taken as the repsective element.\r\n * With true the element will be generated.\r\n * With false, null or undefined the element won't be generated.\r\n */\r\nexport type DynamicInitializationElement<Args extends any[]> =\r\n  | ((...args: Args) => DynamicInitialization)\r\n  | DynamicInitialization;\r\n\r\nexport type FallbackInitializtationElement<\r\n  InitElm extends StaticInitializationElement<any> | DynamicInitializationElement<any>\r\n> = Extract<InitElm, (...args: any[]) => any> extends (...args: infer P) => any\r\n  ? (...args: P) => HTMLElement\r\n  : never;\r\n\r\nconst resolveInitialization = <T>(value: any, args: any): T =>\r\n  isFunction(value) ? value.apply(0, args) : value;\r\n\r\nexport const staticInitializationElement = <T extends StaticInitializationElement<any>>(\r\n  args: Parameters<Extract<T, (...initializationFnArgs: any[]) => any>>,\r\n  fallbackStaticInitializationElement: FallbackInitializtationElement<T>,\r\n  defaultStaticInitializationElementStrategy: T,\r\n  staticInitializationElementValue?: T\r\n): HTMLElement => {\r\n  const staticInitialization = isUndefined(staticInitializationElementValue)\r\n    ? defaultStaticInitializationElementStrategy\r\n    : staticInitializationElementValue;\r\n  const resolvedInitialization = resolveInitialization<StaticInitialization>(\r\n    staticInitialization,\r\n    args\r\n  );\r\n  return resolvedInitialization || fallbackStaticInitializationElement();\r\n};\r\n\r\nexport const dynamicInitializationElement = <T extends DynamicInitializationElement<any>>(\r\n  args: Parameters<Extract<T, (...initializationFnArgs: any[]) => any>>,\r\n  fallbackDynamicInitializationElement: FallbackInitializtationElement<T>,\r\n  defaultDynamicInitializationElementStrategy: T,\r\n  dynamicInitializationElementValue?: T\r\n): HTMLElement | false => {\r\n  const dynamicInitialization = isUndefined(dynamicInitializationElementValue)\r\n    ? defaultDynamicInitializationElementStrategy\r\n    : dynamicInitializationElementValue;\r\n  const resolvedInitialization = resolveInitialization<DynamicInitialization>(\r\n    dynamicInitialization,\r\n    args\r\n  );\r\n  return (\r\n    !!resolvedInitialization &&\r\n    (isHTMLElement(resolvedInitialization)\r\n      ? resolvedInitialization\r\n      : fallbackDynamicInitializationElement())\r\n  );\r\n};\r\n\r\nexport const cancelInitialization = (\r\n  cancelInitializationValue: DeepPartial<Initialization['cancel']> | false | null | undefined,\r\n  structureSetupElements: StructureSetupElementsObj\r\n): boolean => {\r\n  const { nativeScrollbarsOverlaid, body } = cancelInitializationValue || {};\r\n  const { _isBody, _viewportIsTarget } = structureSetupElements;\r\n  const { _getDefaultInitialization, _nativeScrollbarsOverlaid } = getEnvironment();\r\n  const { nativeScrollbarsOverlaid: defaultNativeScrollbarsOverlaid, body: defaultbody } =\r\n    _getDefaultInitialization().cancel;\r\n\r\n  const resolvedNativeScrollbarsOverlaid =\r\n    nativeScrollbarsOverlaid ?? defaultNativeScrollbarsOverlaid;\r\n  const resolvedDocumentScrollingElement = isUndefined(body) ? defaultbody : body;\r\n\r\n  const finalNativeScrollbarsOverlaid =\r\n    (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y) &&\r\n    resolvedNativeScrollbarsOverlaid;\r\n  const finalDocumentScrollingElement =\r\n    _isBody &&\r\n    (isNull(resolvedDocumentScrollingElement)\r\n      ? !_viewportIsTarget\r\n      : resolvedDocumentScrollingElement);\r\n\r\n  return !!finalNativeScrollbarsOverlaid || !!finalDocumentScrollingElement;\r\n};\r\n","import { OverlayScrollbars } from 'overlayscrollbars';\r\n\r\nconst targetInstanceMap: WeakMap<Element, OverlayScrollbars> = new WeakMap();\r\n\r\n/**\r\n * Adds the given OverlayScrollbars instance to the given element.\r\n * @param target The element which is the target of the OverlayScrollbars instance.\r\n * @param osInstance The OverlayScrollbars instance.\r\n */\r\nexport const addInstance = (target: Element, osInstance: OverlayScrollbars): void => {\r\n  targetInstanceMap.set(target, osInstance);\r\n};\r\n\r\n/**\r\n * Removes a OverlayScrollbars instance from the given element.\r\n * @param target The element from which its OverlayScrollbars instance shall be removed.\r\n */\r\nexport const removeInstance = (target: Element): void => {\r\n  targetInstanceMap.delete(target);\r\n};\r\n\r\n/**\r\n * Gets the OverlayScrollbars from the given element or undefined if it doesn't have one.\r\n * @param target The element of which its OverlayScrollbars instance shall be get.\r\n */\r\nexport const getInstance = (target: Element): OverlayScrollbars | undefined =>\r\n  targetInstanceMap.get(target);\r\n","import { assignDeep, hasOwnProperty } from 'support';\r\nimport type { Options, ReadonlyOptions } from 'options';\r\nimport type { DeepPartial } from 'typings';\r\n\r\nexport type SetupElements<T extends Record<string, any>> = [elements: T, destroy: () => void];\r\n\r\nexport type SetupUpdate<T extends any[]> = (\r\n  changedOptions: DeepPartial<Options>,\r\n  force: boolean,\r\n  ...args: T\r\n) => void;\r\n\r\nexport type SetupUpdateCheckOption = <T>(path: string) => [value: T, changed: boolean];\r\n\r\nexport type SetupUpdateSegment<Hints extends Record<string, any>> = (\r\n  updateHints: Hints,\r\n  checkOption: SetupUpdateCheckOption,\r\n  force: boolean\r\n) => Partial<Hints> | void;\r\n\r\nexport type SetupState<T extends Record<string, any>> = [\r\n  get: () => T,\r\n  set: (newState: Partial<T>) => void\r\n];\r\n\r\nexport type Setup<\r\n  DynamicState,\r\n  StaticState extends Record<string, any> = Record<string, any>,\r\n  A extends any[] = []\r\n> = [update: SetupUpdate<A>, state: (() => DynamicState) & StaticState, destroy: () => void];\r\n\r\nconst getPropByPath = <T>(obj: any, path: string): T =>\r\n  obj\r\n    ? path.split('.').reduce((o, prop) => (o && hasOwnProperty(o, prop) ? o[prop] : undefined), obj)\r\n    : undefined;\r\n\r\nexport const createOptionCheck =\r\n  (\r\n    options: ReadonlyOptions,\r\n    changedOptions: DeepPartial<Options>,\r\n    force?: boolean\r\n  ): SetupUpdateCheckOption =>\r\n  (path: string) =>\r\n    [getPropByPath(options, path), force || getPropByPath(changedOptions, path) !== undefined];\r\n\r\nexport const createState = <S>(initialState: S): SetupState<S> => {\r\n  let state: S = initialState;\r\n  return [\r\n    () => state,\r\n    (newState: Partial<S>) => {\r\n      state = assignDeep({}, state, newState);\r\n    },\r\n  ];\r\n};\r\n","import {\r\n  isHTMLElement,\r\n  appendChildren,\r\n  createDiv,\r\n  is,\r\n  contents,\r\n  insertAfter,\r\n  addClass,\r\n  parent,\r\n  indexOf,\r\n  removeElements,\r\n  removeClass,\r\n  hasClass,\r\n  push,\r\n  runEachAndClear,\r\n  insertBefore,\r\n  attr,\r\n  keys,\r\n  removeAttr,\r\n  attrClass,\r\n  hasAttrClass,\r\n  noop,\r\n} from 'support';\r\nimport {\r\n  dataAttributeHost,\r\n  dataAttributeHostOverflowX,\r\n  dataAttributeHostOverflowY,\r\n  classNamePadding,\r\n  classNameViewport,\r\n  classNameContent,\r\n  classNameViewportScrollbarHidden,\r\n} from 'classnames';\r\nimport { getEnvironment } from 'environment';\r\nimport { getPlugins, scrollbarsHidingPluginName } from 'plugins';\r\nimport type { ScrollbarsHidingPluginInstance } from 'plugins/scrollbarsHidingPlugin';\r\nimport {\r\n  staticInitializationElement as generalStaticInitializationElement,\r\n  dynamicInitializationElement as generalDynamicInitializationElement,\r\n} from 'initialization';\r\nimport type {\r\n  InitializationTarget,\r\n  InitializationTargetElement,\r\n  InitializationTargetObject,\r\n} from 'initialization';\r\nimport type {\r\n  StructureDynamicInitializationElement,\r\n  StructureStaticInitializationElement,\r\n} from 'setups/structureSetup/structureSetup.initialization';\r\n\r\nexport type StructureSetupElements = [\r\n  targetObj: StructureSetupElementsObj,\r\n  appendElements: () => void,\r\n  destroy: () => void\r\n];\r\n\r\nexport interface StructureSetupElementsObj {\r\n  _target: InitializationTargetElement;\r\n  _host: HTMLElement;\r\n  _viewport: HTMLElement;\r\n  _padding: HTMLElement | false;\r\n  _content: HTMLElement | false;\r\n  _viewportArrange: HTMLStyleElement | false | null | undefined;\r\n  _scrollOffsetElement: HTMLElement;\r\n  _scrollEventElement: HTMLElement | Document;\r\n  // ctx ----\r\n  _isTextarea: boolean;\r\n  _isBody: boolean;\r\n  _windowElm: Window;\r\n  _documentElm: Document;\r\n  _targetIsElm: boolean;\r\n  _viewportIsTarget: boolean;\r\n  _viewportHasClass: (className: string, attributeClassName: string) => boolean;\r\n  _viewportAddRemoveClass: (className: string, attributeClassName: string, add?: boolean) => void;\r\n}\r\n\r\nconst createNewDiv = createDiv.bind(0, '');\r\n\r\nconst unwrap = (elm: HTMLElement | false | null | undefined) => {\r\n  appendChildren(parent(elm), contents(elm));\r\n  removeElements(elm);\r\n};\r\n\r\nconst addDataAttrHost = (elm: HTMLElement, value: string) => {\r\n  attr(elm, dataAttributeHost, value);\r\n  return removeAttr.bind(0, elm, dataAttributeHost);\r\n};\r\n\r\nexport const createStructureSetupElements = (\r\n  target: InitializationTarget\r\n): StructureSetupElements => {\r\n  const env = getEnvironment();\r\n  const { _getDefaultInitialization, _nativeScrollbarsHiding } = env;\r\n  const scrollbarsHidingPlugin = getPlugins()[scrollbarsHidingPluginName] as\r\n    | ScrollbarsHidingPluginInstance\r\n    | undefined;\r\n  const createUniqueViewportArrangeElement =\r\n    scrollbarsHidingPlugin && scrollbarsHidingPlugin._createUniqueViewportArrangeElement;\r\n  const {\r\n    host: defaultHostInitialization,\r\n    viewport: defaultViewportInitialization,\r\n    padding: defaultPaddingInitialization,\r\n    content: defaultContentInitialization,\r\n  } = _getDefaultInitialization();\r\n  const targetIsElm = isHTMLElement(target);\r\n  const targetStructureInitialization = (targetIsElm ? {} : target) as InitializationTargetObject;\r\n  const {\r\n    host: hostInitialization,\r\n    padding: paddingInitialization,\r\n    viewport: viewportInitialization,\r\n    content: contentInitialization,\r\n  } = targetStructureInitialization;\r\n\r\n  const targetElement = targetIsElm ? target : targetStructureInitialization.target;\r\n  const isTextarea = is(targetElement, 'textarea');\r\n  const ownerDocument = targetElement.ownerDocument;\r\n  const isBody = targetElement === ownerDocument.body;\r\n  const wnd = ownerDocument.defaultView as Window;\r\n  const staticInitializationElement =\r\n    generalStaticInitializationElement<StructureStaticInitializationElement>.bind(0, [\r\n      targetElement,\r\n    ]);\r\n  const dynamicInitializationElement =\r\n    generalDynamicInitializationElement<StructureDynamicInitializationElement>.bind(0, [\r\n      targetElement,\r\n    ]);\r\n  const viewportElement = staticInitializationElement(\r\n    createNewDiv,\r\n    defaultViewportInitialization,\r\n    viewportInitialization\r\n  );\r\n  const viewportIsTarget = viewportElement === targetElement;\r\n  const viewportIsTargetBody = viewportIsTarget && isBody;\r\n  const evaluatedTargetObj: StructureSetupElementsObj = {\r\n    _target: targetElement,\r\n    _host: isTextarea\r\n      ? staticInitializationElement(createNewDiv, defaultHostInitialization, hostInitialization)\r\n      : (targetElement as HTMLElement),\r\n    _viewport: viewportElement,\r\n    _padding:\r\n      !viewportIsTarget &&\r\n      dynamicInitializationElement(\r\n        createNewDiv,\r\n        defaultPaddingInitialization,\r\n        paddingInitialization\r\n      ),\r\n    _content:\r\n      !viewportIsTarget &&\r\n      dynamicInitializationElement(\r\n        createNewDiv,\r\n        defaultContentInitialization,\r\n        contentInitialization\r\n      ),\r\n    _viewportArrange:\r\n      !viewportIsTarget &&\r\n      !_nativeScrollbarsHiding &&\r\n      createUniqueViewportArrangeElement &&\r\n      createUniqueViewportArrangeElement(env),\r\n    _scrollOffsetElement: viewportIsTargetBody ? ownerDocument.documentElement : viewportElement,\r\n    _scrollEventElement: viewportIsTargetBody ? ownerDocument : viewportElement,\r\n    _windowElm: wnd,\r\n    _documentElm: ownerDocument,\r\n    _isTextarea: isTextarea,\r\n    _isBody: isBody,\r\n    _targetIsElm: targetIsElm,\r\n    _viewportIsTarget: viewportIsTarget,\r\n    _viewportHasClass: (className: string, attributeClassName: string) =>\r\n      viewportIsTarget\r\n        ? hasAttrClass(viewportElement, dataAttributeHost, attributeClassName)\r\n        : hasClass(viewportElement, className),\r\n    _viewportAddRemoveClass: (className: string, attributeClassName: string, add?: boolean) =>\r\n      viewportIsTarget\r\n        ? attrClass(viewportElement, dataAttributeHost, attributeClassName, add)\r\n        : (add ? addClass : removeClass)(viewportElement, className),\r\n  };\r\n  const generatedElements = keys(evaluatedTargetObj).reduce((arr, key: string) => {\r\n    const value = evaluatedTargetObj[key];\r\n    return push(arr, value && !parent(value) ? value : false);\r\n  }, [] as HTMLElement[]);\r\n  const elementIsGenerated = (elm: HTMLElement | false) =>\r\n    elm ? indexOf(generatedElements, elm) > -1 : null;\r\n  const { _target, _host, _padding, _viewport, _content, _viewportArrange } = evaluatedTargetObj;\r\n  const destroyFns: (() => any)[] = [];\r\n  const isTextareaHostGenerated = isTextarea && elementIsGenerated(_host);\r\n  let targetContents = isTextarea\r\n    ? _target\r\n    : contents(\r\n        [_content, _viewport, _padding, _host, _target].find(\r\n          (elm) => elementIsGenerated(elm) === false\r\n        )\r\n      );\r\n  const contentSlot = _content || _viewport;\r\n  const appendElements = () => {\r\n    const removeHostDataAttr = addDataAttrHost(_host, viewportIsTarget ? 'viewport' : 'host');\r\n    const removePaddingClass = addClass(_padding, classNamePadding);\r\n    const removeViewportClass = addClass(_viewport, !viewportIsTarget && classNameViewport);\r\n    const removeContentClass = addClass(_content, classNameContent);\r\n    const removeHtmlClass = viewportIsTargetBody\r\n      ? addClass(parent(targetElement), classNameViewportScrollbarHidden)\r\n      : noop;\r\n\r\n    // only insert host for textarea after target if it was generated\r\n    if (isTextareaHostGenerated) {\r\n      insertAfter(_target, _host);\r\n\r\n      push(destroyFns, () => {\r\n        insertAfter(_host, _target);\r\n        removeElements(_host);\r\n      });\r\n    }\r\n\r\n    appendChildren(contentSlot, targetContents);\r\n    appendChildren(_host, _padding);\r\n    appendChildren(_padding || _host, !viewportIsTarget && _viewport);\r\n    appendChildren(_viewport, _content);\r\n\r\n    push(destroyFns, () => {\r\n      removeHtmlClass();\r\n      removeHostDataAttr();\r\n      removeAttr(_viewport, dataAttributeHostOverflowX);\r\n      removeAttr(_viewport, dataAttributeHostOverflowY);\r\n\r\n      if (elementIsGenerated(_content)) {\r\n        unwrap(_content);\r\n      }\r\n      if (elementIsGenerated(_viewport)) {\r\n        unwrap(_viewport);\r\n      }\r\n      if (elementIsGenerated(_padding)) {\r\n        unwrap(_padding);\r\n      }\r\n      removePaddingClass();\r\n      removeViewportClass();\r\n      removeContentClass();\r\n    });\r\n\r\n    if (_nativeScrollbarsHiding && !viewportIsTarget) {\r\n      push(destroyFns, removeClass.bind(0, _viewport, classNameViewportScrollbarHidden));\r\n    }\r\n    if (_viewportArrange) {\r\n      insertBefore(_viewport, _viewportArrange);\r\n      push(destroyFns, removeElements.bind(0, _viewportArrange));\r\n    }\r\n\r\n    // @ts-ignore\r\n    targetContents = 0;\r\n  };\r\n\r\n  return [evaluatedTargetObj, appendElements, runEachAndClear.bind(0, destroyFns)];\r\n};\r\n","import { style } from 'support';\r\nimport { getEnvironment } from 'environment';\r\nimport type { CreateStructureUpdateSegment } from 'setups/structureSetup/structureSetup.update';\r\n\r\n/**\r\n * Lifecycle with the responsibility to adjust the trinsic behavior of the content element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createTrinsicUpdateSegment: CreateStructureUpdateSegment = (\r\n  structureSetupElements,\r\n  state\r\n) => {\r\n  const { _content } = structureSetupElements;\r\n  const [getState] = state;\r\n\r\n  return (updateHints) => {\r\n    const { _flexboxGlue } = getEnvironment();\r\n    const { _heightIntrinsic } = getState();\r\n    const { _heightIntrinsicChanged } = updateHints;\r\n    const heightIntrinsicChanged = (_content || !_flexboxGlue) && _heightIntrinsicChanged;\r\n\r\n    if (heightIntrinsicChanged) {\r\n      style(_content, {\r\n        height: _heightIntrinsic ? '' : '100%',\r\n      });\r\n    }\r\n\r\n    return {\r\n      _sizeChanged: heightIntrinsicChanged,\r\n      _contentMutation: heightIntrinsicChanged,\r\n    };\r\n  };\r\n};\r\n","import { createCache, topRightBottomLeft, equalTRBL, style, assignDeep } from 'support';\r\nimport { StyleObject } from 'typings';\r\nimport { getEnvironment } from 'environment';\r\nimport type { CreateStructureUpdateSegment } from 'setups/structureSetup/structureSetup.update';\r\n\r\n/**\r\n * Lifecycle with the responsibility to adjust the padding styling of the padding and viewport element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createPaddingUpdateSegment: CreateStructureUpdateSegment = (\r\n  structureSetupElements,\r\n  state\r\n) => {\r\n  const [getState, setState] = state;\r\n  const { _host, _padding, _viewport, _viewportIsTarget: _isSingleElm } = structureSetupElements;\r\n  const [updatePaddingCache, currentPaddingCache] = createCache(\r\n    {\r\n      _equal: equalTRBL,\r\n      _initialValue: topRightBottomLeft(),\r\n    },\r\n    topRightBottomLeft.bind(0, _host, 'padding', '')\r\n  );\r\n\r\n  return (updateHints, checkOption, force) => {\r\n    let [padding, paddingChanged] = currentPaddingCache(force);\r\n    const { _nativeScrollbarsHiding: _nativeScrollbarStyling, _flexboxGlue } = getEnvironment();\r\n    const { _directionIsRTL } = getState();\r\n    const { _sizeChanged, _contentMutation, _directionChanged } = updateHints;\r\n    const [paddingAbsolute, paddingAbsoluteChanged] = checkOption('paddingAbsolute');\r\n    const contentMutation = !_flexboxGlue && _contentMutation;\r\n\r\n    if (_sizeChanged || paddingChanged || contentMutation) {\r\n      [padding, paddingChanged] = updatePaddingCache(force);\r\n    }\r\n\r\n    const paddingStyleChanged =\r\n      !_isSingleElm && (paddingAbsoluteChanged || _directionChanged || paddingChanged);\r\n\r\n    if (paddingStyleChanged) {\r\n      // if there is no padding element and no scrollbar styling, paddingAbsolute isn't supported\r\n      const paddingRelative = !paddingAbsolute || (!_padding && !_nativeScrollbarStyling);\r\n      const paddingHorizontal = padding.r + padding.l;\r\n      const paddingVertical = padding.t + padding.b;\r\n\r\n      const paddingStyle: StyleObject = {\r\n        marginRight: paddingRelative && !_directionIsRTL ? -paddingHorizontal : 0,\r\n        marginBottom: paddingRelative ? -paddingVertical : 0,\r\n        marginLeft: paddingRelative && _directionIsRTL ? -paddingHorizontal : 0,\r\n        top: paddingRelative ? -padding.t : 0,\r\n        right: paddingRelative ? (_directionIsRTL ? -padding.r : 'auto') : 0,\r\n        left: paddingRelative ? (_directionIsRTL ? 'auto' : -padding.l) : 0,\r\n        width: paddingRelative ? `calc(100% + ${paddingHorizontal}px)` : '',\r\n      };\r\n      const viewportStyle: StyleObject = {\r\n        paddingTop: paddingRelative ? padding.t : 0,\r\n        paddingRight: paddingRelative ? padding.r : 0,\r\n        paddingBottom: paddingRelative ? padding.b : 0,\r\n        paddingLeft: paddingRelative ? padding.l : 0,\r\n      };\r\n\r\n      // if there is no padding element apply the style to the viewport element instead\r\n      style(_padding || _viewport, paddingStyle);\r\n      style(_viewport, viewportStyle);\r\n\r\n      setState({\r\n        _padding: padding,\r\n        _paddingAbsolute: !paddingRelative,\r\n        _viewportPaddingStyle: _padding\r\n          ? viewportStyle\r\n          : assignDeep({}, paddingStyle, viewportStyle),\r\n      });\r\n    }\r\n\r\n    return {\r\n      _paddingStyleChanged: paddingStyleChanged,\r\n    };\r\n  };\r\n};\r\n","import {\r\n  createCache,\r\n  attr,\r\n  WH,\r\n  XY,\r\n  style,\r\n  scrollSize,\r\n  fractionalSize,\r\n  equalWH,\r\n  addClass,\r\n  removeClass,\r\n  clientSize,\r\n  equalXY,\r\n  attrClass,\r\n  noop,\r\n} from 'support';\r\nimport { getEnvironment } from 'environment';\r\nimport {\r\n  classNameViewportScrollbarHidden,\r\n  classNameOverflowVisible,\r\n  dataAttributeHost,\r\n  dataAttributeHostOverflowX,\r\n  dataAttributeHostOverflowY,\r\n  dataValueHostScrollbarHidden,\r\n  dataValueHostOverflowVisible,\r\n} from 'classnames';\r\nimport { getPlugins, scrollbarsHidingPluginName } from 'plugins';\r\nimport type {\r\n  ScrollbarsHidingPluginInstance,\r\n  ArrangeViewport,\r\n  UndoArrangeViewport,\r\n} from 'plugins/scrollbarsHidingPlugin';\r\nimport type { StyleObject, OverflowStyle } from 'typings';\r\nimport type { OverflowBehavior } from 'options';\r\nimport type { CreateStructureUpdateSegment } from 'setups/structureSetup/structureSetup.update';\r\n\r\nexport interface ViewportOverflowState {\r\n  _scrollbarsHideOffset: XY<number>;\r\n  _scrollbarsHideOffsetArrange: XY<boolean>;\r\n  _overflowScroll: XY<boolean>;\r\n  _overflowStyle: XY<OverflowStyle>;\r\n}\r\n\r\nexport type GetViewportOverflowState = (\r\n  showNativeOverlaidScrollbars: boolean,\r\n  viewportStyleObj?: StyleObject\r\n) => ViewportOverflowState;\r\n\r\nexport type HideNativeScrollbars = (\r\n  viewportOverflowState: ViewportOverflowState,\r\n  directionIsRTL: boolean,\r\n  viewportArrange: boolean,\r\n  viewportStyleObj: StyleObject\r\n) => void;\r\n\r\nconst { max } = Math;\r\nconst max0 = max.bind(0, 0);\r\nconst strVisible = 'visible';\r\nconst strHidden = 'hidden';\r\nconst overlaidScrollbarsHideOffset = 42;\r\nconst whCacheOptions = {\r\n  _equal: equalWH,\r\n  _initialValue: { w: 0, h: 0 },\r\n};\r\nconst xyCacheOptions = {\r\n  _equal: equalXY,\r\n  _initialValue: { x: strHidden, y: strHidden } as XY<OverflowStyle>,\r\n};\r\n\r\nconst getOverflowAmount = (viewportScrollSize: WH<number>, viewportClientSize: WH<number>) => {\r\n  const tollerance = window.devicePixelRatio % 1 !== 0 ? 1 : 0;\r\n  const amount = {\r\n    w: max0(viewportScrollSize.w - viewportClientSize.w),\r\n    h: max0(viewportScrollSize.h - viewportClientSize.h),\r\n  };\r\n\r\n  return {\r\n    w: amount.w > tollerance ? amount.w : 0,\r\n    h: amount.h > tollerance ? amount.h : 0,\r\n  };\r\n};\r\n\r\nconst conditionalClass = (\r\n  elm: Element | false | null | undefined,\r\n  classNames: string,\r\n  add: boolean\r\n) => (add ? addClass(elm, classNames) : removeClass(elm, classNames));\r\n\r\nconst overflowIsVisible = (overflowBehavior: string) => overflowBehavior.indexOf(strVisible) === 0;\r\n\r\n/**\r\n * Lifecycle with the responsibility to set the correct overflow and scrollbar hiding styles of the viewport element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createOverflowUpdateSegment: CreateStructureUpdateSegment = (\r\n  structureSetupElements,\r\n  state\r\n) => {\r\n  const [getState, setState] = state;\r\n  const {\r\n    _host,\r\n    _padding,\r\n    _viewport,\r\n    _viewportArrange,\r\n    _viewportIsTarget,\r\n    _viewportAddRemoveClass,\r\n    _isBody,\r\n    _windowElm,\r\n  } = structureSetupElements;\r\n  const {\r\n    _nativeScrollbarsSize,\r\n    _flexboxGlue,\r\n    _nativeScrollbarsHiding,\r\n    _nativeScrollbarsOverlaid,\r\n  } = getEnvironment();\r\n  const scrollbarsHidingPlugin = getPlugins()[scrollbarsHidingPluginName] as\r\n    | ScrollbarsHidingPluginInstance\r\n    | undefined;\r\n  const doViewportArrange =\r\n    !_viewportIsTarget &&\r\n    !_nativeScrollbarsHiding &&\r\n    (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n  const viewportIsTargetBody = _isBody && _viewportIsTarget;\r\n\r\n  const [updateSizeFraction, getCurrentSizeFraction] = createCache<WH<number>>(\r\n    whCacheOptions,\r\n    fractionalSize.bind(0, _viewport)\r\n  );\r\n\r\n  const [updateViewportScrollSizeCache, getCurrentViewportScrollSizeCache] = createCache<\r\n    WH<number>\r\n  >(whCacheOptions, scrollSize.bind(0, _viewport));\r\n\r\n  const [updateOverflowAmountCache, getCurrentOverflowAmountCache] =\r\n    createCache<WH<number>>(whCacheOptions);\r\n\r\n  const [updateOverflowEdge, getCurrentOverflowEdgeCache] = createCache<WH<number>>(whCacheOptions);\r\n\r\n  const [updateOverflowStyleCache] = createCache<XY<OverflowStyle>>(xyCacheOptions);\r\n\r\n  /**\r\n   * Applies a fixed height to the viewport so it can't overflow or underflow the host element.\r\n   * @param viewportOverflowState The current overflow state.\r\n   * @param heightIntrinsic Whether the host height is intrinsic or not.\r\n   */\r\n  const fixFlexboxGlue = (\r\n    viewportOverflowState: ViewportOverflowState,\r\n    heightIntrinsic: boolean\r\n  ) => {\r\n    style(_viewport, {\r\n      height: '',\r\n    });\r\n\r\n    if (heightIntrinsic) {\r\n      const { _paddingAbsolute, _padding: padding } = getState();\r\n      const { _overflowScroll, _scrollbarsHideOffset } = viewportOverflowState;\r\n      const fSize = fractionalSize(_host);\r\n      const hostClientSize = clientSize(_host);\r\n\r\n      // padding subtraction is only needed if padding is absolute or if viewport is content-box\r\n      const isContentBox = style(_viewport, 'boxSizing') === 'content-box';\r\n      const paddingVertical = _paddingAbsolute || isContentBox ? padding.b + padding.t : 0;\r\n      const subtractXScrollbar = !(_nativeScrollbarsOverlaid.x && isContentBox);\r\n\r\n      style(_viewport, {\r\n        height:\r\n          hostClientSize.h +\r\n          fSize.h +\r\n          (_overflowScroll.x && subtractXScrollbar ? _scrollbarsHideOffset.x : 0) -\r\n          paddingVertical,\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Gets the current overflow state of the viewport.\r\n   * @param showNativeOverlaidScrollbars Whether native overlaid scrollbars are shown instead of hidden.\r\n   * @param viewportStyleObj The viewport style object where the overflow scroll property can be read of, or undefined if shall be determined.\r\n   * @returns A object which contains informations about the current overflow state.\r\n   */\r\n  const getViewportOverflowState: GetViewportOverflowState = (\r\n    showNativeOverlaidScrollbars,\r\n    viewportStyleObj?\r\n  ) => {\r\n    const arrangeHideOffset =\r\n      !_nativeScrollbarsHiding && !showNativeOverlaidScrollbars ? overlaidScrollbarsHideOffset : 0;\r\n    const getStatePerAxis = (\r\n      styleKey: string,\r\n      isOverlaid: boolean,\r\n      nativeScrollbarSize: number\r\n    ) => {\r\n      const overflowStyle = style(_viewport, styleKey);\r\n      // can't do something like \"viewportStyleObj && viewportStyleObj[styleKey] || overflowStyle\" here!\r\n      const objectPrefferedOverflowStyle = viewportStyleObj\r\n        ? viewportStyleObj[styleKey]\r\n        : overflowStyle;\r\n      const overflowScroll = objectPrefferedOverflowStyle === 'scroll';\r\n      const nonScrollbarStylingHideOffset = isOverlaid ? arrangeHideOffset : nativeScrollbarSize;\r\n      const scrollbarsHideOffset =\r\n        overflowScroll && !_nativeScrollbarsHiding ? nonScrollbarStylingHideOffset : 0;\r\n      const scrollbarsHideOffsetArrange = isOverlaid && !!arrangeHideOffset;\r\n\r\n      return [overflowStyle, overflowScroll, scrollbarsHideOffset, scrollbarsHideOffsetArrange] as [\r\n        overflowStyle: OverflowStyle,\r\n        overflowScroll: boolean,\r\n        scrollbarsHideOffset: number,\r\n        scrollbarsHideOffsetArrange: boolean\r\n      ];\r\n    };\r\n\r\n    const [xOverflowStyle, xOverflowScroll, xScrollbarsHideOffset, xScrollbarsHideOffsetArrange] =\r\n      getStatePerAxis('overflowX', _nativeScrollbarsOverlaid.x, _nativeScrollbarsSize.x);\r\n    const [yOverflowStyle, yOverflowScroll, yScrollbarsHideOffset, yScrollbarsHideOffsetArrange] =\r\n      getStatePerAxis('overflowY', _nativeScrollbarsOverlaid.y, _nativeScrollbarsSize.y);\r\n\r\n    return {\r\n      _overflowStyle: {\r\n        x: xOverflowStyle,\r\n        y: yOverflowStyle,\r\n      },\r\n      _overflowScroll: {\r\n        x: xOverflowScroll,\r\n        y: yOverflowScroll,\r\n      },\r\n      _scrollbarsHideOffset: {\r\n        x: xScrollbarsHideOffset,\r\n        y: yScrollbarsHideOffset,\r\n      },\r\n      _scrollbarsHideOffsetArrange: {\r\n        x: xScrollbarsHideOffsetArrange,\r\n        y: yScrollbarsHideOffsetArrange,\r\n      },\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Sets the overflow property of the viewport and calculates the a overflow state according to the new parameters.\r\n   * @param showNativeOverlaidScrollbars Whether to show natively overlaid scrollbars.\r\n   * @param overflowAmount The overflow amount.\r\n   * @param overflow The overflow behavior according to the options.\r\n   * @param viewportStyleObj The viewport style object to which the overflow style shall be applied.\r\n   * @returns A object which represents the newly set overflow state.\r\n   */\r\n  const setViewportOverflowState = (\r\n    showNativeOverlaidScrollbars: boolean,\r\n    hasOverflow: XY<boolean>,\r\n    overflowOption: XY<OverflowBehavior>,\r\n    viewportStyleObj: StyleObject\r\n  ): ViewportOverflowState => {\r\n    const setAxisOverflowStyle = (behavior: OverflowBehavior, hasOverflowAxis: boolean) => {\r\n      const overflowVisible = overflowIsVisible(behavior);\r\n      const overflowVisibleBehavior =\r\n        (hasOverflowAxis && overflowVisible && behavior.replace(`${strVisible}-`, '')) || '';\r\n      return [\r\n        hasOverflowAxis && !overflowVisible ? behavior : '',\r\n        overflowIsVisible(overflowVisibleBehavior) ? 'hidden' : overflowVisibleBehavior,\r\n      ];\r\n    };\r\n\r\n    const [overflowX, visibleBehaviorX] = setAxisOverflowStyle(overflowOption.x, hasOverflow.x);\r\n    const [overflowY, visibleBehaviorY] = setAxisOverflowStyle(overflowOption.y, hasOverflow.y);\r\n\r\n    viewportStyleObj.overflowX = visibleBehaviorX && overflowY ? visibleBehaviorX : overflowX;\r\n    viewportStyleObj.overflowY = visibleBehaviorY && overflowX ? visibleBehaviorY : overflowY;\r\n\r\n    return getViewportOverflowState(showNativeOverlaidScrollbars, viewportStyleObj);\r\n  };\r\n\r\n  /**\r\n   * Hides the native scrollbars according to the passed parameters.\r\n   * @param viewportOverflowState The viewport overflow state.\r\n   * @param directionIsRTL Whether the direction is RTL or not.\r\n   * @param viewportArrange Whether special styles related to the viewport arrange strategy shall be applied.\r\n   * @param viewportStyleObj The viewport style object to which the needed styles shall be applied.\r\n   */\r\n  const hideNativeScrollbars: HideNativeScrollbars = (\r\n    viewportOverflowState,\r\n    directionIsRTL,\r\n    viewportArrange,\r\n    viewportStyleObj\r\n  ) => {\r\n    const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } = viewportOverflowState;\r\n    const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n    const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\r\n    const { _viewportPaddingStyle: viewportPaddingStyle } = getState();\r\n    const horizontalMarginKey: keyof StyleObject = directionIsRTL ? 'marginLeft' : 'marginRight';\r\n    const viewportHorizontalPaddingKey: keyof StyleObject = directionIsRTL\r\n      ? 'paddingLeft'\r\n      : 'paddingRight';\r\n    const horizontalMarginValue = viewportPaddingStyle[horizontalMarginKey] as number;\r\n    const verticalMarginValue = viewportPaddingStyle.marginBottom as number;\r\n    const horizontalPaddingValue = viewportPaddingStyle[viewportHorizontalPaddingKey] as number;\r\n    const verticalPaddingValue = viewportPaddingStyle.paddingBottom as number;\r\n\r\n    // horizontal\r\n    viewportStyleObj.width = `calc(100% + ${hideOffsetY + horizontalMarginValue * -1}px)`;\r\n    viewportStyleObj[horizontalMarginKey] = -hideOffsetY + horizontalMarginValue;\r\n\r\n    // vertical\r\n    viewportStyleObj.marginBottom = -hideOffsetX + verticalMarginValue;\r\n\r\n    // viewport arrange additional styles\r\n    if (viewportArrange) {\r\n      viewportStyleObj[viewportHorizontalPaddingKey] =\r\n        horizontalPaddingValue + (arrangeY ? hideOffsetY : 0);\r\n      viewportStyleObj.paddingBottom = verticalPaddingValue + (arrangeX ? hideOffsetX : 0);\r\n    }\r\n  };\r\n\r\n  const [arrangeViewport, undoViewportArrange] = scrollbarsHidingPlugin\r\n    ? scrollbarsHidingPlugin._overflowUpdateSegment(\r\n        doViewportArrange,\r\n        _flexboxGlue,\r\n        _viewport,\r\n        _viewportArrange,\r\n        getState,\r\n        getViewportOverflowState,\r\n        hideNativeScrollbars\r\n      )\r\n    : [(() => doViewportArrange) as ArrangeViewport, (() => [noop]) as UndoArrangeViewport];\r\n\r\n  return (updateHints, checkOption, force) => {\r\n    const {\r\n      _sizeChanged,\r\n      _hostMutation,\r\n      _contentMutation,\r\n      _paddingStyleChanged,\r\n      _heightIntrinsicChanged,\r\n      _directionChanged,\r\n    } = updateHints;\r\n    const { _heightIntrinsic, _directionIsRTL } = getState();\r\n    const [showNativeOverlaidScrollbarsOption, showNativeOverlaidScrollbarsChanged] =\r\n      checkOption<boolean>('showNativeOverlaidScrollbars');\r\n    const [overflow, overflowChanged] = checkOption<XY<OverflowBehavior>>('overflow');\r\n\r\n    const showNativeOverlaidScrollbars =\r\n      showNativeOverlaidScrollbarsOption &&\r\n      _nativeScrollbarsOverlaid.x &&\r\n      _nativeScrollbarsOverlaid.y;\r\n    const adjustFlexboxGlue =\r\n      !_viewportIsTarget &&\r\n      !_flexboxGlue &&\r\n      (_sizeChanged ||\r\n        _contentMutation ||\r\n        _hostMutation ||\r\n        showNativeOverlaidScrollbarsChanged ||\r\n        _heightIntrinsicChanged);\r\n    const overflowXVisible = overflowIsVisible(overflow.x);\r\n    const overflowYVisible = overflowIsVisible(overflow.y);\r\n    const overflowVisible = overflowXVisible || overflowYVisible;\r\n\r\n    let sizeFractionCache = getCurrentSizeFraction(force);\r\n    let viewportScrollSizeCache = getCurrentViewportScrollSizeCache(force);\r\n    let overflowAmuntCache = getCurrentOverflowAmountCache(force);\r\n    let overflowEdgeCache = getCurrentOverflowEdgeCache(force);\r\n\r\n    let preMeasureViewportOverflowState: ViewportOverflowState | undefined;\r\n\r\n    if (showNativeOverlaidScrollbarsChanged && _nativeScrollbarsHiding) {\r\n      _viewportAddRemoveClass(\r\n        classNameViewportScrollbarHidden,\r\n        dataValueHostScrollbarHidden,\r\n        !showNativeOverlaidScrollbars\r\n      );\r\n    }\r\n\r\n    if (adjustFlexboxGlue) {\r\n      preMeasureViewportOverflowState = getViewportOverflowState(showNativeOverlaidScrollbars);\r\n      fixFlexboxGlue(preMeasureViewportOverflowState, _heightIntrinsic);\r\n    }\r\n\r\n    if (\r\n      _sizeChanged ||\r\n      _paddingStyleChanged ||\r\n      _contentMutation ||\r\n      _directionChanged ||\r\n      showNativeOverlaidScrollbarsChanged\r\n    ) {\r\n      if (overflowVisible) {\r\n        _viewportAddRemoveClass(classNameOverflowVisible, dataValueHostOverflowVisible, false);\r\n      }\r\n\r\n      const [redoViewportArrange, undoViewportArrangeOverflowState] = undoViewportArrange(\r\n        showNativeOverlaidScrollbars,\r\n        _directionIsRTL,\r\n        preMeasureViewportOverflowState\r\n      );\r\n      const [sizeFraction, sizeFractionChanged] = (sizeFractionCache = updateSizeFraction(force));\r\n      const [viewportScrollSize, viewportScrollSizeChanged] = (viewportScrollSizeCache =\r\n        updateViewportScrollSizeCache(force));\r\n      const viewportclientSize = clientSize(_viewport);\r\n      let arrangedViewportScrollSize = viewportScrollSize;\r\n      let arrangedViewportClientSize = viewportclientSize;\r\n\r\n      redoViewportArrange();\r\n\r\n      // if re measure is required (only required if content arrange strategy is used)\r\n      if (\r\n        (viewportScrollSizeChanged || sizeFractionChanged || showNativeOverlaidScrollbarsChanged) &&\r\n        undoViewportArrangeOverflowState &&\r\n        !showNativeOverlaidScrollbars &&\r\n        arrangeViewport(\r\n          undoViewportArrangeOverflowState,\r\n          viewportScrollSize,\r\n          sizeFraction,\r\n          _directionIsRTL\r\n        )\r\n      ) {\r\n        arrangedViewportClientSize = clientSize(_viewport);\r\n        arrangedViewportScrollSize = scrollSize(_viewport);\r\n      }\r\n\r\n      const overflowAmountScrollSize = {\r\n        w: max0(max(viewportScrollSize.w, arrangedViewportScrollSize.w) + sizeFraction.w),\r\n        h: max0(max(viewportScrollSize.h, arrangedViewportScrollSize.h) + sizeFraction.h),\r\n      };\r\n      const overflowAmountClientSize = {\r\n        w: max0(\r\n          viewportIsTargetBody\r\n            ? _windowElm.innerWidth\r\n            : arrangedViewportClientSize.w +\r\n                max0(viewportclientSize.w - viewportScrollSize.w) +\r\n                sizeFraction.w\r\n        ),\r\n        h: max0(\r\n          viewportIsTargetBody\r\n            ? _windowElm.innerHeight\r\n            : arrangedViewportClientSize.h +\r\n                max0(viewportclientSize.h - viewportScrollSize.h) +\r\n                sizeFraction.h\r\n        ),\r\n      };\r\n\r\n      overflowEdgeCache = updateOverflowEdge(overflowAmountClientSize);\r\n      overflowAmuntCache = updateOverflowAmountCache(\r\n        getOverflowAmount(overflowAmountScrollSize, overflowAmountClientSize),\r\n        force\r\n      );\r\n    }\r\n\r\n    const [overflowEdge, overflowEdgeChanged] = overflowEdgeCache;\r\n    const [overflowAmount, overflowAmountChanged] = overflowAmuntCache;\r\n    const [viewportScrollSize, viewportScrollSizeChanged] = viewportScrollSizeCache;\r\n    const [sizeFraction, sizeFractionChanged] = sizeFractionCache;\r\n    const hasOverflow = {\r\n      x: overflowAmount.w > 0,\r\n      y: overflowAmount.h > 0,\r\n    };\r\n    const removeClipping =\r\n      (overflowXVisible && overflowYVisible && (hasOverflow.x || hasOverflow.y)) ||\r\n      (overflowXVisible && hasOverflow.x && !hasOverflow.y) ||\r\n      (overflowYVisible && hasOverflow.y && !hasOverflow.x);\r\n\r\n    if (\r\n      _paddingStyleChanged ||\r\n      _directionChanged ||\r\n      sizeFractionChanged ||\r\n      viewportScrollSizeChanged ||\r\n      overflowEdgeChanged ||\r\n      overflowAmountChanged ||\r\n      overflowChanged ||\r\n      showNativeOverlaidScrollbarsChanged ||\r\n      adjustFlexboxGlue\r\n    ) {\r\n      const viewportStyle: StyleObject = {\r\n        marginRight: 0,\r\n        marginBottom: 0,\r\n        marginLeft: 0,\r\n        width: '',\r\n        overflowY: '',\r\n        overflowX: '',\r\n      };\r\n      const viewportOverflowState = setViewportOverflowState(\r\n        showNativeOverlaidScrollbars,\r\n        hasOverflow,\r\n        overflow,\r\n        viewportStyle\r\n      );\r\n      const viewportArranged = arrangeViewport(\r\n        viewportOverflowState,\r\n        viewportScrollSize,\r\n        sizeFraction,\r\n        _directionIsRTL\r\n      );\r\n\r\n      if (!_viewportIsTarget) {\r\n        hideNativeScrollbars(\r\n          viewportOverflowState,\r\n          _directionIsRTL,\r\n          viewportArranged,\r\n          viewportStyle\r\n        );\r\n      }\r\n\r\n      if (adjustFlexboxGlue) {\r\n        fixFlexboxGlue(viewportOverflowState, _heightIntrinsic);\r\n      }\r\n\r\n      if (_viewportIsTarget) {\r\n        attr(_host, dataAttributeHostOverflowX, viewportStyle.overflowX as string);\r\n        attr(_host, dataAttributeHostOverflowY, viewportStyle.overflowY as string);\r\n      } else {\r\n        style(_viewport, viewportStyle);\r\n      }\r\n    }\r\n\r\n    attrClass(_host, dataAttributeHost, dataValueHostOverflowVisible, removeClipping);\r\n    conditionalClass(_padding, classNameOverflowVisible, removeClipping);\r\n    !_viewportIsTarget && conditionalClass(_viewport, classNameOverflowVisible, overflowVisible);\r\n\r\n    const [overflowStyle, overflowStyleChanged] = updateOverflowStyleCache(\r\n      getViewportOverflowState(showNativeOverlaidScrollbars)._overflowStyle\r\n    );\r\n\r\n    setState({\r\n      _overflowStyle: overflowStyle,\r\n      _overflowEdge: {\r\n        x: overflowEdge.w,\r\n        y: overflowEdge.h,\r\n      },\r\n      _overflowAmount: {\r\n        x: overflowAmount.w,\r\n        y: overflowAmount.h,\r\n      },\r\n      _hasOverflow: hasOverflow,\r\n    });\r\n\r\n    return {\r\n      _overflowStyleChanged: overflowStyleChanged,\r\n      _overflowEdgeChanged: overflowEdgeChanged,\r\n      _overflowAmountChanged: overflowAmountChanged,\r\n    };\r\n  };\r\n};\r\n","import { each, scrollLeft, scrollTop, assignDeep, keys } from 'support';\r\nimport { getEnvironment } from 'environment';\r\nimport { dataValueHostUpdating } from 'classnames';\r\nimport {\r\n  createTrinsicUpdateSegment,\r\n  createPaddingUpdateSegment,\r\n  createOverflowUpdateSegment,\r\n} from 'setups/structureSetup/updateSegments';\r\nimport type { SetupState, SetupUpdateSegment, SetupUpdateCheckOption } from 'setups';\r\nimport type { StructureSetupState } from 'setups/structureSetup';\r\nimport type { StructureSetupElementsObj } from 'setups/structureSetup/structureSetup.elements';\r\n\r\nexport type CreateStructureUpdateSegment = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  state: SetupState<StructureSetupState>\r\n) => StructureSetupUpdateSegment;\r\n\r\nexport type StructureSetupUpdateSegment = SetupUpdateSegment<StructureSetupUpdateHints>;\r\n\r\nexport type StructureSetupUpdate = (\r\n  checkOption: SetupUpdateCheckOption,\r\n  updateHints: Partial<StructureSetupUpdateHints>,\r\n  force?: boolean\r\n) => StructureSetupUpdateHints;\r\n\r\nexport interface StructureSetupUpdateHints {\r\n  _sizeChanged: boolean;\r\n  _directionChanged: boolean;\r\n  _heightIntrinsicChanged: boolean;\r\n  _overflowEdgeChanged: boolean;\r\n  _overflowAmountChanged: boolean;\r\n  _overflowStyleChanged: boolean;\r\n  _paddingStyleChanged: boolean;\r\n  _hostMutation: boolean;\r\n  _contentMutation: boolean;\r\n}\r\n\r\nconst prepareUpdateHints = <T extends StructureSetupUpdateHints>(\r\n  leading: Required<T>,\r\n  adaptive?: Partial<T>,\r\n  force?: boolean\r\n): Required<T> => {\r\n  const result = {};\r\n  const finalAdaptive = adaptive || {};\r\n  const objKeys = keys(leading).concat(keys(finalAdaptive));\r\n\r\n  each(objKeys, (key) => {\r\n    const leadingValue = leading[key];\r\n    const adaptiveValue = finalAdaptive[key];\r\n    result[key] = !!(force || leadingValue || adaptiveValue);\r\n  });\r\n\r\n  return result as Required<T>;\r\n};\r\n\r\nexport const createStructureSetupUpdate = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  state: SetupState<StructureSetupState>\r\n): StructureSetupUpdate => {\r\n  const { _viewport, _viewportAddRemoveClass } = structureSetupElements;\r\n  const { _nativeScrollbarsHiding, _nativeScrollbarsOverlaid, _flexboxGlue } = getEnvironment();\r\n  const doViewportArrange =\r\n    !_nativeScrollbarsHiding && (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n\r\n  const updateSegments: StructureSetupUpdateSegment[] = [\r\n    createTrinsicUpdateSegment(structureSetupElements, state),\r\n    createPaddingUpdateSegment(structureSetupElements, state),\r\n    createOverflowUpdateSegment(structureSetupElements, state),\r\n  ];\r\n\r\n  return (\r\n    checkOption: SetupUpdateCheckOption,\r\n    updateHints: Partial<StructureSetupUpdateHints>,\r\n    force?: boolean\r\n  ) => {\r\n    const initialUpdateHints = prepareUpdateHints(\r\n      assignDeep(\r\n        {\r\n          _sizeChanged: false,\r\n          _paddingStyleChanged: false,\r\n          _directionChanged: false,\r\n          _heightIntrinsicChanged: false,\r\n          _overflowEdgeChanged: false,\r\n          _overflowAmountChanged: false,\r\n          _overflowStyleChanged: false,\r\n          _hostMutation: false,\r\n          _contentMutation: false,\r\n        },\r\n        updateHints\r\n      ),\r\n      {},\r\n      force\r\n    );\r\n    const adjustScrollOffset = doViewportArrange || !_flexboxGlue;\r\n    const scrollOffsetX = adjustScrollOffset && scrollLeft(_viewport);\r\n    const scrollOffsetY = adjustScrollOffset && scrollTop(_viewport);\r\n    _viewportAddRemoveClass('', dataValueHostUpdating, true);\r\n\r\n    let adaptivedUpdateHints: Required<StructureSetupUpdateHints> = initialUpdateHints;\r\n    each(updateSegments, (updateSegment) => {\r\n      adaptivedUpdateHints = prepareUpdateHints<StructureSetupUpdateHints>(\r\n        adaptivedUpdateHints,\r\n        updateSegment(adaptivedUpdateHints, checkOption, !!force) || {},\r\n        force\r\n      );\r\n    });\r\n\r\n    scrollLeft(_viewport, scrollOffsetX);\r\n    scrollTop(_viewport, scrollOffsetY);\r\n    _viewportAddRemoveClass('', dataValueHostUpdating);\r\n\r\n    return adaptivedUpdateHints;\r\n  };\r\n};\r\n","import {\r\n  CacheValues,\r\n  createCache,\r\n  createDOM,\r\n  scrollLeft,\r\n  scrollTop,\r\n  runEachAndClear,\r\n  removeElements,\r\n  on,\r\n  addClass,\r\n  push,\r\n  ResizeObserverConstructor,\r\n  isArray,\r\n  isBoolean,\r\n  removeClass,\r\n  isObject,\r\n  stopPropagation,\r\n  appendChildren,\r\n  directionIsRTL,\r\n} from 'support';\r\nimport { getEnvironment } from 'environment';\r\nimport {\r\n  classNameSizeObserver,\r\n  classNameSizeObserverAppear,\r\n  classNameSizeObserverListener,\r\n} from 'classnames';\r\nimport { getPlugins, SizeObserverPluginInstance, sizeObserverPluginName } from 'plugins';\r\n\r\nexport interface SizeObserverOptions {\r\n  _direction?: boolean;\r\n  _appear?: boolean;\r\n}\r\n\r\nexport interface SizeObserverCallbackParams {\r\n  _sizeChanged: boolean;\r\n  _directionIsRTLCache?: CacheValues<boolean>;\r\n  _appear?: boolean;\r\n}\r\n\r\nexport type SizeObserver = [destroy: () => void, append: () => void];\r\n\r\nconst scrollAmount = 3333333;\r\nconst domRectHasDimensions = (rect?: DOMRectReadOnly) => rect && (rect.height || rect.width);\r\n\r\n/**\r\n * Creates a size observer which observes any size, padding, border, margin and box-sizing changes of the target element. Depending on the options also direction and appear can be observed.\r\n * @param target The target element which shall be observed.\r\n * @param onSizeChangedCallback The callback which gets called after a size change was detected.\r\n * @param options The options for size detection, whether to observe also direction and appear.\r\n * @returns A object which represents the instance of the size observer.\r\n */\r\nexport const createSizeObserver = (\r\n  target: HTMLElement,\r\n  onSizeChangedCallback: (params: SizeObserverCallbackParams) => any,\r\n  options?: SizeObserverOptions\r\n): SizeObserver => {\r\n  const { _direction: observeDirectionChange = false, _appear: observeAppearChange = false } =\r\n    options || {};\r\n  const sizeObserverPlugin = getPlugins()[sizeObserverPluginName] as\r\n    | SizeObserverPluginInstance\r\n    | undefined;\r\n  const { _rtlScrollBehavior: rtlScrollBehavior } = getEnvironment();\r\n  const baseElements = createDOM(\r\n    `<div class=\"${classNameSizeObserver}\"><div class=\"${classNameSizeObserverListener}\"></div></div>`\r\n  );\r\n  const sizeObserver = baseElements[0] as HTMLElement;\r\n  const listenerElement = sizeObserver.firstChild as HTMLElement;\r\n  const getIsDirectionRTL = directionIsRTL.bind(0, target);\r\n  const [updateResizeObserverContentRectCache] = createCache<DOMRectReadOnly | undefined>({\r\n    _initialValue: undefined,\r\n    _alwaysUpdateValues: true,\r\n    _equal: (currVal, newVal) =>\r\n      !(\r\n        !currVal || // if no initial value\r\n        // if from display: none to display: block\r\n        (!domRectHasDimensions(currVal) && domRectHasDimensions(newVal))\r\n      ),\r\n  });\r\n  const onSizeChangedCallbackProxy = (\r\n    sizeChangedContext?: CacheValues<boolean> | ResizeObserverEntry[] | Event | boolean\r\n  ) => {\r\n    const isResizeObserverCall =\r\n      isArray(sizeChangedContext) &&\r\n      sizeChangedContext.length > 0 &&\r\n      isObject(sizeChangedContext[0]);\r\n\r\n    const hasDirectionCache =\r\n      !isResizeObserverCall && isBoolean((sizeChangedContext as CacheValues<boolean>)[0]);\r\n\r\n    let skip = false;\r\n    let appear: boolean | number | undefined = false;\r\n    let doDirectionScroll = true; // always true if sizeChangedContext is Event (appear callback or RO. Polyfill)\r\n\r\n    // if triggered from RO.\r\n    if (isResizeObserverCall) {\r\n      const [currRContentRect, , prevContentRect] = updateResizeObserverContentRectCache(\r\n        (sizeChangedContext as ResizeObserverEntry[]).pop()!.contentRect\r\n      );\r\n      const hasDimensions = domRectHasDimensions(currRContentRect);\r\n      const hadDimensions = domRectHasDimensions(prevContentRect);\r\n      skip = !prevContentRect || !hasDimensions; // skip on initial RO. call or if display is none\r\n      appear = !hadDimensions && hasDimensions;\r\n\r\n      doDirectionScroll = !skip; // direction scroll when not skipping\r\n    }\r\n    // else if its triggered with DirectionCache\r\n    else if (hasDirectionCache) {\r\n      [, doDirectionScroll] = sizeChangedContext as CacheValues<boolean>; // direction scroll when DirectionCache changed, false otherwise\r\n    }\r\n    // else if it triggered with appear from polyfill\r\n    else {\r\n      appear = sizeChangedContext === true;\r\n    }\r\n\r\n    if (observeDirectionChange && doDirectionScroll) {\r\n      const rtl = hasDirectionCache\r\n        ? (sizeChangedContext as CacheValues<boolean>)[0]\r\n        : directionIsRTL(sizeObserver);\r\n      scrollLeft(\r\n        sizeObserver,\r\n        rtl\r\n          ? rtlScrollBehavior.n\r\n            ? -scrollAmount\r\n            : rtlScrollBehavior.i\r\n            ? 0\r\n            : scrollAmount\r\n          : scrollAmount\r\n      );\r\n      scrollTop(sizeObserver, scrollAmount);\r\n    }\r\n\r\n    if (!skip) {\r\n      onSizeChangedCallback({\r\n        _sizeChanged: !hasDirectionCache,\r\n        _directionIsRTLCache: hasDirectionCache\r\n          ? (sizeChangedContext as CacheValues<boolean>)\r\n          : undefined,\r\n        _appear: !!appear,\r\n      });\r\n    }\r\n  };\r\n  const offListeners: (() => void)[] = [];\r\n  let appearCallback: ((...args: any) => any) | false = observeAppearChange\r\n    ? onSizeChangedCallbackProxy\r\n    : false;\r\n\r\n  return [\r\n    () => {\r\n      runEachAndClear(offListeners);\r\n      removeElements(sizeObserver);\r\n    },\r\n    () => {\r\n      if (ResizeObserverConstructor) {\r\n        const resizeObserverInstance = new ResizeObserverConstructor(onSizeChangedCallbackProxy);\r\n        resizeObserverInstance.observe(listenerElement);\r\n        push(offListeners, () => {\r\n          resizeObserverInstance.disconnect();\r\n        });\r\n      } else if (sizeObserverPlugin) {\r\n        const [pluginAppearCallback, pluginOffListeners] = sizeObserverPlugin._(\r\n          listenerElement,\r\n          onSizeChangedCallbackProxy,\r\n          observeAppearChange\r\n        );\r\n        appearCallback = pluginAppearCallback;\r\n        push(offListeners, pluginOffListeners);\r\n      }\r\n\r\n      if (observeDirectionChange) {\r\n        const [updateDirectionIsRTLCache] = createCache(\r\n          {\r\n            _initialValue: !getIsDirectionRTL(), // invert current value to trigger initial change\r\n          },\r\n          getIsDirectionRTL\r\n        );\r\n\r\n        push(\r\n          offListeners,\r\n          on(sizeObserver, 'scroll', (event: Event) => {\r\n            const directionIsRTLCacheValues = updateDirectionIsRTLCache();\r\n            const [directionIsRTLCache, directionIsRTLCacheChanged] = directionIsRTLCacheValues;\r\n\r\n            if (directionIsRTLCacheChanged) {\r\n              removeClass(listenerElement, 'ltr rtl');\r\n              if (directionIsRTLCache) {\r\n                addClass(listenerElement, 'rtl');\r\n              } else {\r\n                addClass(listenerElement, 'ltr');\r\n              }\r\n              onSizeChangedCallbackProxy(directionIsRTLCacheValues);\r\n            }\r\n\r\n            stopPropagation(event);\r\n          })\r\n        );\r\n      }\r\n\r\n      // appearCallback is always needed on scroll-observer strategy to reset it\r\n      if (appearCallback) {\r\n        addClass(sizeObserver, classNameSizeObserverAppear);\r\n        push(\r\n          offListeners,\r\n          on(sizeObserver, 'animationstart', appearCallback, {\r\n            // Fire only once for \"CSS is ready\" event if ResizeObserver strategy is used\r\n            _once: !!ResizeObserverConstructor,\r\n          })\r\n        );\r\n      }\r\n\r\n      appendChildren(target, sizeObserver);\r\n    },\r\n  ];\r\n};\r\n","import {\r\n  WH,\r\n  CacheValues,\r\n  createDiv,\r\n  offsetSize,\r\n  runEachAndClear,\r\n  removeElements,\r\n  createCache,\r\n  push,\r\n  IntersectionObserverConstructor,\r\n  appendChildren,\r\n} from 'support';\r\nimport { createSizeObserver } from 'observers/sizeObserver';\r\nimport { classNameTrinsicObserver } from 'classnames';\r\n\r\nexport type TrinsicObserverCallback = (heightIntrinsic: CacheValues<boolean>) => any;\r\nexport type TrinsicObserver = [\r\n  destroy: () => void,\r\n  append: () => void,\r\n  update: () => void | Parameters<TrinsicObserverCallback>\r\n];\r\n\r\nconst isHeightIntrinsic = (ioEntryOrSize: IntersectionObserverEntry | WH<number>): boolean =>\r\n  (ioEntryOrSize as WH<number>).h === 0 ||\r\n  (ioEntryOrSize as IntersectionObserverEntry).isIntersecting ||\r\n  (ioEntryOrSize as IntersectionObserverEntry).intersectionRatio > 0;\r\n\r\n/**\r\n * Creates a trinsic observer which observes changes to intrinsic or extrinsic sizing for the height of the target element.\r\n * @param target The element which shall be observed.\r\n * @param onTrinsicChangedCallback The callback which gets called after a change was detected.\r\n * @returns A object which represents the instance of the trinsic observer.\r\n */\r\nexport const createTrinsicObserver = (\r\n  target: HTMLElement,\r\n  onTrinsicChangedCallback: TrinsicObserverCallback\r\n): TrinsicObserver => {\r\n  let intersectionObserverInstance: undefined | IntersectionObserver;\r\n  const trinsicObserver = createDiv(classNameTrinsicObserver);\r\n  const offListeners: (() => void)[] = [];\r\n  const [updateHeightIntrinsicCache] = createCache({\r\n    _initialValue: false,\r\n  });\r\n  const triggerOnTrinsicChangedCallback = (\r\n    updateValue?: IntersectionObserverEntry | WH<number>,\r\n    fromRecords?: true\r\n  ): void | Parameters<TrinsicObserverCallback> => {\r\n    if (updateValue) {\r\n      const heightIntrinsic = updateHeightIntrinsicCache(isHeightIntrinsic(updateValue));\r\n      const [, heightIntrinsicChanged] = heightIntrinsic;\r\n\r\n      if (heightIntrinsicChanged) {\r\n        !fromRecords && onTrinsicChangedCallback(heightIntrinsic);\r\n        return [heightIntrinsic];\r\n      }\r\n    }\r\n  };\r\n  const intersectionObserverCallback = (\r\n    entries: IntersectionObserverEntry[],\r\n    fromRecords?: true\r\n  ) => {\r\n    if (entries && entries.length > 0) {\r\n      return triggerOnTrinsicChangedCallback(entries.pop(), fromRecords);\r\n    }\r\n  };\r\n\r\n  return [\r\n    () => {\r\n      runEachAndClear(offListeners);\r\n      removeElements(trinsicObserver);\r\n    },\r\n    () => {\r\n      if (IntersectionObserverConstructor) {\r\n        intersectionObserverInstance = new IntersectionObserverConstructor(\r\n          (entries) => intersectionObserverCallback(entries),\r\n          { root: target }\r\n        );\r\n        intersectionObserverInstance.observe(trinsicObserver);\r\n        push(offListeners, () => {\r\n          intersectionObserverInstance!.disconnect();\r\n        });\r\n      } else {\r\n        const onSizeChanged = () => {\r\n          const newSize = offsetSize(trinsicObserver);\r\n          triggerOnTrinsicChangedCallback(newSize);\r\n        };\r\n        const [destroySizeObserver, appendSizeObserver] = createSizeObserver(\r\n          trinsicObserver,\r\n          onSizeChanged\r\n        );\r\n        push(offListeners, destroySizeObserver);\r\n        appendSizeObserver();\r\n        onSizeChanged();\r\n      }\r\n\r\n      appendChildren(target, trinsicObserver);\r\n    },\r\n    () => {\r\n      if (intersectionObserverInstance) {\r\n        return intersectionObserverCallback(intersectionObserverInstance.takeRecords(), true);\r\n      }\r\n    },\r\n  ];\r\n};\r\n","import {\r\n  each,\r\n  noop,\r\n  debounce,\r\n  indexOf,\r\n  isString,\r\n  MutationObserverConstructor,\r\n  isEmptyArray,\r\n  on,\r\n  attr,\r\n  is,\r\n  find,\r\n  push,\r\n} from 'support';\r\n\r\ntype DOMContentObserverCallback = (contentChangedTroughEvent: boolean) => any;\r\n\r\ntype DOMTargetObserverCallback = (targetChangedAttrs: string[], targetStyleChanged: boolean) => any;\r\n\r\ninterface DOMObserverOptionsBase {\r\n  _attributes?: string[];\r\n  _styleChangingAttributes?: string[];\r\n  /**\r\n   * A function which can ignore a changed attribute if it returns true.\r\n   * for DOMTargetObserver this applies to the changes to the observed target\r\n   * for DOMContentObserver this applies to changes to nested targets -> nested targets are elements which match the \"_nestedTargetSelector\" selector\r\n   */\r\n  _ignoreTargetChange?: DOMObserverIgnoreTargetChange;\r\n}\r\n\r\ninterface DOMContentObserverOptions extends DOMObserverOptionsBase {\r\n  _eventContentChange?: DOMObserverEventContentChange; // [selector, eventname(s) | function returning eventname(s)] -> eventnames divided by whitespaces\r\n  _nestedTargetSelector?: string;\r\n  _ignoreContentChange?: DOMObserverIgnoreContentChange; // function which will prevent marking certain dom changes as content change if it returns true\r\n}\r\n\r\ntype DOMTargetObserverOptions = DOMObserverOptionsBase;\r\n\r\ntype ContentChangeArrayItem = [selector?: string, eventNames?: string] | null | undefined;\r\n\r\nexport type DOMObserverEventContentChange =\r\n  | Array<ContentChangeArrayItem>\r\n  | false\r\n  | null\r\n  | undefined;\r\n\r\nexport type DOMObserverIgnoreContentChange = (\r\n  mutation: MutationRecord,\r\n  isNestedTarget: boolean,\r\n  domObserverTarget: HTMLElement,\r\n  domObserverOptions?: DOMContentObserverOptions\r\n) => boolean;\r\n\r\nexport type DOMObserverIgnoreTargetChange = (\r\n  target: Node,\r\n  attributeName: string,\r\n  oldAttributeValue: string | null,\r\n  newAttributeValue: string | null\r\n) => boolean;\r\n\r\nexport type DOMObserverCallback<ContentObserver extends boolean> = ContentObserver extends true\r\n  ? DOMContentObserverCallback\r\n  : DOMTargetObserverCallback;\r\n\r\nexport type DOMObserverOptions<ContentObserver extends boolean> = ContentObserver extends true\r\n  ? DOMContentObserverOptions\r\n  : DOMTargetObserverOptions;\r\n\r\nexport type DOMObserver<ContentObserver extends boolean> = [\r\n  destroy: () => void,\r\n  update: () => void | false | Parameters<DOMObserverCallback<ContentObserver>>\r\n];\r\n\r\ntype EventContentChangeUpdateElement = (getElements?: (selector: string) => Node[]) => void;\r\ntype EventContentChange = [destroy: () => void, updateElements: EventContentChangeUpdateElement];\r\n\r\n/**\r\n * Creates a set of helper functions to observe events of elements inside the target element.\r\n * @param target The target element of which the children elements shall be observed. (not only direct children but also nested ones)\r\n * @param eventContentChange The event content change array. (array of tuples: selector and eventname(s))\r\n * @param callback Callback which is called if one of the elements emits the corresponding event.\r\n * @returns A object which contains a set of helper functions to destroy and update the observation of elements.\r\n */\r\nconst createEventContentChange = (\r\n  target: Element,\r\n  callback: (...args: any) => any,\r\n  eventContentChange?: DOMObserverEventContentChange\r\n): EventContentChange => {\r\n  let map: WeakMap<Node, [string, () => any]> | undefined; // weak map to prevent memory leak for detached elements\r\n  let destroyed = false;\r\n  const destroy = () => {\r\n    destroyed = true;\r\n  };\r\n  const updateElements: EventContentChangeUpdateElement = (getElements?) => {\r\n    if (eventContentChange) {\r\n      const eventElmList = eventContentChange.reduce<Array<[Node[], string]>>((arr, item) => {\r\n        if (item) {\r\n          const selector = item[0];\r\n          const eventNames = item[1];\r\n          const elements =\r\n            eventNames &&\r\n            selector &&\r\n            (getElements ? getElements(selector) : find(selector, target));\r\n\r\n          if (elements && elements.length && eventNames && isString(eventNames)) {\r\n            push(arr, [elements, eventNames.trim()], true);\r\n          }\r\n        }\r\n        return arr;\r\n      }, []);\r\n\r\n      each(eventElmList, (item) =>\r\n        each(item[0], (elm) => {\r\n          const eventNames = item[1];\r\n          const entry = map!.get(elm);\r\n\r\n          if (entry) {\r\n            const entryEventNames = entry[0];\r\n            const entryOff = entry[1];\r\n\r\n            // in case an already registered element is registered again, unregister the previous events\r\n            if (entryEventNames === eventNames) {\r\n              entryOff();\r\n            }\r\n          }\r\n\r\n          const off = on(elm, eventNames, (event: Event) => {\r\n            if (destroyed) {\r\n              off();\r\n              map!.delete(elm);\r\n            } else {\r\n              callback(event);\r\n            }\r\n          });\r\n          map!.set(elm, [eventNames, off]);\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  if (eventContentChange) {\r\n    map = new WeakMap();\r\n    updateElements();\r\n  }\r\n\r\n  return [destroy, updateElements];\r\n};\r\n\r\n/**\r\n * Creates a DOM observer which observes DOM changes to either the target element or its children.\r\n * @param target The element which shall be observed.\r\n * @param isContentObserver Whether this observer is just observing the target or just the targets children. (not only direct children but also nested ones)\r\n * @param callback The callback which gets called if a change was detected.\r\n * @param options The options for DOM change detection.\r\n * @returns A object which represents the instance of the DOM observer.\r\n */\r\nexport const createDOMObserver = <ContentObserver extends boolean>(\r\n  target: HTMLElement,\r\n  isContentObserver: ContentObserver,\r\n  callback: DOMObserverCallback<ContentObserver>,\r\n  options?: DOMObserverOptions<ContentObserver>\r\n): DOMObserver<ContentObserver> => {\r\n  let isConnected = false;\r\n  const {\r\n    _attributes,\r\n    _styleChangingAttributes,\r\n    _eventContentChange,\r\n    _nestedTargetSelector,\r\n    _ignoreTargetChange,\r\n    _ignoreContentChange,\r\n  } = (options as DOMContentObserverOptions & DOMTargetObserverOptions) || {};\r\n  const debouncedEventContentChange = debounce(\r\n    () => {\r\n      if (isConnected) {\r\n        (callback as DOMContentObserverCallback)(true);\r\n      }\r\n    },\r\n    { _timeout: 33, _maxDelay: 99 }\r\n  );\r\n  const [destroyEventContentChange, updateEventContentChangeElements] = createEventContentChange(\r\n    target,\r\n    debouncedEventContentChange,\r\n    _eventContentChange\r\n  );\r\n\r\n  // MutationObserver\r\n  const finalAttributes = _attributes || [];\r\n  const finalStyleChangingAttributes = _styleChangingAttributes || [];\r\n  const observedAttributes = finalAttributes.concat(finalStyleChangingAttributes);\r\n  const observerCallback = (\r\n    mutations: MutationRecord[],\r\n    fromRecords?: true\r\n  ): void | Parameters<DOMObserverCallback<ContentObserver>> => {\r\n    const ignoreTargetChange = _ignoreTargetChange || noop;\r\n    const ignoreContentChange = _ignoreContentChange || noop;\r\n    const targetChangedAttrs: string[] = [];\r\n    const totalAddedNodes: Node[] = [];\r\n    let targetStyleChanged = false;\r\n    let contentChanged = false;\r\n    let childListChanged = false;\r\n    each(mutations, (mutation) => {\r\n      const { attributeName, target: mutationTarget, type, oldValue, addedNodes } = mutation;\r\n      const isAttributesType = type === 'attributes';\r\n      const isChildListType = type === 'childList';\r\n      const targetIsMutationTarget = target === mutationTarget;\r\n      const attributeValue =\r\n        isAttributesType && isString(attributeName)\r\n          ? attr(mutationTarget as HTMLElement, attributeName!)\r\n          : 0;\r\n      const attributeChanged = attributeValue !== 0 && oldValue !== attributeValue;\r\n      const styleChangingAttrChanged =\r\n        indexOf(finalStyleChangingAttributes, attributeName) > -1 && attributeChanged;\r\n\r\n      // if is content observer and something changed in children\r\n      if (isContentObserver && !targetIsMutationTarget) {\r\n        const notOnlyAttrChanged = !isAttributesType;\r\n        const contentAttrChanged = isAttributesType && styleChangingAttrChanged;\r\n        const isNestedTarget =\r\n          contentAttrChanged && _nestedTargetSelector && is(mutationTarget, _nestedTargetSelector);\r\n        const baseAssertion = isNestedTarget\r\n          ? !ignoreTargetChange(mutationTarget, attributeName!, oldValue, attributeValue)\r\n          : notOnlyAttrChanged || contentAttrChanged;\r\n        const contentFinalChanged =\r\n          baseAssertion && !ignoreContentChange(mutation, !!isNestedTarget, target, options);\r\n\r\n        push(totalAddedNodes, addedNodes);\r\n\r\n        contentChanged = contentChanged || contentFinalChanged;\r\n        childListChanged = childListChanged || isChildListType;\r\n      }\r\n      // if is target observer and target attr changed\r\n      if (\r\n        !isContentObserver &&\r\n        targetIsMutationTarget &&\r\n        attributeChanged &&\r\n        !ignoreTargetChange(mutationTarget, attributeName!, oldValue, attributeValue)\r\n      ) {\r\n        push(targetChangedAttrs, attributeName!);\r\n        targetStyleChanged = targetStyleChanged || styleChangingAttrChanged;\r\n      }\r\n    });\r\n\r\n    if (childListChanged && !isEmptyArray(totalAddedNodes)) {\r\n      // adds / removes the new elements from the event content change\r\n      updateEventContentChangeElements((selector) =>\r\n        totalAddedNodes.reduce<Node[]>((arr, node) => {\r\n          push(arr, find(selector, node));\r\n          return is(node, selector) ? push(arr, node) : arr;\r\n        }, [])\r\n      );\r\n    }\r\n\r\n    if (isContentObserver) {\r\n      !fromRecords && contentChanged && (callback as DOMContentObserverCallback)(false);\r\n      return [false] as Parameters<DOMObserverCallback<ContentObserver>>;\r\n    }\r\n    if (!isEmptyArray(targetChangedAttrs) || targetStyleChanged) {\r\n      !fromRecords &&\r\n        (callback as DOMTargetObserverCallback)(targetChangedAttrs, targetStyleChanged);\r\n      return [targetChangedAttrs, targetStyleChanged] as Parameters<\r\n        DOMObserverCallback<ContentObserver>\r\n      >;\r\n    }\r\n  };\r\n  const mutationObserver: MutationObserver = new MutationObserverConstructor!((mutations) =>\r\n    observerCallback(mutations)\r\n  );\r\n\r\n  // Connect\r\n  mutationObserver.observe(target, {\r\n    attributes: true,\r\n    attributeOldValue: true,\r\n    attributeFilter: observedAttributes,\r\n    subtree: isContentObserver,\r\n    childList: isContentObserver,\r\n    characterData: isContentObserver,\r\n  });\r\n  isConnected = true;\r\n\r\n  return [\r\n    () => {\r\n      if (isConnected) {\r\n        destroyEventContentChange();\r\n        mutationObserver.disconnect();\r\n        isConnected = false;\r\n      }\r\n    },\r\n    () => {\r\n      if (isConnected) {\r\n        debouncedEventContentChange._flush();\r\n\r\n        const records = mutationObserver.takeRecords();\r\n        return !isEmptyArray(records) && observerCallback(records, true);\r\n      }\r\n    },\r\n  ];\r\n};\r\n","import {\r\n  debounce,\r\n  isArray,\r\n  isNumber,\r\n  each,\r\n  indexOf,\r\n  isString,\r\n  attr,\r\n  removeAttr,\r\n  CacheValues,\r\n  keys,\r\n  liesBetween,\r\n  scrollSize,\r\n  equalWH,\r\n  createCache,\r\n  WH,\r\n  fractionalSize,\r\n  isFunction,\r\n  ResizeObserverConstructor,\r\n  closest,\r\n  assignDeep,\r\n  push,\r\n  scrollLeft,\r\n  scrollTop,\r\n  noop,\r\n} from 'support';\r\nimport { getEnvironment } from 'environment';\r\nimport {\r\n  dataAttributeHost,\r\n  dataValueHostOverflowVisible,\r\n  dataValueHostUpdating,\r\n  classNameViewport,\r\n  classNameOverflowVisible,\r\n  classNameScrollbar,\r\n  classNameViewportArrange,\r\n} from 'classnames';\r\nimport { createSizeObserver, SizeObserverCallbackParams } from 'observers/sizeObserver';\r\nimport { createTrinsicObserver } from 'observers/trinsicObserver';\r\nimport { createDOMObserver, DOMObserver } from 'observers/domObserver';\r\nimport type { SetupState, SetupUpdateCheckOption } from 'setups';\r\nimport type { StructureSetupState } from 'setups/structureSetup';\r\nimport type { StructureSetupElementsObj } from 'setups/structureSetup/structureSetup.elements';\r\nimport type {\r\n  StructureSetupUpdate,\r\n  StructureSetupUpdateHints,\r\n} from 'setups/structureSetup/structureSetup.update';\r\n\r\nexport type StructureSetupObserversUpdate = (checkOption: SetupUpdateCheckOption) => void;\r\n\r\nexport type StructureSetupObservers = [\r\n  destroy: () => void,\r\n  appendElements: () => void,\r\n  updateObservers: () => Partial<StructureSetupUpdateHints>,\r\n  updateObserversOptions: StructureSetupObserversUpdate\r\n];\r\n\r\ntype ExcludeFromTuple<T extends readonly any[], E> = T extends [infer F, ...infer R]\r\n  ? [F] extends [E]\r\n    ? ExcludeFromTuple<R, E>\r\n    : [F, ...ExcludeFromTuple<R, E>]\r\n  : [];\r\n\r\nconst hostSelector = `[${dataAttributeHost}]`;\r\n\r\n// TODO: observer textarea attrs if textarea\r\n\r\nconst viewportSelector = `.${classNameViewport}`;\r\nconst viewportAttrsFromTarget = ['tabindex'];\r\nconst baseStyleChangingAttrsTextarea = ['wrap', 'cols', 'rows'];\r\nconst baseStyleChangingAttrs = ['id', 'class', 'style', 'open'];\r\n\r\nexport const createStructureSetupObservers = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  state: SetupState<StructureSetupState>,\r\n  structureSetupUpdate: (\r\n    ...args: ExcludeFromTuple<Parameters<StructureSetupUpdate>, Parameters<StructureSetupUpdate>[0]>\r\n  ) => any\r\n): StructureSetupObservers => {\r\n  let debounceTimeout: number | false | undefined;\r\n  let debounceMaxDelay: number | false | undefined;\r\n  let contentMutationObserver: DOMObserver<true> | undefined;\r\n  const [, setState] = state;\r\n  const {\r\n    _host,\r\n    _viewport,\r\n    _content,\r\n    _isTextarea,\r\n    _viewportIsTarget,\r\n    _viewportHasClass,\r\n    _viewportAddRemoveClass,\r\n  } = structureSetupElements;\r\n  const { _flexboxGlue } = getEnvironment();\r\n\r\n  const [updateContentSizeCache] = createCache<WH<number>>(\r\n    {\r\n      _equal: equalWH,\r\n      _initialValue: { w: 0, h: 0 },\r\n    },\r\n    () => {\r\n      const hasOver = _viewportHasClass(classNameOverflowVisible, dataValueHostOverflowVisible);\r\n      const hasVpStyle = _viewportHasClass(classNameViewportArrange, '');\r\n      const scrollOffsetX = hasVpStyle && scrollLeft(_viewport);\r\n      const scrollOffsetY = hasVpStyle && scrollTop(_viewport);\r\n      _viewportAddRemoveClass(classNameOverflowVisible, dataValueHostOverflowVisible);\r\n      _viewportAddRemoveClass(classNameViewportArrange, '');\r\n      _viewportAddRemoveClass('', dataValueHostUpdating, true);\r\n\r\n      const contentScroll = scrollSize(_content);\r\n      const viewportScroll = scrollSize(_viewport);\r\n      const fractional = fractionalSize(_viewport);\r\n\r\n      _viewportAddRemoveClass(classNameOverflowVisible, dataValueHostOverflowVisible, hasOver);\r\n      _viewportAddRemoveClass(classNameViewportArrange, '', hasVpStyle);\r\n      _viewportAddRemoveClass('', dataValueHostUpdating);\r\n      scrollLeft(_viewport, scrollOffsetX);\r\n      scrollTop(_viewport, scrollOffsetY);\r\n      return {\r\n        w: viewportScroll.w + contentScroll.w + fractional.w,\r\n        h: viewportScroll.h + contentScroll.h + fractional.h,\r\n      };\r\n    }\r\n  );\r\n  const contentMutationObserverAttr = _isTextarea\r\n    ? baseStyleChangingAttrsTextarea\r\n    : baseStyleChangingAttrs.concat(baseStyleChangingAttrsTextarea);\r\n  const structureSetupUpdateWithDebouncedAdaptiveUpdateHints = debounce(structureSetupUpdate, {\r\n    _timeout: () => debounceTimeout,\r\n    _maxDelay: () => debounceMaxDelay,\r\n    _mergeParams(prev, curr) {\r\n      const [prevObj] = prev;\r\n      const [currObj] = curr;\r\n      return [\r\n        keys(prevObj)\r\n          .concat(keys(currObj))\r\n          .reduce((obj, key) => {\r\n            obj[key] = prevObj[key] || currObj[key];\r\n            return obj;\r\n          }, {}),\r\n      ] as [Partial<StructureSetupUpdateHints>];\r\n    },\r\n  });\r\n\r\n  const updateViewportAttrsFromHost = (attributes?: string[]) => {\r\n    each(attributes || viewportAttrsFromTarget, (attribute) => {\r\n      if (indexOf(viewportAttrsFromTarget, attribute) > -1) {\r\n        const hostAttr = attr(_host, attribute);\r\n        if (isString(hostAttr)) {\r\n          attr(_viewport, attribute, hostAttr);\r\n        } else {\r\n          removeAttr(_viewport, attribute);\r\n        }\r\n      }\r\n    });\r\n  };\r\n  const onTrinsicChanged = (heightIntrinsicCache: CacheValues<boolean>, fromRecords?: true) => {\r\n    const [heightIntrinsic, heightIntrinsicChanged] = heightIntrinsicCache;\r\n    const updateHints: Partial<StructureSetupUpdateHints> = {\r\n      _heightIntrinsicChanged: heightIntrinsicChanged,\r\n    };\r\n    setState({ _heightIntrinsic: heightIntrinsic });\r\n\r\n    !fromRecords && structureSetupUpdate(updateHints);\r\n    return updateHints;\r\n  };\r\n  const onSizeChanged = ({\r\n    _sizeChanged,\r\n    _directionIsRTLCache,\r\n    _appear,\r\n  }: SizeObserverCallbackParams) => {\r\n    const updateFn =\r\n      !_sizeChanged || _appear\r\n        ? structureSetupUpdate\r\n        : structureSetupUpdateWithDebouncedAdaptiveUpdateHints;\r\n\r\n    let directionChanged = false;\r\n    if (_directionIsRTLCache) {\r\n      const [directionIsRTL, directionIsRTLChanged] = _directionIsRTLCache;\r\n      directionChanged = directionIsRTLChanged;\r\n\r\n      setState({ _directionIsRTL: directionIsRTL });\r\n    }\r\n\r\n    updateFn({ _sizeChanged, _directionChanged: directionChanged });\r\n  };\r\n  const onContentMutation = (contentChangedTroughEvent: boolean, fromRecords?: true) => {\r\n    const [, contentSizeChanged] = updateContentSizeCache();\r\n    const updateHints: Partial<StructureSetupUpdateHints> = {\r\n      _contentMutation: contentSizeChanged,\r\n    };\r\n    // if contentChangedTroughEvent is true its already debounced\r\n    const updateFn = contentChangedTroughEvent\r\n      ? structureSetupUpdate\r\n      : structureSetupUpdateWithDebouncedAdaptiveUpdateHints;\r\n\r\n    if (contentSizeChanged) {\r\n      !fromRecords && updateFn(updateHints);\r\n    }\r\n    return updateHints;\r\n  };\r\n  const onHostMutation = (\r\n    targetChangedAttrs: string[],\r\n    targetStyleChanged: boolean,\r\n    fromRecords?: true\r\n  ) => {\r\n    const updateHints: Partial<StructureSetupUpdateHints> = { _hostMutation: targetStyleChanged };\r\n    if (targetStyleChanged) {\r\n      !fromRecords && structureSetupUpdateWithDebouncedAdaptiveUpdateHints(updateHints);\r\n    } else if (!_viewportIsTarget) {\r\n      updateViewportAttrsFromHost(targetChangedAttrs);\r\n    }\r\n    return updateHints;\r\n  };\r\n\r\n  const [destroyTrinsicObserver, appendTrinsicObserver, updateTrinsicObserver] =\r\n    _content || !_flexboxGlue ? createTrinsicObserver(_host, onTrinsicChanged) : [noop, noop, noop];\r\n  const [destroySizeObserver, appendSizeObserver] = !_viewportIsTarget\r\n    ? createSizeObserver(_host, onSizeChanged, {\r\n        _appear: true,\r\n        _direction: true,\r\n      })\r\n    : [noop, noop];\r\n  const [destroyHostMutationObserver, updateHostMutationObserver] = createDOMObserver(\r\n    _host,\r\n    false,\r\n    onHostMutation,\r\n    {\r\n      _styleChangingAttributes: baseStyleChangingAttrs,\r\n      _attributes: baseStyleChangingAttrs.concat(viewportAttrsFromTarget),\r\n    }\r\n  );\r\n\r\n  const viewportIsTargetResizeObserver =\r\n    _viewportIsTarget &&\r\n    ResizeObserverConstructor &&\r\n    new ResizeObserverConstructor(onSizeChanged.bind(0, { _sizeChanged: true }));\r\n\r\n  viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.observe(_host);\r\n  updateViewportAttrsFromHost();\r\n\r\n  return [\r\n    () => {\r\n      destroyTrinsicObserver();\r\n      destroySizeObserver();\r\n      contentMutationObserver && contentMutationObserver[0](); // destroy\r\n      viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.disconnect();\r\n      destroyHostMutationObserver();\r\n    },\r\n    () => {\r\n      // order is matter!\r\n      appendSizeObserver();\r\n      appendTrinsicObserver();\r\n    },\r\n    () => {\r\n      const updateHints: Partial<StructureSetupUpdateHints> = {};\r\n      const hostUpdateResult = updateHostMutationObserver();\r\n      const trinsicUpdateResult = updateTrinsicObserver();\r\n      const contentUpdateResult = contentMutationObserver && contentMutationObserver[1](); // update\r\n\r\n      if (hostUpdateResult) {\r\n        assignDeep(\r\n          updateHints,\r\n          onHostMutation.apply(\r\n            0,\r\n            push(hostUpdateResult, true) as [\r\n              ...updateResult: typeof hostUpdateResult,\r\n              fromRecords: true\r\n            ]\r\n          )\r\n        );\r\n      }\r\n      if (trinsicUpdateResult) {\r\n        assignDeep(\r\n          updateHints,\r\n          onTrinsicChanged.apply(\r\n            0,\r\n            push(trinsicUpdateResult as any[], true) as [\r\n              ...updateResult: typeof trinsicUpdateResult,\r\n              fromRecords: true\r\n            ]\r\n          )\r\n        );\r\n      }\r\n      if (contentUpdateResult) {\r\n        assignDeep(\r\n          updateHints,\r\n          onContentMutation.apply(\r\n            0,\r\n            push(contentUpdateResult, true) as [\r\n              ...updateResult: typeof contentUpdateResult,\r\n              fromRecords: true\r\n            ]\r\n          )\r\n        );\r\n      }\r\n\r\n      return updateHints;\r\n    },\r\n    (checkOption) => {\r\n      const [ignoreMutation] = checkOption<string[] | null>('updating.ignoreMutation');\r\n      const [attributes, attributesChanged] = checkOption<string[] | null>('updating.attributes');\r\n      const [elementEvents, elementEventsChanged] = checkOption<Array<[string, string]> | null>(\r\n        'updating.elementEvents'\r\n      );\r\n      const [debounceValue, debounceChanged] = checkOption<Array<number> | number | null>(\r\n        'updating.debounce'\r\n      );\r\n      const updateContentMutationObserver = elementEventsChanged || attributesChanged;\r\n      const ignoreMutationFromOptions = (mutation: MutationRecord) =>\r\n        isFunction(ignoreMutation) && ignoreMutation(mutation);\r\n\r\n      if (updateContentMutationObserver) {\r\n        if (contentMutationObserver) {\r\n          contentMutationObserver[1](); // update\r\n          contentMutationObserver[0](); // destroy\r\n        }\r\n        contentMutationObserver = createDOMObserver(\r\n          _content || _viewport,\r\n          true,\r\n          onContentMutation,\r\n          {\r\n            _styleChangingAttributes: contentMutationObserverAttr.concat(attributes || []),\r\n            _attributes: contentMutationObserverAttr.concat(attributes || []),\r\n            _eventContentChange: elementEvents,\r\n            _nestedTargetSelector: hostSelector,\r\n            _ignoreContentChange: (mutation, isNestedTarget) => {\r\n              const { target, attributeName } = mutation;\r\n              const ignore =\r\n                !isNestedTarget && attributeName && !_viewportIsTarget\r\n                  ? liesBetween(target, hostSelector, viewportSelector)\r\n                  : false;\r\n              return (\r\n                ignore ||\r\n                !!closest(target, `.${classNameScrollbar}`) || // ignore explicitely all scrollbar elements\r\n                !!ignoreMutationFromOptions(mutation)\r\n              );\r\n            },\r\n          }\r\n        );\r\n      }\r\n\r\n      if (debounceChanged) {\r\n        structureSetupUpdateWithDebouncedAdaptiveUpdateHints._flush();\r\n        if (isArray(debounceValue)) {\r\n          const timeout = debounceValue[0];\r\n          const maxWait = debounceValue[1];\r\n          debounceTimeout = isNumber(timeout) ? timeout : false;\r\n          debounceMaxDelay = isNumber(maxWait) ? maxWait : false;\r\n        } else if (isNumber(debounceValue)) {\r\n          debounceTimeout = debounceValue;\r\n          debounceMaxDelay = false;\r\n        } else {\r\n          debounceTimeout = false;\r\n          debounceMaxDelay = false;\r\n        }\r\n      }\r\n    },\r\n  ];\r\n};\r\n","import { createEventListenerHub, isEmptyObject, keys } from 'support';\r\nimport { createState, createOptionCheck } from 'setups/setups';\r\nimport { createStructureSetupElements } from 'setups/structureSetup/structureSetup.elements';\r\nimport { createStructureSetupUpdate } from 'setups/structureSetup/structureSetup.update';\r\nimport { createStructureSetupObservers } from 'setups/structureSetup/structureSetup.observers';\r\nimport type { StructureSetupUpdateHints } from 'setups/structureSetup/structureSetup.update';\r\nimport type { StructureSetupElementsObj } from 'setups/structureSetup/structureSetup.elements';\r\nimport type { TRBL, XY, EventListener } from 'support';\r\nimport type { Options, ReadonlyOptions } from 'options';\r\nimport type { Setup } from 'setups';\r\nimport type { InitializationTarget } from 'initialization';\r\nimport type { DeepPartial, StyleObject, OverflowStyle } from 'typings';\r\n\r\nexport interface StructureSetupState {\r\n  _padding: TRBL;\r\n  _paddingAbsolute: boolean;\r\n  _viewportPaddingStyle: StyleObject;\r\n  _overflowEdge: XY<number>;\r\n  _overflowAmount: XY<number>;\r\n  _overflowStyle: XY<OverflowStyle>;\r\n  _hasOverflow: XY<boolean>;\r\n  _heightIntrinsic: boolean;\r\n  _directionIsRTL: boolean;\r\n}\r\n\r\nexport interface StructureSetupStaticState {\r\n  _elements: StructureSetupElementsObj;\r\n  _appendElements: () => void;\r\n  _addOnUpdatedListener: (listener: EventListener<StructureSetupEventMap, 'u'>) => void;\r\n}\r\n\r\ntype StructureSetupEventMap = {\r\n  u: [updateHints: StructureSetupUpdateHints, changedOptions: DeepPartial<Options>, force: boolean];\r\n};\r\n\r\nconst initialXYNumber = { x: 0, y: 0 };\r\nconst initialStructureSetupUpdateState: StructureSetupState = {\r\n  _padding: {\r\n    t: 0,\r\n    r: 0,\r\n    b: 0,\r\n    l: 0,\r\n  },\r\n  _paddingAbsolute: false,\r\n  _viewportPaddingStyle: {\r\n    marginRight: 0,\r\n    marginBottom: 0,\r\n    marginLeft: 0,\r\n    paddingTop: 0,\r\n    paddingRight: 0,\r\n    paddingBottom: 0,\r\n    paddingLeft: 0,\r\n  },\r\n  _overflowEdge: initialXYNumber,\r\n  _overflowAmount: initialXYNumber,\r\n  _overflowStyle: {\r\n    x: 'hidden',\r\n    y: 'hidden',\r\n  },\r\n  _hasOverflow: {\r\n    x: false,\r\n    y: false,\r\n  },\r\n  _heightIntrinsic: false,\r\n  _directionIsRTL: false,\r\n};\r\n\r\nexport const createStructureSetup = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOptions\r\n): Setup<StructureSetupState, StructureSetupStaticState> => {\r\n  const checkOptionsFallback = createOptionCheck(options, {});\r\n  const state = createState(initialStructureSetupUpdateState);\r\n  const [addEvent, removeEvent, triggerEvent] = createEventListenerHub<StructureSetupEventMap>();\r\n  const [getState] = state;\r\n  const [elements, appendStructureElements, destroyElements] = createStructureSetupElements(target);\r\n  const updateStructure = createStructureSetupUpdate(elements, state);\r\n  const triggerUpdateEvent: (...args: StructureSetupEventMap['u']) => void = (\r\n    updateHints,\r\n    changedOptions,\r\n    force\r\n  ) => {\r\n    const truthyUpdateHints = keys(updateHints).some((key) => updateHints[key]);\r\n\r\n    if (truthyUpdateHints || !isEmptyObject(changedOptions) || force) {\r\n      triggerEvent('u', [updateHints, changedOptions, force]);\r\n    }\r\n  };\r\n  const [destroyObservers, appendObserverElements, updateObservers, updateObserversOptions] =\r\n    createStructureSetupObservers(elements, state, (updateHints) => {\r\n      triggerUpdateEvent(updateStructure(checkOptionsFallback, updateHints), {}, false);\r\n    });\r\n\r\n  const structureSetupState = getState.bind(0) as (() => StructureSetupState) &\r\n    StructureSetupStaticState;\r\n  structureSetupState._addOnUpdatedListener = (listener) => {\r\n    addEvent('u', listener);\r\n  };\r\n  structureSetupState._appendElements = () => {\r\n    appendObserverElements();\r\n    appendStructureElements();\r\n  };\r\n  structureSetupState._elements = elements;\r\n\r\n  return [\r\n    (changedOptions, force?) => {\r\n      const checkOption = createOptionCheck(options, changedOptions, force);\r\n      updateObserversOptions(checkOption);\r\n      triggerUpdateEvent(\r\n        updateStructure(checkOption, updateObservers(), force),\r\n        changedOptions,\r\n        !!force\r\n      );\r\n    },\r\n    structureSetupState,\r\n    () => {\r\n      removeEvent();\r\n      destroyObservers();\r\n      destroyElements();\r\n    },\r\n  ];\r\n};\r\n","import {\r\n  directionIsRTL,\r\n  getBoundingClientRect,\r\n  offsetSize,\r\n  on,\r\n  preventDefault,\r\n  runEachAndClear,\r\n  stopPropagation,\r\n  XY,\r\n} from 'support';\r\nimport { classNamesScrollbarInteraction } from 'classnames';\r\nimport type { ReadonlyOptions } from 'options';\r\nimport type { StructureSetupState } from 'setups';\r\nimport type {\r\n  ScrollbarsSetupElementsObj,\r\n  ScrollbarStructure,\r\n} from 'setups/scrollbarsSetup/scrollbarsSetup.elements';\r\nimport { getEnvironment } from 'environment';\r\n\r\nexport type ScrollbarsSetupEvents = (\r\n  scrollbarStructure: ScrollbarStructure,\r\n  scrollbarsAddRemoveClass: ScrollbarsSetupElementsObj['_scrollbarsAddRemoveClass'],\r\n  documentElm: Document,\r\n  scrollOffsetElm: HTMLElement,\r\n  isHorizontal?: boolean\r\n) => () => void;\r\n\r\nconst { round } = Math;\r\nconst getClientOffset = (event: PointerEvent): XY<number> => ({\r\n  x: event.clientX,\r\n  y: event.clientY,\r\n});\r\nconst getScale = (element: HTMLElement): XY<number> => {\r\n  const { width, height } = getBoundingClientRect(element);\r\n  const { w, h } = offsetSize(element);\r\n  return {\r\n    x: round(width) / w || 1,\r\n    y: round(height) / h || 1,\r\n  };\r\n};\r\nconst continuePointerDown = (\r\n  event: PointerEvent,\r\n  options: ReadonlyOptions,\r\n  scrollType: 'dragScroll' | 'clickScroll'\r\n) => {\r\n  const scrollbarOptions = options.scrollbars;\r\n  const { button, isPrimary, pointerType } = event;\r\n  const { pointers } = scrollbarOptions;\r\n  return (\r\n    button === 0 &&\r\n    isPrimary &&\r\n    scrollbarOptions[scrollType] &&\r\n    (pointers || []).includes(pointerType)\r\n  );\r\n};\r\nconst createRootClickStopPropagationEvents = (scrollbar: HTMLElement, documentElm: Document) =>\r\n  on(\r\n    scrollbar,\r\n    'mousedown',\r\n    on.bind(0, documentElm, 'click', stopPropagation, { _once: true, _capture: true }),\r\n    { _capture: true }\r\n  );\r\nconst createDragScrollingEvents = (\r\n  options: ReadonlyOptions,\r\n  doc: Document,\r\n  scrollbarStructure: ScrollbarStructure,\r\n  scrollOffsetElement: HTMLElement,\r\n  structureSetupState: () => StructureSetupState,\r\n  isHorizontal?: boolean\r\n) => {\r\n  const { _rtlScrollBehavior } = getEnvironment();\r\n  const { _handle, _track, _scrollbar } = scrollbarStructure;\r\n  const scrollOffsetKey = `scroll${isHorizontal ? 'Left' : 'Top'}`;\r\n  const xyKey = `${isHorizontal ? 'x' : 'y'}`;\r\n  const whKey = `${isHorizontal ? 'w' : 'h'}`;\r\n  const createOnPointerMoveHandler =\r\n    (mouseDownScroll: number, mouseDownClientOffset: number, mouseDownInvertedScale: number) =>\r\n    (event: PointerEvent) => {\r\n      const { _overflowAmount } = structureSetupState();\r\n      const movement =\r\n        (getClientOffset(event)[xyKey] - mouseDownClientOffset) * mouseDownInvertedScale;\r\n      const handleTrackDiff = offsetSize(_track)[whKey] - offsetSize(_handle)[whKey];\r\n      const scrollDeltaPercent = movement / handleTrackDiff;\r\n      const scrollDelta = scrollDeltaPercent * _overflowAmount[xyKey];\r\n      const isRTL = directionIsRTL(_scrollbar);\r\n      const negateMultiplactor =\r\n        isRTL && isHorizontal ? (_rtlScrollBehavior.n || _rtlScrollBehavior.i ? 1 : -1) : 1;\r\n\r\n      scrollOffsetElement[scrollOffsetKey] = mouseDownScroll + scrollDelta * negateMultiplactor;\r\n    };\r\n\r\n  return on(_handle, 'pointerdown', (pointerDownEvent: PointerEvent) => {\r\n    if (continuePointerDown(pointerDownEvent, options, 'dragScroll')) {\r\n      const offSelectStart = on(doc, 'selectstart', (event: Event) => preventDefault(event), {\r\n        _passive: false,\r\n      });\r\n      const offPointerMove = on(\r\n        _handle,\r\n        'pointermove',\r\n        createOnPointerMoveHandler(\r\n          scrollOffsetElement[scrollOffsetKey] || 0,\r\n          getClientOffset(pointerDownEvent)[xyKey],\r\n          1 / getScale(scrollOffsetElement)[xyKey]\r\n        )\r\n      );\r\n\r\n      on(\r\n        _handle,\r\n        'pointerup',\r\n        (pointerUpEvent: PointerEvent) => {\r\n          offSelectStart();\r\n          offPointerMove();\r\n          _handle.releasePointerCapture(pointerUpEvent.pointerId);\r\n        },\r\n        { _once: true }\r\n      );\r\n      _handle.setPointerCapture(pointerDownEvent.pointerId);\r\n    }\r\n  });\r\n};\r\n\r\nexport const createScrollbarsSetupEvents =\r\n  (\r\n    options: ReadonlyOptions,\r\n    structureSetupState: () => StructureSetupState\r\n  ): ScrollbarsSetupEvents =>\r\n  (scrollbarStructure, scrollbarsAddRemoveClass, documentElm, scrollOffsetElm, isHorizontal) => {\r\n    const { _scrollbar } = scrollbarStructure;\r\n\r\n    return runEachAndClear.bind(0, [\r\n      on(_scrollbar, 'pointerenter', () => {\r\n        scrollbarsAddRemoveClass(classNamesScrollbarInteraction, true);\r\n      }),\r\n      on(_scrollbar, 'pointerleave pointercancel', () => {\r\n        scrollbarsAddRemoveClass(classNamesScrollbarInteraction);\r\n      }),\r\n      createRootClickStopPropagationEvents(_scrollbar, documentElm),\r\n      createDragScrollingEvents(\r\n        options,\r\n        documentElm,\r\n        scrollbarStructure,\r\n        scrollOffsetElm,\r\n        structureSetupState,\r\n        isHorizontal\r\n      ),\r\n    ]);\r\n  };\r\n","import { offsetSize } from 'support';\r\nimport { getEnvironment } from 'environment';\r\nimport type { StructureSetupState } from 'setups';\r\n\r\nconst { min, max, abs, round } = Math;\r\n\r\nexport const getScrollbarHandleLengthRatio = (\r\n  scrollbarHandle: HTMLElement,\r\n  scrollbarTrack: HTMLElement,\r\n  isHorizontal?: boolean,\r\n  structureSetupState?: StructureSetupState\r\n) => {\r\n  if (structureSetupState) {\r\n    const axis = isHorizontal ? 'x' : 'y';\r\n    const { _overflowAmount, _overflowEdge } = structureSetupState;\r\n\r\n    const viewportSize = _overflowEdge[axis];\r\n    const overflowAmount = _overflowAmount[axis];\r\n    return max(0, min(1, viewportSize / (viewportSize + overflowAmount)));\r\n  }\r\n  const axis = isHorizontal ? 'w' : 'h';\r\n  const handleSize = offsetSize(scrollbarHandle)[axis];\r\n  const trackSize = offsetSize(scrollbarTrack)[axis];\r\n  return max(0, min(1, handleSize / trackSize));\r\n};\r\n\r\nexport const getScrollbarHandleOffsetRatio = (\r\n  scrollbarHandle: HTMLElement,\r\n  scrollbarTrack: HTMLElement,\r\n  scrollOffsetElement: HTMLElement,\r\n  structureSetupState: StructureSetupState,\r\n  isRTL: boolean,\r\n  isHorizontal?: boolean\r\n) => {\r\n  const { _rtlScrollBehavior } = getEnvironment();\r\n  const axis = isHorizontal ? 'x' : 'y';\r\n  const scrollLeftTop = isHorizontal ? 'Left' : 'Top';\r\n  const { _overflowAmount } = structureSetupState;\r\n  const scrollPositionMax = round(_overflowAmount[axis]);\r\n  const scrollPosition = abs(scrollOffsetElement[`scroll${scrollLeftTop}`]);\r\n  const handleRTL = isHorizontal && isRTL;\r\n  const rtlNormalizedScrollPosition = _rtlScrollBehavior.i\r\n    ? scrollPosition\r\n    : scrollPositionMax - scrollPosition;\r\n  const finalScrollPosition = handleRTL ? rtlNormalizedScrollPosition : scrollPosition;\r\n  const scrollPercent = min(1, finalScrollPosition / scrollPositionMax);\r\n  const lengthRatio = getScrollbarHandleLengthRatio(scrollbarHandle, scrollbarTrack, isHorizontal);\r\n\r\n  return (1 / lengthRatio) * (1 - lengthRatio) * scrollPercent;\r\n};\r\n","import {\r\n  addClass,\r\n  appendChildren,\r\n  createDiv,\r\n  directionIsRTL,\r\n  each,\r\n  isBoolean,\r\n  isEmptyArray,\r\n  push,\r\n  removeClass,\r\n  removeElements,\r\n  runEachAndClear,\r\n  setT,\r\n  style,\r\n} from 'support';\r\nimport {\r\n  classNameScrollbar,\r\n  classNameScrollbarHorizontal,\r\n  classNameScrollbarVertical,\r\n  classNameScrollbarTrack,\r\n  classNameScrollbarHandle,\r\n  classNamesScrollbarTransitionless,\r\n} from 'classnames';\r\nimport { getEnvironment } from 'environment';\r\nimport { dynamicInitializationElement as generalDynamicInitializationElement } from 'initialization';\r\nimport {\r\n  getScrollbarHandleLengthRatio,\r\n  getScrollbarHandleOffsetRatio,\r\n} from 'setups/scrollbarsSetup/scrollbarsSetup.calculations';\r\nimport type { InitializationTarget } from 'initialization';\r\nimport type { StructureSetupElementsObj } from 'setups/structureSetup/structureSetup.elements';\r\nimport type { ScrollbarsSetupEvents } from 'setups/scrollbarsSetup/scrollbarsSetup.events';\r\nimport type {\r\n  ScrollbarsInitialization,\r\n  ScrollbarsDynamicInitializationElement,\r\n} from 'setups/scrollbarsSetup/scrollbarsSetup.initialization';\r\nimport type { StyleObject } from 'typings';\r\nimport { StructureSetupState } from 'setups';\r\n\r\nexport interface ScrollbarStructure {\r\n  _scrollbar: HTMLElement;\r\n  _track: HTMLElement;\r\n  _handle: HTMLElement;\r\n}\r\n\r\nexport interface ScrollbarsSetupElement {\r\n  _scrollbarStructures: ScrollbarStructure[];\r\n  _clone: () => ScrollbarStructure;\r\n  _handleStyle: (\r\n    elmStyle: (\r\n      scrollbarStructure: ScrollbarStructure\r\n    ) => [HTMLElement | false | null | undefined, StyleObject]\r\n  ) => void;\r\n}\r\n\r\nexport interface ScrollbarsSetupElementsObj {\r\n  _scrollbarsAddRemoveClass: (\r\n    classNames: string | false | null | undefined,\r\n    add?: boolean,\r\n    isHorizontal?: boolean\r\n  ) => void;\r\n  _refreshScrollbarsHandleLength: (structureSetupState: StructureSetupState) => void;\r\n  _refreshScrollbarsHandleOffset: (structureSetupState: StructureSetupState) => void;\r\n  _horizontal: ScrollbarsSetupElement;\r\n  _vertical: ScrollbarsSetupElement;\r\n}\r\n\r\nexport type ScrollbarsSetupElements = [\r\n  elements: ScrollbarsSetupElementsObj,\r\n  appendElements: () => void,\r\n  destroy: () => void\r\n];\r\n\r\nexport const createScrollbarsSetupElements = (\r\n  target: InitializationTarget,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  scrollbarsSetupEvents: ScrollbarsSetupEvents\r\n): ScrollbarsSetupElements => {\r\n  const { _getDefaultInitialization } = getEnvironment();\r\n  const { scrollbarsSlot: defaultScrollbarsSlot } = _getDefaultInitialization();\r\n  const { _documentElm, _target, _host, _viewport, _targetIsElm, _scrollOffsetElement } =\r\n    structureSetupElements;\r\n  const { scrollbarsSlot } = (_targetIsElm ? {} : target) as ScrollbarsInitialization;\r\n  const evaluatedScrollbarSlot =\r\n    generalDynamicInitializationElement<ScrollbarsDynamicInitializationElement>(\r\n      [_target, _host, _viewport],\r\n      () => _host,\r\n      defaultScrollbarsSlot,\r\n      scrollbarsSlot\r\n    );\r\n  const scrollbarStructureAddRemoveClass = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    classNames: string | false | null | undefined,\r\n    add?: boolean\r\n  ) => {\r\n    const action = add ? addClass : removeClass;\r\n    each(scrollbarStructures, (scrollbarStructure) => {\r\n      action(scrollbarStructure._scrollbar, classNames);\r\n    });\r\n  };\r\n  const scrollbarsHandleStyle = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    elmStyle: (\r\n      scrollbarStructure: ScrollbarStructure\r\n    ) => [HTMLElement | false | null | undefined, StyleObject]\r\n  ) => {\r\n    each(scrollbarStructures, (scrollbarStructure) => {\r\n      const [elm, styles] = elmStyle(scrollbarStructure);\r\n      style(elm, styles);\r\n    });\r\n  };\r\n  const scrollbarStructureRefreshHandleLength = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    structureSetupState: StructureSetupState,\r\n    isHorizontal?: boolean\r\n  ) => {\r\n    scrollbarsHandleStyle(scrollbarStructures, (structure) => {\r\n      const { _handle, _track } = structure;\r\n      return [\r\n        _handle,\r\n        {\r\n          [isHorizontal ? 'width' : 'height']: `${(\r\n            getScrollbarHandleLengthRatio(_handle, _track, isHorizontal, structureSetupState) * 100\r\n          ).toFixed(3)}%`,\r\n        },\r\n      ];\r\n    });\r\n  };\r\n  const scrollbarStructureRefreshHandleOffset = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    structureSetupState: StructureSetupState,\r\n    isHorizontal?: boolean\r\n  ) => {\r\n    const translateAxis = isHorizontal ? 'X' : 'Y';\r\n    scrollbarsHandleStyle(scrollbarStructures, (structure) => {\r\n      const { _handle, _track, _scrollbar } = structure;\r\n      const offsetRatio = getScrollbarHandleOffsetRatio(\r\n        _handle,\r\n        _track,\r\n        _scrollOffsetElement,\r\n        structureSetupState,\r\n        directionIsRTL(_scrollbar),\r\n        isHorizontal\r\n      );\r\n      // eslint-disable-next-line no-self-compare\r\n      const validOffsetRatio = offsetRatio === offsetRatio; // is false when offset is NaN\r\n      return [\r\n        _handle,\r\n        {\r\n          transform: validOffsetRatio\r\n            ? `translate${translateAxis}(${(offsetRatio * 100).toFixed(3)}%)`\r\n            : '',\r\n        },\r\n      ];\r\n    });\r\n  };\r\n\r\n  const destroyFns: (() => void)[] = [];\r\n  const horizontalScrollbars: ScrollbarStructure[] = [];\r\n  const verticalScrollbars: ScrollbarStructure[] = [];\r\n\r\n  const scrollbarsAddRemoveClass = (\r\n    className: string | false | null | undefined,\r\n    add?: boolean,\r\n    onlyHorizontal?: boolean\r\n  ) => {\r\n    const singleAxis = isBoolean(onlyHorizontal);\r\n    const runHorizontal = singleAxis ? onlyHorizontal : true;\r\n    const runVertical = singleAxis ? !onlyHorizontal : true;\r\n    runHorizontal && scrollbarStructureAddRemoveClass(horizontalScrollbars, className, add);\r\n    runVertical && scrollbarStructureAddRemoveClass(verticalScrollbars, className, add);\r\n  };\r\n  const refreshScrollbarsHandleLength = (structureSetupState: StructureSetupState) => {\r\n    scrollbarStructureRefreshHandleLength(horizontalScrollbars, structureSetupState, true);\r\n    scrollbarStructureRefreshHandleLength(verticalScrollbars, structureSetupState);\r\n  };\r\n  const refreshScrollbarsHandleOffset = (structureSetupState: StructureSetupState) => {\r\n    scrollbarStructureRefreshHandleOffset(horizontalScrollbars, structureSetupState, true);\r\n    scrollbarStructureRefreshHandleOffset(verticalScrollbars, structureSetupState);\r\n  };\r\n  const generateScrollbarDOM = (isHorizontal?: boolean): ScrollbarStructure => {\r\n    const scrollbarClassName = isHorizontal\r\n      ? classNameScrollbarHorizontal\r\n      : classNameScrollbarVertical;\r\n    const arrToPush = isHorizontal ? horizontalScrollbars : verticalScrollbars;\r\n    const transitionlessClass = isEmptyArray(arrToPush) ? classNamesScrollbarTransitionless : '';\r\n    const scrollbar = createDiv(\r\n      `${classNameScrollbar} ${scrollbarClassName} ${transitionlessClass}`\r\n    );\r\n    const track = createDiv(classNameScrollbarTrack);\r\n    const handle = createDiv(classNameScrollbarHandle);\r\n    const result = {\r\n      _scrollbar: scrollbar,\r\n      _track: track,\r\n      _handle: handle,\r\n    };\r\n\r\n    appendChildren(scrollbar, track);\r\n    appendChildren(track, handle);\r\n\r\n    push(arrToPush, result);\r\n    push(destroyFns, [\r\n      removeElements.bind(0, scrollbar),\r\n      scrollbarsSetupEvents(\r\n        result,\r\n        scrollbarsAddRemoveClass,\r\n        _documentElm,\r\n        _scrollOffsetElement,\r\n        isHorizontal\r\n      ),\r\n    ]);\r\n\r\n    return result;\r\n  };\r\n  const generateHorizontalScrollbarStructure = generateScrollbarDOM.bind(0, true);\r\n  const generateVerticalScrollbarStructure = generateScrollbarDOM.bind(0, false);\r\n  const appendElements = () => {\r\n    appendChildren(evaluatedScrollbarSlot, horizontalScrollbars[0]._scrollbar);\r\n    appendChildren(evaluatedScrollbarSlot, verticalScrollbars[0]._scrollbar);\r\n\r\n    setT(() => {\r\n      scrollbarsAddRemoveClass(classNamesScrollbarTransitionless);\r\n    }, 300);\r\n  };\r\n\r\n  generateHorizontalScrollbarStructure();\r\n  generateVerticalScrollbarStructure();\r\n\r\n  return [\r\n    {\r\n      _refreshScrollbarsHandleLength: refreshScrollbarsHandleLength,\r\n      _refreshScrollbarsHandleOffset: refreshScrollbarsHandleOffset,\r\n      _scrollbarsAddRemoveClass: scrollbarsAddRemoveClass,\r\n      _horizontal: {\r\n        _scrollbarStructures: horizontalScrollbars,\r\n        _clone: generateHorizontalScrollbarStructure,\r\n        _handleStyle: scrollbarsHandleStyle.bind(0, horizontalScrollbars),\r\n      },\r\n      _vertical: {\r\n        _scrollbarStructures: verticalScrollbars,\r\n        _clone: generateVerticalScrollbarStructure,\r\n        _handleStyle: scrollbarsHandleStyle.bind(0, verticalScrollbars),\r\n      },\r\n    },\r\n    appendElements,\r\n    runEachAndClear.bind(0, destroyFns),\r\n  ];\r\n};\r\n","import {\r\n  rAF,\r\n  cAF,\r\n  isFunction,\r\n  on,\r\n  runEachAndClear,\r\n  setT,\r\n  clearT,\r\n  parent,\r\n  scrollLeft,\r\n  scrollTop,\r\n} from 'support';\r\nimport { createState, createOptionCheck } from 'setups/setups';\r\nimport { createScrollbarsSetupEvents } from 'setups/scrollbarsSetup/scrollbarsSetup.events';\r\nimport {\r\n  createScrollbarsSetupElements,\r\n  ScrollbarsSetupElementsObj,\r\n  ScrollbarStructure,\r\n} from 'setups/scrollbarsSetup/scrollbarsSetup.elements';\r\nimport {\r\n  classNamesScrollbarVisible,\r\n  classNamesScrollbarUnusable,\r\n  classNamesScrollbarCornerless,\r\n  classNamesScrollbarAutoHidden,\r\n  classNamesScrollbarHandleInteractive,\r\n  classNamesScrollbarTrackInteractive,\r\n  classNameScrollbarRtl,\r\n} from 'classnames';\r\nimport type { StructureSetupUpdateHints } from 'setups/structureSetup/structureSetup.update';\r\nimport type {\r\n  ReadonlyOptions,\r\n  ScrollbarVisibilityBehavior,\r\n  ScrollbarAutoHideBehavior,\r\n} from 'options';\r\nimport type { Setup, StructureSetupState, StructureSetupStaticState } from 'setups';\r\nimport type { InitializationTarget } from 'initialization';\r\nimport type { DeepPartial, OverflowStyle, StyleObject } from 'typings';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\r\nexport interface ScrollbarsSetupState {}\r\n\r\nexport interface ScrollbarsSetupStaticState {\r\n  _elements: ScrollbarsSetupElementsObj;\r\n  _appendElements: () => void;\r\n}\r\n\r\nconst createSelfCancelTimeout = (timeout?: number | (() => number)) => {\r\n  let id: number;\r\n  const setTFn = timeout ? setT : rAF!;\r\n  const clearTFn = timeout ? clearT : cAF!;\r\n  return [\r\n    (callback: () => any) => {\r\n      clearTFn(id);\r\n      // @ts-ignore\r\n      id = setTFn(callback, isFunction(timeout) ? timeout() : timeout);\r\n    },\r\n    () => clearTFn(id),\r\n  ] as [timeout: (callback: () => any) => void, clear: () => void];\r\n};\r\n\r\nexport const createScrollbarsSetup = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOptions,\r\n  structureSetupState: (() => StructureSetupState) & StructureSetupStaticState\r\n): Setup<\r\n  ScrollbarsSetupState,\r\n  ScrollbarsSetupStaticState,\r\n  [DeepPartial<StructureSetupUpdateHints>]\r\n> => {\r\n  let autoHideIsMove: boolean;\r\n  let autoHideIsLeave: boolean;\r\n  let autoHideNotNever: boolean;\r\n  let mouseInHost: boolean | undefined;\r\n  let prevTheme: string | null | undefined;\r\n  let globalAutoHideDelay = 0;\r\n\r\n  const state = createState({});\r\n  const [getState] = state;\r\n  const [requestMouseMoveAnimationFrame, cancelMouseMoveAnimationFrame] = createSelfCancelTimeout();\r\n  const [requestScrollAnimationFrame, cancelScrollAnimationFrame] = createSelfCancelTimeout();\r\n  const [scrollTimeout, clearScrollTimeout] = createSelfCancelTimeout(100);\r\n  const [auotHideMoveTimeout, clearAutoHideTimeout] = createSelfCancelTimeout(100);\r\n  const [auotHideTimeout, clearAutoTimeout] = createSelfCancelTimeout(() => globalAutoHideDelay);\r\n  const [elements, appendElements, destroyElements] = createScrollbarsSetupElements(\r\n    target,\r\n    structureSetupState._elements,\r\n    createScrollbarsSetupEvents(options, structureSetupState)\r\n  );\r\n  const {\r\n    _host,\r\n    _viewport,\r\n    _scrollOffsetElement,\r\n    _scrollEventElement,\r\n    _viewportIsTarget,\r\n    _isBody,\r\n  } = structureSetupState._elements;\r\n  const {\r\n    _horizontal,\r\n    _vertical,\r\n    _scrollbarsAddRemoveClass: scrollbarsAddRemoveClass,\r\n    _refreshScrollbarsHandleLength,\r\n    _refreshScrollbarsHandleOffset,\r\n  } = elements;\r\n  const { _handleStyle: styleHorizontal } = _horizontal;\r\n  const { _handleStyle: styleVertical } = _vertical;\r\n  const styleScrollbarPosition = (structure: ScrollbarStructure) => {\r\n    const { _scrollbar } = structure;\r\n    const elm = _viewportIsTarget && !_isBody && parent(_scrollbar) === _viewport && _scrollbar;\r\n    return [\r\n      elm,\r\n      {\r\n        transform: elm\r\n          ? `translate(${scrollLeft(_scrollOffsetElement)}px, ${scrollTop(_scrollOffsetElement)}px)`\r\n          : '',\r\n      },\r\n    ] as [HTMLElement | false, StyleObject];\r\n  };\r\n  const manageScrollbarsAutoHide = (removeAutoHide: boolean, delayless?: boolean) => {\r\n    clearAutoTimeout();\r\n    if (removeAutoHide) {\r\n      scrollbarsAddRemoveClass(classNamesScrollbarAutoHidden);\r\n    } else {\r\n      const hide = () => scrollbarsAddRemoveClass(classNamesScrollbarAutoHidden, true);\r\n      if (globalAutoHideDelay > 0 && !delayless) {\r\n        auotHideTimeout(hide);\r\n      } else {\r\n        hide();\r\n      }\r\n    }\r\n  };\r\n  const onHostMouseEnter = () => {\r\n    mouseInHost = autoHideIsLeave;\r\n    mouseInHost && manageScrollbarsAutoHide(true);\r\n  };\r\n\r\n  const destroyFns: (() => void)[] = [\r\n    clearScrollTimeout,\r\n    clearAutoTimeout,\r\n    clearAutoHideTimeout,\r\n    cancelScrollAnimationFrame,\r\n    cancelMouseMoveAnimationFrame,\r\n    destroyElements,\r\n\r\n    on(_host, 'pointerover', onHostMouseEnter, { _once: true }),\r\n    on(_host, 'pointerenter', onHostMouseEnter),\r\n    on(_host, 'pointerleave', () => {\r\n      mouseInHost = false;\r\n      autoHideIsLeave && manageScrollbarsAutoHide(false);\r\n    }),\r\n    on(_host, 'pointermove', () => {\r\n      autoHideIsMove &&\r\n        requestMouseMoveAnimationFrame(() => {\r\n          clearScrollTimeout();\r\n          manageScrollbarsAutoHide(true);\r\n          auotHideMoveTimeout(() => {\r\n            autoHideIsMove && manageScrollbarsAutoHide(false);\r\n          });\r\n        });\r\n    }),\r\n    on(_scrollEventElement, 'scroll', () => {\r\n      requestScrollAnimationFrame(() => {\r\n        _refreshScrollbarsHandleOffset(structureSetupState());\r\n\r\n        autoHideNotNever && manageScrollbarsAutoHide(true);\r\n        scrollTimeout(() => {\r\n          autoHideNotNever && !mouseInHost && manageScrollbarsAutoHide(false);\r\n        });\r\n      });\r\n\r\n      _viewportIsTarget && styleHorizontal(styleScrollbarPosition);\r\n      _viewportIsTarget && styleVertical(styleScrollbarPosition);\r\n    }),\r\n  ];\r\n  const scrollbarsSetupState = getState.bind(0) as (() => ScrollbarsSetupState) &\r\n    ScrollbarsSetupStaticState;\r\n  scrollbarsSetupState._elements = elements;\r\n  scrollbarsSetupState._appendElements = appendElements;\r\n\r\n  return [\r\n    (changedOptions, force, structureUpdateHints) => {\r\n      const {\r\n        _overflowEdgeChanged,\r\n        _overflowAmountChanged,\r\n        _overflowStyleChanged,\r\n        _directionChanged,\r\n      } = structureUpdateHints;\r\n      const checkOption = createOptionCheck(options, changedOptions, force);\r\n      const currStructureSetupState = structureSetupState();\r\n      const { _overflowAmount, _overflowStyle, _directionIsRTL } = currStructureSetupState;\r\n      const [theme, themeChanged] = checkOption<string | null>('scrollbars.theme');\r\n      const [visibility, visibilityChanged] =\r\n        checkOption<ScrollbarVisibilityBehavior>('scrollbars.visibility');\r\n      const [autoHide, autoHideChanged] =\r\n        checkOption<ScrollbarAutoHideBehavior>('scrollbars.autoHide');\r\n      const [autoHideDelay] = checkOption<number>('scrollbars.autoHideDelay');\r\n      const [dragScroll, dragScrollChanged] = checkOption<boolean>('scrollbars.dragScroll');\r\n      const [clickScroll, clickScrollChanged] = checkOption<boolean>('scrollbars.clickScroll');\r\n\r\n      const updateHandle =\r\n        _overflowEdgeChanged || _overflowAmountChanged || _directionChanged || force;\r\n      const updateVisibility = _overflowStyleChanged || visibilityChanged || force;\r\n\r\n      const setScrollbarVisibility = (overflowStyle: OverflowStyle, isHorizontal: boolean) => {\r\n        const isVisible =\r\n          visibility === 'visible' || (visibility === 'auto' && overflowStyle === 'scroll');\r\n        scrollbarsAddRemoveClass(classNamesScrollbarVisible, isVisible, isHorizontal);\r\n        return isVisible;\r\n      };\r\n\r\n      globalAutoHideDelay = autoHideDelay;\r\n\r\n      if (themeChanged) {\r\n        scrollbarsAddRemoveClass(prevTheme);\r\n        scrollbarsAddRemoveClass(theme, true);\r\n\r\n        prevTheme = theme;\r\n      }\r\n      if (autoHideChanged) {\r\n        autoHideIsMove = autoHide === 'move';\r\n        autoHideIsLeave = autoHide === 'leave';\r\n        autoHideNotNever = autoHide !== 'never';\r\n        manageScrollbarsAutoHide(!autoHideNotNever, true);\r\n      }\r\n      if (dragScrollChanged) {\r\n        scrollbarsAddRemoveClass(classNamesScrollbarHandleInteractive, dragScroll);\r\n      }\r\n      if (clickScrollChanged) {\r\n        scrollbarsAddRemoveClass(classNamesScrollbarTrackInteractive, clickScroll);\r\n      }\r\n      if (updateVisibility) {\r\n        const xVisible = setScrollbarVisibility(_overflowStyle.x, true);\r\n        const yVisible = setScrollbarVisibility(_overflowStyle.y, false);\r\n        const hasCorner = xVisible && yVisible;\r\n\r\n        scrollbarsAddRemoveClass(classNamesScrollbarCornerless, !hasCorner);\r\n      }\r\n      if (updateHandle) {\r\n        _refreshScrollbarsHandleLength(currStructureSetupState);\r\n        _refreshScrollbarsHandleOffset(currStructureSetupState);\r\n\r\n        scrollbarsAddRemoveClass(classNamesScrollbarUnusable, !_overflowAmount.x, true);\r\n        scrollbarsAddRemoveClass(classNamesScrollbarUnusable, !_overflowAmount.y, false);\r\n        scrollbarsAddRemoveClass(classNameScrollbarRtl, _directionIsRTL && !_isBody);\r\n      }\r\n    },\r\n    scrollbarsSetupState,\r\n    runEachAndClear.bind(0, destroyFns),\r\n  ];\r\n};\r\n","import {\r\n  assignDeep,\r\n  isEmptyObject,\r\n  each,\r\n  isFunction,\r\n  keys,\r\n  isHTMLElement,\r\n  createEventListenerHub,\r\n  isPlainObject,\r\n} from 'support';\r\nimport { getOptionsDiff } from 'options';\r\nimport { getEnvironment } from 'environment';\r\nimport { cancelInitialization } from 'initialization';\r\nimport { addInstance, getInstance, removeInstance } from 'instances';\r\nimport { createStructureSetup, createScrollbarsSetup } from 'setups';\r\nimport { getPlugins, addPlugin, optionsValidationPluginName } from 'plugins';\r\nimport type { XY, TRBL } from 'support';\r\nimport type { Options, ReadonlyOptions } from 'options';\r\nimport type { Plugin, OptionsValidationPluginInstance } from 'plugins';\r\nimport type { InitializationTarget, Initialization } from 'initialization';\r\nimport type { DeepPartial, OverflowStyle } from 'typings';\r\nimport type { EventListenerMap, EventListener, InitialEventListeners } from 'eventListeners';\r\nimport type {\r\n  ScrollbarsSetupElement,\r\n  ScrollbarStructure,\r\n} from 'setups/scrollbarsSetup/scrollbarsSetup.elements';\r\n\r\n// Notes:\r\n// Height intrinsic detection use \"content: true\" init strategy - or open ticket for custom height intrinsic observer\r\n\r\nexport interface OverlayScrollbarsStatic {\r\n  (target: InitializationTarget): OverlayScrollbars | undefined;\r\n  (\r\n    target: InitializationTarget,\r\n    options: DeepPartial<Options>,\r\n    eventListeners?: InitialEventListeners\r\n  ): OverlayScrollbars;\r\n\r\n  plugin(plugin: Plugin | Plugin[]): void;\r\n  valid(osInstance: any): boolean;\r\n  env(): Environment;\r\n}\r\n\r\nexport interface Environment {\r\n  scrollbarsSize: XY<number>;\r\n  scrollbarsOverlaid: XY<boolean>;\r\n  scrollbarsHiding: boolean;\r\n  rtlScrollBehavior: { n: boolean; i: boolean };\r\n  flexboxGlue: boolean;\r\n  cssCustomProperties: boolean;\r\n  staticDefaultInitialization: Initialization;\r\n  staticDefaultOptions: Options;\r\n\r\n  getDefaultInitialization(): Initialization;\r\n  setDefaultInitialization(newDefaultInitialization: DeepPartial<Initialization>): void;\r\n  getDefaultOptions(): Options;\r\n  setDefaultOptions(newDefaultOptions: DeepPartial<Options>): void;\r\n}\r\n\r\nexport interface State {\r\n  padding: TRBL;\r\n  paddingAbsolute: boolean;\r\n  overflowEdge: XY<number>;\r\n  overflowAmount: XY<number>;\r\n  overflowStyle: XY<OverflowStyle>;\r\n  hasOverflow: XY<boolean>;\r\n  directionRTL: boolean;\r\n  destroyed: boolean;\r\n}\r\n\r\nexport interface ScrollbarElements {\r\n  scrollbar: HTMLElement;\r\n  track: HTMLElement;\r\n  handle: HTMLElement;\r\n}\r\n\r\nexport interface CloneableScrollbarElements extends ScrollbarElements {\r\n  clone(): ScrollbarElements;\r\n}\r\n\r\nexport interface Elements {\r\n  target: HTMLElement;\r\n  host: HTMLElement;\r\n  padding: HTMLElement;\r\n  viewport: HTMLElement;\r\n  content: HTMLElement;\r\n  scrollOffsetElement: HTMLElement;\r\n  scrollEventElement: HTMLElement | Document;\r\n  scrollbarHorizontal: CloneableScrollbarElements;\r\n  scrollbarVertical: CloneableScrollbarElements;\r\n}\r\n\r\nexport interface OverlayScrollbars {\r\n  options(): Options;\r\n  options(newOptions?: DeepPartial<Options>): Options;\r\n\r\n  update(force?: boolean): OverlayScrollbars;\r\n\r\n  destroy(): void;\r\n\r\n  state(): State;\r\n\r\n  elements(): Elements;\r\n\r\n  on<N extends keyof EventListenerMap>(name: N, listener: EventListener<N>): () => void;\r\n  on<N extends keyof EventListenerMap>(name: N, listener: EventListener<N>[]): () => void;\r\n\r\n  off<N extends keyof EventListenerMap>(name: N, listener: EventListener<N>): void;\r\n  off<N extends keyof EventListenerMap>(name: N, listener: EventListener<N>[]): void;\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare\r\nexport const OverlayScrollbars: OverlayScrollbarsStatic = (\r\n  target: InitializationTarget,\r\n  options?: DeepPartial<Options>,\r\n  eventListeners?: InitialEventListeners\r\n) => {\r\n  const { _getDefaultOptions, _addListener: addEnvListener } = getEnvironment();\r\n  const plugins = getPlugins();\r\n  const targetIsElement = isHTMLElement(target);\r\n  const instanceTarget = targetIsElement ? target : target.target;\r\n  const potentialInstance = getInstance(instanceTarget);\r\n  if (options && !potentialInstance) {\r\n    let destroyed = false;\r\n    const optionsValidationPlugin = plugins[\r\n      optionsValidationPluginName\r\n    ] as OptionsValidationPluginInstance;\r\n    const validateOptions = (newOptions?: DeepPartial<Options>) => {\r\n      const opts = newOptions || {};\r\n      const validate = optionsValidationPlugin && optionsValidationPlugin._;\r\n      return validate ? validate(opts, true) : opts;\r\n    };\r\n    const currentOptions: ReadonlyOptions = assignDeep(\r\n      {},\r\n      _getDefaultOptions(),\r\n      validateOptions(options)\r\n    );\r\n    const [addEvent, removeEvent, triggerEvent] = createEventListenerHub(eventListeners);\r\n    const [updateStructure, structureState, destroyStructure] = createStructureSetup(\r\n      target,\r\n      currentOptions\r\n    );\r\n    const [updateScrollbars, scrollbarsState, destroyScrollbars] = createScrollbarsSetup(\r\n      target,\r\n      currentOptions,\r\n      structureState\r\n    );\r\n    const update = (changedOptions: DeepPartial<Options>, force?: boolean) => {\r\n      updateStructure(changedOptions, !!force);\r\n    };\r\n    const removeEnvListener = addEnvListener(update.bind(0, {}, true));\r\n    const destroy = (canceled?: boolean) => {\r\n      removeInstance(instanceTarget);\r\n      removeEnvListener();\r\n\r\n      destroyScrollbars();\r\n      destroyStructure();\r\n\r\n      destroyed = true;\r\n\r\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n      triggerEvent('destroyed', [instance, !!canceled]);\r\n      removeEvent();\r\n    };\r\n\r\n    const instance: OverlayScrollbars = {\r\n      options(newOptions?: DeepPartial<Options>) {\r\n        if (newOptions) {\r\n          const changedOptions = getOptionsDiff(currentOptions, validateOptions(newOptions));\r\n\r\n          if (!isEmptyObject(changedOptions)) {\r\n            assignDeep(currentOptions, changedOptions);\r\n            update(changedOptions);\r\n          }\r\n        }\r\n        return assignDeep({}, currentOptions);\r\n      },\r\n      on: addEvent,\r\n      off: (name, listener) => {\r\n        name && listener && removeEvent(name, listener as any);\r\n      },\r\n      state() {\r\n        const {\r\n          _overflowEdge,\r\n          _overflowAmount,\r\n          _overflowStyle,\r\n          _hasOverflow,\r\n          _padding,\r\n          _paddingAbsolute,\r\n          _directionIsRTL,\r\n        } = structureState();\r\n        return assignDeep(\r\n          {},\r\n          {\r\n            overflowEdge: _overflowEdge,\r\n            overflowAmount: _overflowAmount,\r\n            overflowStyle: _overflowStyle,\r\n            hasOverflow: _hasOverflow,\r\n            padding: _padding,\r\n            paddingAbsolute: _paddingAbsolute,\r\n            directionRTL: _directionIsRTL,\r\n            destroyed,\r\n          }\r\n        );\r\n      },\r\n      elements() {\r\n        const {\r\n          _target,\r\n          _host,\r\n          _padding,\r\n          _viewport,\r\n          _content,\r\n          _scrollOffsetElement,\r\n          _scrollEventElement,\r\n        } = structureState._elements;\r\n        const { _horizontal, _vertical } = scrollbarsState._elements;\r\n        const translateScrollbarStructure = (\r\n          scrollbarStructure: ScrollbarStructure\r\n        ): ScrollbarElements => {\r\n          const { _handle, _track, _scrollbar } = scrollbarStructure;\r\n          return {\r\n            scrollbar: _scrollbar,\r\n            track: _track,\r\n            handle: _handle,\r\n          };\r\n        };\r\n        const translateScrollbarsSetupElement = (\r\n          scrollbarsSetupElement: ScrollbarsSetupElement\r\n        ): CloneableScrollbarElements => {\r\n          const { _scrollbarStructures, _clone } = scrollbarsSetupElement;\r\n          const translatedStructure = translateScrollbarStructure(_scrollbarStructures[0]);\r\n\r\n          return assignDeep({}, translatedStructure, {\r\n            clone: () => {\r\n              const result = translateScrollbarStructure(_clone());\r\n              updateScrollbars({}, true, {});\r\n              return result;\r\n            },\r\n          });\r\n        };\r\n        return assignDeep(\r\n          {},\r\n          {\r\n            target: _target,\r\n            host: _host,\r\n            padding: _padding || _viewport,\r\n            viewport: _viewport,\r\n            content: _content || _viewport,\r\n            scrollOffsetElement: _scrollOffsetElement,\r\n            scrollEventElement: _scrollEventElement,\r\n            scrollbarHorizontal: translateScrollbarsSetupElement(_horizontal),\r\n            scrollbarVertical: translateScrollbarsSetupElement(_vertical),\r\n          }\r\n        );\r\n      },\r\n      update(force?: boolean) {\r\n        update({}, force);\r\n        return instance;\r\n      },\r\n      destroy: destroy.bind(0),\r\n    };\r\n\r\n    structureState._addOnUpdatedListener((updateHints, changedOptions, force: boolean) => {\r\n      updateScrollbars(changedOptions, force, updateHints);\r\n    });\r\n\r\n    each(keys(plugins), (pluginName) => {\r\n      const pluginInstance = plugins[pluginName];\r\n      if (isFunction(pluginInstance)) {\r\n        pluginInstance(OverlayScrollbars, instance);\r\n      }\r\n    });\r\n\r\n    if (cancelInitialization(!targetIsElement && target.cancel, structureState._elements)) {\r\n      destroy(true);\r\n      return instance;\r\n    }\r\n\r\n    structureState._appendElements();\r\n    scrollbarsState._appendElements();\r\n\r\n    addInstance(instanceTarget, instance);\r\n    triggerEvent('initialized', [instance]);\r\n\r\n    structureState._addOnUpdatedListener((updateHints, changedOptions, force) => {\r\n      const {\r\n        _sizeChanged,\r\n        _directionChanged,\r\n        _heightIntrinsicChanged,\r\n        _overflowEdgeChanged,\r\n        _overflowAmountChanged,\r\n        _overflowStyleChanged,\r\n        _contentMutation,\r\n        _hostMutation,\r\n      } = updateHints;\r\n\r\n      triggerEvent('updated', [\r\n        instance,\r\n        {\r\n          updateHints: {\r\n            sizeChanged: _sizeChanged,\r\n            directionChanged: _directionChanged,\r\n            heightIntrinsicChanged: _heightIntrinsicChanged,\r\n            overflowEdgeChanged: _overflowEdgeChanged,\r\n            overflowAmountChanged: _overflowAmountChanged,\r\n            overflowStyleChanged: _overflowStyleChanged,\r\n            contentMutation: _contentMutation,\r\n            hostMutation: _hostMutation,\r\n          },\r\n          changedOptions,\r\n          force,\r\n        },\r\n      ]);\r\n    });\r\n\r\n    return instance.update(true);\r\n  }\r\n  return potentialInstance!;\r\n};\r\n\r\nOverlayScrollbars.plugin = addPlugin;\r\nOverlayScrollbars.valid = (osInstance: any) => {\r\n  const hasElmsFn = osInstance && (osInstance as OverlayScrollbars).elements;\r\n  const elements = isFunction(hasElmsFn) && hasElmsFn();\r\n  return isPlainObject(elements) && !!getInstance(elements.target);\r\n};\r\nOverlayScrollbars.env = () => {\r\n  const {\r\n    _nativeScrollbarsSize,\r\n    _nativeScrollbarsOverlaid,\r\n    _nativeScrollbarsHiding,\r\n    _rtlScrollBehavior,\r\n    _flexboxGlue,\r\n    _cssCustomProperties,\r\n    _staticDefaultInitialization,\r\n    _staticDefaultOptions,\r\n    _getDefaultInitialization,\r\n    _setDefaultInitialization,\r\n    _getDefaultOptions,\r\n    _setDefaultOptions,\r\n  } = getEnvironment();\r\n  return assignDeep(\r\n    {},\r\n    {\r\n      scrollbarsSize: _nativeScrollbarsSize,\r\n      scrollbarsOverlaid: _nativeScrollbarsOverlaid,\r\n      scrollbarsHiding: _nativeScrollbarsHiding,\r\n      rtlScrollBehavior: _rtlScrollBehavior,\r\n      flexboxGlue: _flexboxGlue,\r\n      cssCustomProperties: _cssCustomProperties,\r\n      staticDefaultInitialization: _staticDefaultInitialization,\r\n      staticDefaultOptions: _staticDefaultOptions,\r\n\r\n      getDefaultInitialization: _getDefaultInitialization,\r\n      setDefaultInitialization: _setDefaultInitialization,\r\n      getDefaultOptions: _getDefaultOptions,\r\n      setDefaultOptions: _setDefaultOptions,\r\n    }\r\n  );\r\n};\r\n"],"names":["each","source","callback","isArrayLike","i","length","Object","keys","key","style","elm","styles","getSingleStyle","isString","getStyles","isArray","getStylesResult","computedStyle","window","getComputedStyle","getCSSVal","reduce","result","setCSSVal","createCache","options","update","_initialValue","_equal","_alwaysUpdateValues","_value","_previous","cacheUpdateContextual","newValue","force","curr","newVal","changed","cacheUpdateIsolated","getCurrentCache","ElementNodeType","Node","ELEMENT_NODE","prototype","toString","hasOwnProperty","isUndefined","obj","undefined","isNull","type","call","replace","toLowerCase","isNumber","isBoolean","isFunction","Array","isObject","lengthCorrectFormat","isPlainObject","cstr","ctor","ctorProto","hasOwnConstructor","hasIsPrototypeOf","isHTMLElement","instanceofObj","HTMLElement","nodeType","isElement","Element","indexOf","arr","item","fromIndex","push","array","items","arrayIsSingleItem","apply","from","original","Set","forEach","value","isEmptyArray","runEachAndClear","args","keep","runFn","fn","prop","assignDeep","target","object1","object2","object3","object4","object5","object6","sources","copy","copyIsArray","src","clone","isEmptyObject","name","getSetProp","topLeft","fallback","attr","attrName","getAttribute","setAttribute","attrClass","add","currValues","currValuesSet","split","join","trim","hasAttrClass","has","removeAttr","removeAttribute","scrollLeft","scrollTop","elmPrototype","find","selector","rootElm","document","querySelectorAll","findFirst","querySelector","is","matches","msMatchesSelector","contents","childNodes","parent","parentElement","closest","closestFn","liesBetween","highBoundarySelector","deepBoundarySelector","closestHighBoundaryElm","closestDeepBoundaryElm","deepBoundaryIsValid","before","parentElm","preferredAnchor","insertedElms","anchor","fragment","createDocumentFragment","insertedElm","previousSibling","appendChild","firstChild","nextSibling","insertBefore","appendChildren","node","children","insertedNodes","insertAfter","removeElements","nodes","e","removeChild","createDiv","classNames","div","createElement","createDOM","html","createdDiv","innerHTML","firstLetterToUpper","str","charAt","toUpperCase","slice","getDummyStyle","cssPrefixes","jsPrefixes","jsCache","cssCache","cssProperty","uppercasedName","elmStyle","prefix","prefixWithoutDashes","resultPossibilities","resultPossibility","jsAPI","MutationObserverConstructor","IntersectionObserverConstructor","ResizeObserverConstructor","cAF","rAF","setT","setTimeout","clearT","clearTimeout","rnothtmlwhite","classListAction","className","action","classList","clazz","classes","match","hasClass","contains","removeClass","remove","addClass","bind","equal","a","b","props","propMutation","compareA","compareB","equalWH","equalXY","equalTRBL","equalBCRWH","round","Math","noop","debounce","functionToDebounce","maxTimeoutId","prevArguments","latestArguments","clear","_timeout","_maxDelay","_mergeParams","invokeFunctionToDebounce","this","mergeParms","flush","debouncedFn","arguments","finalTimeout","hasTimeout","finalMaxWait","hasMaxWait","setTimeoutFn","clearTimeoutFn","mergeParamsResult","invokedArgs","boundInvoke","timeoutId","_flush","cssNumber","opacity","zindex","parseToZeroOrNumber","toFloat","num","parseFloat","parseInt","adaptCSSVal","val","getPropertyValue","setProperty","directionIsRTL","topRightBottomLeft","propertyPrefix","propertySuffix","finalPrefix","finalSuffix","top","right","bottom","left","t","r","l","zeroObj","w","h","windowSize","innerWidth","innerHeight","offsetSize","offsetWidth","offsetHeight","clientSize","clientWidth","clientHeight","scrollSize","scrollWidth","scrollHeight","fractionalSize","cssHeight","cssWidth","getBoundingClientRect","passiveEventsSupport","supportPassiveEvents","addEventListener","defineProperty","get","splitEventNames","eventNames","off","listener","capture","eventName","removeEventListener","on","_ref","doSupportPassiveEvents","passive","_passive","_capture","once","_once","offListeners","nativeOptions","finalListener","evt","stopPropagation","preventDefault","x","y","absoluteCoordinates","rect","pageYOffset","pageXOffset","manageListener","createEventListenerHub","initialEventListeners","events","Map","removeEvent","eventSet","currListener","addEvent","set","triggerEvent","event","initialListenerKeys","opsStringify","JSON","stringify","_","Error","defaultOptions","paddingAbsolute","showNativeOverlaidScrollbars","updating","elementEvents","attributes","ignoreMutation","overflow","scrollbars","theme","visibility","autoHide","autoHideDelay","dragScroll","clickScroll","pointers","getOptionsDiff","currOptions","newOptions","diff","optionsKeys","concat","optionKey","currOptionValue","newOptionValue","isDiff","classNameEnvironment","classNameEnvironmentFlexboxGlue","classNameEnvironmentFlexboxGlueMax","dataAttributeHost","dataAttributeHostOverflowX","dataAttributeHostOverflowY","dataValueHostOverflowVisible","dataValueHostScrollbarHidden","dataValueHostUpdating","classNamePadding","classNameViewport","classNameViewportArrange","classNameContent","classNameViewportScrollbarHidden","classNameOverflowVisible","classNameSizeObserver","classNameSizeObserverAppear","classNameSizeObserverListener","classNameSizeObserverListenerScroll","classNameSizeObserverListenerItem","classNameSizeObserverListenerItemFinal","classNameTrinsicObserver","classNameScrollbar","classNameScrollbarRtl","classNameScrollbarHorizontal","classNameScrollbarVertical","classNameScrollbarTrack","classNameScrollbarHandle","classNamesScrollbarVisible","classNamesScrollbarCornerless","classNamesScrollbarTransitionless","classNamesScrollbarInteraction","classNamesScrollbarUnusable","classNamesScrollbarAutoHidden","classNamesScrollbarTrackInteractive","classNamesScrollbarHandleInteractive","pluginRegistry","getPlugins","addPlugin","addedPlugin","plugin","pluginName","_extends","module","assign","exports","__esModule","optionsTemplateTypes","boolean","number","string","object","function","null","validateRecursive","template","doWriteErrors","propPath","validatedOptions","optionsCopy","filter","optionsValue","templateValue","templateIsComplex","propPrefix","validated","_validateRecursive","foreign","isValid","errorEnumStrings","errorPossibleTypes","optionsValueType","templateValueArr","currTemplateType","typeString","isEnumString","enumStringSplit","possibility","console","warn","validateOptions","numberAllowedValues","oTypes","booleanAllowedValues","arrayNullValues","overflowAllowedValues","scrollbarsVisibilityAllowedValues","scrollbarsAutoHideAllowedValues","optionsTemplate","optionsValidationPluginName","_validateOptions","_optionsValidationPlu","scrollAmount","scrollEventName","sizeObserverPluginName","sizeObserverPlugin","listenerElement","onSizeChangedCallback","observeAppearChange","observerElementChildren","observerElementChildrenRoot","shrinkElement","lastChild","expandElement","expandElementChild","cacheSize","currSize","isDirty","rAFId","reset","onResized","appear","onScroll","scrollEvent","width","height","_sizeObserverPlugin","contentArrangeCounter","abs","getWindowDPR","dDPI","screen","deviceXDPI","sDPI","logicalXDPI","devicePixelRatio","diffBiggerThanOne","valOne","valTwo","absValOne","absValTwo","scrollbarsHidingPluginName","scrollbarsHidingPlugin","_createUniqueViewportArrangeElement","env","_nativeScrollbarsHiding","_nativeScrollbarsOverlaid","_cssCustomProperties","create","_overflowUpdateSegment","doViewportArrange","flexboxGlue","viewport","viewportArrange","getState","getViewportOverflowState","hideNativeScrollbars","arrangeViewport","viewportOverflowState","viewportScrollSize","sizeFraction","_getState","_viewportPaddingStyle","_scrollbarsHideOffset","_scrollbarsHideOffsetArrange","arrangeX","arrangeY","hideOffsetX","hideOffsetY","viewportArrangeHorizontalPaddingKey","viewportArrangeHorizontalPaddingValue","viewportArrangeVerticalPaddingValue","paddingTop","fractionalContentWidth","fractionalContenHeight","arrangeSize","sheet","cssRules","insertRule","ruleStyle","undoViewportArrange","finalViewportOverflowState","_getState2","viewportPaddingStyle","finalPaddingStyle","assignProps","prevStyle","_envWindowZoom","size","dpr","envInstance","updateNativeScrollbarSizeCache","sizeNew","deltaSize","deltaAbsSize","deltaAbsRatio","dprNew","deltaIsBigger","difference","dprChanged","isZoom","_updateNativeScrollba","scrollbarSize","scrollbarSizeChanged","_nativeScrollbarsSize","_scrollbarsHidingPlug","environmentInstance","getNativeScrollbarSize","body","measureElm","measureElmChild","cSize","oSize","fSize","getNativeScrollbarsHiding","testElm","revertClass","ex","getRtlScrollBehavior","childElm","strHidden","overflowX","overflowY","direction","parentOffset","childOffset","childOffsetAfterScroll","n","getFlexboxGlue","revertFbxGlue","minOffsetsizeParent","minOffsetsize","supportsMin","revertFbxGlueMax","maxOffsetsizeParent","maxOffsetsize","supportsMax","createEnvironment","_document","envDOM","envElm","envChildElm","_createEventListenerH","_createCache","getNativeScrollbarSizeCache","_getNativeScrollbarSi","nativeScrollbarsSize","nativeScrollbarsHiding","nativeScrollbarsOverlaid","staticDefaultInitialization","host","padding","ownerDocument","content","scrollbarsSlot","cancel","staticDefaultOptions","_rtlScrollBehavior","_flexboxGlue","_addListener","_getDefaultInitialization","_setDefaultInitialization","newInitializationStrategy","_getDefaultOptions","_setDefaultOptions","newDefaultOptions","_staticDefaultInitialization","_staticDefaultOptions","resizeFn","getEnvironment","resolveInitialization","staticInitializationElement","fallbackStaticInitializationElement","defaultStaticInitializationElementStrategy","staticInitializationElementValue","staticInitialization","resolvedInitialization","dynamicInitializationElement","fallbackDynamicInitializationElement","defaultDynamicInitializationElementStrategy","dynamicInitializationElementValue","dynamicInitialization","cancelInitialization","cancelInitializationValue","structureSetupElements","_isBody","_viewportIsTarget","_getEnvironment","defaultNativeScrollbarsOverlaid","defaultbody","resolvedNativeScrollbarsOverlaid","resolvedDocumentScrollingElement","finalNativeScrollbarsOverlaid","finalDocumentScrollingElement","targetInstanceMap","WeakMap","addInstance","osInstance","removeInstance","delete","getInstance","getPropByPath","path","o","createOptionCheck","changedOptions","createState","initialState","state","newState","createNewDiv","unwrap","addDataAttrHost","createStructureSetupElements","createUniqueViewportArrangeElement","_getDefaultInitializa","defaultHostInitialization","defaultViewportInitialization","defaultPaddingInitialization","defaultContentInitialization","targetIsElm","targetStructureInitialization","hostInitialization","paddingInitialization","viewportInitialization","contentInitialization","targetElement","isTextarea","isBody","wnd","defaultView","generalStaticInitializationElement","generalDynamicInitializationElement","viewportElement","viewportIsTarget","viewportIsTargetBody","evaluatedTargetObj","_target","_host","_viewport","_padding","_content","_viewportArrange","_scrollOffsetElement","documentElement","_scrollEventElement","_windowElm","_documentElm","_isTextarea","_targetIsElm","_viewportHasClass","attributeClassName","_viewportAddRemoveClass","generatedElements","elementIsGenerated","destroyFns","isTextareaHostGenerated","targetContents","contentSlot","appendElements","removeHostDataAttr","removePaddingClass","removeViewportClass","removeContentClass","removeHtmlClass","createTrinsicUpdateSegment","updateHints","_heightIntrinsic","_heightIntrinsicChanged","heightIntrinsicChanged","_sizeChanged","_contentMutation","createPaddingUpdateSegment","setState","_isSingleElm","updatePaddingCache","currentPaddingCache","checkOption","_currentPaddingCache","paddingChanged","_nativeScrollbarStyling","_directionIsRTL","_directionChanged","_checkOption","paddingAbsoluteChanged","contentMutation","_updatePaddingCache","paddingStyleChanged","paddingRelative","paddingHorizontal","paddingVertical","paddingStyle","marginRight","marginBottom","marginLeft","viewportStyle","paddingRight","paddingBottom","paddingLeft","_paddingAbsolute","_paddingStyleChanged","max","max0","strVisible","overlaidScrollbarsHideOffset","whCacheOptions","xyCacheOptions","getOverflowAmount","viewportClientSize","tollerance","amount","conditionalClass","overflowIsVisible","overflowBehavior","createOverflowUpdateSegment","updateSizeFraction","getCurrentSizeFraction","_createCache2","updateViewportScrollSizeCache","getCurrentViewportScrollSizeCache","updateOverflowAmountCache","_createCache3","getCurrentOverflowAmountCache","updateOverflowEdge","_createCache4","getCurrentOverflowEdgeCache","updateOverflowStyleCache","_createCache5","fixFlexboxGlue","heightIntrinsic","_overflowScroll","hostClientSize","isContentBox","subtractXScrollbar","viewportStyleObj","arrangeHideOffset","getStatePerAxis","styleKey","isOverlaid","nativeScrollbarSize","overflowStyle","objectPrefferedOverflowStyle","overflowScroll","nonScrollbarStylingHideOffset","scrollbarsHideOffset","scrollbarsHideOffsetArrange","xOverflowStyle","_getStatePerAxis","xOverflowScroll","xScrollbarsHideOffset","xScrollbarsHideOffsetArrange","yOverflowStyle","_getStatePerAxis2","yOverflowScroll","yScrollbarsHideOffset","yScrollbarsHideOffsetArrange","_overflowStyle","setViewportOverflowState","hasOverflow","overflowOption","setAxisOverflowStyle","behavior","hasOverflowAxis","overflowVisible","overflowVisibleBehavior","_setAxisOverflowStyle","visibleBehaviorX","_setAxisOverflowStyle2","visibleBehaviorY","horizontalMarginKey","viewportHorizontalPaddingKey","horizontalMarginValue","verticalMarginValue","horizontalPaddingValue","verticalPaddingValue","_hostMutation","_getState3","showNativeOverlaidScrollbarsOption","showNativeOverlaidScrollbarsChanged","_checkOption2","overflowChanged","adjustFlexboxGlue","overflowXVisible","overflowYVisible","sizeFractionCache","viewportScrollSizeCache","overflowAmuntCache","overflowEdgeCache","preMeasureViewportOverflowState","_undoViewportArrange","redoViewportArrange","undoViewportArrangeOverflowState","_sizeFractionCache","sizeFractionChanged","_viewportScrollSizeCa","viewportScrollSizeChanged","viewportclientSize","arrangedViewportScrollSize","arrangedViewportClientSize","overflowAmountScrollSize","overflowAmountClientSize","_overflowEdgeCache","overflowEdge","overflowEdgeChanged","_overflowAmuntCache","overflowAmount","overflowAmountChanged","_viewportScrollSizeCa2","_sizeFractionCache2","removeClipping","viewportArranged","_updateOverflowStyleC","overflowStyleChanged","_overflowEdge","_overflowAmount","_hasOverflow","_overflowStyleChanged","_overflowEdgeChanged","_overflowAmountChanged","prepareUpdateHints","leading","adaptive","finalAdaptive","objKeys","leadingValue","adaptiveValue","createStructureSetupUpdate","updateSegments","initialUpdateHints","adjustScrollOffset","scrollOffsetX","scrollOffsetY","adaptivedUpdateHints","updateSegment","domRectHasDimensions","createSizeObserver","_ref$_direction","_direction","observeDirectionChange","_ref$_appear","_appear","rtlScrollBehavior","baseElements","sizeObserver","getIsDirectionRTL","currVal","updateResizeObserverContentRectCache","onSizeChangedCallbackProxy","sizeChangedContext","isResizeObserverCall","hasDirectionCache","skip","doDirectionScroll","_updateResizeObserver","pop","contentRect","currRContentRect","prevContentRect","hasDimensions","hadDimensions","rtl","_directionIsRTLCache","appearCallback","resizeObserverInstance","observe","disconnect","pluginAppearCallback","_sizeObserverPlugin$_","pluginOffListeners","updateDirectionIsRTLCache","directionIsRTLCacheValues","directionIsRTLCache","directionIsRTLCacheChanged","isHeightIntrinsic","ioEntryOrSize","isIntersecting","intersectionRatio","createTrinsicObserver","onTrinsicChangedCallback","intersectionObserverInstance","trinsicObserver","updateHeightIntrinsicCache","triggerOnTrinsicChangedCallback","updateValue","fromRecords","intersectionObserverCallback","entries","root","onSizeChanged","newSize","_createSizeObserver","destroySizeObserver","appendSizeObserver","takeRecords","createEventContentChange","eventContentChange","map","destroyed","destroy","updateElements","getElements","eventElmList","elements","entry","entryEventNames","entryOff","createDOMObserver","isContentObserver","isConnected","_attributes","_styleChangingAttributes","_eventContentChange","_nestedTargetSelector","_ignoreTargetChange","_ignoreContentChange","debouncedEventContentChange","_createEventContentCh","destroyEventContentChange","updateEventContentChangeElements","finalAttributes","finalStyleChangingAttributes","observedAttributes","observerCallback","mutations","ignoreTargetChange","ignoreContentChange","targetChangedAttrs","totalAddedNodes","targetStyleChanged","contentChanged","childListChanged","mutation","attributeName","mutationTarget","oldValue","addedNodes","isAttributesType","isChildListType","targetIsMutationTarget","attributeValue","attributeChanged","styleChangingAttrChanged","notOnlyAttrChanged","contentAttrChanged","isNestedTarget","baseAssertion","contentFinalChanged","mutationObserver","attributeOldValue","attributeFilter","subtree","childList","characterData","records","hostSelector","viewportSelector","viewportAttrsFromTarget","baseStyleChangingAttrsTextarea","baseStyleChangingAttrs","createStructureSetupObservers","structureSetupUpdate","debounceTimeout","debounceMaxDelay","contentMutationObserver","hasOver","hasVpStyle","contentScroll","viewportScroll","fractional","updateContentSizeCache","contentMutationObserverAttr","structureSetupUpdateWithDebouncedAdaptiveUpdateHints","prev","prevObj","currObj","updateViewportAttrsFromHost","attribute","hostAttr","onTrinsicChanged","heightIntrinsicCache","updateFn","directionChanged","directionIsRTLChanged","onContentMutation","contentChangedTroughEvent","_updateContentSizeCac","contentSizeChanged","onHostMutation","_ref2","destroyTrinsicObserver","appendTrinsicObserver","updateTrinsicObserver","_ref3","_createDOMObserver","destroyHostMutationObserver","updateHostMutationObserver","viewportIsTargetResizeObserver","hostUpdateResult","trinsicUpdateResult","contentUpdateResult","attributesChanged","_checkOption3","elementEventsChanged","debounceValue","_checkOption4","debounceChanged","updateContentMutationObserver","ignoreMutationFromOptions","ignore","timeout","maxWait","initialXYNumber","initialStructureSetupUpdateState","createStructureSetup","checkOptionsFallback","_createStructureSetup","appendStructureElements","destroyElements","updateStructure","triggerUpdateEvent","truthyUpdateHints","some","destroyObservers","_createStructureSetup2","appendObserverElements","updateObservers","updateObserversOptions","structureSetupState","_addOnUpdatedListener","_appendElements","_elements","getClientOffset","clientX","clientY","getScale","element","continuePointerDown","scrollType","scrollbarOptions","button","isPrimary","pointerType","includes","createRootClickStopPropagationEvents","scrollbar","documentElm","createDragScrollingEvents","doc","scrollbarStructure","scrollOffsetElement","isHorizontal","_handle","_track","_scrollbar","scrollOffsetKey","xyKey","whKey","createOnPointerMoveHandler","mouseDownScroll","mouseDownClientOffset","mouseDownInvertedScale","_structureSetupState","movement","handleTrackDiff","scrollDeltaPercent","scrollDelta","isRTL","negateMultiplactor","pointerDownEvent","offSelectStart","offPointerMove","pointerUpEvent","releasePointerCapture","pointerId","setPointerCapture","createScrollbarsSetupEvents","scrollbarsAddRemoveClass","scrollOffsetElm","min","getScrollbarHandleLengthRatio","scrollbarHandle","scrollbarTrack","axis","viewportSize","handleSize","trackSize","getScrollbarHandleOffsetRatio","scrollLeftTop","scrollPositionMax","scrollPosition","handleRTL","rtlNormalizedScrollPosition","finalScrollPosition","scrollPercent","lengthRatio","createScrollbarsSetupElements","scrollbarsSetupEvents","defaultScrollbarsSlot","evaluatedScrollbarSlot","scrollbarStructureAddRemoveClass","scrollbarStructures","scrollbarsHandleStyle","_elmStyle","scrollbarStructureRefreshHandleLength","structure","toFixed","scrollbarStructureRefreshHandleOffset","translateAxis","offsetRatio","validOffsetRatio","transform","horizontalScrollbars","verticalScrollbars","onlyHorizontal","singleAxis","runHorizontal","runVertical","refreshScrollbarsHandleLength","refreshScrollbarsHandleOffset","generateScrollbarDOM","scrollbarClassName","arrToPush","transitionlessClass","track","handle","generateHorizontalScrollbarStructure","generateVerticalScrollbarStructure","_refreshScrollbarsHandleLength","_refreshScrollbarsHandleOffset","_scrollbarsAddRemoveClass","_horizontal","_scrollbarStructures","_clone","_handleStyle","_vertical","createSelfCancelTimeout","id","setTFn","clearTFn","createScrollbarsSetup","autoHideIsMove","autoHideIsLeave","autoHideNotNever","mouseInHost","prevTheme","globalAutoHideDelay","_createSelfCancelTime","requestMouseMoveAnimationFrame","cancelMouseMoveAnimationFrame","_createSelfCancelTime2","requestScrollAnimationFrame","cancelScrollAnimationFrame","scrollTimeout","_createSelfCancelTime3","clearScrollTimeout","auotHideMoveTimeout","_createSelfCancelTime4","clearAutoHideTimeout","_createSelfCancelTime5","auotHideTimeout","clearAutoTimeout","_createScrollbarsSetu","styleHorizontal","styleVertical","styleScrollbarPosition","manageScrollbarsAutoHide","removeAutoHide","delayless","hide","onHostMouseEnter","scrollbarsSetupState","structureUpdateHints","currStructureSetupState","themeChanged","visibilityChanged","autoHideChanged","_checkOption5","dragScrollChanged","_checkOption6","clickScrollChanged","updateHandle","updateVisibility","setScrollbarVisibility","isVisible","xVisible","yVisible","hasCorner","OverlayScrollbars","eventListeners","addEnvListener","plugins","targetIsElement","instanceTarget","potentialInstance","optionsValidationPlugin","opts","validate","currentOptions","structureState","destroyStructure","updateScrollbars","scrollbarsState","destroyScrollbars","removeEnvListener","canceled","instance","_structureState","directionRTL","translateScrollbarStructure","translateScrollbarsSetupElement","scrollbarsSetupElement","translatedStructure","scrollEventElement","scrollbarHorizontal","scrollbarVertical","pluginInstance","sizeChanged","hostMutation","valid","hasElmsFn","_getEnvironment2","scrollbarsSize","scrollbarsOverlaid","scrollbarsHiding","cssCustomProperties","getDefaultInitialization","setDefaultInitialization","getDefaultOptions","setDefaultOptions"],"mappings":"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"}