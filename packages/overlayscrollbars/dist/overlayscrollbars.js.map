{"version":3,"file":"overlayscrollbars.js","sources":["../src/support/utils/array.ts","../src/support/dom/style.ts","../src/support/cache.ts","../src/support/utils/types.ts","../src/support/utils/object.ts","../src/support/dom/attribute.ts","../src/support/dom/traversal.ts","../src/support/dom/manipulation.ts","../src/support/dom/create.ts","../src/support/compatibility/vendors.ts","../src/support/compatibility/apis.ts","../src/support/dom/class.ts","../src/support/utils/equal.ts","../src/support/utils/function.ts","../src/support/dom/dimensions.ts","../src/support/dom/events.ts","../src/support/dom/offset.ts","../src/support/eventListeners.ts","../src/setups/setups.ts","../src/classnames.ts","../src/options.ts","../src/plugins/plugins.ts","../../../node_modules/@babel/runtime/helpers/extends.js","../src/plugins/optionsValidationPlugin/validation.ts","../src/plugins/optionsValidationPlugin/optionsValidationPlugin.ts","../src/plugins/sizeObserverPlugin/sizeObserverPlugin.ts","../src/plugins/scrollbarsHidingPlugin/scrollbarsHidingPlugin.ts","../src/environment.ts","../src/initialization.ts","../src/setups/structureSetup/structureSetup.elements.ts","../src/setups/structureSetup/updateSegments/trinsicUpdateSegment.ts","../src/setups/structureSetup/updateSegments/paddingUpdateSegment.ts","../src/setups/structureSetup/updateSegments/overflowUpdateSegment.ts","../src/setups/structureSetup/structureSetup.update.ts","../src/observers/sizeObserver.ts","../src/observers/trinsicObserver.ts","../src/observers/domObserver.ts","../src/setups/structureSetup/structureSetup.observers.ts","../src/setups/structureSetup/structureSetup.ts","../src/setups/scrollbarsSetup/scrollbarsSetup.elements.ts","../src/setups/scrollbarsSetup/scrollbarsSetup.ts","../src/instances.ts","../src/overlayscrollbars.ts"],"sourcesContent":["import { isArrayLike, isString } from 'support/utils/types';\r\nimport { PlainObject } from 'typings';\r\n\r\ntype RunEachItem = ((...args: any) => any | any[]) | null | undefined;\r\n\r\n/**\r\n * Iterates through a array or object\r\n * @param arrayLikeOrObject The array or object through which shall be iterated.\r\n * @param callback The function which is responsible for the iteration.\r\n * If the function returns true its treated like a \"continue\" statement.\r\n * If the function returns false its treated like a \"break\" statement.\r\n */\r\nexport function each<T>(\r\n  array: Array<T> | ReadonlyArray<T>,\r\n  callback: (value: T, indexOrKey: number, source: Array<T>) => boolean | unknown\r\n): Array<T> | ReadonlyArray<T>;\r\nexport function each<T>(\r\n  array: Array<T> | ReadonlyArray<T> | false | null | undefined,\r\n  callback: (value: T, indexOrKey: number, source: Array<T>) => boolean | unknown\r\n): Array<T> | ReadonlyArray<T> | false | null | undefined;\r\nexport function each<T>(\r\n  arrayLikeObject: ArrayLike<T>,\r\n  callback: (value: T, indexOrKey: number, source: ArrayLike<T>) => boolean | unknown\r\n): ArrayLike<T>;\r\nexport function each<T>(\r\n  arrayLikeObject: ArrayLike<T> | false | null | undefined,\r\n  callback: (value: T, indexOrKey: number, source: ArrayLike<T>) => boolean | unknown\r\n): ArrayLike<T> | false | null | undefined;\r\nexport function each(\r\n  obj: PlainObject,\r\n  callback: (value: any, indexOrKey: string, source: PlainObject) => boolean | unknown\r\n): PlainObject;\r\nexport function each(\r\n  obj: PlainObject | false | null | undefined,\r\n  callback: (value: any, indexOrKey: string, source: PlainObject) => boolean | unknown\r\n): PlainObject | false | null | undefined;\r\nexport function each<T>(\r\n  source: Array<T> | ArrayLike<T> | ReadonlyArray<T> | PlainObject | false | null | undefined,\r\n  callback: (value: T, indexOrKey: any, source: any) => boolean | unknown\r\n): Array<T> | ArrayLike<T> | ReadonlyArray<T> | PlainObject | false | null | undefined {\r\n  if (isArrayLike(source)) {\r\n    for (let i = 0; i < source.length; i++) {\r\n      if (callback(source[i], i, source) === false) {\r\n        break;\r\n      }\r\n    }\r\n  } else if (source) {\r\n    each(Object.keys(source), (key) => callback(source[key], key, source));\r\n  }\r\n  return source;\r\n}\r\n\r\n/**\r\n * Returns the index of the given inside the given array or -1 if the given item isn't part of the given array.\r\n * @param arr The array.\r\n * @param item The item.\r\n * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\r\n */\r\nexport const indexOf = <T = any>(arr: T[], item: T, fromIndex?: number): number =>\r\n  arr.indexOf(item, fromIndex);\r\n\r\n/**\r\n * Pushesh all given items into the given array and returns it.\r\n * @param array The array the items shall be pushed into.\r\n * @param items The items which shall be pushed into the array.\r\n */\r\nexport const push = <T>(array: T[], items: T | ArrayLike<T>, arrayIsSingleItem?: boolean): T[] => {\r\n  !arrayIsSingleItem && !isString(items) && isArrayLike(items)\r\n    ? Array.prototype.push.apply(array, items as T[])\r\n    : array.push(items as T);\r\n  return array;\r\n};\r\n\r\n/**\r\n * Creates a shallow-copied Array instance from an array-like or iterable object.\r\n * @param arr The object from which the array instance shall be created.\r\n */\r\nexport const from = <T = any>(arr?: ArrayLike<T> | Set<T>) => {\r\n  const original = Array.from;\r\n  const result: T[] = [];\r\n\r\n  if (original && arr) {\r\n    return original(arr);\r\n  }\r\n\r\n  if (arr instanceof Set) {\r\n    arr.forEach((value) => {\r\n      push(result, value);\r\n    });\r\n  } else {\r\n    each(arr, (elm) => {\r\n      push(result, elm);\r\n    });\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Check whether the passed array is empty.\r\n * @param array The array which shall be checked.\r\n */\r\nexport const isEmptyArray = (array: any[] | null | undefined): boolean =>\r\n  !!array && array.length === 0;\r\n\r\n/**\r\n * Calls all functions in the passed array/set of functions.\r\n * @param arr The array filled with function which shall be called.\r\n * @param args The args with which each function is called.\r\n * @param keep True when the Set / array should not be cleared afterwards, false otherwise.\r\n */\r\nexport const runEachAndClear = (arr: RunEachItem[], args?: any[], keep?: boolean): void => {\r\n  // eslint-disable-next-line prefer-spread\r\n  const runFn = (fn: RunEachItem) => fn && fn.apply(undefined, args || []);\r\n  each(arr, runFn);\r\n  !keep && ((arr as any[]).length = 0);\r\n};\r\n","import { each, keys } from 'support/utils';\r\nimport { isString, isNumber, isArray, isUndefined } from 'support/utils/types';\r\nimport { PlainObject, StyleObject } from 'typings';\r\n\r\nexport interface TRBL {\r\n  t: number;\r\n  r: number;\r\n  b: number;\r\n  l: number;\r\n}\r\n\r\nconst cssNumber = {\r\n  // animationiterationcount: 1,\r\n  // columncount: 1,\r\n  // fillopacity: 1,\r\n  // flexgrow: 1,\r\n  // flexshrink: 1,\r\n  // fontweight: 1,\r\n  // lineheight: 1,\r\n  // order: 1,\r\n  // orphans: 1,\r\n  // widows: 1,\r\n  // zoom: 1,\r\n  opacity: 1,\r\n  zindex: 1,\r\n};\r\n\r\nconst parseToZeroOrNumber = (value: string, toFloat?: boolean): number => {\r\n  /* istanbul ignore next */\r\n  const num = toFloat ? parseFloat(value) : parseInt(value, 10);\r\n  // num === num means num is not NaN\r\n  /* istanbul ignore next */\r\n  return num === num ? num : 0; // eslint-disable-line no-self-compare\r\n};\r\n\r\nconst adaptCSSVal = (prop: string, val: string | number): string | number =>\r\n  !cssNumber[prop.toLowerCase()] && isNumber(val) ? `${val}px` : val;\r\n\r\nconst getCSSVal = (elm: HTMLElement, computedStyle: CSSStyleDeclaration, prop: string): string =>\r\n  /* istanbul ignore next */\r\n  computedStyle != null\r\n    ? computedStyle[prop] || computedStyle.getPropertyValue(prop)\r\n    : elm.style[prop];\r\n\r\nconst setCSSVal = (\r\n  elm: HTMLElement | false | null | undefined,\r\n  prop: string,\r\n  val: string | number\r\n): void => {\r\n  try {\r\n    if (elm) {\r\n      const { style: elmStyle } = elm;\r\n      if (!isUndefined(elmStyle[prop])) {\r\n        elmStyle[prop] = adaptCSSVal(prop, val);\r\n      } else {\r\n        elmStyle.setProperty(prop, val as string);\r\n      }\r\n    }\r\n  } catch (e) {}\r\n};\r\n\r\n/**\r\n * Gets or sets the passed styles to the passed element.\r\n * @param elm The element to which the styles shall be applied to / be read from.\r\n * @param styles The styles which shall be set or read.\r\n */\r\nexport function style<CustomCssProps>(\r\n  elm: HTMLElement | false | null | undefined,\r\n  styles: StyleObject<CustomCssProps>\r\n): void;\r\nexport function style<CustomCssProps>(\r\n  elm: HTMLElement | false | null | undefined,\r\n  styles: string\r\n): string;\r\nexport function style<CustomCssProps>(\r\n  elm: HTMLElement | false | null | undefined,\r\n  styles: Array<string> | string\r\n): { [key: string]: string };\r\nexport function style<CustomCssProps>(\r\n  elm: HTMLElement | false | null | undefined,\r\n  styles: StyleObject<CustomCssProps> | Array<string> | string\r\n): { [key: string]: string } | string | void {\r\n  const getSingleStyle = isString(styles);\r\n  const getStyles = isArray(styles) || getSingleStyle;\r\n\r\n  if (getStyles) {\r\n    let getStylesResult: string | PlainObject = getSingleStyle ? '' : {};\r\n    if (elm) {\r\n      const computedStyle: CSSStyleDeclaration = window.getComputedStyle(elm, null);\r\n      getStylesResult = getSingleStyle\r\n        ? getCSSVal(elm, computedStyle, styles as string)\r\n        : (styles as Array<string>).reduce((result, key) => {\r\n            result[key] = getCSSVal(elm, computedStyle, key as string);\r\n            return result;\r\n          }, getStylesResult);\r\n    }\r\n    return getStylesResult;\r\n  }\r\n  each(keys(styles), (key) => setCSSVal(elm, key, styles[key]));\r\n}\r\n\r\n/**\r\n * Hides the passed element (display: none).\r\n * @param elm The element which shall be hidden.\r\n */\r\nexport const hide = (elm: HTMLElement | false | null | undefined): void => {\r\n  style(elm, { display: 'none' });\r\n};\r\n\r\n/**\r\n * Shows the passed element (display: block).\r\n * @param elm The element which shall be shown.\r\n */\r\nexport const show = (elm: HTMLElement | false | null | undefined): void => {\r\n  style(elm, { display: 'block' });\r\n};\r\n\r\n/**\r\n * Returns the top right bottom left values of the passed css property.\r\n * @param elm The element of which the values shall be returned.\r\n * @param propertyPrefix The css property prefix. (e.g. \"border\")\r\n * @param propertySuffix The css property suffix. (e.g. \"width\")\r\n */\r\nexport const topRightBottomLeft = (\r\n  elm?: HTMLElement | false | null | undefined,\r\n  propertyPrefix?: string,\r\n  propertySuffix?: string\r\n): TRBL => {\r\n  const finalPrefix = propertyPrefix ? `${propertyPrefix}-` : '';\r\n  const finalSuffix = propertySuffix ? `-${propertySuffix}` : '';\r\n  const top = `${finalPrefix}top${finalSuffix}`;\r\n  const right = `${finalPrefix}right${finalSuffix}`;\r\n  const bottom = `${finalPrefix}bottom${finalSuffix}`;\r\n  const left = `${finalPrefix}left${finalSuffix}`;\r\n  const result = style(elm, [top, right, bottom, left]);\r\n  return {\r\n    t: parseToZeroOrNumber(result[top]),\r\n    r: parseToZeroOrNumber(result[right]),\r\n    b: parseToZeroOrNumber(result[bottom]),\r\n    l: parseToZeroOrNumber(result[left]),\r\n  };\r\n};\r\n","export interface CacheOptions<Value> {\r\n  // initial value of _value.\r\n  _initialValue: Value;\r\n  // Custom comparison function if shallow compare isn't enough. Returns true if nothing changed.\r\n  _equal?: EqualCachePropFunction<Value>;\r\n  // If true always updates _value and _previous, otherwise they update only when they changed.\r\n  _alwaysUpdateValues?: boolean;\r\n}\r\n\r\nexport type CacheValues<T> = [value: T, changed: boolean, previous?: T];\r\n\r\nexport type EqualCachePropFunction<Value> = (currentVal: Value, newVal: Value) => boolean;\r\n\r\nexport type CacheUpdater<Value> = (current: Value, previous?: Value) => Value;\r\n\r\nexport type UpdateCacheContextual<Value> = (newValue: Value, force?: boolean) => CacheValues<Value>;\r\n\r\nexport type UpdateCache<Value> = (force?: boolean) => CacheValues<Value>;\r\n\r\nexport type GetCurrentCache<Value> = (force?: boolean) => CacheValues<Value>;\r\n\r\nexport type Cache<Value> = [UpdateCache<Value>, GetCurrentCache<Value>];\r\n\r\nexport type CacheContextual<Value> = [UpdateCacheContextual<Value>, GetCurrentCache<Value>];\r\n\r\ntype CreateCache = {\r\n  <Value>(options: CacheOptions<Value>): CacheContextual<Value>;\r\n  <Value>(options: CacheOptions<Value>, update: CacheUpdater<Value>): Cache<Value>;\r\n  <Value>(options: CacheOptions<Value>, update?: CacheUpdater<Value>):\r\n    | CacheContextual<Value>\r\n    | Cache<Value>;\r\n};\r\n\r\nexport const createCache: CreateCache = <Value>(\r\n  options: CacheOptions<Value>,\r\n  update?: CacheUpdater<Value>\r\n): CacheContextual<Value> | Cache<Value> => {\r\n  const { _initialValue, _equal, _alwaysUpdateValues } = options;\r\n  let _value: Value = _initialValue;\r\n  let _previous: Value | undefined;\r\n\r\n  const cacheUpdateContextual: UpdateCacheContextual<Value> = (newValue, force?) => {\r\n    const curr = _value;\r\n\r\n    const newVal = newValue;\r\n    const changed = force || (_equal ? !_equal(curr, newVal) : curr !== newVal);\r\n\r\n    if (changed || _alwaysUpdateValues) {\r\n      _value = newVal;\r\n      _previous = curr;\r\n    }\r\n\r\n    return [_value, changed, _previous];\r\n  };\r\n  const cacheUpdateIsolated: UpdateCache<Value> = (force?) =>\r\n    cacheUpdateContextual(update!(_value, _previous), force);\r\n\r\n  const getCurrentCache: GetCurrentCache<Value> = (force?: boolean) => [\r\n    _value,\r\n    !!force, // changed\r\n    _previous,\r\n  ];\r\n\r\n  return [update ? cacheUpdateIsolated : cacheUpdateContextual, getCurrentCache] as\r\n    | CacheContextual<Value>\r\n    | Cache<Value>;\r\n};\r\n","import { PlainObject } from 'typings';\r\n\r\nconst ElementNodeType = Node.ELEMENT_NODE;\r\nconst { toString, hasOwnProperty } = Object.prototype;\r\n\r\nexport const isUndefined = (obj: any): obj is undefined => obj === undefined;\r\n\r\nexport const isNull = (obj: any): obj is null => obj === null;\r\n\r\nexport const type = (obj: any): string =>\r\n  isUndefined(obj) || isNull(obj)\r\n    ? `${obj}`\r\n    : toString\r\n        .call(obj)\r\n        .replace(/^\\[object (.+)\\]$/, '$1')\r\n        .toLowerCase();\r\n\r\nexport const isNumber = (obj: any): obj is number => typeof obj === 'number';\r\n\r\nexport const isString = (obj: any): obj is string => typeof obj === 'string';\r\n\r\nexport const isBoolean = (obj: any): obj is boolean => typeof obj === 'boolean';\r\n\r\nexport const isFunction = (obj: any): obj is (...args: any[]) => any => typeof obj === 'function';\r\n\r\nexport const isArray = <T = any>(obj: any): obj is Array<T> => Array.isArray(obj);\r\n\r\nexport const isObject = (obj: any): boolean =>\r\n  typeof obj === 'object' && !isArray(obj) && !isNull(obj);\r\n\r\n/**\r\n * Returns true if the given object is array like, false otherwise.\r\n * @param obj The Object\r\n */\r\nexport const isArrayLike = <T extends PlainObject = any>(obj: any): obj is ArrayLike<T> => {\r\n  const length = !!obj && obj.length;\r\n  const lengthCorrectFormat = isNumber(length) && length > -1 && length % 1 == 0; // eslint-disable-line eqeqeq\r\n\r\n  return isArray(obj) || (!isFunction(obj) && lengthCorrectFormat)\r\n    ? length > 0 && isObject(obj)\r\n      ? length - 1 in obj\r\n      : true\r\n    : false;\r\n};\r\n\r\n/**\r\n * Returns true if the given object is a \"plain\" (e.g. { key: value }) object, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport const isPlainObject = <T = any>(obj: any): obj is PlainObject<T> => {\r\n  if (!obj || !isObject(obj) || type(obj) !== 'object') return false;\r\n\r\n  let key;\r\n  const cstr = 'constructor';\r\n  const ctor = obj[cstr];\r\n  const ctorProto = ctor && ctor.prototype;\r\n  const hasOwnConstructor = hasOwnProperty.call(obj, cstr);\r\n  const hasIsPrototypeOf = ctorProto && hasOwnProperty.call(ctorProto, 'isPrototypeOf');\r\n\r\n  if (ctor && !hasOwnConstructor && !hasIsPrototypeOf) {\r\n    return false;\r\n  }\r\n\r\n  /* eslint-disable no-restricted-syntax */\r\n  for (key in obj) {\r\n    /**/\r\n  }\r\n  /* eslint-enable */\r\n\r\n  return isUndefined(key) || hasOwnProperty.call(obj, key);\r\n};\r\n\r\n/**\r\n * Checks whether the given object is a HTMLElement.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport const isHTMLElement = (obj: any): obj is HTMLElement => {\r\n  const instanceofObj = HTMLElement;\r\n  return obj\r\n    ? instanceofObj\r\n      ? obj instanceof instanceofObj\r\n      : obj.nodeType === ElementNodeType\r\n    : false;\r\n};\r\n\r\n/**\r\n * Checks whether the given object is a Element.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport const isElement = (obj: any): obj is Element => {\r\n  const instanceofObj = Element;\r\n  return obj\r\n    ? instanceofObj\r\n      ? obj instanceof instanceofObj\r\n      : obj.nodeType === ElementNodeType\r\n    : false;\r\n};\r\n","import { isArray, isFunction, isPlainObject, isNull } from 'support/utils/types';\r\nimport { each } from 'support/utils/array';\r\n\r\n/**\r\n * Determines whether the passed object has a property with the passed name.\r\n * @param obj The object.\r\n * @param prop The name of the property.\r\n */\r\nexport const hasOwnProperty = (obj: any, prop: string | number | symbol): boolean =>\r\n  Object.prototype.hasOwnProperty.call(obj, prop);\r\n\r\n/**\r\n * Returns the names of the enumerable string properties and methods of an object.\r\n * @param obj The object of which the properties shall be returned.\r\n */\r\nexport const keys = (obj: any): Array<string> => (obj ? Object.keys(obj) : []);\r\n\r\ntype AssignDeep = {\r\n  <T, U>(target: T, object1: U): T & U;\r\n  <T, U, V>(target: T, object1: U, object2: V): T & U & V;\r\n  <T, U, V, W>(target: T, object1: U, object2: V, object3: W): T & U & V & W;\r\n  <T, U, V, W, X>(target: T, object1: U, object2: V, object3: W, object4: X): T & U & V & W & X;\r\n  <T, U, V, W, X, Y>(target: T, object1: U, object2: V, object3: W, object4: X, object5: Y): T &\r\n    U &\r\n    V &\r\n    W &\r\n    X &\r\n    Y;\r\n  <T, U, V, W, X, Y, Z>(\r\n    target: T,\r\n    object1?: U,\r\n    object2?: V,\r\n    object3?: W,\r\n    object4?: X,\r\n    object5?: Y,\r\n    object6?: Z\r\n  ): T & U & V & W & X & Y & Z;\r\n};\r\n\r\n// https://github.com/jquery/jquery/blob/master/src/core.js#L116\r\nexport const assignDeep: AssignDeep = <T, U, V, W, X, Y, Z>(\r\n  target: T,\r\n  object1?: U,\r\n  object2?: V,\r\n  object3?: W,\r\n  object4?: X,\r\n  object5?: Y,\r\n  object6?: Z\r\n): T & U & V & W & X & Y & Z => {\r\n  const sources: Array<any> = [object1, object2, object3, object4, object5, object6];\r\n\r\n  // Handle case when target is a string or something (possible in deep copy)\r\n  if ((typeof target !== 'object' || isNull(target)) && !isFunction(target)) {\r\n    target = {} as T;\r\n  }\r\n\r\n  each(sources, (source) => {\r\n    // Extend the base object\r\n    each(keys(source), (key) => {\r\n      const copy: any = source[key];\r\n\r\n      // Prevent Object.prototype pollution\r\n      // Prevent never-ending loop\r\n      if (target === copy) {\r\n        return true;\r\n      }\r\n\r\n      const copyIsArray = isArray(copy);\r\n\r\n      // Recurse if we're merging plain objects or arrays\r\n      if (copy && (isPlainObject(copy) || copyIsArray)) {\r\n        const src = target[key];\r\n        let clone: any = src;\r\n\r\n        // Ensure proper type for the source value\r\n        if (copyIsArray && !isArray(src)) {\r\n          clone = [];\r\n        } else if (!copyIsArray && !isPlainObject(src)) {\r\n          clone = {};\r\n        }\r\n\r\n        // Never move original objects, clone them\r\n        target[key] = assignDeep(clone, copy) as any;\r\n      } else {\r\n        target[key] = copy;\r\n      }\r\n    });\r\n  });\r\n\r\n  // Return the modified object\r\n  return target as any;\r\n};\r\n\r\n/**\r\n * Returns true if the given object is empty, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport const isEmptyObject = (obj: any): boolean => {\r\n  /* eslint-disable no-restricted-syntax, guard-for-in */\r\n  for (const name in obj) return false;\r\n  return true;\r\n  /* eslint-enable */\r\n};\r\n","import { from } from 'support/utils/array';\r\nimport { isUndefined } from 'support/utils/types';\r\n\r\ntype GetSetPropName = 'scrollLeft' | 'scrollTop' | 'value';\r\n\r\ntype Attr = {\r\n  (elm: HTMLElement | false | null | undefined, attrName: string): string | null;\r\n  (elm: HTMLElement | false | null | undefined, attrName: string, value: string): void;\r\n  (elm: HTMLElement | false | null | undefined, attrName: string, value?: string):\r\n    | string\r\n    | null\r\n    | void;\r\n};\r\n\r\ntype GetSetProp<T> = {\r\n  (elm: HTMLElement | false | null | undefined): T;\r\n  (elm: HTMLElement | false | null | undefined, value: T): void;\r\n  (elm: HTMLElement | false | null | undefined, value?: T): number | void;\r\n};\r\n\r\nconst getSetProp = (\r\n  topLeft: GetSetPropName,\r\n  fallback: number | string,\r\n  elm: HTMLElement | HTMLInputElement | false | null | undefined,\r\n  value?: number | string\r\n): number | string | void => {\r\n  if (isUndefined(value)) {\r\n    return elm ? elm[topLeft] : fallback;\r\n  }\r\n  elm && (elm[topLeft] = value);\r\n};\r\n\r\n/**\r\n * Gets or sets a attribute with the given attribute of the given element depending whether the value attribute is given.\r\n * Returns null if the element has no attribute with the given name.\r\n * @param elm The element of which the attribute shall be get or set.\r\n * @param attrName The attribute name which shall be get or set.\r\n * @param value The value of the attribute which shall be set.\r\n */\r\nexport const attr = ((\r\n  elm: HTMLElement | false | null | undefined,\r\n  attrName: string,\r\n  value?: string\r\n): string | null | void => {\r\n  if (isUndefined(value)) {\r\n    return elm ? elm.getAttribute(attrName) : null;\r\n  }\r\n  elm && elm.setAttribute(attrName, value);\r\n}) as Attr;\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and adds or removes the given value from it.\r\n * @param elm The element.\r\n * @param attrName The attributeName to which the value shall be added or removed.\r\n * @param value The value which shall be added or removed.\r\n * @param add True if the value shall be added, false otherwise.\r\n */\r\nexport const attrClass = (\r\n  elm: HTMLElement | false | null | undefined,\r\n  attrName: string,\r\n  value: string,\r\n  add?: boolean\r\n) => {\r\n  const currValues = attr(elm, attrName) || '';\r\n  const currValuesSet = new Set(currValues.split(' '));\r\n  currValuesSet[add ? 'add' : 'delete'](value);\r\n\r\n  attr(elm, attrName, from(currValuesSet).join(' ').trim());\r\n};\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and checks if the given value is in it.\r\n * @param elm The element.\r\n * @param attrName The attributeName from which the content shall be checked.\r\n * @param value The value.\r\n * @returns True if the given attribute has the value in it, false otherwise.\r\n */\r\nexport const hasAttrClass = (\r\n  elm: HTMLElement | false | null | undefined,\r\n  attrName: string,\r\n  value: string\r\n) => {\r\n  const currValues = attr(elm, attrName) || '';\r\n  const currValuesSet = new Set(currValues.split(' '));\r\n  return currValuesSet.has(value);\r\n};\r\n\r\n/**\r\n * Removes the given attribute from the given element.\r\n * @param elm The element of which the attribute shall be removed.\r\n * @param attrName The attribute name.\r\n */\r\nexport const removeAttr = (elm: Element | false | null | undefined, attrName: string): void => {\r\n  elm && elm.removeAttribute(attrName);\r\n};\r\n\r\n/**\r\n * Gets or sets the scrollLeft value of the given element depending whether the value attribute is given.\r\n * @param elm The element of which the scrollLeft value shall be get or set.\r\n * @param value The scrollLeft value which shall be set.\r\n */\r\nexport const scrollLeft = ((\r\n  elm: HTMLElement | false | null | undefined,\r\n  value?: number\r\n): number | void => getSetProp('scrollLeft', 0, elm, value) as number) as GetSetProp<number>;\r\n\r\n/**\r\n * Gets or sets the scrollTop value of the given element depending whether the value attribute is given.\r\n * @param elm The element of which the scrollTop value shall be get or set.\r\n * @param value The scrollTop value which shall be set.\r\n */\r\nexport const scrollTop = ((\r\n  elm: HTMLElement | false | null | undefined,\r\n  value?: number\r\n): number | void => getSetProp('scrollTop', 0, elm, value) as number) as GetSetProp<number>;\r\n\r\n/**\r\n * Gets or sets the value of the given input element depending whether the value attribute is given.\r\n * @param elm The input element of which the value shall be get or set.\r\n * @param value The value which shall be set.\r\n */\r\nexport const val = ((\r\n  elm: HTMLInputElement | false | null | undefined,\r\n  value?: string\r\n): string | void => getSetProp('value', '', elm, value) as string) as GetSetProp<string>;\r\n","import { isElement } from 'support/utils/types';\r\nimport { push, from } from 'support/utils/array';\r\n\r\ntype InputElementType = Node | Element | Node | false | null | undefined;\r\ntype OutputElementType = Node | Element | null;\r\n\r\nconst elmPrototype = Element.prototype;\r\n\r\n/**\r\n * Find all elements with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nconst find = (selector: string, elm?: InputElementType): Element[] => {\r\n  const arr: Array<Element> = [];\r\n  const rootElm = elm ? (isElement(elm) ? elm : null) : document;\r\n\r\n  return rootElm ? push(arr, rootElm.querySelectorAll(selector)) : arr;\r\n};\r\n\r\n/**\r\n * Find the first element with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nconst findFirst = (selector: string, elm?: InputElementType): OutputElementType => {\r\n  const rootElm = elm ? (isElement(elm) ? elm : null) : document;\r\n\r\n  return rootElm ? rootElm.querySelector(selector) : null;\r\n};\r\n\r\n/**\r\n * Determines whether the passed element is matching with the passed selector.\r\n * @param elm The element which has to be compared with the passed selector.\r\n * @param selector The selector which has to be compared with the passed element. Additional selectors: ':visible' and ':hidden'.\r\n */\r\nconst is = (elm: InputElementType, selector: string): boolean => {\r\n  if (isElement(elm)) {\r\n    /* istanbul ignore next */\r\n    // eslint-disable-next-line\r\n    // @ts-ignore\r\n    const fn: (...args: any) => boolean = elmPrototype.matches || elmPrototype.msMatchesSelector;\r\n    return fn.call(elm, selector);\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * Returns the children (no text-nodes or comments) of the passed element which are matching the passed selector. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the children shall be returned.\r\n * @param selector The selector which must match with the children elements.\r\n */\r\nconst children = (elm: InputElementType, selector?: string): ReadonlyArray<Element> => {\r\n  const childs: Array<Element> = [];\r\n\r\n  return isElement(elm)\r\n    ? push(\r\n        childs,\r\n        from(elm.children).filter((child) => (selector ? is(child, selector) : child))\r\n      )\r\n    : childs;\r\n};\r\n\r\n/**\r\n * Returns the childNodes (incl. text-nodes or comments etc.) of the passed element. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the childNodes shall be returned.\r\n */\r\nconst contents = (elm: InputElementType): ReadonlyArray<ChildNode> =>\r\n  elm ? from(elm.childNodes) : [];\r\n\r\n/**\r\n * Returns the parent element of the passed element, or null if the passed element is null.\r\n * @param elm The element of which the parent element shall be returned.\r\n */\r\nconst parent = (elm: InputElementType): OutputElementType => (elm ? elm.parentElement : null);\r\n\r\nexport const closest = (elm: InputElementType, selector: string): OutputElementType => {\r\n  if (isElement(elm)) {\r\n    const closestFn = elmPrototype.closest;\r\n    if (closestFn) {\r\n      return closestFn.call(elm, selector);\r\n    }\r\n\r\n    do {\r\n      if (is(elm, selector)) {\r\n        return elm as Element;\r\n      }\r\n      elm = parent(elm);\r\n    } while (elm);\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\n/**\r\n * Determines whether the given element lies between two selectors in the DOM.\r\n * @param elm The element.\r\n * @param highBoundarySelector The high boundary selector.\r\n * @param deepBoundarySelector The deep boundary selector.\r\n */\r\nconst liesBetween = (\r\n  elm: InputElementType,\r\n  highBoundarySelector: string,\r\n  deepBoundarySelector: string\r\n): boolean => {\r\n  const closestHighBoundaryElm = elm && closest(elm, highBoundarySelector);\r\n  const closestDeepBoundaryElm = elm && findFirst(deepBoundarySelector, closestHighBoundaryElm);\r\n\r\n  return closestHighBoundaryElm && closestDeepBoundaryElm\r\n    ? closestHighBoundaryElm === elm ||\r\n        closestDeepBoundaryElm === elm ||\r\n        closest(closest(elm, deepBoundarySelector), highBoundarySelector) !== closestHighBoundaryElm\r\n    : false;\r\n};\r\n\r\nexport { find, findFirst, is, children, contents, parent, liesBetween };\r\n","import { isArrayLike } from 'support/utils/types';\r\nimport { each, from } from 'support/utils/array';\r\nimport { parent } from 'support/dom/traversal';\r\n\r\ntype NodeCollection = ArrayLike<Node> | Node | false | null | undefined;\r\n\r\n/**\r\n * Inserts Nodes before the given preferredAnchor element.\r\n * @param parentElm The parent of the preferredAnchor element or the element which shall be the parent of the inserted Nodes.\r\n * @param preferredAnchor The element before which the Nodes shall be inserted or null if the elements shall be appended at the end.\r\n * @param insertedElms The Nodes which shall be inserted.\r\n */\r\nconst before = (\r\n  parentElm: Node | false | null | undefined,\r\n  preferredAnchor: Node | false | null | undefined,\r\n  insertedElms: NodeCollection\r\n): void => {\r\n  if (insertedElms) {\r\n    let anchor: Node | false | null | undefined = preferredAnchor;\r\n    let fragment: DocumentFragment | Node | null | undefined;\r\n\r\n    // parent must be defined\r\n    if (parentElm) {\r\n      if (isArrayLike(insertedElms)) {\r\n        fragment = document.createDocumentFragment();\r\n\r\n        // append all insertedElms to the fragment and if one of these is the anchor, change the anchor\r\n        each(insertedElms, (insertedElm) => {\r\n          if (insertedElm === anchor) {\r\n            anchor = insertedElm.previousSibling;\r\n          }\r\n          fragment!.appendChild(insertedElm);\r\n        });\r\n      } else {\r\n        fragment = insertedElms;\r\n      }\r\n\r\n      // if the preferred anchor isn't null set it to a valid anchor\r\n      if (preferredAnchor) {\r\n        if (!anchor) {\r\n          anchor = parentElm.firstChild;\r\n        } else if (anchor !== preferredAnchor) {\r\n          anchor = anchor.nextSibling;\r\n        }\r\n      }\r\n\r\n      parentElm.insertBefore(fragment, anchor || null);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Appends the given children at the end of the given Node.\r\n * @param node The Node to which the children shall be appended.\r\n * @param children The Nodes which shall be appended.\r\n */\r\nexport const appendChildren = (\r\n  node: Node | false | null | undefined,\r\n  children: NodeCollection\r\n): void => {\r\n  before(node, null, children);\r\n};\r\n\r\n/**\r\n * Prepends the given children at the start of the given Node.\r\n * @param node The Node to which the children shall be prepended.\r\n * @param children The Nodes which shall be prepended.\r\n */\r\nexport const prependChildren = (\r\n  node: Node | false | null | undefined,\r\n  children: NodeCollection\r\n): void => {\r\n  before(node, node && node.firstChild, children);\r\n};\r\n\r\n/**\r\n * Inserts the given Nodes before the given Node.\r\n * @param node The Node before which the given Nodes shall be inserted.\r\n * @param insertedNodes The Nodes which shall be inserted.\r\n */\r\nexport const insertBefore = (\r\n  node: Node | false | null | undefined,\r\n  insertedNodes: NodeCollection\r\n): void => {\r\n  before(parent(node), node, insertedNodes);\r\n};\r\n\r\n/**\r\n * Inserts the given Nodes after the given Node.\r\n * @param node The Node after which the given Nodes shall be inserted.\r\n * @param insertedNodes The Nodes which shall be inserted.\r\n */\r\nexport const insertAfter = (\r\n  node: Node | false | null | undefined,\r\n  insertedNodes: NodeCollection\r\n): void => {\r\n  before(parent(node), node && node.nextSibling, insertedNodes);\r\n};\r\n\r\n/**\r\n * Removes the given Nodes from their parent.\r\n * @param nodes The Nodes which shall be removed.\r\n */\r\nexport const removeElements = (nodes: NodeCollection): void => {\r\n  if (isArrayLike(nodes)) {\r\n    each(from(nodes), (e) => removeElements(e));\r\n  } else if (nodes) {\r\n    const parentElm = parent(nodes);\r\n    if (parentElm) {\r\n      parentElm.removeChild(nodes);\r\n    }\r\n  }\r\n};\r\n","import { each } from 'support/utils/array';\r\nimport { attr } from 'support/dom/attribute';\r\nimport { contents } from 'support/dom/traversal';\r\nimport { removeElements } from 'support/dom/manipulation';\r\n\r\n/**\r\n * Creates a div DOM node.\r\n */\r\nexport const createDiv = (classNames?: string): HTMLDivElement => {\r\n  const div = document.createElement('div');\r\n  if (classNames) {\r\n    attr(div, 'class', classNames);\r\n  }\r\n  return div;\r\n};\r\n\r\n/**\r\n * Creates DOM nodes modeled after the passed html string and returns the root dom nodes as a array.\r\n * @param html The html string after which the DOM nodes shall be created.\r\n */\r\nexport const createDOM = (html: string): ReadonlyArray<Node> => {\r\n  const createdDiv = createDiv();\r\n  createdDiv.innerHTML = html.trim();\r\n\r\n  return each(contents(createdDiv), (elm) => removeElements(elm));\r\n};\r\n","import { each } from 'support/utils/array';\r\nimport { hasOwnProperty } from 'support/utils/object';\r\nimport { createDiv } from 'support/dom/create';\r\n\r\nconst firstLetterToUpper = (str: string): string => str.charAt(0).toUpperCase() + str.slice(1);\r\nconst getDummyStyle = (): CSSStyleDeclaration => createDiv().style;\r\n\r\n// https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix\r\n\r\nexport const cssPrefixes: ReadonlyArray<string> = ['-webkit-', '-moz-', '-o-', '-ms-'];\r\nexport const jsPrefixes: ReadonlyArray<string> = [\r\n  'WebKit',\r\n  'Moz',\r\n  'O',\r\n  'MS',\r\n  'webkit',\r\n  'moz',\r\n  'o',\r\n  'ms',\r\n];\r\n\r\nexport const jsCache: { [key: string]: any } = {};\r\nexport const cssCache: { [key: string]: string } = {};\r\n\r\n/**\r\n * Gets the name of the given CSS property with vendor prefix if it isn't supported without it, or and empty string if unsupported.\r\n * @param name The name of the CSS property which shall be get.\r\n */\r\nexport const cssProperty = (name: string): string => {\r\n  let result: string | undefined = cssCache[name];\r\n\r\n  if (hasOwnProperty(cssCache, name)) {\r\n    return result;\r\n  }\r\n\r\n  const uppercasedName: string = firstLetterToUpper(name);\r\n  const elmStyle: CSSStyleDeclaration = getDummyStyle();\r\n\r\n  each(cssPrefixes, (prefix: string) => {\r\n    const prefixWithoutDashes: string = prefix.replace(/-/g, '');\r\n    const resultPossibilities: Array<string> = [\r\n      name, // transition\r\n      prefix + name, // -webkit-transition\r\n      prefixWithoutDashes + uppercasedName, // webkitTransition\r\n      firstLetterToUpper(prefixWithoutDashes) + uppercasedName, // WebkitTransition\r\n    ];\r\n\r\n    // eslint-disable-next-line no-return-assign\r\n    return !(result = resultPossibilities.find(\r\n      (resultPossibility: string) => elmStyle[resultPossibility] !== undefined\r\n    ));\r\n  });\r\n\r\n  // eslint-disable-next-line no-return-assign\r\n  return (cssCache[name] = result || '');\r\n};\r\n\r\n/**\r\n * Get the name of the given CSS property value(s), with vendor prefix if it isn't supported without it, or an empty string if no value is supported.\r\n * @param property The CSS property to which the CSS property value(s) belong.\r\n * @param values The value(s) separated by spaces which shall be get.\r\n * @param suffix A suffix which is added to each value in case the value is a function or something else more advanced.\r\n */\r\nexport const cssPropertyValue = (property: string, values: string, suffix?: string): string => {\r\n  const name = `${property} ${values}`;\r\n  let result: string | undefined = cssCache[name];\r\n\r\n  if (hasOwnProperty(cssCache, name)) {\r\n    return result;\r\n  }\r\n\r\n  const dummyStyle: CSSStyleDeclaration = getDummyStyle();\r\n  const possbleValues: Array<string> = values.split(' ');\r\n  const preparedSuffix: string = suffix || '';\r\n  const cssPrefixesWithFirstEmpty = [''].concat(cssPrefixes);\r\n\r\n  each(possbleValues, (possibleValue: string) => {\r\n    each(cssPrefixesWithFirstEmpty, (prefix: string) => {\r\n      const prop = prefix + possibleValue;\r\n      dummyStyle.cssText = `${property}:${prop}${preparedSuffix}`;\r\n      if (dummyStyle.length) {\r\n        result = prop;\r\n        return false;\r\n      }\r\n    });\r\n    return !result;\r\n  });\r\n\r\n  // eslint-disable-next-line no-return-assign\r\n  return (cssCache[name] = result || '');\r\n};\r\n\r\n/**\r\n * Get the requested JS function, object or constructor with vendor prefix if it isn't supported without or undefined if unsupported.\r\n * @param name The name of the JS function, object or constructor.\r\n */\r\nexport const jsAPI = <T = any>(name: string): T | undefined => {\r\n  let result: any = jsCache[name] || window[name];\r\n\r\n  if (hasOwnProperty(jsCache, name)) {\r\n    return result;\r\n  }\r\n\r\n  each(jsPrefixes, (prefix: string) => {\r\n    result = result || window[prefix + firstLetterToUpper(name)];\r\n    return !result;\r\n  });\r\n\r\n  jsCache[name] = result;\r\n  return result;\r\n};\r\n","import { jsAPI } from 'support/compatibility/vendors';\r\n\r\nexport const MutationObserverConstructor = jsAPI<typeof MutationObserver>('MutationObserver');\r\nexport const IntersectionObserverConstructor =\r\n  jsAPI<typeof IntersectionObserver>('IntersectionObserver');\r\nexport const ResizeObserverConstructor = jsAPI<typeof ResizeObserver>('ResizeObserver');\r\nexport const cAF = jsAPI<typeof cancelAnimationFrame>('cancelAnimationFrame');\r\nexport const rAF = jsAPI<typeof requestAnimationFrame>('requestAnimationFrame');\r\nexport const setT = window.setTimeout as (handler: TimerHandler, timeout?: number) => number;\r\nexport const clearT = window.clearTimeout as (id?: number) => void;\r\n","import { isString } from 'support/utils/types';\r\nimport { each } from 'support/utils/array';\r\nimport { keys } from 'support/utils/object';\r\n\r\ntype ClassContainingElement = Node | Element | false | null | undefined;\r\ntype ClassName = string | false | null | undefined;\r\n\r\nconst rnothtmlwhite = /[^\\x20\\t\\r\\n\\f]+/g;\r\nconst classListAction = (\r\n  elm: ClassContainingElement,\r\n  className: ClassName,\r\n  action: (elmClassList: DOMTokenList, clazz: string) => boolean | void\r\n): boolean => {\r\n  const classList = elm && (elm as Element).classList;\r\n  let clazz: string;\r\n  let i = 0;\r\n  let result = false;\r\n\r\n  if (classList && className && isString(className)) {\r\n    const classes: Array<string> = className.match(rnothtmlwhite) || [];\r\n    result = classes.length > 0;\r\n    while ((clazz = classes[i++])) {\r\n      result = !!action(classList, clazz) && result;\r\n    }\r\n  }\r\n  return result;\r\n};\r\n\r\n/**\r\n * Check whether the given element has the given class name(s).\r\n * @param elm The element.\r\n * @param className The class name(s).\r\n */\r\nexport const hasClass = (elm: ClassContainingElement, className: ClassName): boolean =>\r\n  classListAction(elm, className, (classList, clazz) => classList.contains(clazz));\r\n\r\n/**\r\n * Removes the given class name(s) from the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be removed. (separated by spaces)\r\n */\r\nexport const removeClass = (elm: ClassContainingElement, className: ClassName): void => {\r\n  classListAction(elm, className, (classList, clazz) => classList.remove(clazz));\r\n};\r\n\r\n/**\r\n * Adds the given class name(s) to the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be added. (separated by spaces)\r\n * @returns A function which removes the added class name(s).\r\n */\r\nexport const addClass = (elm: ClassContainingElement, className: ClassName): (() => void) => {\r\n  classListAction(elm, className, (classList, clazz) => classList.add(clazz));\r\n  return removeClass.bind(0, elm, className);\r\n};\r\n\r\n/**\r\n * Takes two className strings, compares them and returns the difference as array.\r\n * @param classNameA ClassName A.\r\n * @param classNameB ClassName B.\r\n */\r\nexport const diffClass = (classNameA: ClassName, classNameB: ClassName) => {\r\n  const classNameASplit = classNameA && classNameA.split(' ');\r\n  const classNameBSplit = classNameB && classNameB.split(' ');\r\n  const tempObj = {};\r\n\r\n  each(classNameASplit, (className) => {\r\n    tempObj[className] = 1;\r\n  });\r\n  each(classNameBSplit, (className) => {\r\n    if (tempObj[className]) {\r\n      delete tempObj[className];\r\n    } else {\r\n      tempObj[className] = 1;\r\n    }\r\n  });\r\n\r\n  return keys(tempObj);\r\n};\r\n","import { each } from 'support/utils/array';\r\nimport { WH, XY, TRBL } from 'support/dom';\r\nimport { PlainObject } from 'typings';\r\n\r\n/**\r\n * Compares two objects and returns true if all values of the passed prop names are identical, false otherwise or if one of the two object is falsy.\r\n * @param a Object a.\r\n * @param b Object b.\r\n * @param props The props which shall be compared.\r\n */\r\nexport const equal = <T extends PlainObject>(\r\n  a: T | undefined,\r\n  b: T | undefined,\r\n  props: Array<keyof T>,\r\n  propMutation?: ((value: any) => any) | null | false\r\n): boolean => {\r\n  if (a && b) {\r\n    let result = true;\r\n    each(props, (prop) => {\r\n      const compareA = propMutation ? propMutation(a[prop]) : a[prop];\r\n      const compareB = propMutation ? propMutation(b[prop]) : b[prop];\r\n      if (compareA !== compareB) {\r\n        result = false;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalWH = <T>(a?: WH<T>, b?: WH<T>) => equal<WH<T>>(a, b, ['w', 'h']);\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalXY = <T>(a?: XY<T>, b?: XY<T>) => equal<XY<T>>(a, b, ['x', 'y']);\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalTRBL = (a?: TRBL, b?: TRBL) => equal<TRBL>(a, b, ['t', 'r', 'b', 'l']);\r\n\r\n/**\r\n * Compares two DOM Rects for their equality of their width and height properties\r\n * Also returns false if one of the DOM Rects is undefined or null.\r\n * @param a DOM Rect a.\r\n * @param b DOM Rect b.\r\n * @param round Whether the values should be rounded.\r\n */\r\nexport const equalBCRWH = (a?: DOMRect, b?: DOMRect, round?: boolean) =>\r\n  equal<DOMRect>(a, b, ['width', 'height'], round && ((value) => Math.round(value)));\r\n","import { isNumber, isFunction } from 'support/utils/types';\r\nimport { from } from 'support/utils/array';\r\nimport { rAF, cAF, setT, clearT } from 'support/compatibility/apis';\r\n\r\ntype DebounceTiming = number | false | null | undefined;\r\n\r\nexport interface DebounceOptions<FunctionToDebounce extends (...args: any) => any> {\r\n  /**\r\n   * The timeout for debouncing. If null, no debounce is applied.\r\n   */\r\n  _timeout?: DebounceTiming | (() => DebounceTiming);\r\n  /**\r\n   * A maximum amount of ms. before the function will be called even with debounce.\r\n   */\r\n  _maxDelay?: DebounceTiming | (() => DebounceTiming);\r\n  /**\r\n   * Function which merges parameters for each canceled debounce.\r\n   * If parameters can't be merged the function will return null, otherwise it returns the merged parameters.\r\n   */\r\n  _mergeParams?: (\r\n    prev: Parameters<FunctionToDebounce>,\r\n    curr: Parameters<FunctionToDebounce>\r\n  ) => Parameters<FunctionToDebounce> | false | null | undefined;\r\n}\r\n\r\nexport interface Debounced<FunctionToDebounce extends (...args: any) => any> {\r\n  (...args: Parameters<FunctionToDebounce>): ReturnType<FunctionToDebounce>;\r\n  _flush(): void;\r\n}\r\n\r\nexport const noop = () => {}; // eslint-disable-line\r\n\r\n/**\r\n * Debounces the given function either with a timeout or a animation frame.\r\n * @param functionToDebounce The function which shall be debounced.\r\n * @param options Options for debouncing.\r\n */\r\nexport const debounce = <FunctionToDebounce extends (...args: any) => any>(\r\n  functionToDebounce: FunctionToDebounce,\r\n  options?: DebounceOptions<FunctionToDebounce>\r\n): Debounced<FunctionToDebounce> => {\r\n  let maxTimeoutId: number | undefined;\r\n  let prevArguments: Parameters<FunctionToDebounce> | null | undefined;\r\n  let latestArguments: Parameters<FunctionToDebounce> | null | undefined;\r\n  let clear: () => void = noop;\r\n  const { _timeout, _maxDelay, _mergeParams } = options || {};\r\n\r\n  const invokeFunctionToDebounce = function (args: IArguments) {\r\n    clear();\r\n    clearT(maxTimeoutId);\r\n    maxTimeoutId = prevArguments = undefined;\r\n    clear = noop;\r\n    // eslint-disable-next-line\r\n    // @ts-ignore\r\n    functionToDebounce.apply(this, args);\r\n  };\r\n\r\n  const mergeParms = (\r\n    curr: Parameters<FunctionToDebounce>\r\n  ): Parameters<FunctionToDebounce> | false | null | undefined =>\r\n    _mergeParams && prevArguments ? _mergeParams(prevArguments, curr) : curr;\r\n\r\n  const flush = () => {\r\n    /* istanbul ignore next */\r\n    if (clear !== noop) {\r\n      invokeFunctionToDebounce(mergeParms(latestArguments!) || latestArguments!);\r\n    }\r\n  };\r\n\r\n  const debouncedFn = function () {\r\n    // eslint-disable-next-line prefer-rest-params\r\n    const args: Parameters<FunctionToDebounce> = from(arguments) as Parameters<FunctionToDebounce>;\r\n    const finalTimeout = isFunction(_timeout) ? _timeout() : _timeout;\r\n    const hasTimeout = isNumber(finalTimeout) && finalTimeout >= 0;\r\n\r\n    if (hasTimeout) {\r\n      const finalMaxWait = isFunction(_maxDelay) ? _maxDelay() : _maxDelay;\r\n      const hasMaxWait = isNumber(finalMaxWait) && finalMaxWait >= 0;\r\n      const setTimeoutFn = finalTimeout > 0 ? setT : rAF!;\r\n      const clearTimeoutFn = finalTimeout > 0 ? clearT : cAF!;\r\n      const mergeParamsResult = mergeParms(args);\r\n      const invokedArgs = mergeParamsResult || args;\r\n      const boundInvoke = invokeFunctionToDebounce.bind(0, invokedArgs);\r\n\r\n      // if (!mergeParamsResult) {\r\n      //   invokeFunctionToDebounce(prevArguments || args);\r\n      // }\r\n\r\n      clear();\r\n      // @ts-ignore\r\n      const timeoutId = setTimeoutFn(boundInvoke, finalTimeout);\r\n      clear = () => clearTimeoutFn(timeoutId);\r\n\r\n      if (hasMaxWait && !maxTimeoutId) {\r\n        maxTimeoutId = setT(flush, finalMaxWait as number);\r\n      }\r\n\r\n      prevArguments = latestArguments = invokedArgs;\r\n    } else {\r\n      invokeFunctionToDebounce(args);\r\n    }\r\n  };\r\n  debouncedFn._flush = flush;\r\n\r\n  return debouncedFn as Debounced<FunctionToDebounce>;\r\n};\r\n","import { style } from 'support/dom/style';\r\n\r\nexport interface WH<T = number> {\r\n  w: T;\r\n  h: T;\r\n}\r\n\r\nconst elementHasDimensions = (elm: HTMLElement): boolean =>\r\n  !!(elm.offsetWidth || elm.offsetHeight || elm.getClientRects().length);\r\nconst zeroObj: WH = {\r\n  w: 0,\r\n  h: 0,\r\n};\r\n\r\n/**\r\n * Returns the window inner- width and height.\r\n */\r\nexport const windowSize = (): WH => ({\r\n  w: window.innerWidth,\r\n  h: window.innerHeight,\r\n});\r\n\r\n/**\r\n * Returns the scroll- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the scroll- width and height shall be returned.\r\n */\r\nexport const offsetSize = (elm: HTMLElement | null | undefined): WH =>\r\n  elm\r\n    ? {\r\n        w: elm.offsetWidth,\r\n        h: elm.offsetHeight,\r\n      }\r\n    : zeroObj;\r\n\r\n/**\r\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the client- width and height shall be returned.\r\n */\r\nexport const clientSize = (elm: HTMLElement | false | null | undefined): WH =>\r\n  elm\r\n    ? {\r\n        w: elm.clientWidth,\r\n        h: elm.clientHeight,\r\n      }\r\n    : zeroObj;\r\n\r\n/**\r\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the client- width and height shall be returned.\r\n */\r\nexport const scrollSize = (elm: HTMLElement | false | null | undefined): WH =>\r\n  elm\r\n    ? {\r\n        w: elm.scrollWidth,\r\n        h: elm.scrollHeight,\r\n      }\r\n    : zeroObj;\r\n\r\n/**\r\n * Returns the fractional- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the fractional- width and height shall be returned.\r\n */\r\nexport const fractionalSize = (elm: HTMLElement | false | null | undefined): WH => {\r\n  const cssHeight = parseFloat(style(elm, 'height')) || 0;\r\n  const cssWidth = parseFloat(style(elm, 'height')) || 0;\r\n  return {\r\n    w: cssWidth - Math.round(cssWidth),\r\n    h: cssHeight - Math.round(cssHeight),\r\n  };\r\n};\r\n\r\n/**\r\n * Returns the BoundingClientRect of the passed element.\r\n * @param elm The element of which the BoundingClientRect shall be returned.\r\n */\r\nexport const getBoundingClientRect = (elm: HTMLElement): DOMRect => elm.getBoundingClientRect();\r\n\r\n/**\r\n * Determines whether the passed element has any dimensions.\r\n * @param elm The element.\r\n */\r\nexport const hasDimensions = (elm: HTMLElement | false | null | undefined): boolean =>\r\n  elm ? elementHasDimensions(elm as HTMLElement) : false;\r\n","import { isUndefined } from 'support/utils/types';\r\nimport { each, push, runEachAndClear } from 'support/utils/array';\r\n\r\nlet passiveEventsSupport: boolean;\r\nconst supportPassiveEvents = (): boolean => {\r\n  if (isUndefined(passiveEventsSupport)) {\r\n    passiveEventsSupport = false;\r\n    try {\r\n      /* eslint-disable */\r\n      // @ts-ignore\r\n      window.addEventListener(\r\n        'test',\r\n        null,\r\n        Object.defineProperty({}, 'passive', {\r\n          get() {\r\n            passiveEventsSupport = true;\r\n          },\r\n        })\r\n      );\r\n      /* eslint-enable */\r\n    } catch (e) {}\r\n  }\r\n  return passiveEventsSupport;\r\n};\r\nconst splitEventNames = (eventNames: string) => eventNames.split(' ');\r\n\r\nexport interface OnOptions {\r\n  _capture?: boolean;\r\n  _passive?: boolean;\r\n  _once?: boolean;\r\n}\r\n\r\n/**\r\n * Removes the passed event listener for the passed events with the passed options.\r\n * @param target The element from which the listener shall be removed.\r\n * @param eventNames The eventsnames for which the listener shall be removed.\r\n * @param listener The listener which shall be removed.\r\n * @param capture The options of the removed listener.\r\n */\r\nexport const off = <T extends Event = Event>(\r\n  target: EventTarget,\r\n  eventNames: string,\r\n  listener: (event: T) => any,\r\n  capture?: boolean\r\n): void => {\r\n  each(splitEventNames(eventNames), (eventName) => {\r\n    target.removeEventListener(eventName, listener as EventListener, capture);\r\n  });\r\n};\r\n\r\n/**\r\n * Adds the passed event listener for the passed eventnames with the passed options.\r\n * @param target The element to which the listener shall be added.\r\n * @param eventNames The eventsnames for which the listener shall be called.\r\n * @param listener The listener which is called on the eventnames.\r\n * @param options The options of the added listener.\r\n */\r\nexport const on = <T extends Event = Event>(\r\n  target: EventTarget,\r\n  eventNames: string,\r\n  listener: (event: T) => any,\r\n  options?: OnOptions\r\n): (() => void) => {\r\n  const doSupportPassiveEvents = supportPassiveEvents();\r\n  const passive = (doSupportPassiveEvents && options && options._passive) ?? doSupportPassiveEvents;\r\n  const capture = (options && options._capture) || false;\r\n  const once = (options && options._once) || false;\r\n  const offListeners: (() => void)[] = [];\r\n  const nativeOptions: AddEventListenerOptions | boolean = doSupportPassiveEvents\r\n    ? {\r\n        passive,\r\n        capture,\r\n      }\r\n    : capture;\r\n\r\n  each(splitEventNames(eventNames), (eventName) => {\r\n    const finalListener = (\r\n      once\r\n        ? (evt: T) => {\r\n            target.removeEventListener(eventName, finalListener, capture);\r\n            listener && listener(evt);\r\n          }\r\n        : listener\r\n    ) as EventListener;\r\n\r\n    push(offListeners, off.bind(null, target, eventName, finalListener, capture));\r\n    target.addEventListener(eventName, finalListener, nativeOptions);\r\n  });\r\n\r\n  return runEachAndClear.bind(0, offListeners);\r\n};\r\n\r\n/**\r\n * Shorthand for the stopPropagation event Method.\r\n * @param evt The event of which the stopPropagation method shall be called.\r\n */\r\nexport const stopPropagation = (evt: Event): void => evt.stopPropagation();\r\n\r\n/**\r\n * Shorthand for the preventDefault event Method.\r\n * @param evt The event of which the preventDefault method shall be called.\r\n */\r\nexport const preventDefault = (evt: Event): void => evt.preventDefault();\r\n\r\n/**\r\n * Shorthand for the stopPropagation and preventDefault event Method.\r\n * @param evt The event of which the stopPropagation and preventDefault methods shall be called.\r\n */\r\nexport const stopAndPrevent = (evt: Event): void =>\r\n  (stopPropagation(evt) as undefined) || (preventDefault(evt) as undefined);\r\n","import { getBoundingClientRect } from 'support/dom/dimensions';\r\n\r\nexport interface XY<T = number> {\r\n  x: T;\r\n  y: T;\r\n}\r\n\r\nconst zeroObj: XY = {\r\n  x: 0,\r\n  y: 0,\r\n};\r\n\r\n/**\r\n * Returns the offset- left and top coordinates of the passed element relative to the document. If the element is null the top and left values are 0.\r\n * @param elm The element of which the offset- top and left coordinates shall be returned.\r\n */\r\nexport const absoluteCoordinates = (elm: HTMLElement | null | undefined): XY => {\r\n  const rect = elm ? getBoundingClientRect(elm) : 0;\r\n  return rect\r\n    ? {\r\n        x: rect.left + window.pageYOffset,\r\n        y: rect.top + window.pageXOffset,\r\n      }\r\n    : zeroObj;\r\n};\r\n\r\n/**\r\n * Returns the offset- left and top coordinates of the passed element. If the element is null the top and left values are 0.\r\n * @param elm The element of which the offset- top and left coordinates shall be returned.\r\n */\r\nexport const offsetCoordinates = (elm: HTMLElement | null | undefined): XY =>\r\n  elm\r\n    ? {\r\n        x: elm.offsetLeft,\r\n        y: elm.offsetTop,\r\n      }\r\n    : zeroObj;\r\n","import { isArray } from 'support/utils/types';\r\nimport { keys } from 'support/utils/object';\r\nimport { each, from, isEmptyArray } from 'support/utils/array';\r\n\r\nexport type EventListener<\r\n  EventMap extends Record<string, any[]>,\r\n  Name extends keyof EventMap = keyof EventMap\r\n> = (...args: EventMap[Name]) => void;\r\n\r\nexport type InitialEventListeners<EventMap extends Record<string, any[]>> = {\r\n  [K in keyof EventMap]?: EventListener<EventMap> | EventListener<EventMap>[];\r\n};\r\n\r\nconst manageListener = <EventMap extends Record<string, any[]>>(\r\n  callback: (listener?: EventListener<EventMap>) => void,\r\n  listener?: EventListener<EventMap> | EventListener<EventMap>[]\r\n) => {\r\n  each(isArray(listener) ? listener : [listener], callback);\r\n};\r\n\r\nexport const createEventListenerHub = <EventMap extends Record<string, any[]>>(\r\n  initialEventListeners?: InitialEventListeners<EventMap>\r\n) => {\r\n  type EventListener<Name extends keyof EventMap = keyof EventMap> = (\r\n    ...args: EventMap[Name]\r\n  ) => void;\r\n  type RemoveEvent = {\r\n    <Name extends keyof EventMap>(name?: Name, listener?: EventListener<Name>): void;\r\n    <Name extends keyof EventMap>(name?: Name, listener?: EventListener<Name>[]): void;\r\n    <Name extends keyof EventMap>(\r\n      name?: Name,\r\n      listener?: EventListener<Name> | EventListener<Name>[]\r\n    ): void;\r\n  };\r\n  type AddEvent = {\r\n    <Name extends keyof EventMap>(name: Name, listener: EventListener<Name>): () => void;\r\n    <Name extends keyof EventMap>(name: Name, listener: EventListener<Name>[]): () => void;\r\n    <Name extends keyof EventMap>(\r\n      name: Name,\r\n      listener: EventListener<Name> | EventListener<Name>[]\r\n    ): () => void;\r\n  };\r\n  type TriggerEvent = {\r\n    <Name extends keyof EventMap>(name: Name, args?: EventMap[Name]): void;\r\n  };\r\n\r\n  const events = new Map<keyof EventMap, Set<EventListener>>();\r\n\r\n  const removeEvent: RemoveEvent = <Name extends keyof EventMap>(\r\n    name?: Name,\r\n    listener?: EventListener<Name> | EventListener<Name>[]\r\n  ): void => {\r\n    if (name) {\r\n      const eventSet = events.get(name);\r\n      manageListener((currListener) => {\r\n        if (eventSet) {\r\n          eventSet[currListener ? 'delete' : 'clear'](currListener!);\r\n        }\r\n      }, listener as any);\r\n    } else {\r\n      events.forEach((eventSet) => {\r\n        eventSet.clear();\r\n      });\r\n      events.clear();\r\n    }\r\n  };\r\n\r\n  const addEvent: AddEvent = <Name extends keyof EventMap>(\r\n    name: Name,\r\n    listener: EventListener<Name> | EventListener<Name>[]\r\n  ): (() => void) => {\r\n    const eventSet = events.get(name) || new Set();\r\n    events.set(name, eventSet);\r\n\r\n    manageListener((currListener) => {\r\n      currListener && eventSet.add(currListener);\r\n    }, listener as any);\r\n\r\n    return removeEvent.bind(0, name as any, listener as any);\r\n  };\r\n\r\n  const triggerEvent: TriggerEvent = <Name extends keyof EventMap>(\r\n    name: Name,\r\n    args?: EventMap[Name]\r\n  ): void => {\r\n    const eventSet = events.get(name);\r\n\r\n    each(from(eventSet), (event) => {\r\n      if (args && !isEmptyArray(args)) {\r\n        (event as (...args: EventMap[keyof EventMap]) => void).apply(0, args as any);\r\n      } else {\r\n        (event as () => void)();\r\n      }\r\n    });\r\n  };\r\n\r\n  const initialListenerKeys = keys(initialEventListeners) as Extract<keyof EventMap, string>[];\r\n  each(initialListenerKeys, (key) => {\r\n    addEvent(key, initialEventListeners![key] as any);\r\n  });\r\n\r\n  return [addEvent, removeEvent, triggerEvent] as [AddEvent, RemoveEvent, TriggerEvent];\r\n};\r\n","import { assignDeep, hasOwnProperty } from 'support';\r\nimport type { Options, ReadonlyOSOptions } from 'options';\r\nimport type { PartialOptions } from 'typings';\r\n\r\nexport type SetupElements<T extends Record<string, any>> = [elements: T, destroy: () => void];\r\n\r\nexport type SetupUpdate<T extends any[]> = (\r\n  changedOptions: PartialOptions<Options>,\r\n  force: boolean,\r\n  ...args: T\r\n) => void;\r\n\r\nexport type SetupUpdateCheckOption = <T>(path: string) => [value: T, changed: boolean];\r\n\r\nexport type SetupUpdateSegment<Hints extends Record<string, any>> = (\r\n  updateHints: Hints,\r\n  checkOption: SetupUpdateCheckOption,\r\n  force: boolean\r\n) => Partial<Hints> | void;\r\n\r\nexport type SetupState<T extends Record<string, any>> = [\r\n  get: () => T,\r\n  set: (newState: Partial<T>) => void\r\n];\r\n\r\nexport type Setup<\r\n  DynamicState,\r\n  StaticState extends Record<string, any> = Record<string, any>,\r\n  A extends any[] = []\r\n> = [update: SetupUpdate<A>, state: (() => DynamicState) & StaticState, destroy: () => void];\r\n\r\nconst getPropByPath = <T>(obj: any, path: string): T =>\r\n  obj\r\n    ? path.split('.').reduce((o, prop) => (o && hasOwnProperty(o, prop) ? o[prop] : undefined), obj)\r\n    : undefined;\r\n\r\nexport const createOptionCheck =\r\n  (\r\n    options: ReadonlyOSOptions,\r\n    changedOptions: PartialOptions<Options>,\r\n    force?: boolean\r\n  ): SetupUpdateCheckOption =>\r\n  (path: string) =>\r\n    [getPropByPath(options, path), force || getPropByPath(changedOptions, path) !== undefined];\r\n\r\nexport const createState = <S>(initialState: S): SetupState<S> => {\r\n  let state: S = initialState;\r\n  return [\r\n    () => state,\r\n    (newState: Partial<S>) => {\r\n      state = assignDeep({}, state, newState);\r\n    },\r\n  ];\r\n};\r\n","export const classNameEnvironment = 'os-environment';\r\nexport const classNameEnvironmentFlexboxGlue = `${classNameEnvironment}-flexbox-glue`;\r\nexport const classNameEnvironmentFlexboxGlueMax = `${classNameEnvironmentFlexboxGlue}-max`;\r\n\r\nexport const dataAttributeHost = 'data-overlayscrollbars';\r\nexport const dataAttributeHostOverflowX = `${dataAttributeHost}-overflow-x`;\r\nexport const dataAttributeHostOverflowY = `${dataAttributeHost}-overflow-y`;\r\nexport const dataValueHostOverflowVisible = 'overflowVisible';\r\nexport const dataValueHostViewportScrollbarStyling = 'viewportStyled';\r\nexport const classNamePadding = 'os-padding';\r\nexport const classNameViewport = 'os-viewport';\r\nexport const classNameViewportArrange = `${classNameViewport}-arrange`;\r\nexport const classNameContent = 'os-content';\r\nexport const classNameViewportScrollbarStyling = `${classNameViewport}-scrollbar-styled`;\r\nexport const classNameOverflowVisible = `os-overflow-visible`;\r\n\r\nexport const classNameSizeObserver = 'os-size-observer';\r\nexport const classNameSizeObserverAppear = `${classNameSizeObserver}-appear`;\r\nexport const classNameSizeObserverListener = `${classNameSizeObserver}-listener`;\r\nexport const classNameSizeObserverListenerScroll = `${classNameSizeObserverListener}-scroll`;\r\nexport const classNameSizeObserverListenerItem = `${classNameSizeObserverListener}-item`;\r\nexport const classNameSizeObserverListenerItemFinal = `${classNameSizeObserverListenerItem}-final`;\r\n\r\nexport const classNameTrinsicObserver = 'os-trinsic-observer';\r\n\r\nexport const classNameScrollbar = 'os-scrollbar';\r\nexport const classNameScrollbarHorizontal = `${classNameScrollbar}-horizontal`;\r\nexport const classNameScrollbarVertical = `${classNameScrollbar}-vertical`;\r\nexport const classNameScrollbarTrack = 'os-scrollbar-track';\r\nexport const classNameScrollbarHandle = 'os-scrollbar-handle';\r\nexport const classNamesScrollbarVisible = `${classNameScrollbar}-visible`;\r\nexport const classNamesScrollbarCornerless = `${classNameScrollbar}-cornerless`;\r\nexport const classNamesScrollbarTransitionless = `${classNameScrollbar}-transitionless`;\r\nexport const classNamesScrollbarInteraction = `${classNameScrollbar}-interaction`;\r\nexport const classNamesScrollbarAutoHidden = `${classNameScrollbar}-auto-hidden`;\r\n","import { assignDeep, each, isObject, keys, isArray, hasOwnProperty, isFunction } from 'support';\r\nimport { PartialOptions, ReadonlyOptions } from 'typings';\r\n\r\nconst opsStringify = (value: any) =>\r\n  JSON.stringify(value, (_, val) => {\r\n    if (isFunction(val)) {\r\n      throw new Error();\r\n    }\r\n    return val;\r\n  });\r\n\r\nexport type ResizeBehavior = 'none' | 'both' | 'horizontal' | 'vertical';\r\n\r\nexport type OverflowBehavior =\r\n  | 'hidden'\r\n  | 'scroll'\r\n  | 'visible'\r\n  | 'visible-hidden'\r\n  | 'visible-scroll';\r\n\r\nexport type ScrollbarVisibilityBehavior = 'visible' | 'hidden' | 'auto';\r\n\r\nexport type ScrollbarAutoHideBehavior = 'never' | 'scroll' | 'leave' | 'move';\r\n\r\nexport type ScrollBehavior = 'always' | 'ifneeded' | 'never';\r\n\r\nexport type BasicEventCallback = (this: any) => void;\r\n\r\nexport type ScrollEventCallback = (this: any, args?: UIEvent) => void;\r\n\r\nexport type OverflowChangedCallback = (this: any, args?: OverflowChangedArgs) => void;\r\n\r\nexport type OverflowAmountChangedCallback = (this: any, args?: OverflowAmountChangedArgs) => void;\r\n\r\nexport type DirectionChangedCallback = (this: any, args?: DirectionChangedArgs) => void;\r\n\r\nexport type SizeChangedCallback = (this: any, args?: SizeChangedArgs) => void;\r\n\r\nexport type UpdatedCallback = (this: any, args?: UpdatedArgs) => void;\r\n\r\nexport interface Options {\r\n  paddingAbsolute: boolean;\r\n  updating: {\r\n    elementEvents: Array<[elementSelector: string, eventNames: string]> | null;\r\n    attributes: string[] | null;\r\n    debounce: [timeout: number, maxWait: number] | number | null; // (if tuple: [timeout: 0, maxWait: 33], if number: [timeout: number, maxWait: false]) debounce for content Changes\r\n    ignoreMutation: ((mutation: MutationRecord) => any) | null;\r\n  };\r\n  overflow: {\r\n    x: OverflowBehavior;\r\n    y: OverflowBehavior;\r\n  };\r\n  scrollbars: {\r\n    visibility: ScrollbarVisibilityBehavior;\r\n    autoHide: ScrollbarAutoHideBehavior;\r\n    autoHideDelay: number;\r\n    dragScroll: boolean;\r\n    clickScroll: boolean;\r\n    touch: boolean;\r\n  };\r\n  nativeScrollbarsOverlaid: {\r\n    show: boolean;\r\n    initialize: boolean;\r\n  };\r\n}\r\n\r\nexport type ReadonlyOSOptions = ReadonlyOptions<Options>;\r\n\r\nexport interface OverflowChangedArgs {\r\n  x: boolean;\r\n  y: boolean;\r\n  xScrollable: boolean;\r\n  yScrollable: boolean;\r\n  clipped: boolean;\r\n}\r\n\r\nexport interface OverflowAmountChangedArgs {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport interface DirectionChangedArgs {\r\n  isRTL: number;\r\n  dir: string;\r\n}\r\n\r\nexport interface SizeChangedArgs {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport interface UpdatedArgs {\r\n  forced: boolean;\r\n}\r\n\r\nexport const defaultOptions: Options = {\r\n  // resize: 'none', // none || both  || horizontal || vertical || n || b || h || v\r\n  paddingAbsolute: false, // true || false\r\n  updating: {\r\n    elementEvents: [['img', 'load']], // array of tuples || null\r\n    debounce: [0, 33], // number || number array || null\r\n    attributes: null, // string array || null\r\n    ignoreMutation: null, // () => any || null\r\n  },\r\n  overflow: {\r\n    x: 'scroll', // visible-hidden  || visible-scroll || hidden || scroll || v-h || v-s || h || s\r\n    y: 'scroll', // visible-hidden  || visible-scroll || hidden || scroll || v-h || v-s || h || s\r\n  },\r\n  nativeScrollbarsOverlaid: {\r\n    show: false, // true || false\r\n    initialize: false, // true || false\r\n  },\r\n  scrollbars: {\r\n    visibility: 'auto', // visible || hidden || auto || v || h || a\r\n    autoHide: 'never', // never || scroll || leave || move || n || s || l || m\r\n    autoHideDelay: 800, // number\r\n    dragScroll: true, // true || false\r\n    clickScroll: false, // true || false\r\n    touch: true, // true || false\r\n  },\r\n  /*\r\n  textarea: {\r\n    dynWidth: false, // true || false\r\n    dynHeight: false, // true || false\r\n    inheritedAttrs: ['style', 'class'], // string || array || null\r\n  },\r\n  */\r\n};\r\n\r\nexport const getOptionsDiff = <T>(\r\n  currOptions: T,\r\n  newOptions: PartialOptions<T>\r\n): PartialOptions<T> => {\r\n  const diff: PartialOptions<T> = {};\r\n  const optionsKeys = keys(newOptions).concat(keys(currOptions));\r\n\r\n  each(optionsKeys, (optionKey) => {\r\n    const currOptionValue = currOptions[optionKey];\r\n    const newOptionValue = newOptions[optionKey];\r\n\r\n    if (isObject(currOptionValue) && isObject(newOptionValue)) {\r\n      assignDeep((diff[optionKey] = {}), getOptionsDiff(currOptionValue, newOptionValue));\r\n    } else if (hasOwnProperty(newOptions, optionKey) && newOptionValue !== currOptionValue) {\r\n      let isDiff = true;\r\n\r\n      if (isArray(currOptionValue) || isArray(newOptionValue)) {\r\n        try {\r\n          if (opsStringify(currOptionValue) === opsStringify(newOptionValue)) {\r\n            isDiff = false;\r\n          }\r\n        } catch {}\r\n      }\r\n\r\n      if (isDiff) {\r\n        diff[optionKey] = newOptionValue;\r\n      }\r\n    }\r\n  });\r\n\r\n  return diff;\r\n};\r\n","import { assignDeep, each, isArray, keys } from 'support';\r\nimport { OverlayScrollbars, OverlayScrollbarsStatic } from 'overlayscrollbars';\r\n\r\nexport type PluginInstance =\r\n  | Record<string, unknown>\r\n  | ((staticObj: OverlayScrollbarsStatic, instanceObj: OverlayScrollbars) => void);\r\nexport type Plugin<T extends PluginInstance = PluginInstance> = {\r\n  [pluginName: string]: T;\r\n};\r\n\r\nconst pluginRegistry: Record<string, PluginInstance> = {};\r\n\r\nexport const getPlugins = () => assignDeep({}, pluginRegistry);\r\n\r\nexport const addPlugin = (addedPlugin: Plugin | Plugin[]) => {\r\n  each((isArray(addedPlugin) ? addedPlugin : [addedPlugin]) as Plugin[], (plugin) => {\r\n    each(keys(plugin), (pluginName) => {\r\n      pluginRegistry[pluginName] = plugin[pluginName];\r\n    });\r\n  });\r\n};\r\n","function _extends() {\n  module.exports = _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _extends.apply(this, arguments);\n}\n\nmodule.exports = _extends, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","import { each, hasOwnProperty, keys, push, isEmptyObject } from 'support/utils';\r\nimport { type, isArray, isUndefined, isPlainObject, isString } from 'support/utils/types';\r\nimport { PlainObject, PartialOptions } from 'typings';\r\n\r\nexport type OptionsObjectType = Record<string, unknown>;\r\nexport type OptionsFunctionType = (this: any, ...args: any[]) => any;\r\nexport type OptionsTemplateType<T extends OptionsTemplateNativeTypes> = ExtractPropsKey<\r\n  OptionsTemplateTypeMap,\r\n  T\r\n>;\r\nexport type OptionsTemplateTypes = keyof OptionsTemplateTypeMap;\r\nexport type OptionsTemplateNativeTypes = OptionsTemplateTypeMap[keyof OptionsTemplateTypeMap];\r\n\r\nexport type OptionsTemplateValue<T extends OptionsTemplateNativeTypes = string> = T extends string\r\n  ? string extends T\r\n    ? OptionsTemplateValueNonEnum<T>\r\n    : string\r\n  : OptionsTemplateValueNonEnum<T>;\r\n\r\nexport type OptionsTemplate<T> = {\r\n  [P in keyof T]: T[P] extends OptionsObjectType\r\n    ? OptionsTemplate<T[P]>\r\n    : T[P] extends OptionsTemplateNativeTypes\r\n    ? OptionsTemplateValue<T[P]>\r\n    : never;\r\n};\r\n\r\nexport type OptionsValidationResult<T> = [\r\n  PartialOptions<T>, // validated\r\n  Record<string, unknown> // foreign\r\n];\r\n\r\ntype OptionsTemplateTypeMap = {\r\n  __TPL_boolean_TYPE__: boolean;\r\n  __TPL_number_TYPE__: number;\r\n  __TPL_string_TYPE__: string;\r\n  __TPL_array_TYPE__: Array<any> | ReadonlyArray<any>;\r\n  __TPL_function_TYPE__: OptionsFunctionType;\r\n  __TPL_null_TYPE__: null;\r\n  __TPL_object_TYPE__: OptionsObjectType;\r\n};\r\n\r\ntype OptionsTemplateValueNonEnum<T extends OptionsTemplateNativeTypes> =\r\n  | OptionsTemplateType<T>\r\n  | [OptionsTemplateType<T>, ...Array<OptionsTemplateTypes>];\r\n\r\ntype ExtractPropsKey<T, TProps extends T[keyof T]> = {\r\n  [P in keyof T]: TProps extends T[P] ? P : never;\r\n}[keyof T];\r\n\r\ntype OptionsTemplateTypesDictionary = {\r\n  readonly boolean: OptionsTemplateType<boolean>;\r\n  readonly number: OptionsTemplateType<number>;\r\n  readonly string: OptionsTemplateType<string>;\r\n  readonly array: OptionsTemplateType<Array<any>>;\r\n  readonly object: OptionsTemplateType<OptionsObjectType>;\r\n  readonly function: OptionsTemplateType<OptionsFunctionType>;\r\n  readonly null: OptionsTemplateType<null>;\r\n};\r\n\r\nconst optionsTemplateTypes: OptionsTemplateTypesDictionary = {\r\n  boolean: '__TPL_boolean_TYPE__',\r\n  number: '__TPL_number_TYPE__',\r\n  string: '__TPL_string_TYPE__',\r\n  array: '__TPL_array_TYPE__',\r\n  object: '__TPL_object_TYPE__',\r\n  function: '__TPL_function_TYPE__',\r\n  null: '__TPL_null_TYPE__',\r\n};\r\n\r\n/**\r\n * Validates the given options object according to the given template object and returns a object which looks like:\r\n * {\r\n *  foreign   : a object which consists of properties which aren't defined inside the template. (foreign properties)\r\n *  validated : a object which consists only of valid properties. (property name is inside the template and value has a correct type)\r\n * }\r\n * @param template The template according to which the options object shall be validated.\r\n * @param options The options object which shall be validated.\r\n * @param optionsDiff When provided the returned validated object will only have properties which are different to this objects properties.\r\n * Example (assume all properties are valid to the template):\r\n * Options object            : { a: 'a', b: 'b', c: 'c' }\r\n * optionsDiff object        : { a: 'a', b: 'b', c: undefined }\r\n * Returned validated object : { c: 'c' }\r\n * Because the value of the properties a and b didn't change, they aren't included in the returned object.\r\n * Without the optionsDiff object the returned validated object would be: { a: 'a', b: 'b', c: 'c' }\r\n * @param doWriteErrors True if errors shall be logged into the console, false otherwise.\r\n * @param propPath The propertyPath which lead to this object. (used for error logging)\r\n */\r\nconst validateRecursive = <T extends PlainObject>(\r\n  template: OptionsTemplate<T>,\r\n  options: PartialOptions<T>,\r\n  doWriteErrors?: boolean,\r\n  propPath?: string\r\n): OptionsValidationResult<T> => {\r\n  const validatedOptions: PartialOptions<T> = {};\r\n  const optionsCopy: PartialOptions<T> = { ...options };\r\n  const props = keys(template).filter((prop) => hasOwnProperty(options, prop));\r\n\r\n  each(props, (prop: Extract<keyof T, string>) => {\r\n    const optionsValue: any = options[prop];\r\n    const templateValue: PlainObject | string | OptionsTemplateTypes | Array<OptionsTemplateTypes> =\r\n      template[prop];\r\n    const templateIsComplex = isPlainObject(templateValue);\r\n    const propPrefix = propPath ? `${propPath}.` : '';\r\n\r\n    // if the template has a object as value, it means that the options are complex (verschachtelt)\r\n    if (templateIsComplex && isPlainObject(optionsValue)) {\r\n      const [validated, foreign] = validateRecursive(\r\n        templateValue as T,\r\n        optionsValue,\r\n        doWriteErrors,\r\n        propPrefix + prop\r\n      );\r\n      validatedOptions[prop] = validated as any;\r\n      optionsCopy[prop] = foreign as any;\r\n\r\n      each([optionsCopy, validatedOptions], (value) => {\r\n        if (isEmptyObject(value[prop])) {\r\n          delete value[prop];\r\n        }\r\n      });\r\n    } else if (!templateIsComplex) {\r\n      let isValid = false;\r\n      const errorEnumStrings: Array<string> = [];\r\n      const errorPossibleTypes: Array<string> = [];\r\n      const optionsValueType = type(optionsValue);\r\n      const templateValueArr: Array<string | OptionsTemplateTypes> = !isArray(templateValue)\r\n        ? [templateValue as string | OptionsTemplateTypes]\r\n        : (templateValue as Array<OptionsTemplateTypes>);\r\n\r\n      each(templateValueArr, (currTemplateType) => {\r\n        // if currType value isn't inside possibleTemplateTypes we assume its a enum string value\r\n        let typeString: string | undefined;\r\n        each(optionsTemplateTypes, (value: string, key: string) => {\r\n          if (value === currTemplateType) {\r\n            typeString = key;\r\n          }\r\n        });\r\n        const isEnumString = isUndefined(typeString);\r\n        if (isEnumString && isString(optionsValue)) {\r\n          // split it into a array which contains all possible values for example: [\"yes\", \"no\", \"maybe\"]\r\n          const enumStringSplit = currTemplateType.split(' ');\r\n          isValid = !!enumStringSplit.find((possibility) => possibility === optionsValue);\r\n\r\n          // build error message\r\n          push(errorEnumStrings, enumStringSplit);\r\n        } else {\r\n          isValid = optionsTemplateTypes[optionsValueType] === currTemplateType;\r\n        }\r\n\r\n        // build error message\r\n        push(errorPossibleTypes, isEnumString ? optionsTemplateTypes.string : typeString!);\r\n\r\n        // continue if invalid, break if valid\r\n        return !isValid;\r\n      });\r\n\r\n      if (isValid) {\r\n        validatedOptions[prop] = optionsValue;\r\n      } else if (doWriteErrors) {\r\n        console.warn(\r\n          `${\r\n            `The option \"${propPrefix}${prop}\" wasn't set, because it doesn't accept the type [ ${optionsValueType.toUpperCase()} ] with the value of \"${optionsValue}\".\\r\\n` +\r\n            `Accepted types are: [ ${errorPossibleTypes.join(', ').toUpperCase()} ].\\r\\n`\r\n          }${\r\n            errorEnumStrings.length > 0\r\n              ? `\\r\\nValid strings are: [ ${errorEnumStrings.join(', ')} ].`\r\n              : ''\r\n          }`\r\n        );\r\n      }\r\n\r\n      delete optionsCopy[prop];\r\n    }\r\n  });\r\n\r\n  return [validatedOptions, optionsCopy]; // optionsCopy equals now to foreign options\r\n};\r\n\r\n/**\r\n * Validates the given options object according to the given template object and returns a tuple which looks like:\r\n * [\r\n *  validated : a object which consists only of valid properties. (property name is inside the template and value has a correct type)\r\n *  foreign   : a object which consists of properties which aren't defined inside the template. (foreign properties)\r\n * ]\r\n * @param template The template according to which the options object shall be validated.\r\n * @param options The options object which shall be validated.\r\n * @param doWriteErrors True if errors shall be logged into the console, false otherwise.\r\n */\r\nconst validateOptions = <T extends PlainObject>(\r\n  template: OptionsTemplate<T>,\r\n  options: PartialOptions<T>,\r\n  doWriteErrors?: boolean\r\n): OptionsValidationResult<T> => validateRecursive<T>(template, options, doWriteErrors);\r\n\r\nexport { validateOptions, optionsTemplateTypes };\r\n","import {\r\n  Options,\r\n  OverflowBehavior,\r\n  ScrollbarVisibilityBehavior,\r\n  ScrollbarAutoHideBehavior,\r\n} from 'options';\r\nimport {\r\n  validateOptions,\r\n  OptionsTemplate,\r\n  OptionsTemplateValue,\r\n  optionsTemplateTypes as oTypes,\r\n} from 'plugins/optionsValidationPlugin/validation';\r\nimport type { PartialOptions } from 'typings';\r\nimport type { Plugin } from 'plugins';\r\n\r\nconst numberAllowedValues: OptionsTemplateValue<number> = oTypes.number;\r\nconst booleanAllowedValues: OptionsTemplateValue<boolean> = oTypes.boolean;\r\nconst arrayNullValues: OptionsTemplateValue<Array<unknown> | null> = [oTypes.array, oTypes.null];\r\nconst overflowAllowedValues: OptionsTemplateValue<OverflowBehavior> =\r\n  'hidden scroll visible visible-hidden';\r\nconst scrollbarsVisibilityAllowedValues: OptionsTemplateValue<ScrollbarVisibilityBehavior> =\r\n  'visible hidden auto';\r\nconst scrollbarsAutoHideAllowedValues: OptionsTemplateValue<ScrollbarAutoHideBehavior> =\r\n  'never scroll leavemove';\r\n\r\nconst optionsTemplate: OptionsTemplate<Options> = {\r\n  // resize: resizeAllowedValues, // none || both  || horizontal || vertical || n || b ||\r\n  paddingAbsolute: booleanAllowedValues, // true || false\r\n  updating: {\r\n    elementEvents: arrayNullValues, // array of tuples || null\r\n    attributes: arrayNullValues,\r\n    debounce: [oTypes.number, oTypes.array, oTypes.null], // number || number array || null\r\n    ignoreMutation: [oTypes.function, oTypes.null], // function || null\r\n  },\r\n  overflow: {\r\n    x: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scrol\r\n    y: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scrol\r\n  },\r\n  scrollbars: {\r\n    visibility: scrollbarsVisibilityAllowedValues, // visible || hidden || auto || v ||\r\n    autoHide: scrollbarsAutoHideAllowedValues, // never || scroll || leave || move ||\r\n    autoHideDelay: numberAllowedValues, // number\r\n    dragScroll: booleanAllowedValues, // true || false\r\n    clickScroll: booleanAllowedValues, // true || false\r\n    touch: booleanAllowedValues, // true || false\r\n  },\r\n  /*\r\n  textarea: {\r\n    dynWidth: booleanAllowedValues, // true || false\r\n    dynHeight: booleanAllowedValues, // true || false\r\n    inheritedAttrs: stringArrayNullAllowedValues, // string || array || nul\r\n  },\r\n  */\r\n  nativeScrollbarsOverlaid: {\r\n    show: booleanAllowedValues, // true || false\r\n    initialize: booleanAllowedValues, // true || false\r\n  },\r\n};\r\n\r\nexport type OptionsValidationPluginInstance = {\r\n  _: (options: PartialOptions<Options>, doWriteErrors?: boolean) => PartialOptions<Options>;\r\n};\r\n\r\nexport const optionsValidationPluginName = '__osOptionsValidationPlugin';\r\n\r\nexport const optionsValidationPlugin: Plugin<OptionsValidationPluginInstance> = {\r\n  [optionsValidationPluginName]: {\r\n    _: (options: PartialOptions<Options>, doWriteErrors?: boolean) => {\r\n      const [validated, foreign] = validateOptions(optionsTemplate, options, doWriteErrors);\r\n      return { ...foreign, ...validated };\r\n    },\r\n  },\r\n};\r\n","import {\r\n  createDOM,\r\n  style,\r\n  appendChildren,\r\n  offsetSize,\r\n  scrollLeft,\r\n  scrollTop,\r\n  on,\r\n  addClass,\r\n  equalWH,\r\n  push,\r\n  cAF,\r\n  rAF,\r\n  stopPropagation,\r\n} from 'support';\r\nimport {\r\n  classNameSizeObserverListenerScroll,\r\n  classNameSizeObserverListenerItem,\r\n  classNameSizeObserverListenerItemFinal,\r\n} from 'classnames';\r\nimport type { Plugin } from 'plugins';\r\n\r\nexport type SizeObserverPluginInstance = {\r\n  _: (\r\n    listenerElement: HTMLElement,\r\n    onSizeChangedCallback: (appear: boolean) => any,\r\n    observeAppearChange: boolean\r\n  ) => [appearCallback: () => any, offFns: (() => any)[]];\r\n};\r\n\r\nconst scrollAmount = 3333333;\r\nconst scrollEventName = 'scroll';\r\nexport const sizeObserverPluginName = '__osSizeObserverPlugin';\r\n\r\nexport const sizeObserverPlugin: Plugin<SizeObserverPluginInstance> = {\r\n  [sizeObserverPluginName]: {\r\n    _: (listenerElement, onSizeChangedCallback, observeAppearChange) => {\r\n      const observerElementChildren = createDOM(\r\n        `<div class=\"${classNameSizeObserverListenerItem}\" dir=\"ltr\"><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\"></div></div><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\" style=\"width: 200%; height: 200%\"></div></div></div>`\r\n      );\r\n      appendChildren(listenerElement, observerElementChildren);\r\n      addClass(listenerElement, classNameSizeObserverListenerScroll);\r\n      const observerElementChildrenRoot = observerElementChildren[0] as HTMLElement;\r\n      const shrinkElement = observerElementChildrenRoot.lastChild as HTMLElement;\r\n      const expandElement = observerElementChildrenRoot.firstChild as HTMLElement;\r\n      const expandElementChild = expandElement?.firstChild as HTMLElement;\r\n\r\n      let cacheSize = offsetSize(observerElementChildrenRoot);\r\n      let currSize = cacheSize;\r\n      let isDirty = false;\r\n      let rAFId: number;\r\n\r\n      const reset = () => {\r\n        scrollLeft(expandElement, scrollAmount);\r\n        scrollTop(expandElement, scrollAmount);\r\n        scrollLeft(shrinkElement, scrollAmount);\r\n        scrollTop(shrinkElement, scrollAmount);\r\n      };\r\n      const onResized = (appear?: unknown) => {\r\n        rAFId = 0;\r\n        if (isDirty) {\r\n          cacheSize = currSize;\r\n          onSizeChangedCallback(appear === true);\r\n        }\r\n      };\r\n      const onScroll = (scrollEvent?: Event | false) => {\r\n        currSize = offsetSize(observerElementChildrenRoot);\r\n        isDirty = !scrollEvent || !equalWH(currSize, cacheSize);\r\n\r\n        if (scrollEvent) {\r\n          stopPropagation(scrollEvent);\r\n\r\n          if (isDirty && !rAFId) {\r\n            cAF!(rAFId);\r\n            rAFId = rAF!(onResized);\r\n          }\r\n        } else {\r\n          onResized(scrollEvent === false);\r\n        }\r\n\r\n        reset();\r\n      };\r\n      const offListeners = push(\r\n        [],\r\n        [on(expandElement, scrollEventName, onScroll), on(shrinkElement, scrollEventName, onScroll)]\r\n      );\r\n\r\n      // lets assume that the divs will never be that large and a constant value is enough\r\n      style(expandElementChild, {\r\n        width: scrollAmount,\r\n        height: scrollAmount,\r\n      });\r\n\r\n      reset();\r\n\r\n      return [observeAppearChange ? onScroll.bind(0, false) : reset, offListeners];\r\n    },\r\n  },\r\n};\r\n","import {\r\n  keys,\r\n  attr,\r\n  WH,\r\n  style,\r\n  addClass,\r\n  removeClass,\r\n  noop,\r\n  each,\r\n  assignDeep,\r\n  windowSize,\r\n  UpdateCache,\r\n  XY,\r\n} from 'support';\r\nimport { classNameViewportArrange } from 'classnames';\r\nimport type { StyleObject } from 'typings';\r\nimport type { StructureSetupState } from 'setups/structureSetup';\r\nimport type {\r\n  ViewportOverflowState,\r\n  GetViewportOverflowState,\r\n  HideNativeScrollbars,\r\n} from 'setups/structureSetup/updateSegments/overflowUpdateSegment';\r\nimport type { InternalEnvironment } from 'environment';\r\nimport type { Plugin } from 'plugins';\r\n\r\nexport type ArrangeViewport = (\r\n  viewportOverflowState: ViewportOverflowState,\r\n  viewportScrollSize: WH<number>,\r\n  sizeFraction: WH<number>,\r\n  directionIsRTL: boolean\r\n) => boolean;\r\n\r\nexport type UndoViewportArrangeResult = [\r\n  redoViewportArrange: () => void,\r\n  overflowState?: ViewportOverflowState\r\n];\r\n\r\nexport type UndoArrangeViewport = (\r\n  showNativeOverlaidScrollbars: boolean,\r\n  directionIsRTL: boolean,\r\n  viewportOverflowState?: ViewportOverflowState\r\n) => UndoViewportArrangeResult;\r\n\r\nexport type ScrollbarsHidingPluginInstance = {\r\n  _createUniqueViewportArrangeElement(env: InternalEnvironment): HTMLStyleElement | false;\r\n  _overflowUpdateSegment(\r\n    doViewportArrange: boolean,\r\n    flexboxGlue: boolean,\r\n    viewport: HTMLElement,\r\n    viewportArrange: HTMLStyleElement | false | null | undefined,\r\n    getState: () => StructureSetupState,\r\n    getViewportOverflowState: GetViewportOverflowState,\r\n    hideNativeScrollbars: HideNativeScrollbars\r\n  ): [ArrangeViewport, UndoArrangeViewport];\r\n  _envWindowZoom(): (\r\n    envInstance: InternalEnvironment,\r\n    updateNativeScrollbarSizeCache: UpdateCache<XY<number>>,\r\n    triggerEvent: () => void\r\n  ) => void;\r\n};\r\n\r\nlet contentArrangeCounter = 0;\r\nconst { round, abs } = Math;\r\nconst getWindowDPR = (): number => {\r\n  // eslint-disable-next-line\r\n  // @ts-ignore\r\n  const dDPI = window.screen.deviceXDPI || 0;\r\n  // eslint-disable-next-line\r\n  // @ts-ignore\r\n  const sDPI = window.screen.logicalXDPI || 1;\r\n  return window.devicePixelRatio || dDPI / sDPI;\r\n};\r\n\r\nconst diffBiggerThanOne = (valOne: number, valTwo: number): boolean => {\r\n  const absValOne = abs(valOne);\r\n  const absValTwo = abs(valTwo);\r\n  return !(absValOne === absValTwo || absValOne + 1 === absValTwo || absValOne - 1 === absValTwo);\r\n};\r\n\r\nexport const scrollbarsHidingPluginName = '__osScrollbarsHidingPlugin';\r\n\r\nexport const scrollbarsHidingPlugin: Plugin<ScrollbarsHidingPluginInstance> = {\r\n  [scrollbarsHidingPluginName]: {\r\n    _createUniqueViewportArrangeElement: (env: InternalEnvironment) => {\r\n      const {\r\n        _nativeScrollbarsHiding: _nativeScrollbarStyling,\r\n        _nativeScrollbarsOverlaid: _nativeScrollbarIsOverlaid,\r\n        _cssCustomProperties,\r\n      } = env;\r\n      const create =\r\n        !_cssCustomProperties &&\r\n        !_nativeScrollbarStyling &&\r\n        (_nativeScrollbarIsOverlaid.x || _nativeScrollbarIsOverlaid.y);\r\n      const result = create ? document.createElement('style') : false;\r\n\r\n      if (result) {\r\n        attr(result, 'id', `${classNameViewportArrange}-${contentArrangeCounter}`);\r\n        contentArrangeCounter++;\r\n      }\r\n\r\n      return result;\r\n    },\r\n    _overflowUpdateSegment: (\r\n      doViewportArrange,\r\n      flexboxGlue,\r\n      viewport,\r\n      viewportArrange,\r\n      getState,\r\n      getViewportOverflowState,\r\n      hideNativeScrollbars\r\n    ) => {\r\n      /**\r\n       * Sets the styles of the viewport arrange element.\r\n       * @param viewportOverflowState The viewport overflow state according to which the scrollbars shall be hidden.\r\n       * @param viewportScrollSize The content scroll size.\r\n       * @param directionIsRTL Whether the direction is RTL or not.\r\n       * @returns A boolean which indicates whether the viewport arrange element was adjusted.\r\n       */\r\n      const arrangeViewport: ArrangeViewport = (\r\n        viewportOverflowState,\r\n        viewportScrollSize,\r\n        sizeFraction,\r\n        directionIsRTL\r\n      ) => {\r\n        if (doViewportArrange) {\r\n          const { _viewportPaddingStyle } = getState();\r\n          const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } = viewportOverflowState;\r\n          const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n          const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\r\n          const viewportArrangeHorizontalPaddingKey: keyof StyleObject = directionIsRTL\r\n            ? 'paddingRight'\r\n            : 'paddingLeft';\r\n          const viewportArrangeHorizontalPaddingValue = _viewportPaddingStyle[\r\n            viewportArrangeHorizontalPaddingKey\r\n          ] as number;\r\n          const viewportArrangeVerticalPaddingValue = _viewportPaddingStyle.paddingTop as number;\r\n          const fractionalContentWidth = viewportScrollSize.w + sizeFraction.w;\r\n          const fractionalContenHeight = viewportScrollSize.h + sizeFraction.h;\r\n          const arrangeSize = {\r\n            w:\r\n              hideOffsetY && arrangeY\r\n                ? `${\r\n                    hideOffsetY + fractionalContentWidth - viewportArrangeHorizontalPaddingValue\r\n                  }px`\r\n                : '',\r\n            h:\r\n              hideOffsetX && arrangeX\r\n                ? `${hideOffsetX + fractionalContenHeight - viewportArrangeVerticalPaddingValue}px`\r\n                : '',\r\n          };\r\n\r\n          // adjust content arrange / before element\r\n          if (viewportArrange) {\r\n            const { sheet } = viewportArrange;\r\n            if (sheet) {\r\n              const { cssRules } = sheet;\r\n              if (cssRules) {\r\n                if (!cssRules.length) {\r\n                  sheet.insertRule(\r\n                    `#${attr(viewportArrange, 'id')} + .${classNameViewportArrange}::before {}`,\r\n                    0\r\n                  );\r\n                }\r\n\r\n                // @ts-ignore\r\n                const ruleStyle = cssRules[0].style;\r\n\r\n                ruleStyle.width = arrangeSize.w;\r\n                ruleStyle.height = arrangeSize.h;\r\n              }\r\n            }\r\n          } else {\r\n            style<'--os-vaw' | '--os-vah'>(viewport, {\r\n              '--os-vaw': arrangeSize.w,\r\n              '--os-vah': arrangeSize.h,\r\n            });\r\n          }\r\n        }\r\n\r\n        return doViewportArrange;\r\n      };\r\n\r\n      /**\r\n       * Removes all styles applied because of the viewport arrange strategy.\r\n       * @param showNativeOverlaidScrollbars Whether native overlaid scrollbars are shown instead of hidden.\r\n       * @param directionIsRTL Whether the direction is RTL or not.\r\n       * @param viewportOverflowState The currentviewport overflow state or undefined if it has to be determined.\r\n       * @returns A object with a function which applies all the removed styles and the determined viewport vverflow state.\r\n       */\r\n      const undoViewportArrange: UndoArrangeViewport = (\r\n        showNativeOverlaidScrollbars,\r\n        directionIsRTL,\r\n        viewportOverflowState?\r\n      ) => {\r\n        if (doViewportArrange) {\r\n          const finalViewportOverflowState =\r\n            viewportOverflowState || getViewportOverflowState(showNativeOverlaidScrollbars);\r\n          const { _viewportPaddingStyle: viewportPaddingStyle } = getState();\r\n          const { _scrollbarsHideOffsetArrange } = finalViewportOverflowState;\r\n          const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n          const finalPaddingStyle: StyleObject = {};\r\n          const assignProps = (props: string) =>\r\n            each(props.split(' '), (prop) => {\r\n              finalPaddingStyle[prop] = viewportPaddingStyle[prop];\r\n            });\r\n\r\n          if (arrangeX) {\r\n            assignProps('marginBottom paddingTop paddingBottom');\r\n          }\r\n\r\n          if (arrangeY) {\r\n            assignProps('marginLeft marginRight paddingLeft paddingRight');\r\n          }\r\n\r\n          const prevStyle = style(viewport, keys(finalPaddingStyle));\r\n\r\n          removeClass(viewport, classNameViewportArrange);\r\n\r\n          if (!flexboxGlue) {\r\n            finalPaddingStyle.height = '';\r\n          }\r\n\r\n          style(viewport, finalPaddingStyle);\r\n\r\n          return [\r\n            () => {\r\n              hideNativeScrollbars(\r\n                finalViewportOverflowState,\r\n                directionIsRTL,\r\n                doViewportArrange,\r\n                prevStyle\r\n              );\r\n              style(viewport, prevStyle);\r\n              addClass(viewport, classNameViewportArrange);\r\n            },\r\n            finalViewportOverflowState,\r\n          ];\r\n        }\r\n        return [noop];\r\n      };\r\n\r\n      return [arrangeViewport, undoViewportArrange];\r\n    },\r\n    _envWindowZoom: () => {\r\n      let size = { w: 0, h: 0 };\r\n      let dpr = 0;\r\n\r\n      return (envInstance, updateNativeScrollbarSizeCache, triggerEvent) => {\r\n        const sizeNew = windowSize();\r\n        const deltaSize = {\r\n          w: sizeNew.w - size.w,\r\n          h: sizeNew.h - size.h,\r\n        };\r\n\r\n        if (deltaSize.w === 0 && deltaSize.h === 0) {\r\n          return;\r\n        }\r\n\r\n        const deltaAbsSize = {\r\n          w: abs(deltaSize.w),\r\n          h: abs(deltaSize.h),\r\n        };\r\n        const deltaAbsRatio = {\r\n          w: abs(round(sizeNew.w / (size.w / 100.0))),\r\n          h: abs(round(sizeNew.h / (size.h / 100.0))),\r\n        };\r\n        const dprNew = getWindowDPR();\r\n        const deltaIsBigger = deltaAbsSize.w > 2 && deltaAbsSize.h > 2;\r\n        const difference = !diffBiggerThanOne(deltaAbsRatio.w, deltaAbsRatio.h);\r\n        const dprChanged = dprNew !== dpr && dprNew > 0;\r\n        const isZoom = deltaIsBigger && difference && dprChanged;\r\n\r\n        if (isZoom) {\r\n          const [scrollbarSize, scrollbarSizeChanged] = updateNativeScrollbarSizeCache();\r\n\r\n          assignDeep(envInstance._nativeScrollbarsSize, scrollbarSize); // keep the object same!\r\n\r\n          if (scrollbarSizeChanged) {\r\n            triggerEvent();\r\n          }\r\n        }\r\n\r\n        size = sizeNew;\r\n        dpr = dprNew;\r\n      };\r\n    },\r\n  },\r\n};\r\n","import {\r\n  createDOM,\r\n  addClass,\r\n  style,\r\n  appendChildren,\r\n  fractionalSize,\r\n  clientSize,\r\n  absoluteCoordinates,\r\n  offsetSize,\r\n  scrollLeft,\r\n  XY,\r\n  removeAttr,\r\n  removeElements,\r\n  equalBCRWH,\r\n  getBoundingClientRect,\r\n  assignDeep,\r\n  cssProperty,\r\n  createCache,\r\n  equalXY,\r\n  createEventListenerHub,\r\n  EventListener,\r\n} from 'support';\r\nimport {\r\n  classNameEnvironment,\r\n  classNameEnvironmentFlexboxGlue,\r\n  classNameEnvironmentFlexboxGlueMax,\r\n  classNameViewportScrollbarStyling,\r\n} from 'classnames';\r\nimport { Options, defaultOptions } from 'options';\r\nimport { PartialOptions } from 'typings';\r\nimport { InitializationStrategy } from 'initialization';\r\nimport { getPlugins, ScrollbarsHidingPluginInstance, scrollbarsHidingPluginName } from 'plugins';\r\n\r\ntype EnvironmentEventMap = {\r\n  _: [];\r\n};\r\n\r\nexport interface InternalEnvironment {\r\n  readonly _nativeScrollbarsSize: XY;\r\n  readonly _nativeScrollbarsOverlaid: XY<boolean>;\r\n  readonly _nativeScrollbarsHiding: boolean;\r\n  readonly _rtlScrollBehavior: { n: boolean; i: boolean };\r\n  readonly _flexboxGlue: boolean;\r\n  readonly _cssCustomProperties: boolean;\r\n  readonly _defaultInitializationStrategy: InitializationStrategy;\r\n  readonly _defaultDefaultOptions: Options;\r\n  _addListener(listener: EventListener<EnvironmentEventMap, '_'>): () => void;\r\n  _getInitializationStrategy(): InitializationStrategy;\r\n  _setInitializationStrategy(newInitializationStrategy: Partial<InitializationStrategy>): void;\r\n  _getDefaultOptions(): Options;\r\n  _setDefaultOptions(newDefaultOptions: PartialOptions<Options>): void;\r\n}\r\n\r\nlet environmentInstance: InternalEnvironment;\r\n\r\nconst getNativeScrollbarSize = (\r\n  body: HTMLElement,\r\n  measureElm: HTMLElement,\r\n  measureElmChild: HTMLElement,\r\n  clear?: boolean\r\n): XY => {\r\n  appendChildren(body, measureElm);\r\n\r\n  const cSize = clientSize(measureElm);\r\n  const oSize = offsetSize(measureElm);\r\n  const fSize = fractionalSize(measureElmChild);\r\n\r\n  clear && removeElements(measureElm);\r\n\r\n  return {\r\n    x: oSize.h - cSize.h + fSize.h,\r\n    y: oSize.w - cSize.w + fSize.w,\r\n  };\r\n};\r\n\r\nconst getNativeScrollbarsHiding = (testElm: HTMLElement): boolean => {\r\n  let result = false;\r\n  const revertClass = addClass(testElm, classNameViewportScrollbarStyling);\r\n  try {\r\n    result =\r\n      style(testElm, cssProperty('scrollbar-width')) === 'none' ||\r\n      window.getComputedStyle(testElm, '::-webkit-scrollbar').getPropertyValue('display') ===\r\n        'none';\r\n  } catch (ex) {}\r\n  revertClass();\r\n  return result;\r\n};\r\n\r\nconst getRtlScrollBehavior = (\r\n  parentElm: HTMLElement,\r\n  childElm: HTMLElement\r\n): { i: boolean; n: boolean } => {\r\n  const strHidden = 'hidden';\r\n  style(parentElm, { overflowX: strHidden, overflowY: strHidden, direction: 'rtl' });\r\n  scrollLeft(parentElm, 0);\r\n\r\n  const parentOffset = absoluteCoordinates(parentElm);\r\n  const childOffset = absoluteCoordinates(childElm);\r\n  scrollLeft(parentElm, -999); // https://github.com/KingSora/OverlayScrollbars/issues/187\r\n  const childOffsetAfterScroll = absoluteCoordinates(childElm);\r\n  return {\r\n    /**\r\n     * origin direction = determines if the zero scroll position is on the left or right side\r\n     * 'i' means 'invert' (i === true means that the axis must be inverted to be correct)\r\n     * true = on the left side\r\n     * false = on the right side\r\n     */\r\n    i: parentOffset.x === childOffset.x,\r\n    /**\r\n     * negative = determines if the maximum scroll is positive or negative\r\n     * 'n' means 'negate' (n === true means that the axis must be negated to be correct)\r\n     * true = negative\r\n     * false = positive\r\n     */\r\n    n: childOffset.x !== childOffsetAfterScroll.x,\r\n  };\r\n};\r\n\r\nconst getFlexboxGlue = (parentElm: HTMLElement, childElm: HTMLElement): boolean => {\r\n  const revertFbxGlue = addClass(parentElm, classNameEnvironmentFlexboxGlue);\r\n  const minOffsetsizeParent = getBoundingClientRect(parentElm);\r\n  const minOffsetsize = getBoundingClientRect(childElm);\r\n  const supportsMin = equalBCRWH(minOffsetsize, minOffsetsizeParent, true);\r\n\r\n  const revertFbxGlueMax = addClass(parentElm, classNameEnvironmentFlexboxGlueMax);\r\n  const maxOffsetsizeParent = getBoundingClientRect(parentElm);\r\n  const maxOffsetsize = getBoundingClientRect(childElm);\r\n  const supportsMax = equalBCRWH(maxOffsetsize, maxOffsetsizeParent, true);\r\n\r\n  revertFbxGlue();\r\n  revertFbxGlueMax();\r\n\r\n  return supportsMin && supportsMax;\r\n};\r\n\r\nconst createEnvironment = (): InternalEnvironment => {\r\n  const { body } = document;\r\n  const envDOM = createDOM(`<div class=\"${classNameEnvironment}\"><div></div></div>`);\r\n  const envElm = envDOM[0] as HTMLElement;\r\n  const envChildElm = envElm.firstChild as HTMLElement;\r\n  const [addEvent, , triggerEvent] = createEventListenerHub<EnvironmentEventMap>();\r\n  const [updateNativeScrollbarSizeCache, getNativeScrollbarSizeCache] = createCache(\r\n    {\r\n      _initialValue: getNativeScrollbarSize(body, envElm, envChildElm),\r\n      _equal: equalXY,\r\n    },\r\n    getNativeScrollbarSize.bind(0, body, envElm, envChildElm, true)\r\n  );\r\n  const [nativeScrollbarsSize] = getNativeScrollbarSizeCache();\r\n  const nativeScrollbarsHiding = getNativeScrollbarsHiding(envElm);\r\n  const nativeScrollbarsOverlaid = {\r\n    x: nativeScrollbarsSize.x === 0,\r\n    y: nativeScrollbarsSize.y === 0,\r\n  };\r\n  const initializationStrategy = {\r\n    _padding: !nativeScrollbarsHiding,\r\n    _content: false,\r\n  };\r\n  const defaultDefaultOptions = assignDeep({}, defaultOptions);\r\n\r\n  const env: InternalEnvironment = {\r\n    _nativeScrollbarsSize: nativeScrollbarsSize,\r\n    _nativeScrollbarsOverlaid: nativeScrollbarsOverlaid,\r\n    _nativeScrollbarsHiding: nativeScrollbarsHiding,\r\n    _cssCustomProperties: style(envElm, 'zIndex') === '-1',\r\n    _rtlScrollBehavior: getRtlScrollBehavior(envElm, envChildElm),\r\n    _flexboxGlue: getFlexboxGlue(envElm, envChildElm),\r\n    _addListener: (listener) => addEvent('_', listener),\r\n    _getInitializationStrategy: assignDeep<InitializationStrategy, InitializationStrategy>.bind(\r\n      0,\r\n      {} as InitializationStrategy,\r\n      initializationStrategy\r\n    ),\r\n    _setInitializationStrategy(newInitializationStrategy) {\r\n      assignDeep(initializationStrategy, newInitializationStrategy);\r\n    },\r\n    _getDefaultOptions: assignDeep<Options, Options>.bind(0, {} as Options, defaultDefaultOptions),\r\n    _setDefaultOptions(newDefaultOptions) {\r\n      assignDeep(defaultDefaultOptions, newDefaultOptions);\r\n    },\r\n    _defaultInitializationStrategy: assignDeep({}, initializationStrategy),\r\n    _defaultDefaultOptions: assignDeep({}, defaultDefaultOptions),\r\n  };\r\n\r\n  removeAttr(envElm, 'style');\r\n  removeElements(envElm);\r\n\r\n  if (!nativeScrollbarsHiding && (!nativeScrollbarsOverlaid.x || !nativeScrollbarsOverlaid.y)) {\r\n    let resizeFn: undefined | ReturnType<ScrollbarsHidingPluginInstance['_envWindowZoom']>;\r\n    window.addEventListener('resize', () => {\r\n      const scrollbarsHidingPlugin = getPlugins()[scrollbarsHidingPluginName] as\r\n        | ScrollbarsHidingPluginInstance\r\n        | undefined;\r\n\r\n      resizeFn = resizeFn || (scrollbarsHidingPlugin && scrollbarsHidingPlugin._envWindowZoom());\r\n      resizeFn && resizeFn(env, updateNativeScrollbarSizeCache, triggerEvent.bind(0, '_'));\r\n    });\r\n  }\r\n\r\n  return env;\r\n};\r\n\r\nconst getEnvironment = (): InternalEnvironment => {\r\n  if (!environmentInstance) {\r\n    environmentInstance = createEnvironment();\r\n  }\r\n  return environmentInstance;\r\n};\r\n\r\nexport { getEnvironment };\r\n","import { isFunction, isNull, isUndefined } from 'support';\r\nimport type {\r\n  StructureInitialization,\r\n  StructureInitializationStrategy,\r\n} from 'setups/structureSetup';\r\nimport type {\r\n  ScrollbarsInitialization,\r\n  ScrollbarsInitializationStrategy,\r\n} from 'setups/scrollbarsSetup';\r\n\r\ntype StaticInitialization = HTMLElement | null | undefined;\r\ntype DynamicInitialization = HTMLElement | boolean | null | undefined;\r\n\r\nexport type InitializationTargetElement = HTMLElement | HTMLTextAreaElement;\r\n\r\nexport type InitializationTargetObject = StructureInitialization & ScrollbarsInitialization;\r\n\r\nexport type InitializationTarget = InitializationTargetElement | InitializationTargetObject;\r\n\r\nexport type InitializationStrategy = StructureInitializationStrategy &\r\n  ScrollbarsInitializationStrategy;\r\n\r\n/**\r\n * Static elements MUST be present.\r\n * Null or undefined behave like if this element wasn't specified during initialization.\r\n */\r\nexport type StaticInitializationElement<Args extends any[]> =\r\n  | ((...args: Args) => StaticInitialization)\r\n  | StaticInitialization;\r\n\r\n/**\r\n * Dynamic element CAN be present.\r\n * If its a element the element will be handled as the repsective element.\r\n * True means that the respective dynamic element is forced to be generated.\r\n * False means that the respective dynamic element is forced NOT to be generated.\r\n * Null or undefined behave like if this element wasn't specified during initialization.\r\n */\r\nexport type DynamicInitializationElement<Args extends any[]> =\r\n  | ((...args: Args) => DynamicInitialization)\r\n  | DynamicInitialization;\r\n\r\nexport type InitializtationElementStrategy<InitElm> = Exclude<InitElm, HTMLElement>;\r\n\r\nexport type DefaultInitializtationElementStrategy<\r\n  InitElm extends StaticInitializationElement<any> | DynamicInitializationElement<any>\r\n> = Extract<InitElm, (...args: any[]) => any> extends (...args: infer P) => any\r\n  ? (...args: P) => HTMLElement\r\n  : never;\r\n\r\nconst resolveInitialization = <T>(value: any, args: any): T =>\r\n  isFunction(value) ? value.apply(0, args) : value;\r\n\r\nconst staticInitializationElement = <T extends StaticInitializationElement<any>>(\r\n  args: Parameters<Extract<T, (...args: any[]) => any>>,\r\n  defaultStaticInitializationElement: DefaultInitializtationElementStrategy<T>,\r\n  staticInitializationElementStrategy?: InitializtationElementStrategy<T>,\r\n  staticInitializationElementValue?: T | false\r\n): HTMLElement =>\r\n  resolveInitialization<StaticInitialization>(\r\n    staticInitializationElementValue ||\r\n      resolveInitialization<StaticInitialization>(staticInitializationElementStrategy, args),\r\n    args\r\n  ) || defaultStaticInitializationElement.apply(0, args);\r\n\r\nconst dynamicInitializationElement = <T extends DynamicInitializationElement<any>>(\r\n  args: Parameters<Extract<T, (...args: any[]) => any>>,\r\n  defaultDynamicInitializationElement: DefaultInitializtationElementStrategy<T>,\r\n  dynamicInitializationElementStrategy?: InitializtationElementStrategy<T>,\r\n  dynamicInitializationElementValue?: T | false\r\n): HTMLElement | false => {\r\n  let result = resolveInitialization<DynamicInitialization>(\r\n    dynamicInitializationElementValue,\r\n    args\r\n  );\r\n\r\n  if (isNull(result) || isUndefined(result)) {\r\n    result = resolveInitialization<DynamicInitialization>(\r\n      dynamicInitializationElementStrategy,\r\n      args\r\n    );\r\n  }\r\n\r\n  return result === true || isNull(result) || isUndefined(result)\r\n    ? defaultDynamicInitializationElement.apply(0, args)\r\n    : result;\r\n};\r\n\r\nexport { staticInitializationElement, dynamicInitializationElement };\r\n","import {\r\n  isHTMLElement,\r\n  appendChildren,\r\n  createDiv,\r\n  is,\r\n  contents,\r\n  insertAfter,\r\n  addClass,\r\n  parent,\r\n  indexOf,\r\n  removeElements,\r\n  removeClass,\r\n  hasClass,\r\n  push,\r\n  runEachAndClear,\r\n  insertBefore,\r\n  attr,\r\n  keys,\r\n  removeAttr,\r\n  attrClass,\r\n  hasAttrClass,\r\n  ResizeObserverConstructor,\r\n} from 'support';\r\nimport {\r\n  dataAttributeHost,\r\n  dataAttributeHostOverflowX,\r\n  dataAttributeHostOverflowY,\r\n  classNamePadding,\r\n  classNameViewport,\r\n  classNameContent,\r\n  classNameViewportScrollbarStyling,\r\n} from 'classnames';\r\nimport { getEnvironment } from 'environment';\r\nimport { getPlugins, scrollbarsHidingPluginName } from 'plugins';\r\nimport type { ScrollbarsHidingPluginInstance } from 'plugins/scrollbarsHidingPlugin';\r\nimport {\r\n  staticInitializationElement as generalStaticInitializationElement,\r\n  dynamicInitializationElement as generalDynamicInitializationElement,\r\n} from 'initialization';\r\nimport type { InitializationTarget, InitializationTargetElement } from 'initialization';\r\nimport type {\r\n  StructureDynamicInitializationElement,\r\n  StructureInitialization,\r\n  StructureStaticInitializationElement,\r\n} from 'setups/structureSetup/structureSetup.initialization';\r\n\r\nexport type StructureSetupElements = [\r\n  targetObj: StructureSetupElementsObj,\r\n  appendElements: () => void,\r\n  destroy: () => void\r\n];\r\n\r\nexport interface StructureSetupElementsObj {\r\n  _target: InitializationTargetElement;\r\n  _host: HTMLElement;\r\n  _viewport: HTMLElement;\r\n  _padding: HTMLElement | false;\r\n  _content: HTMLElement | false;\r\n  _viewportArrange: HTMLStyleElement | false | null | undefined;\r\n  // ctx ----\r\n  _isTextarea: boolean;\r\n  _isBody: boolean;\r\n  _htmlElm: HTMLHtmlElement;\r\n  _bodyElm: HTMLBodyElement;\r\n  _windowElm: Window;\r\n  _documentElm: Document;\r\n  _targetIsElm: boolean;\r\n  _viewportIsTarget: boolean;\r\n  _viewportHasClass: (className: string, attributeClassName: string) => boolean;\r\n  _viewportAddRemoveClass: (className: string, attributeClassName: string, add?: boolean) => void;\r\n}\r\n\r\nconst createNewDiv = createDiv.bind(0, '');\r\n\r\nconst unwrap = (elm: HTMLElement | false | null | undefined) => {\r\n  appendChildren(parent(elm), contents(elm));\r\n  removeElements(elm);\r\n};\r\n\r\nconst addDataAttrHost = (elm: HTMLElement, value: string) => {\r\n  attr(elm, dataAttributeHost, value);\r\n  return removeAttr.bind(0, elm, dataAttributeHost);\r\n};\r\n\r\nexport const createStructureSetupElements = (\r\n  target: InitializationTarget\r\n): StructureSetupElements => {\r\n  const env = getEnvironment();\r\n  const { _getInitializationStrategy, _nativeScrollbarsHiding } = env;\r\n  const scrollbarsHidingPlugin = getPlugins()[scrollbarsHidingPluginName] as\r\n    | ScrollbarsHidingPluginInstance\r\n    | undefined;\r\n  const createUniqueViewportArrangeElement =\r\n    scrollbarsHidingPlugin && scrollbarsHidingPlugin._createUniqueViewportArrangeElement;\r\n  const {\r\n    _host: hostInitializationStrategy,\r\n    _viewport: viewportInitializationStrategy,\r\n    _padding: paddingInitializationStrategy,\r\n    _content: contentInitializationStrategy,\r\n  } = _getInitializationStrategy();\r\n  const targetIsElm = isHTMLElement(target);\r\n  const targetStructureInitialization = target as StructureInitialization;\r\n  const targetElement = targetIsElm\r\n    ? (target as InitializationTargetElement)\r\n    : targetStructureInitialization.target;\r\n  const isTextarea = is(targetElement, 'textarea');\r\n  const isBody = !isTextarea && is(targetElement, 'body');\r\n  const ownerDocument = targetElement!.ownerDocument;\r\n  const bodyElm = ownerDocument.body as HTMLBodyElement;\r\n  const wnd = ownerDocument.defaultView as Window;\r\n  const singleElmSupport = !!ResizeObserverConstructor && !isTextarea && _nativeScrollbarsHiding;\r\n  const staticInitializationElement =\r\n    generalStaticInitializationElement<StructureStaticInitializationElement>.bind(0, [\r\n      targetElement,\r\n    ]);\r\n  const dynamicInitializationElement =\r\n    generalDynamicInitializationElement<StructureDynamicInitializationElement>.bind(0, [\r\n      targetElement,\r\n    ]);\r\n  const viewportElement = [\r\n    staticInitializationElement(\r\n      createNewDiv,\r\n      viewportInitializationStrategy,\r\n      targetStructureInitialization.viewport\r\n    ),\r\n    staticInitializationElement(createNewDiv, viewportInitializationStrategy),\r\n    staticInitializationElement(createNewDiv),\r\n  ].filter((potentialViewport) =>\r\n    !singleElmSupport ? potentialViewport !== targetElement : true\r\n  )[0];\r\n  const viewportIsTarget = viewportElement === targetElement;\r\n  const evaluatedTargetObj: StructureSetupElementsObj = {\r\n    _target: targetElement,\r\n    _host: isTextarea\r\n      ? staticInitializationElement(\r\n          createNewDiv,\r\n          hostInitializationStrategy,\r\n          targetStructureInitialization.host\r\n        )\r\n      : (targetElement as HTMLElement),\r\n    _viewport: viewportElement,\r\n    _padding:\r\n      !viewportIsTarget &&\r\n      dynamicInitializationElement(\r\n        createNewDiv,\r\n        paddingInitializationStrategy,\r\n        targetStructureInitialization.padding\r\n      ),\r\n    _content:\r\n      !viewportIsTarget &&\r\n      dynamicInitializationElement(\r\n        createNewDiv,\r\n        contentInitializationStrategy,\r\n        targetStructureInitialization.content\r\n      ),\r\n    _viewportArrange:\r\n      !viewportIsTarget &&\r\n      !_nativeScrollbarsHiding &&\r\n      createUniqueViewportArrangeElement &&\r\n      createUniqueViewportArrangeElement(env),\r\n    _windowElm: wnd,\r\n    _documentElm: ownerDocument,\r\n    _htmlElm: parent(bodyElm) as HTMLHtmlElement,\r\n    _bodyElm: bodyElm,\r\n    _isTextarea: isTextarea,\r\n    _isBody: isBody,\r\n    _targetIsElm: targetIsElm,\r\n    _viewportIsTarget: viewportIsTarget,\r\n    _viewportHasClass: (className: string, attributeClassName: string) =>\r\n      viewportIsTarget\r\n        ? hasAttrClass(viewportElement, dataAttributeHost, attributeClassName)\r\n        : hasClass(viewportElement, className),\r\n    _viewportAddRemoveClass: (className: string, attributeClassName: string, add?: boolean) =>\r\n      viewportIsTarget\r\n        ? attrClass(viewportElement, dataAttributeHost, attributeClassName, add)\r\n        : (add ? addClass : removeClass)(viewportElement, className),\r\n  };\r\n  const generatedElements = keys(evaluatedTargetObj).reduce((arr, key: string) => {\r\n    const value = evaluatedTargetObj[key];\r\n    return push(arr, value && !parent(value) ? value : false);\r\n  }, [] as HTMLElement[]);\r\n  const elementIsGenerated = (elm: HTMLElement | false) =>\r\n    elm ? indexOf(generatedElements, elm) > -1 : null;\r\n  const { _target, _host, _padding, _viewport, _content, _viewportArrange } = evaluatedTargetObj;\r\n  const destroyFns: (() => any)[] = [];\r\n  const isTextareaHostGenerated = isTextarea && elementIsGenerated(_host);\r\n  const targetContents = isTextarea\r\n    ? _target\r\n    : contents(\r\n        [_content, _viewport, _padding, _host, _target].find(\r\n          (elm) => elementIsGenerated(elm) === false\r\n        )\r\n      );\r\n  const contentSlot = _content || _viewport;\r\n  const appendElements = () => {\r\n    const removeHostDataAttr = addDataAttrHost(_host, viewportIsTarget ? 'viewport' : 'host');\r\n    const removePaddingClass = addClass(_padding, classNamePadding);\r\n    const removeViewportClass = addClass(_viewport, !viewportIsTarget && classNameViewport);\r\n    const removeContentClass = addClass(_content, classNameContent);\r\n\r\n    // only insert host for textarea after target if it was generated\r\n    if (isTextareaHostGenerated) {\r\n      insertAfter(_target, _host);\r\n\r\n      push(destroyFns, () => {\r\n        insertAfter(_host, _target);\r\n        removeElements(_host);\r\n      });\r\n    }\r\n\r\n    appendChildren(contentSlot, targetContents);\r\n    appendChildren(_host, _padding);\r\n    appendChildren(_padding || _host, !viewportIsTarget && _viewport);\r\n    appendChildren(_viewport, _content);\r\n\r\n    push(destroyFns, () => {\r\n      removeHostDataAttr();\r\n      removeAttr(_viewport, dataAttributeHostOverflowX);\r\n      removeAttr(_viewport, dataAttributeHostOverflowY);\r\n\r\n      if (elementIsGenerated(_content)) {\r\n        unwrap(_content);\r\n      }\r\n      if (elementIsGenerated(_viewport)) {\r\n        unwrap(_viewport);\r\n      }\r\n      if (elementIsGenerated(_padding)) {\r\n        unwrap(_padding);\r\n      }\r\n      removePaddingClass();\r\n      removeViewportClass();\r\n      removeContentClass();\r\n    });\r\n\r\n    if (_nativeScrollbarsHiding && !viewportIsTarget) {\r\n      push(destroyFns, removeClass.bind(0, _viewport, classNameViewportScrollbarStyling));\r\n    }\r\n    if (_viewportArrange) {\r\n      insertBefore(_viewport, _viewportArrange);\r\n      push(destroyFns, removeElements.bind(0, _viewportArrange));\r\n    }\r\n  };\r\n\r\n  return [evaluatedTargetObj, appendElements, runEachAndClear.bind(0, destroyFns)];\r\n};\r\n","import { style } from 'support';\r\nimport { getEnvironment } from 'environment';\r\nimport type { CreateStructureUpdateSegment } from 'setups/structureSetup/structureSetup.update';\r\n\r\n/**\r\n * Lifecycle with the responsibility to adjust the trinsic behavior of the content element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createTrinsicUpdateSegment: CreateStructureUpdateSegment = (\r\n  structureSetupElements,\r\n  state\r\n) => {\r\n  const { _content } = structureSetupElements;\r\n  const [getState] = state;\r\n\r\n  return (updateHints) => {\r\n    const { _flexboxGlue } = getEnvironment();\r\n    const { _heightIntrinsic } = getState();\r\n    const { _heightIntrinsicChanged } = updateHints;\r\n    const heightIntrinsicChanged = (_content || !_flexboxGlue) && _heightIntrinsicChanged;\r\n\r\n    if (heightIntrinsicChanged) {\r\n      style(_content, {\r\n        height: _heightIntrinsic ? '' : '100%',\r\n      });\r\n    }\r\n\r\n    return {\r\n      _sizeChanged: heightIntrinsicChanged,\r\n      _contentMutation: heightIntrinsicChanged,\r\n    };\r\n  };\r\n};\r\n","import { createCache, topRightBottomLeft, equalTRBL, style, assignDeep } from 'support';\r\nimport { StyleObject } from 'typings';\r\nimport { getEnvironment } from 'environment';\r\nimport type { CreateStructureUpdateSegment } from 'setups/structureSetup/structureSetup.update';\r\n\r\n/**\r\n * Lifecycle with the responsibility to adjust the padding styling of the padding and viewport element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createPaddingUpdateSegment: CreateStructureUpdateSegment = (\r\n  structureSetupElements,\r\n  state\r\n) => {\r\n  const [getState, setState] = state;\r\n  const { _host, _padding, _viewport, _viewportIsTarget: _isSingleElm } = structureSetupElements;\r\n  const [updatePaddingCache, currentPaddingCache] = createCache(\r\n    {\r\n      _equal: equalTRBL,\r\n      _initialValue: topRightBottomLeft(),\r\n    },\r\n    topRightBottomLeft.bind(0, _host, 'padding', '')\r\n  );\r\n\r\n  return (updateHints, checkOption, force) => {\r\n    let [padding, paddingChanged] = currentPaddingCache(force);\r\n    const { _nativeScrollbarsHiding: _nativeScrollbarStyling, _flexboxGlue } = getEnvironment();\r\n    const { _directionIsRTL } = getState();\r\n    const { _sizeChanged, _contentMutation, _directionChanged } = updateHints;\r\n    const [paddingAbsolute, paddingAbsoluteChanged] = checkOption('paddingAbsolute');\r\n    const contentMutation = !_flexboxGlue && _contentMutation;\r\n\r\n    if (_sizeChanged || paddingChanged || contentMutation) {\r\n      [padding, paddingChanged] = updatePaddingCache(force);\r\n    }\r\n\r\n    const paddingStyleChanged =\r\n      !_isSingleElm && (paddingAbsoluteChanged || _directionChanged || paddingChanged);\r\n\r\n    if (paddingStyleChanged) {\r\n      // if there is no padding element and no scrollbar styling, paddingAbsolute isn't supported\r\n      const paddingRelative = !paddingAbsolute || (!_padding && !_nativeScrollbarStyling);\r\n      const paddingHorizontal = padding.r + padding.l;\r\n      const paddingVertical = padding.t + padding.b;\r\n\r\n      const paddingStyle: StyleObject = {\r\n        marginRight: paddingRelative && !_directionIsRTL ? -paddingHorizontal : 0,\r\n        marginBottom: paddingRelative ? -paddingVertical : 0,\r\n        marginLeft: paddingRelative && _directionIsRTL ? -paddingHorizontal : 0,\r\n        top: paddingRelative ? -padding.t : 0,\r\n        right: paddingRelative ? (_directionIsRTL ? -padding.r : 'auto') : 0,\r\n        left: paddingRelative ? (_directionIsRTL ? 'auto' : -padding.l) : 0,\r\n        width: paddingRelative ? `calc(100% + ${paddingHorizontal}px)` : '',\r\n      };\r\n      const viewportStyle: StyleObject = {\r\n        paddingTop: paddingRelative ? padding.t : 0,\r\n        paddingRight: paddingRelative ? padding.r : 0,\r\n        paddingBottom: paddingRelative ? padding.b : 0,\r\n        paddingLeft: paddingRelative ? padding.l : 0,\r\n      };\r\n\r\n      // if there is no padding element apply the style to the viewport element instead\r\n      style(_padding || _viewport, paddingStyle);\r\n      style(_viewport, viewportStyle);\r\n\r\n      setState({\r\n        _padding: padding,\r\n        _paddingAbsolute: !paddingRelative,\r\n        _viewportPaddingStyle: _padding\r\n          ? viewportStyle\r\n          : assignDeep({}, paddingStyle, viewportStyle),\r\n      });\r\n    }\r\n\r\n    return {\r\n      _paddingStyleChanged: paddingStyleChanged,\r\n    };\r\n  };\r\n};\r\n","import {\r\n  createCache,\r\n  attr,\r\n  WH,\r\n  XY,\r\n  style,\r\n  scrollSize,\r\n  fractionalSize,\r\n  equalWH,\r\n  addClass,\r\n  removeClass,\r\n  clientSize,\r\n  equalXY,\r\n  attrClass,\r\n  noop,\r\n} from 'support';\r\nimport { getEnvironment } from 'environment';\r\nimport {\r\n  classNameViewportScrollbarStyling,\r\n  classNameOverflowVisible,\r\n  dataAttributeHost,\r\n  dataAttributeHostOverflowX,\r\n  dataAttributeHostOverflowY,\r\n  dataValueHostViewportScrollbarStyling,\r\n  dataValueHostOverflowVisible,\r\n} from 'classnames';\r\nimport { getPlugins, scrollbarsHidingPluginName } from 'plugins';\r\nimport type {\r\n  ScrollbarsHidingPluginInstance,\r\n  ArrangeViewport,\r\n  UndoArrangeViewport,\r\n} from 'plugins/scrollbarsHidingPlugin';\r\nimport type { StyleObject, OverflowStyle } from 'typings';\r\nimport type { OverflowBehavior } from 'options';\r\nimport type { CreateStructureUpdateSegment } from 'setups/structureSetup/structureSetup.update';\r\n\r\nexport interface ViewportOverflowState {\r\n  _scrollbarsHideOffset: XY<number>;\r\n  _scrollbarsHideOffsetArrange: XY<boolean>;\r\n  _overflowScroll: XY<boolean>;\r\n  _overflowStyle: XY<OverflowStyle>;\r\n}\r\n\r\nexport type GetViewportOverflowState = (\r\n  showNativeOverlaidScrollbars: boolean,\r\n  viewportStyleObj?: StyleObject\r\n) => ViewportOverflowState;\r\n\r\nexport type HideNativeScrollbars = (\r\n  viewportOverflowState: ViewportOverflowState,\r\n  directionIsRTL: boolean,\r\n  viewportArrange: boolean,\r\n  viewportStyleObj: StyleObject\r\n) => void;\r\n\r\nconst { max } = Math;\r\nconst max0 = max.bind(0, 0);\r\nconst strVisible = 'visible';\r\nconst strHidden = 'hidden';\r\nconst overlaidScrollbarsHideOffset = 42;\r\nconst whCacheOptions = {\r\n  _equal: equalWH,\r\n  _initialValue: { w: 0, h: 0 },\r\n};\r\nconst xyCacheOptions = {\r\n  _equal: equalXY,\r\n  _initialValue: { x: strHidden, y: strHidden } as XY<OverflowStyle>,\r\n};\r\n\r\nconst getOverflowAmount = (viewportScrollSize: WH<number>, viewportClientSize: WH<number>) => {\r\n  const tollerance = window.devicePixelRatio % 1 !== 0 ? 1 : 0;\r\n  const amount = {\r\n    w: max0(viewportScrollSize.w - viewportClientSize.w),\r\n    h: max0(viewportScrollSize.h - viewportClientSize.h),\r\n  };\r\n\r\n  return {\r\n    w: amount.w > tollerance ? amount.w : 0,\r\n    h: amount.h > tollerance ? amount.h : 0,\r\n  };\r\n};\r\n\r\nconst conditionalClass = (\r\n  elm: Element | false | null | undefined,\r\n  classNames: string,\r\n  add: boolean\r\n) => (add ? addClass(elm, classNames) : removeClass(elm, classNames));\r\n\r\nconst overflowIsVisible = (overflowBehavior: string) => overflowBehavior.indexOf(strVisible) === 0;\r\n\r\n/**\r\n * Lifecycle with the responsibility to set the correct overflow and scrollbar hiding styles of the viewport element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createOverflowUpdateSegment: CreateStructureUpdateSegment = (\r\n  structureSetupElements,\r\n  state\r\n) => {\r\n  const [getState, setState] = state;\r\n  const {\r\n    _host,\r\n    _padding,\r\n    _viewport,\r\n    _viewportArrange,\r\n    _viewportIsTarget,\r\n    _viewportAddRemoveClass,\r\n  } = structureSetupElements;\r\n  const {\r\n    _nativeScrollbarsSize,\r\n    _flexboxGlue,\r\n    _nativeScrollbarsHiding,\r\n    _nativeScrollbarsOverlaid,\r\n  } = getEnvironment();\r\n  const scrollbarsHidingPlugin = getPlugins()[scrollbarsHidingPluginName] as\r\n    | ScrollbarsHidingPluginInstance\r\n    | undefined;\r\n  const doViewportArrange =\r\n    !_viewportIsTarget &&\r\n    !_nativeScrollbarsHiding &&\r\n    (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n\r\n  const [updateSizeFraction, getCurrentSizeFraction] = createCache<WH<number>>(\r\n    whCacheOptions,\r\n    fractionalSize.bind(0, _viewport)\r\n  );\r\n\r\n  const [updateViewportScrollSizeCache, getCurrentViewportScrollSizeCache] = createCache<\r\n    WH<number>\r\n  >(whCacheOptions, scrollSize.bind(0, _viewport));\r\n\r\n  const [updateOverflowAmountCache, getCurrentOverflowAmountCache] =\r\n    createCache<WH<number>>(whCacheOptions);\r\n\r\n  const [updateOverflowEdge, getCurrentOverflowEdgeCache] = createCache<WH<number>>(whCacheOptions);\r\n\r\n  const [updateOverflowStyleCache] = createCache<XY<OverflowStyle>>(xyCacheOptions);\r\n\r\n  /**\r\n   * Applies a fixed height to the viewport so it can't overflow or underflow the host element.\r\n   * @param viewportOverflowState The current overflow state.\r\n   * @param heightIntrinsic Whether the host height is intrinsic or not.\r\n   */\r\n  const fixFlexboxGlue = (\r\n    viewportOverflowState: ViewportOverflowState,\r\n    heightIntrinsic: boolean\r\n  ) => {\r\n    style(_viewport, {\r\n      height: '',\r\n    });\r\n\r\n    if (heightIntrinsic) {\r\n      const { _paddingAbsolute, _padding: padding } = getState();\r\n      const { _overflowScroll, _scrollbarsHideOffset } = viewportOverflowState;\r\n      const fSize = fractionalSize(_host);\r\n      const hostClientSize = clientSize(_host);\r\n\r\n      // padding subtraction is only needed if padding is absolute or if viewport is content-box\r\n      const isContentBox = style(_viewport, 'boxSizing') === 'content-box';\r\n      const paddingVertical = _paddingAbsolute || isContentBox ? padding.b + padding.t : 0;\r\n      const subtractXScrollbar = !(_nativeScrollbarsOverlaid.x && isContentBox);\r\n\r\n      style(_viewport, {\r\n        height:\r\n          hostClientSize.h +\r\n          fSize.h +\r\n          (_overflowScroll.x && subtractXScrollbar ? _scrollbarsHideOffset.x : 0) -\r\n          paddingVertical,\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Gets the current overflow state of the viewport.\r\n   * @param showNativeOverlaidScrollbars Whether native overlaid scrollbars are shown instead of hidden.\r\n   * @param viewportStyleObj The viewport style object where the overflow scroll property can be read of, or undefined if shall be determined.\r\n   * @returns A object which contains informations about the current overflow state.\r\n   */\r\n  const getViewportOverflowState: GetViewportOverflowState = (\r\n    showNativeOverlaidScrollbars,\r\n    viewportStyleObj?\r\n  ) => {\r\n    const arrangeHideOffset =\r\n      !_nativeScrollbarsHiding && !showNativeOverlaidScrollbars ? overlaidScrollbarsHideOffset : 0;\r\n    const getStatePerAxis = (\r\n      styleKey: string,\r\n      isOverlaid: boolean,\r\n      nativeScrollbarSize: number\r\n    ) => {\r\n      const overflowStyle = style(_viewport, styleKey);\r\n      // can't do something like \"viewportStyleObj && viewportStyleObj[styleKey] || overflowStyle\" here!\r\n      const objectPrefferedOverflowStyle = viewportStyleObj\r\n        ? viewportStyleObj[styleKey]\r\n        : overflowStyle;\r\n      const overflowScroll = objectPrefferedOverflowStyle === 'scroll';\r\n      const nonScrollbarStylingHideOffset = isOverlaid ? arrangeHideOffset : nativeScrollbarSize;\r\n      const scrollbarsHideOffset =\r\n        overflowScroll && !_nativeScrollbarsHiding ? nonScrollbarStylingHideOffset : 0;\r\n      const scrollbarsHideOffsetArrange = isOverlaid && !!arrangeHideOffset;\r\n\r\n      return [overflowStyle, overflowScroll, scrollbarsHideOffset, scrollbarsHideOffsetArrange] as [\r\n        overflowStyle: OverflowStyle,\r\n        overflowScroll: boolean,\r\n        scrollbarsHideOffset: number,\r\n        scrollbarsHideOffsetArrange: boolean\r\n      ];\r\n    };\r\n\r\n    const [xOverflowStyle, xOverflowScroll, xScrollbarsHideOffset, xScrollbarsHideOffsetArrange] =\r\n      getStatePerAxis('overflowX', _nativeScrollbarsOverlaid.x, _nativeScrollbarsSize.x);\r\n    const [yOverflowStyle, yOverflowScroll, yScrollbarsHideOffset, yScrollbarsHideOffsetArrange] =\r\n      getStatePerAxis('overflowY', _nativeScrollbarsOverlaid.y, _nativeScrollbarsSize.y);\r\n\r\n    return {\r\n      _overflowStyle: {\r\n        x: xOverflowStyle,\r\n        y: yOverflowStyle,\r\n      },\r\n      _overflowScroll: {\r\n        x: xOverflowScroll,\r\n        y: yOverflowScroll,\r\n      },\r\n      _scrollbarsHideOffset: {\r\n        x: xScrollbarsHideOffset,\r\n        y: yScrollbarsHideOffset,\r\n      },\r\n      _scrollbarsHideOffsetArrange: {\r\n        x: xScrollbarsHideOffsetArrange,\r\n        y: yScrollbarsHideOffsetArrange,\r\n      },\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Sets the overflow property of the viewport and calculates the a overflow state according to the new parameters.\r\n   * @param showNativeOverlaidScrollbars Whether to show natively overlaid scrollbars.\r\n   * @param overflowAmount The overflow amount.\r\n   * @param overflow The overflow behavior according to the options.\r\n   * @param viewportStyleObj The viewport style object to which the overflow style shall be applied.\r\n   * @returns A object which represents the newly set overflow state.\r\n   */\r\n  const setViewportOverflowState = (\r\n    showNativeOverlaidScrollbars: boolean,\r\n    hasOverflow: XY<boolean>,\r\n    overflowOption: XY<OverflowBehavior>,\r\n    viewportStyleObj: StyleObject\r\n  ): ViewportOverflowState => {\r\n    const setAxisOverflowStyle = (behavior: OverflowBehavior, hasOverflowAxis: boolean) => {\r\n      const overflowVisible = overflowIsVisible(behavior);\r\n      const overflowVisibleBehavior =\r\n        (hasOverflowAxis && overflowVisible && behavior.replace(`${strVisible}-`, '')) || '';\r\n      return [\r\n        hasOverflowAxis && !overflowVisible ? behavior : '',\r\n        overflowIsVisible(overflowVisibleBehavior) ? 'hidden' : overflowVisibleBehavior,\r\n      ];\r\n    };\r\n\r\n    const [overflowX, visibleBehaviorX] = setAxisOverflowStyle(overflowOption.x, hasOverflow.x);\r\n    const [overflowY, visibleBehaviorY] = setAxisOverflowStyle(overflowOption.y, hasOverflow.y);\r\n\r\n    viewportStyleObj.overflowX = visibleBehaviorX && overflowY ? visibleBehaviorX : overflowX;\r\n    viewportStyleObj.overflowY = visibleBehaviorY && overflowX ? visibleBehaviorY : overflowY;\r\n\r\n    return getViewportOverflowState(showNativeOverlaidScrollbars, viewportStyleObj);\r\n  };\r\n\r\n  /**\r\n   * Hides the native scrollbars according to the passed parameters.\r\n   * @param viewportOverflowState The viewport overflow state.\r\n   * @param directionIsRTL Whether the direction is RTL or not.\r\n   * @param viewportArrange Whether special styles related to the viewport arrange strategy shall be applied.\r\n   * @param viewportStyleObj The viewport style object to which the needed styles shall be applied.\r\n   */\r\n  const hideNativeScrollbars: HideNativeScrollbars = (\r\n    viewportOverflowState,\r\n    directionIsRTL,\r\n    viewportArrange,\r\n    viewportStyleObj\r\n  ) => {\r\n    const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } = viewportOverflowState;\r\n    const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n    const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\r\n    const { _viewportPaddingStyle: viewportPaddingStyle } = getState();\r\n    const horizontalMarginKey: keyof StyleObject = directionIsRTL ? 'marginLeft' : 'marginRight';\r\n    const viewportHorizontalPaddingKey: keyof StyleObject = directionIsRTL\r\n      ? 'paddingLeft'\r\n      : 'paddingRight';\r\n    const horizontalMarginValue = viewportPaddingStyle[horizontalMarginKey] as number;\r\n    const verticalMarginValue = viewportPaddingStyle.marginBottom as number;\r\n    const horizontalPaddingValue = viewportPaddingStyle[viewportHorizontalPaddingKey] as number;\r\n    const verticalPaddingValue = viewportPaddingStyle.paddingBottom as number;\r\n\r\n    // horizontal\r\n    viewportStyleObj.width = `calc(100% + ${hideOffsetY + horizontalMarginValue * -1}px)`;\r\n    viewportStyleObj[horizontalMarginKey] = -hideOffsetY + horizontalMarginValue;\r\n\r\n    // vertical\r\n    viewportStyleObj.marginBottom = -hideOffsetX + verticalMarginValue;\r\n\r\n    // viewport arrange additional styles\r\n    if (viewportArrange) {\r\n      viewportStyleObj[viewportHorizontalPaddingKey] =\r\n        horizontalPaddingValue + (arrangeY ? hideOffsetY : 0);\r\n      viewportStyleObj.paddingBottom = verticalPaddingValue + (arrangeX ? hideOffsetX : 0);\r\n    }\r\n  };\r\n\r\n  const [arrangeViewport, undoViewportArrange] = scrollbarsHidingPlugin\r\n    ? scrollbarsHidingPlugin._overflowUpdateSegment(\r\n        doViewportArrange,\r\n        _flexboxGlue,\r\n        _viewport,\r\n        _viewportArrange,\r\n        getState,\r\n        getViewportOverflowState,\r\n        hideNativeScrollbars\r\n      )\r\n    : [(() => doViewportArrange) as ArrangeViewport, (() => [noop]) as UndoArrangeViewport];\r\n\r\n  return (updateHints, checkOption, force) => {\r\n    const {\r\n      _sizeChanged,\r\n      _hostMutation,\r\n      _contentMutation,\r\n      _paddingStyleChanged,\r\n      _heightIntrinsicChanged,\r\n      _directionChanged,\r\n    } = updateHints;\r\n    const { _heightIntrinsic, _directionIsRTL } = getState();\r\n    const [showNativeOverlaidScrollbarsOption, showNativeOverlaidScrollbarsChanged] =\r\n      checkOption<boolean>('nativeScrollbarsOverlaid.show');\r\n    const [overflow, overflowChanged] = checkOption<XY<OverflowBehavior>>('overflow');\r\n\r\n    const showNativeOverlaidScrollbars =\r\n      showNativeOverlaidScrollbarsOption &&\r\n      _nativeScrollbarsOverlaid.x &&\r\n      _nativeScrollbarsOverlaid.y;\r\n    const adjustFlexboxGlue =\r\n      !_viewportIsTarget &&\r\n      !_flexboxGlue &&\r\n      (_sizeChanged ||\r\n        _contentMutation ||\r\n        _hostMutation ||\r\n        showNativeOverlaidScrollbarsChanged ||\r\n        _heightIntrinsicChanged);\r\n    const overflowXVisible = overflowIsVisible(overflow.x);\r\n    const overflowYVisible = overflowIsVisible(overflow.y);\r\n    const overflowVisible = overflowXVisible || overflowYVisible;\r\n\r\n    let sizeFractionCache = getCurrentSizeFraction(force);\r\n    let viewportScrollSizeCache = getCurrentViewportScrollSizeCache(force);\r\n    let overflowAmuntCache = getCurrentOverflowAmountCache(force);\r\n    let overflowEdgeCache = getCurrentOverflowEdgeCache(force);\r\n\r\n    let preMeasureViewportOverflowState: ViewportOverflowState | undefined;\r\n\r\n    if (showNativeOverlaidScrollbarsChanged && _nativeScrollbarsHiding) {\r\n      _viewportAddRemoveClass(\r\n        classNameViewportScrollbarStyling,\r\n        dataValueHostViewportScrollbarStyling,\r\n        !showNativeOverlaidScrollbars\r\n      );\r\n    }\r\n\r\n    if (adjustFlexboxGlue) {\r\n      preMeasureViewportOverflowState = getViewportOverflowState(showNativeOverlaidScrollbars);\r\n      fixFlexboxGlue(preMeasureViewportOverflowState, _heightIntrinsic);\r\n    }\r\n\r\n    if (\r\n      _sizeChanged ||\r\n      _paddingStyleChanged ||\r\n      _contentMutation ||\r\n      _directionChanged ||\r\n      showNativeOverlaidScrollbarsChanged\r\n    ) {\r\n      if (overflowVisible) {\r\n        _viewportAddRemoveClass(classNameOverflowVisible, dataValueHostOverflowVisible, false);\r\n      }\r\n\r\n      const [redoViewportArrange, undoViewportArrangeOverflowState] = undoViewportArrange(\r\n        showNativeOverlaidScrollbars,\r\n        _directionIsRTL,\r\n        preMeasureViewportOverflowState\r\n      );\r\n      const [sizeFraction, sizeFractionChanged] = (sizeFractionCache = updateSizeFraction(force));\r\n      const [viewportScrollSize, viewportScrollSizeChanged] = (viewportScrollSizeCache =\r\n        updateViewportScrollSizeCache(force));\r\n      const viewportclientSize = clientSize(_viewport);\r\n      let arrangedViewportScrollSize = viewportScrollSize;\r\n      let arrangedViewportClientSize = viewportclientSize;\r\n\r\n      redoViewportArrange();\r\n\r\n      // if re measure is required (only required if content arrange strategy is used)\r\n      if (\r\n        (viewportScrollSizeChanged || sizeFractionChanged || showNativeOverlaidScrollbarsChanged) &&\r\n        undoViewportArrangeOverflowState &&\r\n        !showNativeOverlaidScrollbars &&\r\n        arrangeViewport(\r\n          undoViewportArrangeOverflowState,\r\n          viewportScrollSize,\r\n          sizeFraction,\r\n          _directionIsRTL\r\n        )\r\n      ) {\r\n        arrangedViewportClientSize = clientSize(_viewport);\r\n        arrangedViewportScrollSize = scrollSize(_viewport);\r\n      }\r\n\r\n      const overflowAmountScrollSize = {\r\n        w: max0(max(viewportScrollSize.w, arrangedViewportScrollSize.w) + sizeFraction.w),\r\n        h: max0(max(viewportScrollSize.h, arrangedViewportScrollSize.h) + sizeFraction.h),\r\n      };\r\n      const overflowAmountClientSize = {\r\n        w: max0(\r\n          arrangedViewportClientSize.w +\r\n            max0(viewportclientSize.w - viewportScrollSize.w) +\r\n            sizeFraction.w\r\n        ),\r\n        h: max0(\r\n          arrangedViewportClientSize.h +\r\n            max0(viewportclientSize.h - viewportScrollSize.h) +\r\n            sizeFraction.h\r\n        ),\r\n      };\r\n\r\n      overflowEdgeCache = updateOverflowEdge(overflowAmountClientSize);\r\n      overflowAmuntCache = updateOverflowAmountCache(\r\n        getOverflowAmount(overflowAmountScrollSize, overflowAmountClientSize),\r\n        force\r\n      );\r\n    }\r\n\r\n    const [overflowEdge, overflowEdgeChanged] = overflowEdgeCache;\r\n    const [overflowAmount, overflowAmountChanged] = overflowAmuntCache;\r\n    const [viewportScrollSize, viewportScrollSizeChanged] = viewportScrollSizeCache;\r\n    const [sizeFraction, sizeFractionChanged] = sizeFractionCache;\r\n    const hasOverflow = {\r\n      x: overflowAmount.w > 0,\r\n      y: overflowAmount.h > 0,\r\n    };\r\n    const removeClipping =\r\n      (overflowXVisible && overflowYVisible && (hasOverflow.x || hasOverflow.y)) ||\r\n      (overflowXVisible && hasOverflow.x && !hasOverflow.y) ||\r\n      (overflowYVisible && hasOverflow.y && !hasOverflow.x);\r\n\r\n    if (\r\n      _paddingStyleChanged ||\r\n      _directionChanged ||\r\n      sizeFractionChanged ||\r\n      viewportScrollSizeChanged ||\r\n      overflowEdgeChanged ||\r\n      overflowAmountChanged ||\r\n      overflowChanged ||\r\n      showNativeOverlaidScrollbarsChanged ||\r\n      adjustFlexboxGlue\r\n    ) {\r\n      const viewportStyle: StyleObject = {\r\n        marginRight: 0,\r\n        marginBottom: 0,\r\n        marginLeft: 0,\r\n        width: '',\r\n        overflowY: '',\r\n        overflowX: '',\r\n      };\r\n      const viewportOverflowState = setViewportOverflowState(\r\n        showNativeOverlaidScrollbars,\r\n        hasOverflow,\r\n        overflow,\r\n        viewportStyle\r\n      );\r\n      const viewportArranged = arrangeViewport(\r\n        viewportOverflowState,\r\n        viewportScrollSize,\r\n        sizeFraction,\r\n        _directionIsRTL\r\n      );\r\n\r\n      if (!_viewportIsTarget) {\r\n        hideNativeScrollbars(\r\n          viewportOverflowState,\r\n          _directionIsRTL,\r\n          viewportArranged,\r\n          viewportStyle\r\n        );\r\n      }\r\n\r\n      if (adjustFlexboxGlue) {\r\n        fixFlexboxGlue(viewportOverflowState, _heightIntrinsic);\r\n      }\r\n\r\n      if (_viewportIsTarget) {\r\n        attr(_host, dataAttributeHostOverflowX, viewportStyle.overflowX as string);\r\n        attr(_host, dataAttributeHostOverflowY, viewportStyle.overflowY as string);\r\n      } else {\r\n        style(_viewport, viewportStyle);\r\n      }\r\n    }\r\n\r\n    attrClass(_host, dataAttributeHost, dataValueHostOverflowVisible, removeClipping);\r\n    conditionalClass(_padding, classNameOverflowVisible, removeClipping);\r\n    !_viewportIsTarget && conditionalClass(_viewport, classNameOverflowVisible, overflowVisible);\r\n\r\n    const [overflowStyle, overflowStyleChanged] = updateOverflowStyleCache(\r\n      getViewportOverflowState(showNativeOverlaidScrollbars)._overflowStyle\r\n    );\r\n\r\n    setState({\r\n      _overflowStyle: overflowStyle,\r\n      _overflowEdge: {\r\n        x: overflowEdge.w,\r\n        y: overflowEdge.h,\r\n      },\r\n      _overflowAmount: {\r\n        x: overflowAmount.w,\r\n        y: overflowAmount.h,\r\n      },\r\n      _hasOverflow: hasOverflow,\r\n    });\r\n\r\n    return {\r\n      _overflowStyleChanged: overflowStyleChanged,\r\n      _overflowEdgeChanged: overflowEdgeChanged,\r\n      _overflowAmountChanged: overflowAmountChanged,\r\n    };\r\n  };\r\n};\r\n","import { each, isNumber, scrollLeft, scrollTop, assignDeep, keys } from 'support';\r\nimport { getEnvironment } from 'environment';\r\nimport {\r\n  createTrinsicUpdateSegment,\r\n  createPaddingUpdateSegment,\r\n  createOverflowUpdateSegment,\r\n} from 'setups/structureSetup/updateSegments';\r\nimport type { SetupState, SetupUpdateSegment, SetupUpdateCheckOption } from 'setups';\r\nimport type { StructureSetupState } from 'setups/structureSetup';\r\nimport type { StructureSetupElementsObj } from 'setups/structureSetup/structureSetup.elements';\r\n\r\nexport type CreateStructureUpdateSegment = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  state: SetupState<StructureSetupState>\r\n) => StructureSetupUpdateSegment;\r\n\r\nexport type StructureSetupUpdateSegment = SetupUpdateSegment<StructureSetupUpdateHints>;\r\n\r\nexport type StructureSetupUpdate = (\r\n  checkOption: SetupUpdateCheckOption,\r\n  updateHints: Partial<StructureSetupUpdateHints>,\r\n  force?: boolean\r\n) => StructureSetupUpdateHints;\r\n\r\nexport interface StructureSetupUpdateHints {\r\n  _sizeChanged: boolean;\r\n  _directionChanged: boolean;\r\n  _heightIntrinsicChanged: boolean;\r\n  _overflowEdgeChanged: boolean;\r\n  _overflowAmountChanged: boolean;\r\n  _overflowStyleChanged: boolean;\r\n  _paddingStyleChanged: boolean;\r\n  _hostMutation: boolean;\r\n  _contentMutation: boolean;\r\n}\r\n\r\nconst prepareUpdateHints = <T extends StructureSetupUpdateHints>(\r\n  leading: Required<T>,\r\n  adaptive?: Partial<T>,\r\n  force?: boolean\r\n): Required<T> => {\r\n  const result = {};\r\n  const finalAdaptive = adaptive || {};\r\n  const objKeys = keys(leading).concat(keys(finalAdaptive));\r\n\r\n  each(objKeys, (key) => {\r\n    const leadingValue = leading[key];\r\n    const adaptiveValue = finalAdaptive[key];\r\n    result[key] = !!(force || leadingValue || adaptiveValue);\r\n  });\r\n\r\n  return result as Required<T>;\r\n};\r\n\r\nexport const createStructureSetupUpdate = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  state: SetupState<StructureSetupState>\r\n): StructureSetupUpdate => {\r\n  const { _viewport } = structureSetupElements;\r\n  const {\r\n    _nativeScrollbarsHiding: _nativeScrollbarStyling,\r\n    _nativeScrollbarsOverlaid: _nativeScrollbarIsOverlaid,\r\n    _flexboxGlue,\r\n  } = getEnvironment();\r\n  const doViewportArrange =\r\n    !_nativeScrollbarStyling && (_nativeScrollbarIsOverlaid.x || _nativeScrollbarIsOverlaid.y);\r\n\r\n  const updateSegments: StructureSetupUpdateSegment[] = [\r\n    createTrinsicUpdateSegment(structureSetupElements, state),\r\n    createPaddingUpdateSegment(structureSetupElements, state),\r\n    createOverflowUpdateSegment(structureSetupElements, state),\r\n  ];\r\n\r\n  return (\r\n    checkOption: SetupUpdateCheckOption,\r\n    updateHints: Partial<StructureSetupUpdateHints>,\r\n    force?: boolean\r\n  ) => {\r\n    const initialUpdateHints = prepareUpdateHints(\r\n      assignDeep(\r\n        {\r\n          _sizeChanged: false,\r\n          _paddingStyleChanged: false,\r\n          _directionChanged: false,\r\n          _heightIntrinsicChanged: false,\r\n          _overflowEdgeChanged: false,\r\n          _overflowAmountChanged: false,\r\n          _overflowStyleChanged: false,\r\n          _hostMutation: false,\r\n          _contentMutation: false,\r\n        },\r\n        updateHints\r\n      ),\r\n      {},\r\n      force\r\n    );\r\n    const adjustScrollOffset = doViewportArrange || !_flexboxGlue;\r\n    const scrollOffsetX = adjustScrollOffset && scrollLeft(_viewport);\r\n    const scrollOffsetY = adjustScrollOffset && scrollTop(_viewport);\r\n\r\n    let adaptivedUpdateHints: Required<StructureSetupUpdateHints> = initialUpdateHints;\r\n    each(updateSegments, (updateSegment) => {\r\n      adaptivedUpdateHints = prepareUpdateHints<StructureSetupUpdateHints>(\r\n        adaptivedUpdateHints,\r\n        updateSegment(adaptivedUpdateHints, checkOption, !!force) || {},\r\n        force\r\n      );\r\n    });\r\n\r\n    if (isNumber(scrollOffsetX)) {\r\n      scrollLeft(_viewport, scrollOffsetX);\r\n    }\r\n    if (isNumber(scrollOffsetY)) {\r\n      scrollTop(_viewport, scrollOffsetY);\r\n    }\r\n\r\n    return adaptivedUpdateHints;\r\n  };\r\n};\r\n","import {\r\n  Cache,\r\n  CacheValues,\r\n  createCache,\r\n  createDOM,\r\n  style,\r\n  scrollLeft,\r\n  scrollTop,\r\n  runEachAndClear,\r\n  prependChildren,\r\n  removeElements,\r\n  on,\r\n  addClass,\r\n  push,\r\n  ResizeObserverConstructor,\r\n  isArray,\r\n  isBoolean,\r\n  removeClass,\r\n  isObject,\r\n  stopPropagation,\r\n} from 'support';\r\nimport { getEnvironment } from 'environment';\r\nimport {\r\n  classNameSizeObserver,\r\n  classNameSizeObserverAppear,\r\n  classNameSizeObserverListener,\r\n} from 'classnames';\r\nimport { getPlugins, SizeObserverPluginInstance, sizeObserverPluginName } from 'plugins';\r\n\r\nexport interface SizeObserverOptions {\r\n  _direction?: boolean;\r\n  _appear?: boolean;\r\n}\r\n\r\nexport interface SizeObserverCallbackParams {\r\n  _sizeChanged: boolean;\r\n  _directionIsRTLCache?: CacheValues<boolean>;\r\n  _appear?: boolean;\r\n}\r\n\r\nexport type DestroySizeObserver = () => void;\r\n\r\nconst scrollAmount = 3333333;\r\nconst getElmDirectionIsRTL = (elm: HTMLElement): boolean => style(elm, 'direction') === 'rtl';\r\nconst domRectHasDimensions = (rect?: DOMRectReadOnly) => rect && (rect.height || rect.width);\r\n\r\n/**\r\n * Creates a size observer which observes any size, padding, border, margin and box-sizing changes of the target element. Depending on the options also direction and appear can be observed.\r\n * @param target The target element which shall be observed.\r\n * @param onSizeChangedCallback The callback which gets called after a size change was detected.\r\n * @param options The options for size detection, whether to observe also direction and appear.\r\n * @returns A object which represents the instance of the size observer.\r\n */\r\nexport const createSizeObserver = (\r\n  target: HTMLElement,\r\n  onSizeChangedCallback: (params: SizeObserverCallbackParams) => any,\r\n  options?: SizeObserverOptions\r\n): DestroySizeObserver => {\r\n  const { _direction: observeDirectionChange = false, _appear: observeAppearChange = false } =\r\n    options || {};\r\n  const sizeObserverPlugin = getPlugins()[sizeObserverPluginName] as\r\n    | SizeObserverPluginInstance\r\n    | undefined;\r\n  const { _rtlScrollBehavior: rtlScrollBehavior } = getEnvironment();\r\n  const baseElements = createDOM(\r\n    `<div class=\"${classNameSizeObserver}\"><div class=\"${classNameSizeObserverListener}\"></div></div>`\r\n  );\r\n  const sizeObserver = baseElements[0] as HTMLElement;\r\n  const listenerElement = sizeObserver.firstChild as HTMLElement;\r\n  const getIsDirectionRTL = getElmDirectionIsRTL.bind(0, sizeObserver);\r\n  const [updateResizeObserverContentRectCache] = createCache<DOMRectReadOnly | undefined>({\r\n    _initialValue: undefined,\r\n    _alwaysUpdateValues: true,\r\n    _equal: (currVal, newVal) =>\r\n      !(\r\n        !currVal || // if no initial value\r\n        // if from display: none to display: block\r\n        (!domRectHasDimensions(currVal) && domRectHasDimensions(newVal))\r\n      ),\r\n  });\r\n  const onSizeChangedCallbackProxy = (\r\n    sizeChangedContext?: CacheValues<boolean> | ResizeObserverEntry[] | Event | boolean\r\n  ) => {\r\n    const isResizeObserverCall =\r\n      isArray(sizeChangedContext) &&\r\n      sizeChangedContext.length > 0 &&\r\n      isObject(sizeChangedContext[0]);\r\n\r\n    const hasDirectionCache =\r\n      !isResizeObserverCall && isBoolean((sizeChangedContext as CacheValues<boolean>)[0]);\r\n\r\n    let skip = false;\r\n    let appear: boolean | number | undefined = false;\r\n    let doDirectionScroll = true; // always true if sizeChangedContext is Event (appear callback or RO. Polyfill)\r\n\r\n    // if triggered from RO.\r\n    if (isResizeObserverCall) {\r\n      const [currRContentRect, , prevContentRect] = updateResizeObserverContentRectCache(\r\n        (sizeChangedContext as ResizeObserverEntry[]).pop()!.contentRect\r\n      );\r\n      const hasDimensions = domRectHasDimensions(currRContentRect);\r\n      const hadDimensions = domRectHasDimensions(prevContentRect);\r\n      skip = !prevContentRect || !hasDimensions; // skip on initial RO. call or if display is none\r\n      appear = !hadDimensions && hasDimensions;\r\n\r\n      doDirectionScroll = !skip; // direction scroll when not skipping\r\n    }\r\n    // else if its triggered with DirectionCache\r\n    else if (hasDirectionCache) {\r\n      [, doDirectionScroll] = sizeChangedContext as CacheValues<boolean>; // direction scroll when DirectionCache changed, false otherwise\r\n    }\r\n    // else if it triggered with appear from polyfill\r\n    else {\r\n      appear = sizeChangedContext === true;\r\n    }\r\n\r\n    if (observeDirectionChange && doDirectionScroll) {\r\n      const rtl = hasDirectionCache\r\n        ? (sizeChangedContext as CacheValues<boolean>)[0]\r\n        : getElmDirectionIsRTL(sizeObserver);\r\n      scrollLeft(\r\n        sizeObserver,\r\n        rtl\r\n          ? rtlScrollBehavior.n\r\n            ? -scrollAmount\r\n            : rtlScrollBehavior.i\r\n            ? 0\r\n            : scrollAmount\r\n          : scrollAmount\r\n      );\r\n      scrollTop(sizeObserver, scrollAmount);\r\n    }\r\n\r\n    if (!skip) {\r\n      onSizeChangedCallback({\r\n        _sizeChanged: !hasDirectionCache,\r\n        _directionIsRTLCache: hasDirectionCache\r\n          ? (sizeChangedContext as CacheValues<boolean>)\r\n          : undefined,\r\n        _appear: !!appear,\r\n      });\r\n    }\r\n  };\r\n  const offListeners: (() => void)[] = [];\r\n  let appearCallback: ((...args: any) => any) | false = observeAppearChange\r\n    ? onSizeChangedCallbackProxy\r\n    : false;\r\n  let directionIsRTLCache: Cache<boolean> | undefined;\r\n\r\n  if (ResizeObserverConstructor) {\r\n    const resizeObserverInstance = new ResizeObserverConstructor(onSizeChangedCallbackProxy);\r\n    resizeObserverInstance.observe(listenerElement);\r\n    push(offListeners, () => {\r\n      resizeObserverInstance.disconnect();\r\n    });\r\n  } else if (sizeObserverPlugin) {\r\n    const [pluginAppearCallback, pluginOffListeners] = sizeObserverPlugin._(\r\n      listenerElement,\r\n      onSizeChangedCallbackProxy,\r\n      observeAppearChange\r\n    );\r\n    appearCallback = pluginAppearCallback;\r\n    push(offListeners, pluginOffListeners);\r\n  }\r\n\r\n  if (observeDirectionChange) {\r\n    directionIsRTLCache = createCache(\r\n      {\r\n        _initialValue: !getIsDirectionRTL(), // invert current value to trigger initial change\r\n      },\r\n      getIsDirectionRTL\r\n    );\r\n    const [updateDirectionIsRTLCache] = directionIsRTLCache;\r\n\r\n    push(\r\n      offListeners,\r\n      on(sizeObserver, 'scroll', (event: Event) => {\r\n        const directionIsRTLCacheValues = updateDirectionIsRTLCache();\r\n        const [directionIsRTL, directionIsRTLChanged] = directionIsRTLCacheValues;\r\n\r\n        if (directionIsRTLChanged) {\r\n          removeClass(listenerElement, 'ltr rtl');\r\n          if (directionIsRTL) {\r\n            addClass(listenerElement, 'rtl');\r\n          } else {\r\n            addClass(listenerElement, 'ltr');\r\n          }\r\n          onSizeChangedCallbackProxy(directionIsRTLCacheValues);\r\n        }\r\n\r\n        stopPropagation(event);\r\n      })\r\n    );\r\n  }\r\n\r\n  // appearCallback is always needed on scroll-observer strategy to reset it\r\n  if (appearCallback) {\r\n    addClass(sizeObserver, classNameSizeObserverAppear);\r\n    push(\r\n      offListeners,\r\n      on(sizeObserver, 'animationstart', appearCallback, {\r\n        // Fire only once for \"CSS is ready\" event if ResizeObserver strategy is used\r\n        _once: !!ResizeObserverConstructor,\r\n      })\r\n    );\r\n  }\r\n\r\n  prependChildren(target, sizeObserver);\r\n\r\n  return () => {\r\n    runEachAndClear(offListeners);\r\n    removeElements(sizeObserver);\r\n  };\r\n};\r\n","import {\r\n  WH,\r\n  CacheValues,\r\n  createDiv,\r\n  offsetSize,\r\n  runEachAndClear,\r\n  prependChildren,\r\n  removeElements,\r\n  createCache,\r\n  push,\r\n  IntersectionObserverConstructor,\r\n} from 'support';\r\nimport { createSizeObserver } from 'observers/sizeObserver';\r\nimport { classNameTrinsicObserver } from 'classnames';\r\n\r\nexport type TrinsicObserverCallback = (heightIntrinsic: CacheValues<boolean>) => any;\r\nexport type TrinsicObserver = [\r\n  destroy: () => void,\r\n  update: () => void | Parameters<TrinsicObserverCallback>\r\n];\r\n\r\nconst isHeightIntrinsic = (ioEntryOrSize: IntersectionObserverEntry | WH<number>): boolean =>\r\n  (ioEntryOrSize as WH<number>).h === 0 ||\r\n  (ioEntryOrSize as IntersectionObserverEntry).isIntersecting ||\r\n  (ioEntryOrSize as IntersectionObserverEntry).intersectionRatio > 0;\r\n\r\n/**\r\n * Creates a trinsic observer which observes changes to intrinsic or extrinsic sizing for the height of the target element.\r\n * @param target The element which shall be observed.\r\n * @param onTrinsicChangedCallback The callback which gets called after a change was detected.\r\n * @returns A object which represents the instance of the trinsic observer.\r\n */\r\nexport const createTrinsicObserver = (\r\n  target: HTMLElement,\r\n  onTrinsicChangedCallback: TrinsicObserverCallback\r\n): TrinsicObserver => {\r\n  let intersectionObserverInstance: undefined | IntersectionObserver;\r\n  const trinsicObserver = createDiv(classNameTrinsicObserver);\r\n  const offListeners: (() => void)[] = [];\r\n  const [updateHeightIntrinsicCache] = createCache({\r\n    _initialValue: false,\r\n  });\r\n  const triggerOnTrinsicChangedCallback = (\r\n    updateValue?: IntersectionObserverEntry | WH<number>,\r\n    fromRecords?: true\r\n  ): void | Parameters<TrinsicObserverCallback> => {\r\n    if (updateValue) {\r\n      const heightIntrinsic = updateHeightIntrinsicCache(isHeightIntrinsic(updateValue));\r\n      const [, heightIntrinsicChanged] = heightIntrinsic;\r\n\r\n      if (heightIntrinsicChanged) {\r\n        !fromRecords && onTrinsicChangedCallback(heightIntrinsic);\r\n        return [heightIntrinsic];\r\n      }\r\n    }\r\n  };\r\n  const intersectionObserverCallback = (\r\n    entries: IntersectionObserverEntry[],\r\n    fromRecords?: true\r\n  ) => {\r\n    if (entries && entries.length > 0) {\r\n      return triggerOnTrinsicChangedCallback(entries.pop(), fromRecords);\r\n    }\r\n  };\r\n\r\n  if (IntersectionObserverConstructor) {\r\n    intersectionObserverInstance = new IntersectionObserverConstructor(\r\n      (entries) => intersectionObserverCallback(entries),\r\n      { root: target }\r\n    );\r\n    intersectionObserverInstance.observe(trinsicObserver);\r\n    push(offListeners, () => {\r\n      intersectionObserverInstance!.disconnect();\r\n    });\r\n  } else {\r\n    const onSizeChanged = () => {\r\n      const newSize = offsetSize(trinsicObserver);\r\n      triggerOnTrinsicChangedCallback(newSize);\r\n    };\r\n    push(offListeners, createSizeObserver(trinsicObserver, onSizeChanged));\r\n    onSizeChanged();\r\n  }\r\n\r\n  prependChildren(target, trinsicObserver);\r\n\r\n  return [\r\n    () => {\r\n      runEachAndClear(offListeners);\r\n      removeElements(trinsicObserver);\r\n    },\r\n    () => {\r\n      if (intersectionObserverInstance) {\r\n        return intersectionObserverCallback(intersectionObserverInstance.takeRecords(), true);\r\n      }\r\n    },\r\n  ];\r\n};\r\n","import {\r\n  each,\r\n  noop,\r\n  debounce,\r\n  indexOf,\r\n  isString,\r\n  MutationObserverConstructor,\r\n  isEmptyArray,\r\n  on,\r\n  attr,\r\n  is,\r\n  find,\r\n  push,\r\n} from 'support';\r\n\r\ntype DOMContentObserverCallback = (contentChangedTroughEvent: boolean) => any;\r\n\r\ntype DOMTargetObserverCallback = (targetChangedAttrs: string[], targetStyleChanged: boolean) => any;\r\n\r\ninterface DOMObserverOptionsBase {\r\n  _attributes?: string[];\r\n  _styleChangingAttributes?: string[];\r\n  /**\r\n   * A function which can ignore a changed attribute if it returns true.\r\n   * for DOMTargetObserver this applies to the changes to the observed target\r\n   * for DOMContentObserver this applies to changes to nested targets -> nested targets are elements which match the \"_nestedTargetSelector\" selector\r\n   */\r\n  _ignoreTargetChange?: DOMObserverIgnoreTargetChange;\r\n}\r\n\r\ninterface DOMContentObserverOptions extends DOMObserverOptionsBase {\r\n  _eventContentChange?: DOMObserverEventContentChange; // [selector, eventname(s) | function returning eventname(s)] -> eventnames divided by whitespaces\r\n  _nestedTargetSelector?: string;\r\n  _ignoreContentChange?: DOMObserverIgnoreContentChange; // function which will prevent marking certain dom changes as content change if it returns true\r\n}\r\n\r\ntype DOMTargetObserverOptions = DOMObserverOptionsBase;\r\n\r\ntype ContentChangeArrayItem = [selector?: string, eventNames?: string] | null | undefined;\r\n\r\nexport type DOMObserverEventContentChange =\r\n  | Array<ContentChangeArrayItem>\r\n  | false\r\n  | null\r\n  | undefined;\r\n\r\nexport type DOMObserverIgnoreContentChange = (\r\n  mutation: MutationRecord,\r\n  isNestedTarget: boolean,\r\n  domObserverTarget: HTMLElement,\r\n  domObserverOptions?: DOMContentObserverOptions\r\n) => boolean;\r\n\r\nexport type DOMObserverIgnoreTargetChange = (\r\n  target: Node,\r\n  attributeName: string,\r\n  oldAttributeValue: string | null,\r\n  newAttributeValue: string | null\r\n) => boolean;\r\n\r\nexport type DOMObserverCallback<ContentObserver extends boolean> = ContentObserver extends true\r\n  ? DOMContentObserverCallback\r\n  : DOMTargetObserverCallback;\r\n\r\nexport type DOMObserverOptions<ContentObserver extends boolean> = ContentObserver extends true\r\n  ? DOMContentObserverOptions\r\n  : DOMTargetObserverOptions;\r\n\r\nexport type DOMObserver<ContentObserver extends boolean> = [\r\n  destroy: () => void,\r\n  update: () => void | false | Parameters<DOMObserverCallback<ContentObserver>>\r\n];\r\n\r\ntype EventContentChangeUpdateElement = (getElements?: (selector: string) => Node[]) => void;\r\ntype EventContentChange = [destroy: () => void, updateElements: EventContentChangeUpdateElement];\r\n\r\n/**\r\n * Creates a set of helper functions to observe events of elements inside the target element.\r\n * @param target The target element of which the children elements shall be observed. (not only direct children but also nested ones)\r\n * @param eventContentChange The event content change array. (array of tuples: selector and eventname(s))\r\n * @param callback Callback which is called if one of the elements emits the corresponding event.\r\n * @returns A object which contains a set of helper functions to destroy and update the observation of elements.\r\n */\r\nconst createEventContentChange = (\r\n  target: Element,\r\n  callback: (...args: any) => any,\r\n  eventContentChange?: DOMObserverEventContentChange\r\n): EventContentChange => {\r\n  let map: WeakMap<Node, [string, () => any]> | undefined; // weak map to prevent memory leak for detached elements\r\n  let destroyed = false;\r\n  const destroy = () => {\r\n    destroyed = true;\r\n  };\r\n  const updateElements: EventContentChangeUpdateElement = (getElements?) => {\r\n    if (eventContentChange) {\r\n      const eventElmList = eventContentChange.reduce<Array<[Node[], string]>>((arr, item) => {\r\n        if (item) {\r\n          const selector = item[0];\r\n          const eventNames = item[1];\r\n          const elements =\r\n            eventNames &&\r\n            selector &&\r\n            (getElements ? getElements(selector) : find(selector, target));\r\n\r\n          if (elements && elements.length && eventNames && isString(eventNames)) {\r\n            push(arr, [elements, eventNames.trim()], true);\r\n          }\r\n        }\r\n        return arr;\r\n      }, []);\r\n\r\n      each(eventElmList, (item) =>\r\n        each(item[0], (elm) => {\r\n          const eventNames = item[1];\r\n          const entry = map!.get(elm);\r\n\r\n          if (entry) {\r\n            const entryEventNames = entry[0];\r\n            const entryOff = entry[1];\r\n\r\n            // in case an already registered element is registered again, unregister the previous events\r\n            if (entryEventNames === eventNames) {\r\n              entryOff();\r\n            }\r\n          }\r\n\r\n          const off = on(elm, eventNames, (event: Event) => {\r\n            if (destroyed) {\r\n              off();\r\n              map!.delete(elm);\r\n            } else {\r\n              callback(event);\r\n            }\r\n          });\r\n          map!.set(elm, [eventNames, off]);\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  if (eventContentChange) {\r\n    map = new WeakMap();\r\n    updateElements();\r\n  }\r\n\r\n  return [destroy, updateElements];\r\n};\r\n\r\n/**\r\n * Creates a DOM observer which observes DOM changes to either the target element or its children.\r\n * @param target The element which shall be observed.\r\n * @param isContentObserver Whether this observer is just observing the target or just the targets children. (not only direct children but also nested ones)\r\n * @param callback The callback which gets called if a change was detected.\r\n * @param options The options for DOM change detection.\r\n * @returns A object which represents the instance of the DOM observer.\r\n */\r\nexport const createDOMObserver = <ContentObserver extends boolean>(\r\n  target: HTMLElement,\r\n  isContentObserver: ContentObserver,\r\n  callback: DOMObserverCallback<ContentObserver>,\r\n  options?: DOMObserverOptions<ContentObserver>\r\n): DOMObserver<ContentObserver> => {\r\n  let isConnected = false;\r\n  const {\r\n    _attributes,\r\n    _styleChangingAttributes,\r\n    _eventContentChange,\r\n    _nestedTargetSelector,\r\n    _ignoreTargetChange,\r\n    _ignoreContentChange,\r\n  } = (options as DOMContentObserverOptions & DOMTargetObserverOptions) || {};\r\n  const debouncedEventContentChange = debounce(\r\n    () => {\r\n      if (isConnected) {\r\n        (callback as DOMContentObserverCallback)(true);\r\n      }\r\n    },\r\n    { _timeout: 33, _maxDelay: 99 }\r\n  );\r\n  const [destroyEventContentChange, updateEventContentChangeElements] = createEventContentChange(\r\n    target,\r\n    debouncedEventContentChange,\r\n    _eventContentChange\r\n  );\r\n\r\n  // MutationObserver\r\n  const finalAttributes = _attributes || [];\r\n  const finalStyleChangingAttributes = _styleChangingAttributes || [];\r\n  const observedAttributes = finalAttributes.concat(finalStyleChangingAttributes);\r\n  const observerCallback = (\r\n    mutations: MutationRecord[],\r\n    fromRecords?: true\r\n  ): void | Parameters<DOMObserverCallback<ContentObserver>> => {\r\n    const ignoreTargetChange = _ignoreTargetChange || noop;\r\n    const ignoreContentChange = _ignoreContentChange || noop;\r\n    const targetChangedAttrs: string[] = [];\r\n    const totalAddedNodes: Node[] = [];\r\n    let targetStyleChanged = false;\r\n    let contentChanged = false;\r\n    let childListChanged = false;\r\n    each(mutations, (mutation) => {\r\n      const { attributeName, target: mutationTarget, type, oldValue, addedNodes } = mutation;\r\n      const isAttributesType = type === 'attributes';\r\n      const isChildListType = type === 'childList';\r\n      const targetIsMutationTarget = target === mutationTarget;\r\n      const attributeValue =\r\n        isAttributesType && isString(attributeName)\r\n          ? attr(mutationTarget as HTMLElement, attributeName!)\r\n          : 0;\r\n      const attributeChanged = attributeValue !== 0 && oldValue !== attributeValue;\r\n      const styleChangingAttrChanged =\r\n        indexOf(finalStyleChangingAttributes, attributeName) > -1 && attributeChanged;\r\n\r\n      // if is content observer and something changed in children\r\n      if (isContentObserver && !targetIsMutationTarget) {\r\n        const notOnlyAttrChanged = !isAttributesType;\r\n        const contentAttrChanged = isAttributesType && styleChangingAttrChanged;\r\n        const isNestedTarget =\r\n          contentAttrChanged && _nestedTargetSelector && is(mutationTarget, _nestedTargetSelector);\r\n        const baseAssertion = isNestedTarget\r\n          ? !ignoreTargetChange(mutationTarget, attributeName!, oldValue, attributeValue)\r\n          : notOnlyAttrChanged || contentAttrChanged;\r\n        const contentFinalChanged =\r\n          baseAssertion && !ignoreContentChange(mutation, !!isNestedTarget, target, options);\r\n\r\n        push(totalAddedNodes, addedNodes);\r\n\r\n        contentChanged = contentChanged || contentFinalChanged;\r\n        childListChanged = childListChanged || isChildListType;\r\n      }\r\n      // if is target observer and target attr changed\r\n      if (\r\n        !isContentObserver &&\r\n        targetIsMutationTarget &&\r\n        attributeChanged &&\r\n        !ignoreTargetChange(mutationTarget, attributeName!, oldValue, attributeValue)\r\n      ) {\r\n        push(targetChangedAttrs, attributeName!);\r\n        targetStyleChanged = targetStyleChanged || styleChangingAttrChanged;\r\n      }\r\n    });\r\n\r\n    if (childListChanged && !isEmptyArray(totalAddedNodes)) {\r\n      // adds / removes the new elements from the event content change\r\n      updateEventContentChangeElements((selector) =>\r\n        totalAddedNodes.reduce<Node[]>((arr, node) => {\r\n          push(arr, find(selector, node));\r\n          return is(node, selector) ? push(arr, node) : arr;\r\n        }, [])\r\n      );\r\n    }\r\n\r\n    if (isContentObserver) {\r\n      !fromRecords && contentChanged && (callback as DOMContentObserverCallback)(false);\r\n      return [false] as Parameters<DOMObserverCallback<ContentObserver>>;\r\n    }\r\n    if (!isEmptyArray(targetChangedAttrs) || targetStyleChanged) {\r\n      !fromRecords &&\r\n        (callback as DOMTargetObserverCallback)(targetChangedAttrs, targetStyleChanged);\r\n      return [targetChangedAttrs, targetStyleChanged] as Parameters<\r\n        DOMObserverCallback<ContentObserver>\r\n      >;\r\n    }\r\n  };\r\n  const mutationObserver: MutationObserver = new MutationObserverConstructor!((mutations) =>\r\n    observerCallback(mutations)\r\n  );\r\n\r\n  // Connect\r\n  mutationObserver.observe(target, {\r\n    attributes: true,\r\n    attributeOldValue: true,\r\n    attributeFilter: observedAttributes,\r\n    subtree: isContentObserver,\r\n    childList: isContentObserver,\r\n    characterData: isContentObserver,\r\n  });\r\n  isConnected = true;\r\n\r\n  return [\r\n    () => {\r\n      if (isConnected) {\r\n        destroyEventContentChange();\r\n        mutationObserver.disconnect();\r\n        isConnected = false;\r\n      }\r\n    },\r\n    () => {\r\n      if (isConnected) {\r\n        debouncedEventContentChange._flush();\r\n\r\n        const records = mutationObserver.takeRecords();\r\n        return !isEmptyArray(records) && observerCallback(records, true);\r\n      }\r\n    },\r\n  ];\r\n};\r\n","import {\r\n  debounce,\r\n  isArray,\r\n  isNumber,\r\n  each,\r\n  indexOf,\r\n  isString,\r\n  attr,\r\n  removeAttr,\r\n  CacheValues,\r\n  keys,\r\n  liesBetween,\r\n  scrollSize,\r\n  equalWH,\r\n  createCache,\r\n  WH,\r\n  fractionalSize,\r\n  isFunction,\r\n  ResizeObserverConstructor,\r\n  closest,\r\n  assignDeep,\r\n  push,\r\n} from 'support';\r\nimport { getEnvironment } from 'environment';\r\nimport {\r\n  dataAttributeHost,\r\n  dataValueHostOverflowVisible,\r\n  classNameViewport,\r\n  classNameOverflowVisible,\r\n  classNameScrollbar,\r\n} from 'classnames';\r\nimport { createSizeObserver, SizeObserverCallbackParams } from 'observers/sizeObserver';\r\nimport { createTrinsicObserver } from 'observers/trinsicObserver';\r\nimport { createDOMObserver, DOMObserver } from 'observers/domObserver';\r\nimport type { SetupState, SetupUpdateCheckOption } from 'setups';\r\nimport type { StructureSetupState } from 'setups/structureSetup';\r\nimport type { StructureSetupElementsObj } from 'setups/structureSetup/structureSetup.elements';\r\nimport type {\r\n  StructureSetupUpdate,\r\n  StructureSetupUpdateHints,\r\n} from 'setups/structureSetup/structureSetup.update';\r\n\r\nexport type StructureSetupObserversUpdate = (checkOption: SetupUpdateCheckOption) => void;\r\n\r\nexport type StructureSetupObservers = [\r\n  destroy: () => void,\r\n  updateObservers: () => Partial<StructureSetupUpdateHints>,\r\n  updateObserversOptions: StructureSetupObserversUpdate\r\n];\r\n\r\ntype ExcludeFromTuple<T extends readonly any[], E> = T extends [infer F, ...infer R]\r\n  ? [F] extends [E]\r\n    ? ExcludeFromTuple<R, E>\r\n    : [F, ...ExcludeFromTuple<R, E>]\r\n  : [];\r\n\r\nconst hostSelector = `[${dataAttributeHost}]`;\r\n\r\n// TODO: observer textarea attrs if textarea\r\n\r\nconst viewportSelector = `.${classNameViewport}`;\r\nconst viewportAttrsFromTarget = ['tabindex'];\r\nconst baseStyleChangingAttrsTextarea = ['wrap', 'cols', 'rows'];\r\nconst baseStyleChangingAttrs = ['id', 'class', 'style', 'open'];\r\n\r\nexport const createStructureSetupObservers = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  state: SetupState<StructureSetupState>,\r\n  structureSetupUpdate: (\r\n    ...args: ExcludeFromTuple<Parameters<StructureSetupUpdate>, Parameters<StructureSetupUpdate>[0]>\r\n  ) => any\r\n): StructureSetupObservers => {\r\n  let debounceTimeout: number | false | undefined;\r\n  let debounceMaxDelay: number | false | undefined;\r\n  let contentMutationObserver: DOMObserver<true> | undefined;\r\n  const [, setState] = state;\r\n  const {\r\n    _host,\r\n    _viewport,\r\n    _content,\r\n    _isTextarea,\r\n    _viewportIsTarget,\r\n    _viewportHasClass,\r\n    _viewportAddRemoveClass,\r\n  } = structureSetupElements;\r\n  const { _nativeScrollbarsHiding: _nativeScrollbarStyling, _flexboxGlue } = getEnvironment();\r\n\r\n  const [updateContentSizeCache] = createCache<WH<number>>(\r\n    {\r\n      _equal: equalWH,\r\n      _initialValue: { w: 0, h: 0 },\r\n    },\r\n    () => {\r\n      const has = _viewportHasClass(classNameOverflowVisible, dataValueHostOverflowVisible);\r\n      has && _viewportAddRemoveClass(classNameOverflowVisible, dataValueHostOverflowVisible);\r\n\r\n      const contentScroll = scrollSize(_content);\r\n      const viewportScroll = scrollSize(_viewport);\r\n      const fractional = fractionalSize(_viewport);\r\n\r\n      has && _viewportAddRemoveClass(classNameOverflowVisible, dataValueHostOverflowVisible, true);\r\n      return {\r\n        w: viewportScroll.w + contentScroll.w + fractional.w,\r\n        h: viewportScroll.h + contentScroll.h + fractional.h,\r\n      };\r\n    }\r\n  );\r\n  const contentMutationObserverAttr = _isTextarea\r\n    ? baseStyleChangingAttrsTextarea\r\n    : baseStyleChangingAttrs.concat(baseStyleChangingAttrsTextarea);\r\n  const structureSetupUpdateWithDebouncedAdaptiveUpdateHints = debounce(structureSetupUpdate, {\r\n    _timeout: () => debounceTimeout,\r\n    _maxDelay: () => debounceMaxDelay,\r\n    _mergeParams(prev, curr) {\r\n      const [prevObj] = prev;\r\n      const [currObj] = curr;\r\n      return [\r\n        keys(prevObj)\r\n          .concat(keys(currObj))\r\n          .reduce((obj, key) => {\r\n            obj[key] = prevObj[key] || currObj[key];\r\n            return obj;\r\n          }, {}),\r\n      ] as [Partial<StructureSetupUpdateHints>];\r\n    },\r\n  });\r\n\r\n  const updateViewportAttrsFromHost = (attributes?: string[]) => {\r\n    each(attributes || viewportAttrsFromTarget, (attribute) => {\r\n      if (indexOf(viewportAttrsFromTarget, attribute) > -1) {\r\n        const hostAttr = attr(_host, attribute);\r\n        if (isString(hostAttr)) {\r\n          attr(_viewport, attribute, hostAttr);\r\n        } else {\r\n          removeAttr(_viewport, attribute);\r\n        }\r\n      }\r\n    });\r\n  };\r\n  const onTrinsicChanged = (heightIntrinsicCache: CacheValues<boolean>, fromRecords?: true) => {\r\n    const [heightIntrinsic, heightIntrinsicChanged] = heightIntrinsicCache;\r\n    const updateHints: Partial<StructureSetupUpdateHints> = {\r\n      _heightIntrinsicChanged: heightIntrinsicChanged,\r\n    };\r\n    setState({ _heightIntrinsic: heightIntrinsic });\r\n    !fromRecords && structureSetupUpdate(updateHints);\r\n    return updateHints;\r\n  };\r\n  const onSizeChanged = ({\r\n    _sizeChanged,\r\n    _directionIsRTLCache,\r\n    _appear,\r\n  }: SizeObserverCallbackParams) => {\r\n    const updateFn =\r\n      !_sizeChanged || _appear\r\n        ? structureSetupUpdate\r\n        : structureSetupUpdateWithDebouncedAdaptiveUpdateHints;\r\n\r\n    let directionChanged = false;\r\n    if (_directionIsRTLCache) {\r\n      const [directionIsRTL, directionIsRTLChanged] = _directionIsRTLCache;\r\n      directionChanged = directionIsRTLChanged;\r\n      setState({ _directionIsRTL: directionIsRTL });\r\n    }\r\n\r\n    updateFn({ _sizeChanged, _directionChanged: directionChanged });\r\n  };\r\n  const onContentMutation = (contentChangedTroughEvent: boolean, fromRecords?: true) => {\r\n    const [, contentSizeChanged] = updateContentSizeCache();\r\n    const updateHints: Partial<StructureSetupUpdateHints> = {\r\n      _contentMutation: contentSizeChanged,\r\n    };\r\n    // if contentChangedTroughEvent is true its already debounced\r\n    const updateFn = contentChangedTroughEvent\r\n      ? structureSetupUpdate\r\n      : structureSetupUpdateWithDebouncedAdaptiveUpdateHints;\r\n\r\n    if (contentSizeChanged) {\r\n      !fromRecords && updateFn(updateHints);\r\n    }\r\n    return updateHints;\r\n  };\r\n  const onHostMutation = (\r\n    targetChangedAttrs: string[],\r\n    targetStyleChanged: boolean,\r\n    fromRecords?: true\r\n  ) => {\r\n    const updateHints: Partial<StructureSetupUpdateHints> = { _hostMutation: targetStyleChanged };\r\n    if (targetStyleChanged) {\r\n      !fromRecords && structureSetupUpdateWithDebouncedAdaptiveUpdateHints(updateHints);\r\n    } else if (!_viewportIsTarget) {\r\n      updateViewportAttrsFromHost(targetChangedAttrs);\r\n    }\r\n    return updateHints;\r\n  };\r\n\r\n  const trinsicObserver =\r\n    (_content || !_flexboxGlue) && createTrinsicObserver(_host, onTrinsicChanged);\r\n  const destroySizeObserver =\r\n    !_viewportIsTarget &&\r\n    createSizeObserver(_host, onSizeChanged, {\r\n      _appear: true,\r\n      _direction: !_nativeScrollbarStyling,\r\n    });\r\n  const [destroyHostMutationObserver, updateHostMutationObserver] = createDOMObserver(\r\n    _host,\r\n    false,\r\n    onHostMutation,\r\n    {\r\n      _styleChangingAttributes: baseStyleChangingAttrs,\r\n      _attributes: baseStyleChangingAttrs.concat(viewportAttrsFromTarget),\r\n    }\r\n  );\r\n\r\n  const viewportIsTargetResizeObserver =\r\n    _viewportIsTarget &&\r\n    new ResizeObserverConstructor!(onSizeChanged.bind(0, { _sizeChanged: true }));\r\n\r\n  viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.observe(_host);\r\n  updateViewportAttrsFromHost();\r\n\r\n  return [\r\n    () => {\r\n      contentMutationObserver && contentMutationObserver[0](); // destroy\r\n      trinsicObserver && trinsicObserver[0](); // destroy\r\n      destroySizeObserver && destroySizeObserver();\r\n      viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.disconnect();\r\n      destroyHostMutationObserver();\r\n    },\r\n    () => {\r\n      const updateHints: Partial<StructureSetupUpdateHints> = {};\r\n      const hostUpdateResult = updateHostMutationObserver();\r\n      const contentUpdateResult = contentMutationObserver && contentMutationObserver[1](); // update\r\n      const trinsicUpdateResult = trinsicObserver && trinsicObserver[1](); // update\r\n\r\n      if (hostUpdateResult) {\r\n        assignDeep(\r\n          updateHints,\r\n          onHostMutation.apply(\r\n            0,\r\n            push(hostUpdateResult, true) as [\r\n              ...updateResult: typeof hostUpdateResult,\r\n              fromRecords: true\r\n            ]\r\n          )\r\n        );\r\n      }\r\n      if (contentUpdateResult) {\r\n        assignDeep(\r\n          updateHints,\r\n          onContentMutation.apply(\r\n            0,\r\n            push(contentUpdateResult, true) as [\r\n              ...updateResult: typeof contentUpdateResult,\r\n              fromRecords: true\r\n            ]\r\n          )\r\n        );\r\n      }\r\n      if (trinsicUpdateResult) {\r\n        assignDeep(\r\n          updateHints,\r\n          onTrinsicChanged.apply(\r\n            0,\r\n            push(trinsicUpdateResult as any[], true) as [\r\n              ...updateResult: typeof trinsicUpdateResult,\r\n              fromRecords: true\r\n            ]\r\n          )\r\n        );\r\n      }\r\n\r\n      return updateHints;\r\n    },\r\n    (checkOption) => {\r\n      const [ignoreMutation] = checkOption<string[] | null>('updating.ignoreMutation');\r\n      const [attributes, attributesChanged] = checkOption<string[] | null>('updating.attributes');\r\n      const [elementEvents, elementEventsChanged] = checkOption<Array<[string, string]> | null>(\r\n        'updating.elementEvents'\r\n      );\r\n      const [debounceValue, debounceChanged] = checkOption<Array<number> | number | null>(\r\n        'updating.debounce'\r\n      );\r\n      const updateContentMutationObserver = elementEventsChanged || attributesChanged;\r\n      const ignoreMutationFromOptions = (mutation: MutationRecord) =>\r\n        isFunction(ignoreMutation) && ignoreMutation(mutation);\r\n\r\n      if (updateContentMutationObserver) {\r\n        if (contentMutationObserver) {\r\n          contentMutationObserver[1](); // update\r\n          contentMutationObserver[0](); // destroy\r\n        }\r\n        contentMutationObserver = createDOMObserver(\r\n          _content || _viewport,\r\n          true,\r\n          onContentMutation,\r\n          {\r\n            _styleChangingAttributes: contentMutationObserverAttr.concat(attributes || []),\r\n            _attributes: contentMutationObserverAttr.concat(attributes || []),\r\n            _eventContentChange: elementEvents,\r\n            _nestedTargetSelector: hostSelector,\r\n            _ignoreContentChange: (mutation, isNestedTarget) => {\r\n              const { target, attributeName } = mutation;\r\n              const ignore =\r\n                !isNestedTarget && attributeName\r\n                  ? liesBetween(target, hostSelector, viewportSelector)\r\n                  : false;\r\n              return (\r\n                ignore ||\r\n                !!closest(target, `.${classNameScrollbar}`) || // ignore explicitely all scrollbar elements\r\n                !!ignoreMutationFromOptions(mutation)\r\n              );\r\n            },\r\n          }\r\n        );\r\n      }\r\n\r\n      if (debounceChanged) {\r\n        structureSetupUpdateWithDebouncedAdaptiveUpdateHints._flush();\r\n        if (isArray(debounceValue)) {\r\n          const timeout = debounceValue[0];\r\n          const maxWait = debounceValue[1];\r\n          debounceTimeout = isNumber(timeout) ? timeout : false;\r\n          debounceMaxDelay = isNumber(maxWait) ? maxWait : false;\r\n        } else if (isNumber(debounceValue)) {\r\n          debounceTimeout = debounceValue;\r\n          debounceMaxDelay = false;\r\n        } else {\r\n          debounceTimeout = false;\r\n          debounceMaxDelay = false;\r\n        }\r\n      }\r\n    },\r\n  ];\r\n};\r\n","import { createEventListenerHub, isEmptyObject, keys } from 'support';\r\nimport { createState, createOptionCheck } from 'setups/setups';\r\nimport { createStructureSetupElements } from 'setups/structureSetup/structureSetup.elements';\r\nimport { createStructureSetupUpdate } from 'setups/structureSetup/structureSetup.update';\r\nimport { createStructureSetupObservers } from 'setups/structureSetup/structureSetup.observers';\r\nimport type { StructureSetupUpdateHints } from 'setups/structureSetup/structureSetup.update';\r\nimport type { StructureSetupElementsObj } from 'setups/structureSetup/structureSetup.elements';\r\nimport type { TRBL, XY, EventListener } from 'support';\r\nimport type { Options, ReadonlyOSOptions } from 'options';\r\nimport type { Setup } from 'setups';\r\nimport type { InitializationTarget } from 'initialization';\r\nimport type { PartialOptions, StyleObject, OverflowStyle } from 'typings';\r\n\r\nexport interface StructureSetupState {\r\n  _padding: TRBL;\r\n  _paddingAbsolute: boolean;\r\n  _viewportPaddingStyle: StyleObject;\r\n  _overflowEdge: XY<number>;\r\n  _overflowAmount: XY<number>;\r\n  _overflowStyle: XY<OverflowStyle>;\r\n  _hasOverflow: XY<boolean>;\r\n  _heightIntrinsic: boolean;\r\n  _directionIsRTL: boolean;\r\n}\r\n\r\nexport interface StructureSetupStaticState {\r\n  _elements: StructureSetupElementsObj;\r\n  _appendElements: () => void;\r\n  _addOnUpdatedListener: (listener: EventListener<StructureSetupEventMap, 'u'>) => void;\r\n}\r\n\r\ntype StructureSetupEventMap = {\r\n  u: [\r\n    updateHints: StructureSetupUpdateHints,\r\n    changedOptions: PartialOptions<Options>,\r\n    force: boolean\r\n  ];\r\n};\r\n\r\nconst initialXYNumber = { x: 0, y: 0 };\r\nconst initialStructureSetupUpdateState: StructureSetupState = {\r\n  _padding: {\r\n    t: 0,\r\n    r: 0,\r\n    b: 0,\r\n    l: 0,\r\n  },\r\n  _paddingAbsolute: false,\r\n  _viewportPaddingStyle: {\r\n    marginRight: 0,\r\n    marginBottom: 0,\r\n    marginLeft: 0,\r\n    paddingTop: 0,\r\n    paddingRight: 0,\r\n    paddingBottom: 0,\r\n    paddingLeft: 0,\r\n  },\r\n  _overflowEdge: initialXYNumber,\r\n  _overflowAmount: initialXYNumber,\r\n  _overflowStyle: {\r\n    x: 'hidden',\r\n    y: 'hidden',\r\n  },\r\n  _hasOverflow: {\r\n    x: false,\r\n    y: false,\r\n  },\r\n  _heightIntrinsic: false,\r\n  _directionIsRTL: false,\r\n};\r\n\r\nexport const createStructureSetup = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOSOptions\r\n): Setup<StructureSetupState, StructureSetupStaticState> => {\r\n  const checkOptionsFallback = createOptionCheck(options, {});\r\n  const state = createState(initialStructureSetupUpdateState);\r\n  const [addEvent, removeEvent, triggerEvent] = createEventListenerHub<StructureSetupEventMap>();\r\n  const [getState] = state;\r\n  const [elements, appendElements, destroyElements] = createStructureSetupElements(target);\r\n  const updateStructure = createStructureSetupUpdate(elements, state);\r\n  const triggerUpdateEvent: (...args: StructureSetupEventMap['u']) => void = (\r\n    updateHints,\r\n    changedOptions,\r\n    force\r\n  ) => {\r\n    const truthyUpdateHints = keys(updateHints).some((key) => updateHints[key]);\r\n\r\n    if (truthyUpdateHints || !isEmptyObject(changedOptions) || force) {\r\n      triggerEvent('u', [updateHints, changedOptions, force]);\r\n    }\r\n  };\r\n  const [destroyObservers, updateObservers, updateObserversOptions] = createStructureSetupObservers(\r\n    elements,\r\n    state,\r\n    (updateHints) => {\r\n      triggerUpdateEvent(updateStructure(checkOptionsFallback, updateHints), {}, false);\r\n    }\r\n  );\r\n\r\n  const structureSetupState = getState.bind(0) as (() => StructureSetupState) &\r\n    StructureSetupStaticState;\r\n  structureSetupState._addOnUpdatedListener = (listener) => {\r\n    addEvent('u', listener);\r\n  };\r\n  structureSetupState._appendElements = appendElements;\r\n  structureSetupState._elements = elements;\r\n\r\n  return [\r\n    (changedOptions, force?) => {\r\n      const checkOption = createOptionCheck(options, changedOptions, force);\r\n      updateObserversOptions(checkOption);\r\n      triggerUpdateEvent(\r\n        updateStructure(checkOption, updateObservers(), force),\r\n        changedOptions,\r\n        !!force\r\n      );\r\n    },\r\n    structureSetupState,\r\n    () => {\r\n      removeEvent();\r\n      destroyObservers();\r\n      destroyElements();\r\n    },\r\n  ];\r\n};\r\n","import {\r\n  addClass,\r\n  appendChildren,\r\n  createDiv,\r\n  each,\r\n  isEmptyArray,\r\n  on,\r\n  push,\r\n  removeClass,\r\n  removeElements,\r\n  runEachAndClear,\r\n  setT,\r\n  stopPropagation,\r\n} from 'support';\r\nimport {\r\n  classNameScrollbar,\r\n  classNameScrollbarHorizontal,\r\n  classNameScrollbarVertical,\r\n  classNameScrollbarTrack,\r\n  classNameScrollbarHandle,\r\n  classNamesScrollbarInteraction,\r\n  classNamesScrollbarTransitionless,\r\n} from 'classnames';\r\nimport { getEnvironment } from 'environment';\r\nimport { dynamicInitializationElement as generalDynamicInitializationElement } from 'initialization';\r\nimport type { InitializationTarget } from 'initialization';\r\nimport type { StructureSetupElementsObj } from 'setups/structureSetup/structureSetup.elements';\r\nimport type {\r\n  ScrollbarsInitialization,\r\n  ScrollbarsInitializationStrategy,\r\n  ScrollbarsDynamicInitializationElement,\r\n} from 'setups/scrollbarsSetup/scrollbarsSetup.initialization';\r\n\r\nexport interface ScrollbarStructure {\r\n  _scrollbar: HTMLElement;\r\n  _track: HTMLElement;\r\n  _handle: HTMLElement;\r\n}\r\n\r\nexport interface ScrollbarsSetupElement {\r\n  _scrollbarStructures: ScrollbarStructure[];\r\n  _clone: () => ScrollbarStructure;\r\n  _addRemoveClass: (classNames: string, add?: boolean) => void;\r\n  // _removeClass: (classNames: string) => void;\r\n  /*\r\n  _addEventListener: () => void;\r\n  _removeEventListener: () => void;\r\n  */\r\n}\r\n\r\nexport interface ScrollbarsSetupElementsObj {\r\n  _horizontal: ScrollbarsSetupElement;\r\n  _vertical: ScrollbarsSetupElement;\r\n}\r\n\r\nexport type ScrollbarsSetupElements = [\r\n  elements: ScrollbarsSetupElementsObj,\r\n  appendElements: () => void,\r\n  destroy: () => void\r\n];\r\n\r\nconst interactionStartEventNames = 'touchstart mouseenter';\r\nconst interactionEndEventNames = 'touchend touchcancel mouseleave';\r\nconst stopRootClickPropagation = (scrollbar: HTMLElement, documentElm: Document) =>\r\n  on(\r\n    scrollbar,\r\n    'mousedown',\r\n    on.bind(0, documentElm, 'click', stopPropagation, { _once: true, _capture: true }),\r\n    { _capture: true }\r\n  );\r\n\r\nexport const createScrollbarsSetupElements = (\r\n  target: InitializationTarget,\r\n  structureSetupElements: StructureSetupElementsObj\r\n): ScrollbarsSetupElements => {\r\n  const { _getInitializationStrategy } = getEnvironment();\r\n  const { _scrollbarsSlot: environmentScrollbarSlot } =\r\n    _getInitializationStrategy() as ScrollbarsInitializationStrategy;\r\n  const { _documentElm, _target, _host, _viewport, _targetIsElm } = structureSetupElements;\r\n  const initializationScrollbarSlot =\r\n    !_targetIsElm && (target as ScrollbarsInitialization).scrollbarsSlot;\r\n  const evaluatedScrollbarSlot =\r\n    generalDynamicInitializationElement<ScrollbarsDynamicInitializationElement>(\r\n      [_target, _host, _viewport],\r\n      () => _host,\r\n      environmentScrollbarSlot,\r\n      initializationScrollbarSlot\r\n    );\r\n  const scrollbarsAddRemoveClass = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    classNames: string,\r\n    add?: boolean\r\n  ) => {\r\n    const action = add ? addClass : removeClass;\r\n    each(scrollbarStructures, (scrollbarStructure) => {\r\n      action(scrollbarStructure._scrollbar, classNames);\r\n    });\r\n  };\r\n  const destroyFns: (() => void)[] = [];\r\n  const horizontalScrollbars: ScrollbarStructure[] = [];\r\n  const verticalScrollbars: ScrollbarStructure[] = [];\r\n\r\n  const addRemoveClassHorizontal = scrollbarsAddRemoveClass.bind(0, horizontalScrollbars);\r\n  const addRemoveClassVertical = scrollbarsAddRemoveClass.bind(0, verticalScrollbars);\r\n  const generateScrollbarDOM = (horizontal?: boolean): ScrollbarStructure => {\r\n    const scrollbarClassName = horizontal\r\n      ? classNameScrollbarHorizontal\r\n      : classNameScrollbarVertical;\r\n    const arrToPush = horizontal ? horizontalScrollbars : verticalScrollbars;\r\n    const transitionlessClass = isEmptyArray(arrToPush) ? classNamesScrollbarTransitionless : '';\r\n    const scrollbar = createDiv(\r\n      `${classNameScrollbar} ${scrollbarClassName} ${transitionlessClass} os-theme-dark`\r\n    );\r\n    const track = createDiv(classNameScrollbarTrack);\r\n    const handle = createDiv(classNameScrollbarHandle);\r\n    const result = {\r\n      _scrollbar: scrollbar,\r\n      _track: track,\r\n      _handle: handle,\r\n    };\r\n\r\n    appendChildren(scrollbar, track);\r\n    appendChildren(track, handle);\r\n\r\n    push(arrToPush, result);\r\n    push(destroyFns, [\r\n      removeElements.bind(0, scrollbar),\r\n      on(scrollbar, interactionStartEventNames, () => {\r\n        addRemoveClassHorizontal(classNamesScrollbarInteraction, true);\r\n        addRemoveClassVertical(classNamesScrollbarInteraction, true);\r\n      }),\r\n      on(scrollbar, interactionEndEventNames, () => {\r\n        addRemoveClassHorizontal(classNamesScrollbarInteraction);\r\n        addRemoveClassVertical(classNamesScrollbarInteraction);\r\n      }),\r\n      stopRootClickPropagation(scrollbar, _documentElm),\r\n    ]);\r\n\r\n    return result;\r\n  };\r\n  const generateHorizontalScrollbarStructure = generateScrollbarDOM.bind(0, true);\r\n  const generateVerticalScrollbarStructure = generateScrollbarDOM.bind(0, false);\r\n  const appendElements = () => {\r\n    appendChildren(evaluatedScrollbarSlot, horizontalScrollbars[0]._scrollbar);\r\n    appendChildren(evaluatedScrollbarSlot, verticalScrollbars[0]._scrollbar);\r\n\r\n    setT(() => {\r\n      addRemoveClassHorizontal(classNamesScrollbarTransitionless);\r\n      addRemoveClassVertical(classNamesScrollbarTransitionless);\r\n    }, 300);\r\n  };\r\n\r\n  generateHorizontalScrollbarStructure();\r\n  generateVerticalScrollbarStructure();\r\n\r\n  return [\r\n    {\r\n      _horizontal: {\r\n        _scrollbarStructures: horizontalScrollbars,\r\n        _clone: generateHorizontalScrollbarStructure,\r\n        _addRemoveClass: addRemoveClassHorizontal,\r\n      },\r\n      _vertical: {\r\n        _scrollbarStructures: verticalScrollbars,\r\n        _clone: generateVerticalScrollbarStructure,\r\n        _addRemoveClass: addRemoveClassVertical,\r\n      },\r\n    },\r\n    appendElements,\r\n    runEachAndClear.bind(0, destroyFns),\r\n  ];\r\n};\r\n","import { rAF, cAF, isFunction, on, runEachAndClear, setT, clearT } from 'support';\r\nimport { createState, createOptionCheck } from 'setups/setups';\r\nimport {\r\n  createScrollbarsSetupElements,\r\n  ScrollbarsSetupElementsObj,\r\n} from 'setups/scrollbarsSetup/scrollbarsSetup.elements';\r\nimport {\r\n  classNamesScrollbarVisible,\r\n  classNamesScrollbarCornerless,\r\n  classNamesScrollbarAutoHidden,\r\n} from 'classnames';\r\nimport type { StructureSetupUpdateHints } from 'setups/structureSetup/structureSetup.update';\r\nimport type {\r\n  ReadonlyOSOptions,\r\n  ScrollbarVisibilityBehavior,\r\n  ScrollbarAutoHideBehavior,\r\n} from 'options';\r\nimport type { Setup, StructureSetupState, StructureSetupStaticState } from 'setups';\r\nimport type { InitializationTarget } from 'initialization';\r\nimport type { OverflowStyle } from 'typings';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\r\nexport interface ScrollbarsSetupState {}\r\n\r\nexport interface ScrollbarsSetupStaticState {\r\n  _elements: ScrollbarsSetupElementsObj;\r\n  _appendElements: () => void;\r\n}\r\n\r\nconst createSelfCancelTimeout = (timeout?: number | (() => number)) => {\r\n  let id: number;\r\n  const setTFn = timeout ? setT : rAF!;\r\n  const clearTFn = timeout ? clearT : cAF!;\r\n  return [\r\n    (callback: () => any) => {\r\n      clearTFn(id);\r\n      // @ts-ignore\r\n      id = setTFn(callback, isFunction(timeout) ? timeout() : timeout);\r\n    },\r\n    () => clearTFn(id),\r\n  ] as [timeout: (callback: () => any) => void, clear: () => void];\r\n};\r\n\r\nexport const createScrollbarsSetup = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOSOptions,\r\n  structureSetupState: (() => StructureSetupState) & StructureSetupStaticState\r\n): Setup<ScrollbarsSetupState, ScrollbarsSetupStaticState, [StructureSetupUpdateHints]> => {\r\n  let globalAutoHideDelay = 0;\r\n  let autoHideIsMove: boolean;\r\n  let autoHideIsLeave: boolean;\r\n  let autoHideNotNever: boolean;\r\n  let mouseInHost: boolean;\r\n  const state = createState({});\r\n  const [getState] = state;\r\n  const [requestMouseMoveAnimationFrame, cancelMouseMoveAnimationFrame] = createSelfCancelTimeout();\r\n  const [requestScrollAnimationFrame, cancelScrollAnimationFrame] = createSelfCancelTimeout();\r\n  const [scrollTimeout, clearScrollTimeout] = createSelfCancelTimeout(100);\r\n  const [auotHideMoveTimeout, clearAutoHideTimeout] = createSelfCancelTimeout(100);\r\n  const [auotHideTimeout, clearAutoTimeout] = createSelfCancelTimeout(() => globalAutoHideDelay);\r\n  const [elements, appendElements, destroyElements] = createScrollbarsSetupElements(\r\n    target,\r\n    structureSetupState._elements\r\n  );\r\n  const { _host, _viewport } = structureSetupState._elements;\r\n  const { _horizontal, _vertical } = elements;\r\n  const { _addRemoveClass: addRemoveClassHorizontal } = _horizontal;\r\n  const { _addRemoveClass: addRemoveClassVertical } = _vertical;\r\n  const manageScrollbarsAutoHide = (removeAutoHide: boolean, delayless?: boolean) => {\r\n    clearAutoTimeout();\r\n    if (removeAutoHide) {\r\n      addRemoveClassHorizontal(classNamesScrollbarAutoHidden);\r\n      addRemoveClassVertical(classNamesScrollbarAutoHidden);\r\n    } else {\r\n      const hide = () => {\r\n        addRemoveClassHorizontal(classNamesScrollbarAutoHidden, true);\r\n        addRemoveClassVertical(classNamesScrollbarAutoHidden, true);\r\n      };\r\n      if (globalAutoHideDelay > 0 && !delayless) {\r\n        auotHideTimeout(hide);\r\n      } else {\r\n        hide();\r\n      }\r\n    }\r\n  };\r\n  const onHostMouseEnter = () => {\r\n    mouseInHost = autoHideIsLeave;\r\n    mouseInHost && manageScrollbarsAutoHide(true);\r\n  };\r\n  const destroyFns: (() => void)[] = [\r\n    clearScrollTimeout,\r\n    clearAutoTimeout,\r\n    clearAutoHideTimeout,\r\n    cancelScrollAnimationFrame,\r\n    cancelMouseMoveAnimationFrame,\r\n    destroyElements,\r\n\r\n    on(_host, 'mouseover', onHostMouseEnter, { _once: true }),\r\n    on(_host, 'mouseenter', onHostMouseEnter),\r\n    on(_host, 'mouseleave', () => {\r\n      mouseInHost = false;\r\n      autoHideIsLeave && manageScrollbarsAutoHide(false);\r\n    }),\r\n    on(_host, 'mousemove', () => {\r\n      autoHideIsMove &&\r\n        requestMouseMoveAnimationFrame(() => {\r\n          clearScrollTimeout();\r\n          manageScrollbarsAutoHide(true);\r\n          auotHideMoveTimeout(() => {\r\n            autoHideIsMove && manageScrollbarsAutoHide(false);\r\n          });\r\n        });\r\n    }),\r\n    on(_viewport, 'scroll', () => {\r\n      autoHideNotNever &&\r\n        requestScrollAnimationFrame(() => {\r\n          manageScrollbarsAutoHide(true);\r\n          scrollTimeout(() => {\r\n            autoHideNotNever && !mouseInHost && manageScrollbarsAutoHide(false);\r\n          });\r\n        });\r\n    }),\r\n  ];\r\n  const scrollbarsSetupState = getState.bind(0) as (() => ScrollbarsSetupState) &\r\n    ScrollbarsSetupStaticState;\r\n  scrollbarsSetupState._elements = elements;\r\n  scrollbarsSetupState._appendElements = appendElements;\r\n\r\n  return [\r\n    (changedOptions, force, structureUpdateHints) => {\r\n      const { _overflowEdgeChanged, _overflowAmountChanged, _overflowStyleChanged } =\r\n        structureUpdateHints;\r\n      const checkOption = createOptionCheck(options, changedOptions, force);\r\n\r\n      const [visibility, visibilityChanged] =\r\n        checkOption<ScrollbarVisibilityBehavior>('scrollbars.visibility');\r\n      const [autoHide, autoHideChanged] =\r\n        checkOption<ScrollbarAutoHideBehavior>('scrollbars.autoHide');\r\n      const [autoHideDelay] = checkOption<number>('scrollbars.autoHideDelay');\r\n      const [dragScrolling, dragScrollingChanged] = checkOption<boolean>(\r\n        'scrollbars.dragScrolling'\r\n      );\r\n      const [touchSupport, touchSupportChanged] = checkOption<boolean>('scrollbars.touchSupport');\r\n\r\n      const updateHandleSize = _overflowEdgeChanged || _overflowAmountChanged;\r\n      const updateVisibility = _overflowStyleChanged || visibilityChanged;\r\n\r\n      const setScrollbarVisibility = (\r\n        overflowStyle: OverflowStyle,\r\n        addRemoveClass: (classNames: string, add?: boolean) => void\r\n      ) => {\r\n        const isVisible =\r\n          visibility === 'visible' || (visibility === 'auto' && overflowStyle === 'scroll');\r\n        addRemoveClass(classNamesScrollbarVisible, isVisible);\r\n        return isVisible;\r\n      };\r\n\r\n      globalAutoHideDelay = autoHideDelay;\r\n\r\n      if (updateVisibility) {\r\n        const { _overflowStyle } = structureSetupState();\r\n\r\n        const xVisible = setScrollbarVisibility(_overflowStyle.x, addRemoveClassHorizontal);\r\n        const yVisible = setScrollbarVisibility(_overflowStyle.y, addRemoveClassVertical);\r\n        const hasCorner = xVisible && yVisible;\r\n\r\n        addRemoveClassHorizontal(classNamesScrollbarCornerless, !hasCorner);\r\n        addRemoveClassVertical(classNamesScrollbarCornerless, !hasCorner);\r\n      }\r\n      if (autoHideChanged) {\r\n        autoHideIsMove = autoHide === 'move';\r\n        autoHideIsLeave = autoHide === 'leave';\r\n        autoHideNotNever = autoHide !== 'never';\r\n        manageScrollbarsAutoHide(!autoHideNotNever, true);\r\n      }\r\n    },\r\n    scrollbarsSetupState,\r\n    runEachAndClear.bind(0, destroyFns),\r\n  ];\r\n};\r\n","import { OverlayScrollbars } from 'overlayscrollbars';\r\n\r\nconst targets: Set<Element> = new Set();\r\nconst targetInstanceMap: WeakMap<Element, OverlayScrollbars> = new WeakMap();\r\n\r\n/**\r\n * Adds the given OverlayScrollbars instance to the given element.\r\n * @param target The element which is the target of the OverlayScrollbars instance.\r\n * @param osInstance The OverlayScrollbars instance.\r\n */\r\nexport const addInstance = (target: Element, osInstance: OverlayScrollbars): void => {\r\n  targetInstanceMap.set(target, osInstance);\r\n  targets.add(target);\r\n};\r\n\r\n/**\r\n * Removes a OverlayScrollbars instance from the given element.\r\n * @param target The element from which its OverlayScrollbars instance shall be removed.\r\n */\r\nexport const removeInstance = (target: Element): void => {\r\n  targetInstanceMap.delete(target);\r\n  targets.delete(target);\r\n};\r\n\r\n/**\r\n * Gets the OverlayScrollbars from the given element or undefined if it doesn't have one.\r\n * @param target The element of which its OverlayScrollbars instance shall be get.\r\n */\r\nexport const getInstance = (target: Element): OverlayScrollbars | undefined =>\r\n  targetInstanceMap.get(target);\r\n\r\n/**\r\n * Gets a Map which represents all active OverayScrollbars instances.\r\n * The Key is the element and the value is the instance.\r\n */\r\nexport const allInstances = (): ReadonlyMap<Element, OverlayScrollbars> => {\r\n  const validTargetInstanceMap: Map<Element, OverlayScrollbars> = new Map();\r\n\r\n  targets.forEach((target: Element) => {\r\n    /* istanbul ignore else */\r\n    if (targetInstanceMap.has(target)) {\r\n      validTargetInstanceMap.set(target, targetInstanceMap.get(target)!);\r\n    }\r\n  });\r\n\r\n  targets.clear();\r\n\r\n  validTargetInstanceMap.forEach((instance: OverlayScrollbars, validTarget: Element) => {\r\n    targets.add(validTarget);\r\n  });\r\n\r\n  return validTargetInstanceMap;\r\n};\r\n","import {\r\n  assignDeep,\r\n  isEmptyObject,\r\n  each,\r\n  isFunction,\r\n  keys,\r\n  isHTMLElement,\r\n  XY,\r\n  TRBL,\r\n  createEventListenerHub,\r\n} from 'support';\r\nimport { createStructureSetup, createScrollbarsSetup } from 'setups';\r\nimport { getOptionsDiff, Options, ReadonlyOSOptions } from 'options';\r\nimport { getEnvironment } from 'environment';\r\nimport {\r\n  getPlugins,\r\n  addPlugin,\r\n  optionsValidationPluginName,\r\n  Plugin,\r\n  OptionsValidationPluginInstance,\r\n} from 'plugins';\r\nimport { addInstance, getInstance, removeInstance } from 'instances';\r\nimport type { PartialOptions, OverflowStyle } from 'typings';\r\nimport type {\r\n  InitializationTarget,\r\n  InitializationTargetObject,\r\n  InitializationStrategy,\r\n} from 'initialization';\r\nimport type {\r\n  InitialEventListeners as GeneralInitialEventListeners,\r\n  EventListener as GeneralEventListener,\r\n} from 'support/eventListeners';\r\n\r\nexport interface OverlayScrollbarsStatic {\r\n  (\r\n    target: InitializationTarget | InitializationTargetObject,\r\n    options?: PartialOptions<Options>,\r\n    eventListeners?: GeneralInitialEventListeners<EventListenerMap>\r\n  ): OverlayScrollbars;\r\n\r\n  plugin(plugin: Plugin | Plugin[]): void;\r\n  env(): Environment;\r\n}\r\n\r\nexport interface Environment {\r\n  scrollbarsSize: XY<number>;\r\n  scrollbarsOverlaid: XY<boolean>;\r\n  scrollbarsHiding: boolean;\r\n  rtlScrollBehavior: { n: boolean; i: boolean };\r\n  flexboxGlue: boolean;\r\n  cssCustomProperties: boolean;\r\n  defaultInitializationStrategy: InitializationStrategy;\r\n  defaultDefaultOptions: Options;\r\n\r\n  getInitializationStrategy(): InitializationStrategy;\r\n  setInitializationStrategy(newInitializationStrategy: Partial<InitializationStrategy>): void;\r\n  getDefaultOptions(): Options;\r\n  setDefaultOptions(newDefaultOptions: PartialOptions<Options>): void;\r\n}\r\n\r\nexport interface State {\r\n  padding: TRBL;\r\n  paddingAbsolute: boolean;\r\n  overflowEdge: XY<number>;\r\n  overflowAmount: XY<number>;\r\n  overflowStyle: XY<OverflowStyle>;\r\n  hasOverflow: XY<boolean>;\r\n  destroyed: boolean;\r\n}\r\n\r\nexport interface Elements {\r\n  target: HTMLElement;\r\n  host: HTMLElement;\r\n  padding: HTMLElement;\r\n  viewport: HTMLElement;\r\n  content: HTMLElement;\r\n}\r\n\r\nexport interface OnUpdatedEventListenerArgs {\r\n  updateHints: {\r\n    sizeChanged: boolean;\r\n    directionChanged: boolean;\r\n    heightIntrinsicChanged: boolean;\r\n    overflowEdgeChanged: boolean;\r\n    overflowAmountChanged: boolean;\r\n    overflowStyleChanged: boolean;\r\n    hostMutation: boolean;\r\n    contentMutation: boolean;\r\n  };\r\n  changedOptions: PartialOptions<Options>;\r\n  force: boolean;\r\n}\r\n\r\nexport type EventListenerMap = {\r\n  /**\r\n   * Triggered after all elements are initialized and appended.\r\n   */\r\n  initialized: [instance: OverlayScrollbars];\r\n  /**\r\n   * Triggered after an update.\r\n   */\r\n  updated: [instance: OverlayScrollbars, onUpdatedArgs: OnUpdatedEventListenerArgs];\r\n  /**\r\n   * Triggered after all elements, observers and events are destroyed.\r\n   */\r\n  destroyed: [instance: OverlayScrollbars, withdrawn: boolean];\r\n};\r\n\r\nexport type InitialEventListeners = GeneralInitialEventListeners<EventListenerMap>;\r\n\r\nexport type EventListener<Name extends keyof EventListenerMap> = GeneralEventListener<\r\n  EventListenerMap,\r\n  Name\r\n>;\r\n\r\nexport interface OverlayScrollbars {\r\n  options(): Options;\r\n  options(newOptions?: PartialOptions<Options>): Options;\r\n\r\n  update(force?: boolean): OverlayScrollbars;\r\n\r\n  destroy(): void;\r\n\r\n  state(): State;\r\n\r\n  elements(): Elements;\r\n\r\n  on<Name extends keyof EventListenerMap>(name: Name, listener: EventListener<Name>): () => void;\r\n  on<Name extends keyof EventListenerMap>(name: Name, listener: EventListener<Name>[]): () => void;\r\n\r\n  off<Name extends keyof EventListenerMap>(name: Name, listener: EventListener<Name>): void;\r\n  off<Name extends keyof EventListenerMap>(name: Name, listener: EventListener<Name>[]): void;\r\n}\r\n\r\n/**\r\n * Notes:\r\n * Height intrinsic detection use \"content: true\" init strategy - or open ticket for custom height intrinsic observer\r\n */\r\n\r\nexport const OverlayScrollbars: OverlayScrollbarsStatic = (\r\n  target,\r\n  options?,\r\n  eventListeners?\r\n): OverlayScrollbars => {\r\n  let destroyed = false;\r\n  const {\r\n    _getDefaultOptions,\r\n    _nativeScrollbarsOverlaid: _nativeScrollbarIsOverlaid,\r\n    _addListener: addEnvListener,\r\n  } = getEnvironment();\r\n  const plugins = getPlugins();\r\n  const instanceTarget = isHTMLElement(target) ? target : target.target;\r\n  const potentialInstance = getInstance(instanceTarget);\r\n  if (potentialInstance) {\r\n    return potentialInstance;\r\n  }\r\n\r\n  const optionsValidationPlugin = plugins[\r\n    optionsValidationPluginName\r\n  ] as OptionsValidationPluginInstance;\r\n  const validateOptions = (newOptions?: PartialOptions<Options>) => {\r\n    const opts = newOptions || {};\r\n    const validate = optionsValidationPlugin && optionsValidationPlugin._;\r\n    return validate ? validate(opts, true) : opts;\r\n  };\r\n  const currentOptions: ReadonlyOSOptions = assignDeep(\r\n    {},\r\n    _getDefaultOptions(),\r\n    validateOptions(options)\r\n  );\r\n  const [addEvent, removeEvent, triggerEvent] = createEventListenerHub(eventListeners);\r\n  const [updateStructure, structureState, destroyStructure] = createStructureSetup(\r\n    target,\r\n    currentOptions\r\n  );\r\n  const [updateScrollbars, scrollbarsState, destroyScrollbars] = createScrollbarsSetup(\r\n    target,\r\n    currentOptions,\r\n    structureState\r\n  );\r\n  const update = (changedOptions: PartialOptions<Options>, force?: boolean) => {\r\n    updateStructure(changedOptions, !!force);\r\n  };\r\n  const removeEnvListener = addEnvListener(update.bind(0, {}, true));\r\n  const destroy = (withdrawn?: boolean) => {\r\n    removeInstance(instanceTarget);\r\n    removeEnvListener();\r\n\r\n    destroyScrollbars();\r\n    destroyStructure();\r\n\r\n    destroyed = true;\r\n\r\n    // eslint-disable-next-line no-use-before-define\r\n    triggerEvent('destroyed', [instance, !!withdrawn]);\r\n    removeEvent();\r\n  };\r\n\r\n  const instance: OverlayScrollbars = {\r\n    options(newOptions?: PartialOptions<Options>) {\r\n      if (newOptions) {\r\n        const changedOptions = getOptionsDiff(currentOptions, validateOptions(newOptions));\r\n\r\n        if (!isEmptyObject(changedOptions)) {\r\n          assignDeep(currentOptions, changedOptions);\r\n          update(changedOptions);\r\n        }\r\n      }\r\n      return assignDeep({}, currentOptions);\r\n    },\r\n    on: addEvent,\r\n    off: (name, listener) => {\r\n      name && listener && removeEvent(name, listener as any);\r\n    },\r\n    state() {\r\n      const {\r\n        _overflowEdge,\r\n        _overflowAmount,\r\n        _overflowStyle,\r\n        _hasOverflow,\r\n        _padding,\r\n        _paddingAbsolute,\r\n      } = structureState();\r\n      return assignDeep(\r\n        {},\r\n        {\r\n          overflowEdge: _overflowEdge,\r\n          overflowAmount: _overflowAmount,\r\n          overflowStyle: _overflowStyle,\r\n          hasOverflow: _hasOverflow,\r\n          padding: _padding,\r\n          paddingAbsolute: _paddingAbsolute,\r\n          destroyed,\r\n        }\r\n      );\r\n    },\r\n    elements() {\r\n      const { _target, _host, _padding, _viewport, _content } = structureState._elements;\r\n      return assignDeep(\r\n        {},\r\n        {\r\n          target: _target,\r\n          host: _host,\r\n          padding: _padding || _viewport,\r\n          viewport: _viewport,\r\n          content: _content || _viewport,\r\n        }\r\n      );\r\n    },\r\n    update(force?: boolean) {\r\n      update({}, force);\r\n      return instance;\r\n    },\r\n    destroy: destroy.bind(0),\r\n  };\r\n\r\n  structureState._addOnUpdatedListener((updateHints, changedOptions, force: boolean) => {\r\n    updateScrollbars(changedOptions, force, updateHints);\r\n  });\r\n\r\n  each(keys(plugins), (pluginName) => {\r\n    const pluginInstance = plugins[pluginName];\r\n    if (isFunction(pluginInstance)) {\r\n      pluginInstance(OverlayScrollbars, instance);\r\n    }\r\n  });\r\n\r\n  if (\r\n    _nativeScrollbarIsOverlaid.x &&\r\n    _nativeScrollbarIsOverlaid.y &&\r\n    !currentOptions.nativeScrollbarsOverlaid.initialize\r\n  ) {\r\n    destroy(true);\r\n    return instance;\r\n  }\r\n\r\n  structureState._appendElements();\r\n  scrollbarsState._appendElements();\r\n\r\n  addInstance(instanceTarget, instance);\r\n  triggerEvent('initialized', [instance]);\r\n\r\n  structureState._addOnUpdatedListener((updateHints, changedOptions, force) => {\r\n    const {\r\n      _sizeChanged,\r\n      _directionChanged,\r\n      _heightIntrinsicChanged,\r\n      _overflowEdgeChanged,\r\n      _overflowAmountChanged,\r\n      _overflowStyleChanged,\r\n      _contentMutation,\r\n      _hostMutation,\r\n    } = updateHints;\r\n\r\n    triggerEvent('updated', [\r\n      instance,\r\n      {\r\n        updateHints: {\r\n          sizeChanged: _sizeChanged,\r\n          directionChanged: _directionChanged,\r\n          heightIntrinsicChanged: _heightIntrinsicChanged,\r\n          overflowEdgeChanged: _overflowEdgeChanged,\r\n          overflowAmountChanged: _overflowAmountChanged,\r\n          overflowStyleChanged: _overflowStyleChanged,\r\n          contentMutation: _contentMutation,\r\n          hostMutation: _hostMutation,\r\n        },\r\n        changedOptions,\r\n        force,\r\n      },\r\n    ]);\r\n  });\r\n\r\n  return instance.update(true);\r\n};\r\n\r\nOverlayScrollbars.plugin = addPlugin;\r\nOverlayScrollbars.env = () => {\r\n  const {\r\n    _nativeScrollbarsSize,\r\n    _nativeScrollbarsOverlaid,\r\n    _nativeScrollbarsHiding,\r\n    _rtlScrollBehavior,\r\n    _flexboxGlue,\r\n    _cssCustomProperties,\r\n    _defaultInitializationStrategy,\r\n    _defaultDefaultOptions,\r\n    _getInitializationStrategy,\r\n    _setInitializationStrategy,\r\n    _getDefaultOptions,\r\n    _setDefaultOptions,\r\n  } = getEnvironment();\r\n  return assignDeep(\r\n    {},\r\n    {\r\n      scrollbarsSize: _nativeScrollbarsSize,\r\n      scrollbarsOverlaid: _nativeScrollbarsOverlaid,\r\n      scrollbarsHiding: _nativeScrollbarsHiding,\r\n      rtlScrollBehavior: _rtlScrollBehavior,\r\n      flexboxGlue: _flexboxGlue,\r\n      cssCustomProperties: _cssCustomProperties,\r\n      defaultInitializationStrategy: _defaultInitializationStrategy,\r\n      defaultDefaultOptions: _defaultDefaultOptions,\r\n\r\n      getInitializationStrategy: _getInitializationStrategy,\r\n      setInitializationStrategy: _setInitializationStrategy,\r\n      getDefaultOptions: _getDefaultOptions,\r\n      setDefaultOptions: _setDefaultOptions,\r\n    }\r\n  );\r\n};\r\n"],"names":["each","source","callback","isArrayLike","i","length","Object","keys","key","style","elm","styles","getSingleStyle","isString","getStyles","isArray","getStylesResult","computedStyle","window","getComputedStyle","getCSSVal","reduce","result","setCSSVal","createCache","options","update","_initialValue","_equal","_alwaysUpdateValues","_value","_previous","cacheUpdateContextual","newValue","force","curr","newVal","changed","cacheUpdateIsolated","getCurrentCache","ElementNodeType","Node","ELEMENT_NODE","prototype","toString","hasOwnProperty","isUndefined","obj","undefined","isNull","type","call","replace","toLowerCase","isNumber","isBoolean","isFunction","Array","isObject","lengthCorrectFormat","isPlainObject","cstr","ctor","ctorProto","hasOwnConstructor","hasIsPrototypeOf","isHTMLElement","instanceofObj","HTMLElement","nodeType","isElement","Element","indexOf","arr","item","fromIndex","push","array","items","arrayIsSingleItem","apply","from","original","Set","forEach","value","isEmptyArray","runEachAndClear","args","keep","runFn","fn","prop","assignDeep","target","object1","object2","object3","object4","object5","object6","sources","copy","copyIsArray","src","clone","isEmptyObject","name","getSetProp","topLeft","fallback","attr","attrName","getAttribute","setAttribute","attrClass","add","currValues","currValuesSet","split","join","trim","hasAttrClass","has","removeAttr","removeAttribute","scrollLeft","scrollTop","elmPrototype","find","selector","rootElm","document","querySelectorAll","findFirst","querySelector","is","matches","msMatchesSelector","contents","childNodes","parent","parentElement","closest","closestFn","liesBetween","highBoundarySelector","deepBoundarySelector","closestHighBoundaryElm","closestDeepBoundaryElm","before","parentElm","preferredAnchor","insertedElms","anchor","fragment","createDocumentFragment","insertedElm","previousSibling","appendChild","firstChild","nextSibling","insertBefore","appendChildren","node","children","prependChildren","insertedNodes","insertAfter","removeElements","nodes","e","removeChild","createDiv","classNames","div","createElement","createDOM","html","createdDiv","innerHTML","firstLetterToUpper","str","charAt","toUpperCase","slice","getDummyStyle","cssPrefixes","jsPrefixes","jsCache","cssCache","cssProperty","uppercasedName","elmStyle","prefix","prefixWithoutDashes","resultPossibilities","resultPossibility","jsAPI","MutationObserverConstructor","IntersectionObserverConstructor","ResizeObserverConstructor","cAF","rAF","setT","setTimeout","clearT","clearTimeout","rnothtmlwhite","classListAction","className","action","classList","clazz","classes","match","hasClass","contains","removeClass","remove","addClass","bind","equal","a","b","props","propMutation","compareA","compareB","equalWH","equalXY","equalTRBL","equalBCRWH","round","Math","noop","debounce","functionToDebounce","maxTimeoutId","prevArguments","latestArguments","clear","_timeout","_maxDelay","_mergeParams","invokeFunctionToDebounce","this","mergeParms","flush","debouncedFn","arguments","finalTimeout","hasTimeout","finalMaxWait","hasMaxWait","setTimeoutFn","clearTimeoutFn","mergeParamsResult","invokedArgs","boundInvoke","timeoutId","_flush","cssNumber","opacity","zindex","parseToZeroOrNumber","toFloat","num","parseFloat","parseInt","adaptCSSVal","val","getPropertyValue","setProperty","topRightBottomLeft","propertyPrefix","propertySuffix","finalPrefix","finalSuffix","top","right","bottom","left","t","r","l","zeroObj","w","h","windowSize","innerWidth","innerHeight","offsetSize","offsetWidth","offsetHeight","clientSize","clientWidth","clientHeight","scrollSize","scrollWidth","scrollHeight","fractionalSize","cssHeight","cssWidth","getBoundingClientRect","passiveEventsSupport","supportPassiveEvents","addEventListener","defineProperty","get","splitEventNames","eventNames","off","listener","capture","eventName","removeEventListener","on","_ref","doSupportPassiveEvents","passive","_passive","_capture","once","_once","offListeners","nativeOptions","finalListener","evt","stopPropagation","x","y","absoluteCoordinates","rect","pageYOffset","pageXOffset","manageListener","createEventListenerHub","initialEventListeners","events","Map","removeEvent","eventSet","currListener","addEvent","set","triggerEvent","event","initialListenerKeys","getPropByPath","path","o","createOptionCheck","changedOptions","createState","initialState","state","newState","classNameEnvironment","classNameEnvironmentFlexboxGlue","classNameEnvironmentFlexboxGlueMax","dataAttributeHost","dataAttributeHostOverflowX","dataAttributeHostOverflowY","dataValueHostOverflowVisible","dataValueHostViewportScrollbarStyling","classNamePadding","classNameViewport","classNameViewportArrange","classNameContent","classNameViewportScrollbarStyling","classNameOverflowVisible","classNameSizeObserver","classNameSizeObserverAppear","classNameSizeObserverListener","classNameSizeObserverListenerScroll","classNameSizeObserverListenerItem","classNameSizeObserverListenerItemFinal","classNameTrinsicObserver","classNameScrollbar","classNameScrollbarHorizontal","classNameScrollbarVertical","classNameScrollbarTrack","classNameScrollbarHandle","classNamesScrollbarVisible","classNamesScrollbarCornerless","classNamesScrollbarTransitionless","classNamesScrollbarInteraction","classNamesScrollbarAutoHidden","opsStringify","JSON","stringify","_","Error","defaultOptions","paddingAbsolute","updating","elementEvents","attributes","ignoreMutation","overflow","nativeScrollbarsOverlaid","show","initialize","scrollbars","visibility","autoHide","autoHideDelay","dragScroll","clickScroll","touch","getOptionsDiff","currOptions","newOptions","diff","optionsKeys","concat","optionKey","currOptionValue","newOptionValue","isDiff","pluginRegistry","getPlugins","addPlugin","addedPlugin","plugin","pluginName","_extends","module","assign","exports","__esModule","optionsTemplateTypes","boolean","number","string","object","function","null","validateRecursive","template","doWriteErrors","propPath","validatedOptions","optionsCopy","filter","optionsValue","templateValue","templateIsComplex","propPrefix","validated","_validateRecursive","foreign","isValid","errorEnumStrings","errorPossibleTypes","optionsValueType","templateValueArr","currTemplateType","typeString","isEnumString","enumStringSplit","possibility","console","warn","validateOptions","numberAllowedValues","oTypes","booleanAllowedValues","arrayNullValues","overflowAllowedValues","scrollbarsVisibilityAllowedValues","scrollbarsAutoHideAllowedValues","optionsTemplate","optionsValidationPluginName","optionsValidationPlugin","_validateOptions","_optionsValidationPlu","scrollAmount","scrollEventName","sizeObserverPluginName","sizeObserverPlugin","listenerElement","onSizeChangedCallback","observeAppearChange","observerElementChildren","observerElementChildrenRoot","shrinkElement","lastChild","expandElement","expandElementChild","cacheSize","currSize","isDirty","rAFId","reset","onResized","appear","onScroll","scrollEvent","width","height","_sizeObserverPlugin","contentArrangeCounter","abs","getWindowDPR","dDPI","screen","deviceXDPI","sDPI","logicalXDPI","devicePixelRatio","diffBiggerThanOne","valOne","valTwo","absValOne","absValTwo","scrollbarsHidingPluginName","scrollbarsHidingPlugin","_createUniqueViewportArrangeElement","env","_nativeScrollbarStyling","_nativeScrollbarsHiding","_nativeScrollbarIsOverlaid","_nativeScrollbarsOverlaid","_cssCustomProperties","create","_overflowUpdateSegment","doViewportArrange","flexboxGlue","viewport","viewportArrange","getState","getViewportOverflowState","hideNativeScrollbars","arrangeViewport","viewportOverflowState","viewportScrollSize","sizeFraction","directionIsRTL","_getState","_viewportPaddingStyle","_scrollbarsHideOffset","_scrollbarsHideOffsetArrange","arrangeX","arrangeY","hideOffsetX","hideOffsetY","viewportArrangeHorizontalPaddingKey","viewportArrangeHorizontalPaddingValue","viewportArrangeVerticalPaddingValue","paddingTop","fractionalContentWidth","fractionalContenHeight","arrangeSize","sheet","cssRules","insertRule","ruleStyle","undoViewportArrange","showNativeOverlaidScrollbars","finalViewportOverflowState","_getState2","viewportPaddingStyle","finalPaddingStyle","assignProps","prevStyle","_envWindowZoom","size","dpr","envInstance","updateNativeScrollbarSizeCache","sizeNew","deltaSize","deltaAbsSize","deltaAbsRatio","dprNew","deltaIsBigger","difference","dprChanged","isZoom","_updateNativeScrollba","scrollbarSize","scrollbarSizeChanged","_nativeScrollbarsSize","_scrollbarsHidingPlug","environmentInstance","getNativeScrollbarSize","body","measureElm","measureElmChild","cSize","oSize","fSize","getNativeScrollbarsHiding","testElm","revertClass","ex","getRtlScrollBehavior","childElm","strHidden","overflowX","overflowY","direction","parentOffset","childOffset","childOffsetAfterScroll","n","getFlexboxGlue","revertFbxGlue","minOffsetsizeParent","minOffsetsize","supportsMin","revertFbxGlueMax","maxOffsetsizeParent","maxOffsetsize","supportsMax","createEnvironment","_document","envDOM","envElm","envChildElm","_createEventListenerH","_createCache","getNativeScrollbarSizeCache","_getNativeScrollbarSi","nativeScrollbarsSize","nativeScrollbarsHiding","initializationStrategy","_padding","_content","defaultDefaultOptions","_rtlScrollBehavior","_flexboxGlue","_addListener","_getInitializationStrategy","_setInitializationStrategy","newInitializationStrategy","_getDefaultOptions","_setDefaultOptions","newDefaultOptions","_defaultInitializationStrategy","_defaultDefaultOptions","resizeFn","getEnvironment","resolveInitialization","staticInitializationElement","defaultStaticInitializationElement","staticInitializationElementStrategy","staticInitializationElementValue","dynamicInitializationElement","defaultDynamicInitializationElement","dynamicInitializationElementStrategy","dynamicInitializationElementValue","createNewDiv","unwrap","addDataAttrHost","createStructureSetupElements","createUniqueViewportArrangeElement","_getInitializationStr","hostInitializationStrategy","_host","viewportInitializationStrategy","_viewport","paddingInitializationStrategy","contentInitializationStrategy","targetIsElm","targetStructureInitialization","targetElement","isTextarea","isBody","ownerDocument","bodyElm","wnd","defaultView","singleElmSupport","generalStaticInitializationElement","generalDynamicInitializationElement","viewportElement","potentialViewport","viewportIsTarget","evaluatedTargetObj","_target","host","padding","content","_viewportArrange","_windowElm","_documentElm","_htmlElm","_bodyElm","_isTextarea","_isBody","_targetIsElm","_viewportIsTarget","_viewportHasClass","attributeClassName","_viewportAddRemoveClass","generatedElements","elementIsGenerated","destroyFns","isTextareaHostGenerated","targetContents","contentSlot","appendElements","removeHostDataAttr","removePaddingClass","removeViewportClass","removeContentClass","createTrinsicUpdateSegment","structureSetupElements","updateHints","_getEnvironment","_heightIntrinsic","_heightIntrinsicChanged","heightIntrinsicChanged","_sizeChanged","_contentMutation","createPaddingUpdateSegment","setState","_isSingleElm","updatePaddingCache","currentPaddingCache","checkOption","_currentPaddingCache","paddingChanged","_directionIsRTL","_directionChanged","_checkOption","paddingAbsoluteChanged","contentMutation","_updatePaddingCache","paddingStyleChanged","paddingRelative","paddingHorizontal","paddingVertical","paddingStyle","marginRight","marginBottom","marginLeft","viewportStyle","paddingRight","paddingBottom","paddingLeft","_paddingAbsolute","_paddingStyleChanged","max","max0","strVisible","overlaidScrollbarsHideOffset","whCacheOptions","xyCacheOptions","getOverflowAmount","viewportClientSize","tollerance","amount","conditionalClass","overflowIsVisible","overflowBehavior","createOverflowUpdateSegment","updateSizeFraction","getCurrentSizeFraction","_createCache2","updateViewportScrollSizeCache","getCurrentViewportScrollSizeCache","updateOverflowAmountCache","_createCache3","getCurrentOverflowAmountCache","updateOverflowEdge","_createCache4","getCurrentOverflowEdgeCache","updateOverflowStyleCache","_createCache5","fixFlexboxGlue","heightIntrinsic","_overflowScroll","hostClientSize","isContentBox","subtractXScrollbar","viewportStyleObj","arrangeHideOffset","getStatePerAxis","styleKey","isOverlaid","nativeScrollbarSize","overflowStyle","objectPrefferedOverflowStyle","overflowScroll","nonScrollbarStylingHideOffset","scrollbarsHideOffset","scrollbarsHideOffsetArrange","xOverflowStyle","_getStatePerAxis","xOverflowScroll","xScrollbarsHideOffset","xScrollbarsHideOffsetArrange","yOverflowStyle","_getStatePerAxis2","yOverflowScroll","yScrollbarsHideOffset","yScrollbarsHideOffsetArrange","_overflowStyle","setViewportOverflowState","hasOverflow","overflowOption","setAxisOverflowStyle","behavior","hasOverflowAxis","overflowVisible","overflowVisibleBehavior","_setAxisOverflowStyle","visibleBehaviorX","_setAxisOverflowStyle2","visibleBehaviorY","horizontalMarginKey","viewportHorizontalPaddingKey","horizontalMarginValue","verticalMarginValue","horizontalPaddingValue","verticalPaddingValue","_hostMutation","_getState3","showNativeOverlaidScrollbarsOption","showNativeOverlaidScrollbarsChanged","_checkOption2","overflowChanged","adjustFlexboxGlue","overflowXVisible","overflowYVisible","sizeFractionCache","viewportScrollSizeCache","overflowAmuntCache","overflowEdgeCache","preMeasureViewportOverflowState","_undoViewportArrange","redoViewportArrange","undoViewportArrangeOverflowState","_sizeFractionCache","sizeFractionChanged","_viewportScrollSizeCa","viewportScrollSizeChanged","viewportclientSize","arrangedViewportScrollSize","arrangedViewportClientSize","overflowAmountScrollSize","overflowAmountClientSize","_overflowEdgeCache","overflowEdge","overflowEdgeChanged","_overflowAmuntCache","overflowAmount","overflowAmountChanged","_viewportScrollSizeCa2","_sizeFractionCache2","removeClipping","viewportArranged","_updateOverflowStyleC","overflowStyleChanged","_overflowEdge","_overflowAmount","_hasOverflow","_overflowStyleChanged","_overflowEdgeChanged","_overflowAmountChanged","prepareUpdateHints","leading","adaptive","finalAdaptive","objKeys","leadingValue","adaptiveValue","createStructureSetupUpdate","updateSegments","initialUpdateHints","adjustScrollOffset","scrollOffsetX","scrollOffsetY","adaptivedUpdateHints","updateSegment","getElmDirectionIsRTL","domRectHasDimensions","createSizeObserver","_ref$_direction","_direction","observeDirectionChange","_ref$_appear","_appear","rtlScrollBehavior","baseElements","sizeObserver","getIsDirectionRTL","currVal","updateResizeObserverContentRectCache","onSizeChangedCallbackProxy","sizeChangedContext","isResizeObserverCall","hasDirectionCache","skip","doDirectionScroll","_updateResizeObserver","pop","contentRect","currRContentRect","prevContentRect","hasDimensions","hadDimensions","rtl","_directionIsRTLCache","appearCallback","directionIsRTLCache","resizeObserverInstance","observe","disconnect","pluginAppearCallback","_sizeObserverPlugin$_","pluginOffListeners","updateDirectionIsRTLCache","directionIsRTLCacheValues","directionIsRTLChanged","isHeightIntrinsic","ioEntryOrSize","isIntersecting","intersectionRatio","createTrinsicObserver","onTrinsicChangedCallback","intersectionObserverInstance","trinsicObserver","updateHeightIntrinsicCache","triggerOnTrinsicChangedCallback","updateValue","fromRecords","intersectionObserverCallback","entries","root","onSizeChanged","newSize","takeRecords","createEventContentChange","eventContentChange","map","destroyed","destroy","updateElements","getElements","eventElmList","elements","entry","entryEventNames","entryOff","delete","WeakMap","createDOMObserver","isContentObserver","isConnected","_attributes","_styleChangingAttributes","_eventContentChange","_nestedTargetSelector","_ignoreTargetChange","_ignoreContentChange","debouncedEventContentChange","_createEventContentCh","destroyEventContentChange","updateEventContentChangeElements","finalAttributes","finalStyleChangingAttributes","observedAttributes","observerCallback","mutations","ignoreTargetChange","ignoreContentChange","targetChangedAttrs","totalAddedNodes","targetStyleChanged","contentChanged","childListChanged","mutation","attributeName","mutationTarget","oldValue","addedNodes","isAttributesType","isChildListType","targetIsMutationTarget","attributeValue","attributeChanged","styleChangingAttrChanged","notOnlyAttrChanged","contentAttrChanged","isNestedTarget","baseAssertion","contentFinalChanged","mutationObserver","attributeOldValue","attributeFilter","subtree","childList","characterData","records","hostSelector","viewportSelector","viewportAttrsFromTarget","baseStyleChangingAttrsTextarea","baseStyleChangingAttrs","createStructureSetupObservers","structureSetupUpdate","debounceTimeout","debounceMaxDelay","contentMutationObserver","contentScroll","viewportScroll","fractional","updateContentSizeCache","contentMutationObserverAttr","structureSetupUpdateWithDebouncedAdaptiveUpdateHints","prev","prevObj","currObj","updateViewportAttrsFromHost","attribute","hostAttr","onTrinsicChanged","heightIntrinsicCache","updateFn","directionChanged","onContentMutation","contentChangedTroughEvent","_updateContentSizeCac","contentSizeChanged","onHostMutation","destroySizeObserver","_createDOMObserver","destroyHostMutationObserver","updateHostMutationObserver","viewportIsTargetResizeObserver","hostUpdateResult","contentUpdateResult","trinsicUpdateResult","attributesChanged","_checkOption3","elementEventsChanged","debounceValue","_checkOption4","debounceChanged","updateContentMutationObserver","ignoreMutationFromOptions","ignore","timeout","maxWait","initialXYNumber","initialStructureSetupUpdateState","createStructureSetup","checkOptionsFallback","_createStructureSetup","destroyElements","updateStructure","triggerUpdateEvent","truthyUpdateHints","some","destroyObservers","_createStructureSetup2","updateObservers","updateObserversOptions","structureSetupState","_addOnUpdatedListener","_appendElements","_elements","interactionStartEventNames","interactionEndEventNames","stopRootClickPropagation","scrollbar","documentElm","createScrollbarsSetupElements","environmentScrollbarSlot","_scrollbarsSlot","initializationScrollbarSlot","scrollbarsSlot","evaluatedScrollbarSlot","scrollbarsAddRemoveClass","scrollbarStructures","scrollbarStructure","_scrollbar","horizontalScrollbars","verticalScrollbars","addRemoveClassHorizontal","addRemoveClassVertical","generateScrollbarDOM","horizontal","scrollbarClassName","arrToPush","transitionlessClass","track","handle","_track","_handle","generateHorizontalScrollbarStructure","generateVerticalScrollbarStructure","_horizontal","_scrollbarStructures","_clone","_addRemoveClass","_vertical","createSelfCancelTimeout","id","setTFn","clearTFn","createScrollbarsSetup","globalAutoHideDelay","autoHideIsMove","autoHideIsLeave","autoHideNotNever","mouseInHost","_createSelfCancelTime","requestMouseMoveAnimationFrame","cancelMouseMoveAnimationFrame","_createSelfCancelTime2","requestScrollAnimationFrame","cancelScrollAnimationFrame","scrollTimeout","_createSelfCancelTime3","clearScrollTimeout","auotHideMoveTimeout","_createSelfCancelTime4","clearAutoHideTimeout","_createSelfCancelTime5","auotHideTimeout","clearAutoTimeout","_createScrollbarsSetu","manageScrollbarsAutoHide","removeAutoHide","delayless","hide","onHostMouseEnter","scrollbarsSetupState","structureUpdateHints","visibilityChanged","autoHideChanged","updateVisibility","setScrollbarVisibility","addRemoveClass","isVisible","_structureSetupState","xVisible","yVisible","hasCorner","targets","targetInstanceMap","addInstance","osInstance","removeInstance","getInstance","OverlayScrollbars","eventListeners","addEnvListener","plugins","instanceTarget","potentialInstance","opts","validate","currentOptions","structureState","destroyStructure","updateScrollbars","scrollbarsState","destroyScrollbars","removeEnvListener","withdrawn","instance","_structureState","pluginInstance","sizeChanged","hostMutation","_getEnvironment2","scrollbarsSize","scrollbarsOverlaid","scrollbarsHiding","cssCustomProperties","defaultInitializationStrategy","getInitializationStrategy","setInitializationStrategy","getDefaultOptions","setDefaultOptions"],"mappings":"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"}
