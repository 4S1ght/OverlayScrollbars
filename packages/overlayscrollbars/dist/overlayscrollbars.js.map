{"version":3,"file":"overlayscrollbars.js","sources":["../src/core/utils/types.ts","../src/core/utils/arrays.ts","../src/core/dom/traversal.ts","../src/core/dom/manipulation.ts","../src/core/dom/create.ts","../src/index.ts"],"sourcesContent":["import { PlainObject } from 'core/typings';\r\n\r\nexport const type: (obj: any) => string = (obj) => {\r\n    if (obj === undefined)\r\n        return obj + '';\r\n    if (obj === null)\r\n        return obj + '';\r\n    return Object.prototype.toString.call(obj).replace(/^\\[object (.+)\\]$/, '$1').toLowerCase();\r\n}\r\n\r\nexport function isNumber(obj: any): obj is number {\r\n    return typeof obj === 'number';\r\n};\r\n\r\nexport function isString(obj: any): obj is string {\r\n    return typeof obj === 'string';\r\n}\r\n\r\nexport function isBoolean(obj: any): obj is boolean {\r\n    return typeof obj === 'boolean';\r\n}\r\n\r\nexport function isObject(obj: any): boolean {\r\n    return typeof obj === 'object' && !isArray(obj) && !isNull(obj);\r\n}\r\n\r\nexport function isFunction(obj: any): obj is Function {\r\n    return typeof obj === 'function';\r\n}\r\n\r\nexport function isUndefined(obj: any): obj is undefined {\r\n    return obj === undefined;\r\n}\r\n\r\nexport function isNull(obj: any): obj is null {\r\n    return obj === null;\r\n}\r\n\r\nexport function isArray(obj: any): obj is Array<any> {\r\n    return Array.isArray(obj);\r\n}\r\n\r\n\r\n/**\r\n * Returns true if the given object is array like, false otherwise.\r\n * @param obj The Object\r\n */\r\nexport function isArrayLike<T extends PlainObject = any>(obj: any): obj is ArrayLike<T> {\r\n    const length = !!obj && obj.length;\r\n    return isArray(obj) || (!isFunction(obj) && isNumber(length) && length > -1 && length % 1 == 0);\r\n}\r\n\r\n/**\r\n * Returns true if the given object is a \"plain\" (e.g. { key: value }) object, false otherwise. \r\n * @param obj The Object.\r\n */\r\nexport function isPlainObject<T = any>(obj: any): obj is PlainObject<T> {\r\n    if (!obj || !isObject(obj) || type(obj) !== 'object')\r\n        return false;\r\n\r\n    let key;\r\n    const proto = 'prototype';\r\n    const hasOwnProperty = Object[proto].hasOwnProperty;\r\n    const hasOwnConstructor = hasOwnProperty.call(obj, 'constructor');\r\n    const hasIsPrototypeOf = obj.constructor && obj.constructor[proto] && hasOwnProperty.call(obj.constructor[proto], 'isPrototypeOf');\r\n\r\n    if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\r\n        return false;\r\n    }\r\n\r\n    for (key in obj) { /**/ }\r\n\r\n    return isUndefined(key) || hasOwnProperty.call(obj, key);\r\n};\r\n\r\n/**\r\n * Checks whether the given object is a HTMLElement.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport function isHTMLElement(obj: any): obj is HTMLElement {\r\n    const instaceOfRightHandSide = window.HTMLElement;\r\n    const doInstanceOf = isObject(instaceOfRightHandSide) || isFunction(instaceOfRightHandSide);\r\n    return !!(\r\n        doInstanceOf ? obj instanceof instaceOfRightHandSide : (obj && isObject(obj) && obj.nodeType === 1 && isString(obj.nodeName))\r\n    );\r\n}\r\n\r\n/**\r\n * Returns true if the given object is empty, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport function isEmptyObject(obj: any): boolean {\r\n    for (let name in obj)\r\n        return false;\r\n    return true;\r\n};","import { isArrayLike } from 'core/utils/types';\r\nimport { PlainObject } from 'core/typings';\r\n\r\n\r\n/**\r\n * Iterates through a array or object\r\n * @param arrayLikeOrObject The array or object through which shall be iterated.\r\n * @param callback The function which is responsible for the iteration. \r\n * If the function returns true its treated like a \"continue\" statement.\r\n * If the function returns false its treated like a \"break\" statement.\r\n */\r\nexport function each<T>(array: Array<T> | ReadonlyArray<T>, callback: (value: T, indexOrKey: number, source: Array<T>) => boolean | void): Array<T> | ReadonlyArray<T>;\r\nexport function each<T>(array: Array<T> | ReadonlyArray<T> | null, callback: (value: T, indexOrKey: number, source: Array<T>) => boolean | void): Array<T> | ReadonlyArray<T> | null;\r\nexport function each<T>(arrayLikeObject: ArrayLike<T>, callback: (value: T, indexOrKey: number, source: ArrayLike<T>) => boolean | void): ArrayLike<T>;\r\nexport function each<T>(arrayLikeObject: ArrayLike<T> | null, callback: (value: T, indexOrKey: number, source: ArrayLike<T>) => boolean | void): ArrayLike<T> | null;\r\nexport function each(obj: PlainObject, callback: (value: any, indexOrKey: string, source: PlainObject) => boolean | void): PlainObject;\r\nexport function each(obj: PlainObject | null, callback: (value: any, indexOrKey: string, source: PlainObject) => boolean | void): PlainObject | null;\r\nexport function each<T>(source: ArrayLike<T> | PlainObject | null, callback: (value: T | any, indexOrKey: any, source: any) => boolean | void): Array<T> | ReadonlyArray<T> | ArrayLike<T> | PlainObject | null {\r\n    let i: number | string = 0;\r\n\r\n    if (isArrayLike(source)) {\r\n        for (; i < source.length; i++) {\r\n            if (callback(source[i], i, source) === false)\r\n                break;\r\n        }\r\n    }\r\n    else if (source) {\r\n        for (i in source) {\r\n            if (callback(source[i], i, source) === false)\r\n                break;\r\n        }\r\n    }\r\n    return source;\r\n};\r\n\r\n/**\r\n * Returns the index of the given inside the given array or -1 if the given item isn't part of the given array.\r\n * @param arr The array.\r\n * @param item The item.\r\n * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\r\n */\r\nexport const indexOf: <T = any>(arr: Array<T>, item: T, fromIndex?: number) => number = (arr, item, fromIndex) => {\r\n    return arr.indexOf(item, fromIndex);\r\n}","import { each } from 'core/utils/arrays';\r\n\r\nconst elementIsVisible: (elm: HTMLElement) => boolean = (elm) => {\r\n    return !!(elm.offsetWidth || elm.offsetHeight || elm.getClientRects().length);\r\n}\r\n\r\nexport const find: (selector: string, elm?: Element | null) => ReadonlyArray<Element> = (selector, elm?) => {\r\n    const arr: Array<Element> = [];\r\n\r\n    each((elm || document).querySelectorAll(selector), (e: Element) => {\r\n        arr.push(e);\r\n    });\r\n\r\n    return arr;\r\n}\r\n\r\nexport const findFirst: (selector: string, elm?: Element | null) => Element | null = (selector, elm?) => {\r\n    return (elm || document).querySelector(selector);\r\n}\r\n\r\nexport const is: (elm: Element | null, selector: string) => boolean = (elm, selector) => {\r\n    if (elm) {\r\n        if (selector === ':visible')\r\n            return elementIsVisible(elm as HTMLElement);\r\n        if (selector === ':hidden')\r\n            return !elementIsVisible(elm as HTMLElement);\r\n        if (elm.matches(selector))\r\n            return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport const children: (elm: Element | null, selector?: string) => ReadonlyArray<Element> = (elm, selector?) => {\r\n    const children: Array<Element> = [];\r\n\r\n    each(elm && elm.children, (child: Element) => {\r\n        if (selector) {\r\n            if (child.matches(selector))\r\n                children.push(child);\r\n        }\r\n        else\r\n            children.push(child);\r\n    });\r\n\r\n    return children;\r\n}\r\n\r\nexport const contents: (elm: Element | null) => ReadonlyArray<ChildNode> = (elm) => {\r\n    return elm ? Array.from<ChildNode>(elm.childNodes) : [];\r\n}\r\n\r\nexport const parent: (elm: Node | null) => Node | null = (elm) => elm ? elm.parentElement : null;","import { isArrayLike, isHTMLElement } from 'core/utils/types';\r\nimport { each } from 'core/utils/arrays';\r\nimport { parent } from 'core/dom/traversal';\r\n\r\ntype NodeCollection = ArrayLike<Node> | Node | undefined | null;\r\n\r\n/**\r\n * Inserts Nodes before the given preferredAnchor element.\r\n * @param parent The parent of the preferredAnchor element or the element which shall be the parent of the inserted Nodes.\r\n * @param preferredAnchor The element before which the Nodes shall be inserted or null if the elements shall be appended at the end.\r\n * @param insertedElms The Nodes which shall be inserted.\r\n */\r\nconst before: (parent: Node | null, preferredAnchor: Node | null, insertedElms: NodeCollection) => void = (parent, preferredAnchor, insertedElms) => {\r\n    if (insertedElms) {\r\n        let anchor: Node | null = preferredAnchor;\r\n        let fragment: DocumentFragment | Node | undefined | null;\r\n\r\n        // parent must be defined\r\n        if (parent) {\r\n            if (isArrayLike(insertedElms)) {\r\n                fragment = document.createDocumentFragment();\r\n\r\n                // append all insertedElms to the fragment and if one of these is the anchor, change the anchor\r\n                each(insertedElms, (insertedElm) => {\r\n                    if (insertedElm === anchor) {\r\n                        anchor = insertedElm.previousSibling;\r\n                    }\r\n                    fragment!.appendChild(insertedElm);\r\n                });\r\n            }\r\n            else {\r\n                fragment = insertedElms;\r\n            }\r\n\r\n            // if the preferred anchor isn't null set it to a valid anchor\r\n            if (preferredAnchor) {\r\n                if (!anchor) {\r\n                    anchor = parent.firstChild;\r\n                }\r\n                else if (anchor !== preferredAnchor) {\r\n                    anchor = anchor.nextSibling;\r\n                }\r\n            }\r\n\r\n            parent.insertBefore(fragment, anchor);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Appends the given children at the end of the given Node.\r\n * @param node The Node to which the children shall be appended.\r\n * @param children The Nodes which shall be appended.\r\n */\r\nexport const appendChildren: (node: Node | null, children: NodeCollection) => void = (node, children) => { before(node, null, children) };\r\n\r\n/**\r\n * Prepends the given children at the start of the given Node.\r\n * @param node The Node to which the children shall be prepended.\r\n * @param children The Nodes which shall be prepended.\r\n */\r\nexport const prependChildren: (node: Node | null, children: NodeCollection) => void = (node, children) => { before(node, node && node.firstChild, children) };\r\n\r\n/**\r\n * Inserts the given Nodes before the given Node.\r\n * @param node The Node before which the given Nodes shall be inserted.\r\n * @param insertedNodes The Nodes which shall be inserted.\r\n */\r\nexport const insertBefore: (node: Node | null, insertedNodes: NodeCollection) => void = (node, insertedNodes) => { before(parent(node), node, insertedNodes) };\r\n\r\n/**\r\n * Inserts the given Nodes after the given Node.\r\n * @param node The Node after which the given Nodes shall be inserted.\r\n * @param insertedNodes The Nodes which shall be inserted.\r\n */\r\nexport const insertAfter: (node: Node | null, insertedNodes: NodeCollection) => void = (node, insertedNodes) => { before(parent(node), node && node.nextSibling, insertedNodes) };\r\n\r\n/**\r\n * Removes the given Nodes from their parent.\r\n * @param nodes The Nodes which shall be removed.\r\n */\r\nexport const removeElements: (nodes: NodeCollection) => void = (nodes) => {\r\n    if (isArrayLike(nodes)) {\r\n        each(Array.from(nodes), (e) => removeElements(e));\r\n    }\r\n    else if (nodes) {\r\n        const parentNode = nodes.parentNode;\r\n        if (parentNode)\r\n            parentNode.removeChild(nodes);\r\n    }\r\n}","import { each } from 'core/utils/arrays';\r\nimport { contents } from 'core/dom/traversal';\r\nimport { removeElements } from 'core/dom/manipulation';\r\n\r\nexport const createDiv: () => HTMLDivElement = () => {\r\n    return document.createElement('div');\r\n}\r\n\r\nexport const createDOM: (html: string) => ReadonlyArray<Node> = (html) => {\r\n    const elm = createDiv();\r\n    elm.innerHTML = html.trim();\r\n\r\n    return each(contents(elm), (elm) => removeElements(elm));\r\n}","\r\nimport { createDOM } from 'core/dom';\r\nimport j from 'jquery';\r\n/*\r\nexport * from 'core/compatibility';\r\nexport * from 'core/utils';\r\nexport * from 'core/dom';\r\nexport * from 'core/options';\r\nexport * from 'instances';\r\n*/\r\n\r\nconst abc = {\r\n    a: 1,\r\n    b: 1,\r\n    c: 1,\r\n}\r\n\r\nexport default () => {\r\n    const { a, b, c } = abc;\r\n    return [createDOM(`\\\r\n    <div class=\"os-host\">\\\r\n        <div class=\"os-resize-observer-host\"></div>\\\r\n        <div class=\"os-padding\">\\\r\n            <div class=\"os-viewport\">\\\r\n                <div class=\"os-content\">\\\r\n                    fdfhdfgh\\\r\n                </div>\\\r\n            </div>\\\r\n        </div>\\\r\n        <div class=\"os-scrollbar os-scrollbar-horizontal\">\\\r\n            <div class=\"os-scrollbar-track\">\\\r\n                <div class=\"os-scrollbar-handle\"></div>\\\r\n            </div>\\\r\n        </div>\\\r\n        <div class=\"os-scrollbar os-scrollbar-vertical\">\\\r\n            <div class=\"os-scrollbar-track\">\\\r\n                <div class=\"os-scrollbar-handle\"></div>\\\r\n            </div>\\\r\n        </div>\\\r\n        <div class=\"os-scrollbar-corner\"></div>\\\r\n    </div>`), j('div'), a, b, c];\r\n};"],"names":["isNumber","obj","isFunction","isArray","Array","isArrayLike","length","each","source","callback","i","contents","elm","from","childNodes","removeElements","nodes","e","parentNode","removeChild","createDiv","document","createElement","createDOM","html","innerHTML","trim","abc","a","b","c"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;WAUgBA,SAASC;AACrB,WAAO,OAAOA,GAAP,KAAe,QAAtB;AACH;;WAceC,WAAWD;AACvB,WAAO,OAAOA,GAAP,KAAe,UAAtB;AACH;;WAUeE,QAAQF;AACpB,WAAOG,KAAK,CAACD,OAAN,CAAcF,GAAd,CAAP;AACH;;WAOeI,YAAyCJ;AACrD,QAAMK,MAAM,GAAG,CAAC,CAACL,GAAF,IAASA,GAAG,CAACK,MAA5B;AACA,WAAOH,OAAO,CAACF,GAAD,CAAP,IAAiB,CAACC,UAAU,CAACD,GAAD,CAAX,IAAoBD,QAAQ,CAACM,MAAD,CAA5B,IAAwCA,MAAM,GAAG,CAAC,CAAlD,IAAuDA,MAAM,GAAG,CAAT,IAAc,CAA7F;;;WChCYC,KAAQC,QAA2CC;AAC/D,QAAIC,CAAC,GAAoB,CAAzB;;AAEA,QAAIL,WAAW,CAACG,MAAD,CAAf,EAAyB;AACrB,aAAOE,CAAC,GAAGF,MAAM,CAACF,MAAlB,EAA0BI,CAAC,EAA3B,EAA+B;AAC3B,YAAID,QAAQ,CAACD,MAAM,CAACE,CAAD,CAAP,EAAYA,CAAZ,EAAeF,MAAf,CAAR,KAAmC,KAAvC,EACI;AACP;AACJ,KALD,MAMK,IAAIA,MAAJ,EAAY;AACb,WAAKE,CAAL,IAAUF,MAAV,EAAkB;AACd,YAAIC,QAAQ,CAACD,MAAM,CAACE,CAAD,CAAP,EAAYA,CAAZ,EAAeF,MAAf,CAAR,KAAmC,KAAvC,EACI;AACP;AACJ;;AACD,WAAOA,MAAP;;;ACeG,MAAMG,QAAQ,GAAsD,SAA9DA,QAA8D,CAACC,GAAD;AACvE,WAAOA,GAAG,GAAGR,KAAK,CAACS,IAAN,CAAsBD,GAAG,CAACE,UAA1B,CAAH,GAA2C,EAArD;AACH,GAFM;;ACkCA,MAAMC,cAAc,GAAoC,SAAlDA,cAAkD,CAACC,KAAD;AAC3D,QAAIX,WAAW,CAACW,KAAD,CAAf,EAAwB;AACpBT,MAAAA,IAAI,CAACH,KAAK,CAACS,IAAN,CAAWG,KAAX,CAAD,EAAoB,UAACC,CAAD;AAAA,eAAOF,cAAc,CAACE,CAAD,CAArB;AAAA,OAApB,CAAJ;AACH,KAFD,MAGK,IAAID,KAAJ,EAAW;AACZ,UAAME,UAAU,GAAGF,KAAK,CAACE,UAAzB;AACA,UAAIA,UAAJ,EACIA,UAAU,CAACC,WAAX,CAAuBH,KAAvB;AACP;AACJ,GATM;;AC7EA,MAAMI,SAAS,GAAyB,SAAlCA,SAAkC;AAC3C,WAAOC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAP;AACH,GAFM;;AAIA,MAAMC,SAAS,GAA0C,SAAnDA,SAAmD,CAACC,IAAD;AAC5D,QAAMZ,GAAG,GAAGQ,SAAS,EAArB;AACAR,IAAAA,GAAG,CAACa,SAAJ,GAAgBD,IAAI,CAACE,IAAL,EAAhB;AAEA,WAAOnB,IAAI,CAACI,QAAQ,CAACC,GAAD,CAAT,EAAgB,UAACA,GAAD;AAAA,aAASG,cAAc,CAACH,GAAD,CAAvB;AAAA,KAAhB,CAAX;AACH,GALM;;ACGP,MAAMe,GAAG,GAAG;AACRC,IAAAA,CAAC,EAAE,CADK;AAERC,IAAAA,CAAC,EAAE,CAFK;AAGRC,IAAAA,CAAC,EAAE;AAHK,GAAZ;;AAMA,cAAe,cAAA;QACHF,IAAYD,IAAZC;QAAGC,IAASF,IAATE;QAAGC,IAAMH,IAANG;AACd,WAAO,CAACP,SAAS,wtBAAV,EAqBG,qBAAE,KAAF,CArBH,EAqBaK,CArBb,EAqBgBC,CArBhB,EAqBmBC,CArBnB,CAAP;AAsBH,GAxBD;;"}