{"version":3,"file":"overlayscrollbars.js","sources":["../src/support/cache.ts","../src/support/utils/types.ts","../src/support/utils/array.ts","../src/support/utils/object.ts","../src/support/dom/attribute.ts","../src/support/dom/style.ts","../src/support/dom/traversal.ts","../src/support/dom/manipulation.ts","../src/support/dom/create.ts","../src/support/compatibility/vendors.ts","../src/support/compatibility/apis.ts","../src/support/dom/class.ts","../src/support/utils/equal.ts","../src/support/utils/function.ts","../src/support/dom/dimensions.ts","../src/support/dom/events.ts","../src/support/dom/offset.ts","../src/support/eventListeners.ts","../src/setups/setups.ts","../src/classnames.ts","../src/options.ts","../src/environment.ts","../src/plugins/plugins.ts","../../../node_modules/@babel/runtime/helpers/extends.js","../src/plugins/optionsValidationPlugin/validation.ts","../src/plugins/optionsValidationPlugin/optionsValidationPlugin.ts","../src/plugins/sizeObserverPlugin/sizeObserverPlugin.ts","../src/plugins/scrollbarsHidingPlugin/scrollbarsHidingPlugin.ts","../src/initialization.ts","../src/setups/structureSetup/structureSetup.elements.ts","../src/setups/structureSetup/updateSegments/trinsicUpdateSegment.ts","../src/setups/structureSetup/updateSegments/paddingUpdateSegment.ts","../src/setups/structureSetup/updateSegments/overflowUpdateSegment.ts","../src/setups/structureSetup/structureSetup.update.ts","../src/observers/sizeObserver.ts","../src/observers/trinsicObserver.ts","../src/observers/domObserver.ts","../src/setups/structureSetup/structureSetup.observers.ts","../src/setups/structureSetup/structureSetup.ts","../src/setups/scrollbarsSetup/scrollbarsSetup.elements.ts","../src/setups/scrollbarsSetup/scrollbarsSetup.ts","../src/instances.ts","../src/overlayscrollbars.ts"],"sourcesContent":["export interface CacheOptions<Value> {\r\n  // initial value of _value.\r\n  _initialValue: Value;\r\n  // Custom comparison function if shallow compare isn't enough. Returns true if nothing changed.\r\n  _equal?: EqualCachePropFunction<Value>;\r\n  // If true always updates _value and _previous, otherwise they update only when they changed.\r\n  _alwaysUpdateValues?: boolean;\r\n}\r\n\r\nexport type CacheValues<T> = [value: T, changed: boolean, previous?: T];\r\n\r\nexport type EqualCachePropFunction<Value> = (currentVal: Value, newVal: Value) => boolean;\r\n\r\nexport type CacheUpdater<Value> = (current: Value, previous?: Value) => Value;\r\n\r\nexport type UpdateCacheContextual<Value> = (newValue: Value, force?: boolean) => CacheValues<Value>;\r\n\r\nexport type UpdateCache<Value> = (force?: boolean) => CacheValues<Value>;\r\n\r\nexport type GetCurrentCache<Value> = (force?: boolean) => CacheValues<Value>;\r\n\r\nexport type Cache<Value> = [UpdateCache<Value>, GetCurrentCache<Value>];\r\n\r\nexport type CacheContextual<Value> = [UpdateCacheContextual<Value>, GetCurrentCache<Value>];\r\n\r\nexport function createCache<Value>(options: CacheOptions<Value>): CacheContextual<Value>;\r\nexport function createCache<Value>(\r\n  options: CacheOptions<Value>,\r\n  update: CacheUpdater<Value>\r\n): Cache<Value>;\r\nexport function createCache<Value>(\r\n  options: CacheOptions<Value>,\r\n  update?: CacheUpdater<Value>\r\n): CacheContextual<Value> | Cache<Value> {\r\n  const { _initialValue, _equal, _alwaysUpdateValues } = options;\r\n  let _value: Value = _initialValue;\r\n  let _previous: Value | undefined;\r\n\r\n  const cacheUpdateContextual: UpdateCacheContextual<Value> = (newValue, force?) => {\r\n    const curr = _value;\r\n\r\n    const newVal = newValue;\r\n    const changed = force || (_equal ? !_equal(curr, newVal) : curr !== newVal);\r\n\r\n    if (changed || _alwaysUpdateValues) {\r\n      _value = newVal;\r\n      _previous = curr;\r\n    }\r\n\r\n    return [_value, changed, _previous];\r\n  };\r\n  const cacheUpdateIsolated: UpdateCache<Value> = (force?) =>\r\n    cacheUpdateContextual(update!(_value, _previous), force);\r\n\r\n  const getCurrentCache: GetCurrentCache<Value> = (force?: boolean) => [\r\n    _value,\r\n    !!force, // changed\r\n    _previous,\r\n  ];\r\n\r\n  return [update ? cacheUpdateIsolated : cacheUpdateContextual, getCurrentCache] as\r\n    | CacheContextual<Value>\r\n    | Cache<Value>;\r\n}\r\n","import { PlainObject } from 'typings';\r\n\r\nconst ElementNodeType = Node.ELEMENT_NODE;\r\nconst { toString, hasOwnProperty } = Object.prototype;\r\n\r\nexport function isUndefined(obj: any): obj is undefined {\r\n  return obj === undefined;\r\n}\r\n\r\nexport function isNull(obj: any): obj is null {\r\n  return obj === null;\r\n}\r\n\r\nexport const type: (obj: any) => string = (obj) =>\r\n  isUndefined(obj) || isNull(obj)\r\n    ? `${obj}`\r\n    : toString\r\n        .call(obj)\r\n        .replace(/^\\[object (.+)\\]$/, '$1')\r\n        .toLowerCase();\r\n\r\nexport function isNumber(obj: any): obj is number {\r\n  return typeof obj === 'number';\r\n}\r\n\r\nexport function isString(obj: any): obj is string {\r\n  return typeof obj === 'string';\r\n}\r\n\r\nexport function isBoolean(obj: any): obj is boolean {\r\n  return typeof obj === 'boolean';\r\n}\r\n\r\nexport function isFunction(obj: any): obj is (...args: any[]) => any {\r\n  return typeof obj === 'function';\r\n}\r\n\r\nexport function isArray(obj: any): obj is Array<any> {\r\n  return Array.isArray(obj);\r\n}\r\n\r\nexport function isObject(obj: any): boolean {\r\n  return typeof obj === 'object' && !isArray(obj) && !isNull(obj);\r\n}\r\n\r\n/**\r\n * Returns true if the given object is array like, false otherwise.\r\n * @param obj The Object\r\n */\r\nexport function isArrayLike<T extends PlainObject = any>(obj: any): obj is ArrayLike<T> {\r\n  const length = !!obj && obj.length;\r\n  const lengthCorrectFormat = isNumber(length) && length > -1 && length % 1 == 0; // eslint-disable-line eqeqeq\r\n\r\n  return isArray(obj) || (!isFunction(obj) && lengthCorrectFormat)\r\n    ? length > 0 && isObject(obj)\r\n      ? length - 1 in obj\r\n      : true\r\n    : false;\r\n}\r\n\r\n/**\r\n * Returns true if the given object is a \"plain\" (e.g. { key: value }) object, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport function isPlainObject<T = any>(obj: any): obj is PlainObject<T> {\r\n  if (!obj || !isObject(obj) || type(obj) !== 'object') return false;\r\n\r\n  let key;\r\n  const cstr = 'constructor';\r\n  const ctor = obj[cstr];\r\n  const ctorProto = ctor && ctor.prototype;\r\n  const hasOwnConstructor = hasOwnProperty.call(obj, cstr);\r\n  const hasIsPrototypeOf = ctorProto && hasOwnProperty.call(ctorProto, 'isPrototypeOf');\r\n\r\n  if (ctor && !hasOwnConstructor && !hasIsPrototypeOf) {\r\n    return false;\r\n  }\r\n\r\n  /* eslint-disable no-restricted-syntax */\r\n  for (key in obj) {\r\n    /**/\r\n  }\r\n  /* eslint-enable */\r\n\r\n  return isUndefined(key) || hasOwnProperty.call(obj, key);\r\n}\r\n\r\n/**\r\n * Checks whether the given object is a HTMLElement.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport function isHTMLElement(obj: any): obj is HTMLElement {\r\n  const instanceofObj = window.HTMLElement;\r\n  return obj\r\n    ? instanceofObj\r\n      ? obj instanceof instanceofObj\r\n      : obj.nodeType === ElementNodeType\r\n    : false;\r\n}\r\n\r\n/**\r\n * Checks whether the given object is a Element.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport function isElement(obj: any): obj is Element {\r\n  const instanceofObj = window.Element;\r\n  return obj\r\n    ? instanceofObj\r\n      ? obj instanceof instanceofObj\r\n      : obj.nodeType === ElementNodeType\r\n    : false;\r\n}\r\n","import { isArrayLike, isString } from 'support/utils/types';\r\nimport { PlainObject } from 'typings';\r\n\r\ntype RunEachItem = ((...args: any) => any | any[]) | null | undefined;\r\n\r\n/**\r\n * Iterates through a array or object\r\n * @param arrayLikeOrObject The array or object through which shall be iterated.\r\n * @param callback The function which is responsible for the iteration.\r\n * If the function returns true its treated like a \"continue\" statement.\r\n * If the function returns false its treated like a \"break\" statement.\r\n */\r\nexport function each<T>(\r\n  array: Array<T> | ReadonlyArray<T>,\r\n  callback: (value: T, indexOrKey: number, source: Array<T>) => boolean | unknown\r\n): Array<T> | ReadonlyArray<T>;\r\nexport function each<T>(\r\n  array: Array<T> | ReadonlyArray<T> | null | undefined,\r\n  callback: (value: T, indexOrKey: number, source: Array<T>) => boolean | unknown\r\n): Array<T> | ReadonlyArray<T> | null | undefined;\r\nexport function each<T>(\r\n  arrayLikeObject: ArrayLike<T>,\r\n  callback: (value: T, indexOrKey: number, source: ArrayLike<T>) => boolean | unknown\r\n): ArrayLike<T>;\r\nexport function each<T>(\r\n  arrayLikeObject: ArrayLike<T> | null | undefined,\r\n  callback: (value: T, indexOrKey: number, source: ArrayLike<T>) => boolean | unknown\r\n): ArrayLike<T> | null | undefined;\r\nexport function each(\r\n  obj: PlainObject,\r\n  callback: (value: any, indexOrKey: string, source: PlainObject) => boolean | unknown\r\n): PlainObject;\r\nexport function each(\r\n  obj: PlainObject | null | undefined,\r\n  callback: (value: any, indexOrKey: string, source: PlainObject) => boolean | unknown\r\n): PlainObject | null | undefined;\r\nexport function each<T>(\r\n  source: ArrayLike<T> | PlainObject | null | undefined,\r\n  callback: (value: T, indexOrKey: any, source: any) => boolean | unknown\r\n): Array<T> | ReadonlyArray<T> | ArrayLike<T> | PlainObject | null | undefined {\r\n  if (isArrayLike(source)) {\r\n    for (let i = 0; i < source.length; i++) {\r\n      if (callback(source[i], i, source) === false) {\r\n        break;\r\n      }\r\n    }\r\n  } else if (source) {\r\n    each(Object.keys(source), (key) => callback(source[key], key, source));\r\n  }\r\n  return source;\r\n}\r\n\r\n/**\r\n * Returns the index of the given inside the given array or -1 if the given item isn't part of the given array.\r\n * @param arr The array.\r\n * @param item The item.\r\n * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\r\n */\r\nexport const indexOf = <T = any>(arr: T[], item: T, fromIndex?: number): number =>\r\n  arr.indexOf(item, fromIndex);\r\n\r\n/**\r\n * Pushesh all given items into the given array and returns it.\r\n * @param array The array the items shall be pushed into.\r\n * @param items The items which shall be pushed into the array.\r\n */\r\nexport const push = <T>(array: T[], items: T | ArrayLike<T>, arrayIsSingleItem?: boolean): T[] => {\r\n  !arrayIsSingleItem && !isString(items) && isArrayLike(items)\r\n    ? Array.prototype.push.apply(array, items as T[])\r\n    : array.push(items as T);\r\n  return array;\r\n};\r\n\r\n/**\r\n * Creates a shallow-copied Array instance from an array-like or iterable object.\r\n * @param arr The object from which the array instance shall be created.\r\n */\r\nexport const from = <T = any>(arr?: ArrayLike<T> | Set<T>) => {\r\n  if (Array.from && arr) {\r\n    return Array.from(arr);\r\n  }\r\n  const result: T[] = [];\r\n\r\n  if (arr instanceof Set) {\r\n    arr.forEach((value) => {\r\n      push(result, value);\r\n    });\r\n  } else {\r\n    each(arr, (elm) => {\r\n      push(result, elm);\r\n    });\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Check whether the passed array is empty.\r\n * @param array The array which shall be checked.\r\n */\r\nexport const isEmptyArray = (array: any[] | null | undefined): boolean =>\r\n  !!array && array.length === 0;\r\n\r\n/**\r\n * Calls all functions in the passed array/set of functions.\r\n * @param arr The array filled with function which shall be called.\r\n * @param args The args with which each function is called.\r\n * @param keep True when the Set / array should not be cleared afterwards, false otherwise.\r\n */\r\nexport const runEachAndClear = (\r\n  arr: ArrayLike<RunEachItem> | Set<RunEachItem>,\r\n  args?: any[],\r\n  keep?: boolean\r\n): void => {\r\n  // eslint-disable-next-line prefer-spread\r\n  const runFn = (fn: RunEachItem) => fn && fn.apply(undefined, args || []);\r\n  if (arr instanceof Set) {\r\n    arr.forEach(runFn);\r\n    !keep && arr.clear();\r\n  } else {\r\n    each(arr, runFn);\r\n    !keep && (arr as any[]).splice && (arr as any[]).splice(0, arr.length);\r\n  }\r\n};\r\n","import { isArray, isFunction, isPlainObject, isNull } from 'support/utils/types';\r\nimport { each } from 'support/utils/array';\r\n\r\n/**\r\n * Determines whether the passed object has a property with the passed name.\r\n * @param obj The object.\r\n * @param prop The name of the property.\r\n */\r\nexport const hasOwnProperty = (obj: any, prop: string | number | symbol): boolean =>\r\n  Object.prototype.hasOwnProperty.call(obj, prop);\r\n\r\n/**\r\n * Returns the names of the enumerable string properties and methods of an object.\r\n * @param obj The object of which the properties shall be returned.\r\n */\r\nexport const keys = (obj: any): Array<string> => (obj ? Object.keys(obj) : []);\r\n\r\n// https://github.com/jquery/jquery/blob/master/src/core.js#L116\r\nexport function assignDeep<T, U>(target: T, object1: U): T & U;\r\nexport function assignDeep<T, U, V>(target: T, object1: U, object2: V): T & U & V;\r\nexport function assignDeep<T, U, V, W>(\r\n  target: T,\r\n  object1: U,\r\n  object2: V,\r\n  object3: W\r\n): T & U & V & W;\r\nexport function assignDeep<T, U, V, W, X>(\r\n  target: T,\r\n  object1: U,\r\n  object2: V,\r\n  object3: W,\r\n  object4: X\r\n): T & U & V & W & X;\r\nexport function assignDeep<T, U, V, W, X, Y>(\r\n  target: T,\r\n  object1: U,\r\n  object2: V,\r\n  object3: W,\r\n  object4: X,\r\n  object5: Y\r\n): T & U & V & W & X & Y;\r\nexport function assignDeep<T, U, V, W, X, Y, Z>(\r\n  target: T,\r\n  object1?: U,\r\n  object2?: V,\r\n  object3?: W,\r\n  object4?: X,\r\n  object5?: Y,\r\n  object6?: Z\r\n): T & U & V & W & X & Y & Z {\r\n  const sources: Array<any> = [object1, object2, object3, object4, object5, object6];\r\n\r\n  // Handle case when target is a string or something (possible in deep copy)\r\n  if ((typeof target !== 'object' || isNull(target)) && !isFunction(target)) {\r\n    target = {} as T;\r\n  }\r\n\r\n  each(sources, (source) => {\r\n    // Extend the base object\r\n    each(keys(source), (key) => {\r\n      const copy: any = source[key];\r\n\r\n      // Prevent Object.prototype pollution\r\n      // Prevent never-ending loop\r\n      if (target === copy) {\r\n        return true;\r\n      }\r\n\r\n      const copyIsArray = isArray(copy);\r\n\r\n      // Recurse if we're merging plain objects or arrays\r\n      if (copy && (isPlainObject(copy) || copyIsArray)) {\r\n        const src = target[key];\r\n        let clone: any = src;\r\n\r\n        // Ensure proper type for the source value\r\n        if (copyIsArray && !isArray(src)) {\r\n          clone = [];\r\n        } else if (!copyIsArray && !isPlainObject(src)) {\r\n          clone = {};\r\n        }\r\n\r\n        // Never move original objects, clone them\r\n        target[key] = assignDeep(clone, copy) as any;\r\n      } else {\r\n        target[key] = copy;\r\n      }\r\n    });\r\n  });\r\n\r\n  // Return the modified object\r\n  return target as any;\r\n}\r\n\r\n/**\r\n * Returns true if the given object is empty, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport function isEmptyObject(obj: any): boolean {\r\n  /* eslint-disable no-restricted-syntax, guard-for-in */\r\n  for (const name in obj) return false;\r\n  return true;\r\n  /* eslint-enable */\r\n}\r\n","import { from } from 'support/utils/array';\r\nimport { isUndefined } from 'support/utils/types';\r\n\r\ntype GetSetPropName = 'scrollLeft' | 'scrollTop' | 'value';\r\n\r\nfunction getSetProp(\r\n  topLeft: GetSetPropName,\r\n  fallback: number | string,\r\n  elm: HTMLElement | HTMLInputElement | false | null | undefined,\r\n  value?: number | string\r\n): number | string | void {\r\n  if (isUndefined(value)) {\r\n    return elm ? elm[topLeft] : fallback;\r\n  }\r\n  elm && (elm[topLeft] = value);\r\n}\r\n\r\n/**\r\n * Gets or sets a attribute with the given attribute of the given element depending whether the value attribute is given.\r\n * Returns null if the element has no attribute with the given name.\r\n * @param elm The element of which the attribute shall be get or set.\r\n * @param attrName The attribute name which shall be get or set.\r\n * @param value The value of the attribute which shall be set.\r\n */\r\nexport function attr(elm: HTMLElement | false | null | undefined, attrName: string): string | null;\r\nexport function attr(\r\n  elm: HTMLElement | false | null | undefined,\r\n  attrName: string,\r\n  value: string\r\n): void;\r\nexport function attr(\r\n  elm: HTMLElement | false | null | undefined,\r\n  attrName: string,\r\n  value?: string\r\n): string | null | void {\r\n  if (isUndefined(value)) {\r\n    return elm ? elm.getAttribute(attrName) : null;\r\n  }\r\n  elm && elm.setAttribute(attrName, value);\r\n}\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and adds or removes the given value from it.\r\n * @param elm The element.\r\n * @param attrName The attributeName to which the value shall be added or removed.\r\n * @param value The value which shall be added or removed.\r\n * @param add True if the value shall be added, false otherwise.\r\n */\r\nexport const attrClass = (\r\n  elm: HTMLElement | false | null | undefined,\r\n  attrName: string,\r\n  value: string,\r\n  add?: boolean\r\n) => {\r\n  const currValues = attr(elm, attrName) || '';\r\n  const currValuesSet = new Set(currValues.split(' '));\r\n  currValuesSet[add ? 'add' : 'delete'](value);\r\n\r\n  attr(elm, attrName, from(currValuesSet).join(' ').trim());\r\n};\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and checks if the given value is in it.\r\n * @param elm The element.\r\n * @param attrName The attributeName from which the content shall be checked.\r\n * @param value The value.\r\n * @returns True if the given attribute has the value in it, false otherwise.\r\n */\r\nexport const hasAttrClass = (\r\n  elm: HTMLElement | false | null | undefined,\r\n  attrName: string,\r\n  value: string\r\n) => {\r\n  const currValues = attr(elm, attrName) || '';\r\n  const currValuesSet = new Set(currValues.split(' '));\r\n  return currValuesSet.has(value);\r\n};\r\n\r\n/**\r\n * Removes the given attribute from the given element.\r\n * @param elm The element of which the attribute shall be removed.\r\n * @param attrName The attribute name.\r\n */\r\nexport const removeAttr = (elm: Element | false | null | undefined, attrName: string): void => {\r\n  elm && elm.removeAttribute(attrName);\r\n};\r\n\r\n/**\r\n * Gets or sets the scrollLeft value of the given element depending whether the value attribute is given.\r\n * @param elm The element of which the scrollLeft value shall be get or set.\r\n * @param value The scrollLeft value which shall be set.\r\n */\r\nexport function scrollLeft(elm: HTMLElement | false | null | undefined): number;\r\nexport function scrollLeft(elm: HTMLElement | false | null | undefined, value: number): void;\r\nexport function scrollLeft(\r\n  elm: HTMLElement | false | null | undefined,\r\n  value?: number\r\n): number | void {\r\n  return getSetProp('scrollLeft', 0, elm, value) as number;\r\n}\r\n\r\n/**\r\n * Gets or sets the scrollTop value of the given element depending whether the value attribute is given.\r\n * @param elm The element of which the scrollTop value shall be get or set.\r\n * @param value The scrollTop value which shall be set.\r\n */\r\nexport function scrollTop(elm: HTMLElement | false | null | undefined): number;\r\nexport function scrollTop(elm: HTMLElement | false | null | undefined, value: number): void;\r\nexport function scrollTop(\r\n  elm: HTMLElement | false | null | undefined,\r\n  value?: number\r\n): number | void {\r\n  return getSetProp('scrollTop', 0, elm, value) as number;\r\n}\r\n\r\n/**\r\n * Gets or sets the value of the given input element depending whether the value attribute is given.\r\n * @param elm The input element of which the value shall be get or set.\r\n * @param value The value which shall be set.\r\n */\r\nexport function val(elm: HTMLInputElement | false | null | undefined): string;\r\nexport function val(elm: HTMLInputElement | false | null | undefined, value: string): void;\r\nexport function val(\r\n  elm: HTMLInputElement | false | null | undefined,\r\n  value?: string\r\n): string | void {\r\n  return getSetProp('value', '', elm, value) as string;\r\n}\r\n","import { each, keys } from 'support/utils';\r\nimport { isString, isNumber, isArray, isUndefined } from 'support/utils/types';\r\nimport { PlainObject, StyleObject } from 'typings';\r\n\r\nexport interface TRBL {\r\n  t: number;\r\n  r: number;\r\n  b: number;\r\n  l: number;\r\n}\r\n\r\nconst cssNumber = {\r\n  // animationiterationcount: 1,\r\n  // columncount: 1,\r\n  // fillopacity: 1,\r\n  // flexgrow: 1,\r\n  // flexshrink: 1,\r\n  // fontweight: 1,\r\n  // lineheight: 1,\r\n  // order: 1,\r\n  // orphans: 1,\r\n  // widows: 1,\r\n  // zoom: 1,\r\n  opacity: 1,\r\n  zindex: 1,\r\n};\r\n\r\nconst parseToZeroOrNumber = (value: string, toFloat?: boolean): number => {\r\n  /* istanbul ignore next */\r\n  const num = toFloat ? parseFloat(value) : parseInt(value, 10);\r\n  /* istanbul ignore next */\r\n  return Number.isNaN(num) ? 0 : num;\r\n};\r\nconst adaptCSSVal = (prop: string, val: string | number): string | number =>\r\n  !cssNumber[prop.toLowerCase()] && isNumber(val) ? `${val}px` : val;\r\nconst getCSSVal = (elm: HTMLElement, computedStyle: CSSStyleDeclaration, prop: string): string =>\r\n  /* istanbul ignore next */\r\n  computedStyle != null\r\n    ? computedStyle[prop] || computedStyle.getPropertyValue(prop)\r\n    : elm.style[prop];\r\nconst setCSSVal = (\r\n  elm: HTMLElement | false | null | undefined,\r\n  prop: string,\r\n  val: string | number\r\n): void => {\r\n  try {\r\n    if (elm) {\r\n      const { style: elmStyle } = elm;\r\n      if (!isUndefined(elmStyle[prop])) {\r\n        elmStyle[prop] = adaptCSSVal(prop, val);\r\n      } else {\r\n        elmStyle.setProperty(prop, val as string);\r\n      }\r\n    }\r\n  } catch (e) {}\r\n};\r\n\r\n/**\r\n * Gets or sets the passed styles to the passed element.\r\n * @param elm The element to which the styles shall be applied to / be read from.\r\n * @param styles The styles which shall be set or read.\r\n */\r\nexport function style<CustomCssProps>(\r\n  elm: HTMLElement | false | null | undefined,\r\n  styles: StyleObject<CustomCssProps>\r\n): void;\r\nexport function style<CustomCssProps>(\r\n  elm: HTMLElement | false | null | undefined,\r\n  styles: string\r\n): string;\r\nexport function style<CustomCssProps>(\r\n  elm: HTMLElement | false | null | undefined,\r\n  styles: Array<string> | string\r\n): { [key: string]: string };\r\nexport function style<CustomCssProps>(\r\n  elm: HTMLElement | false | null | undefined,\r\n  styles: StyleObject<CustomCssProps> | Array<string> | string\r\n): { [key: string]: string } | string | void {\r\n  const getSingleStyle = isString(styles);\r\n  const getStyles = isArray(styles) || getSingleStyle;\r\n\r\n  if (getStyles) {\r\n    let getStylesResult: string | PlainObject = getSingleStyle ? '' : {};\r\n    if (elm) {\r\n      const computedStyle: CSSStyleDeclaration = window.getComputedStyle(elm, null);\r\n      getStylesResult = getSingleStyle\r\n        ? getCSSVal(elm, computedStyle, styles as string)\r\n        : (styles as Array<string>).reduce((result, key) => {\r\n            result[key] = getCSSVal(elm, computedStyle, key as string);\r\n            return result;\r\n          }, getStylesResult);\r\n    }\r\n    return getStylesResult;\r\n  }\r\n  each(keys(styles), (key) => setCSSVal(elm, key, styles[key]));\r\n}\r\n\r\n/**\r\n * Hides the passed element (display: none).\r\n * @param elm The element which shall be hidden.\r\n */\r\nexport const hide = (elm: HTMLElement | false | null | undefined): void => {\r\n  style(elm, { display: 'none' });\r\n};\r\n\r\n/**\r\n * Shows the passed element (display: block).\r\n * @param elm The element which shall be shown.\r\n */\r\nexport const show = (elm: HTMLElement | false | null | undefined): void => {\r\n  style(elm, { display: 'block' });\r\n};\r\n\r\n/**\r\n * Returns the top right bottom left values of the passed css property.\r\n * @param elm The element of which the values shall be returned.\r\n * @param propertyPrefix The css property prefix. (e.g. \"border\")\r\n * @param propertySuffix The css property suffix. (e.g. \"width\")\r\n */\r\nexport const topRightBottomLeft = (\r\n  elm?: HTMLElement | false | null | undefined,\r\n  propertyPrefix?: string,\r\n  propertySuffix?: string\r\n): TRBL => {\r\n  const finalPrefix = propertyPrefix ? `${propertyPrefix}-` : '';\r\n  const finalSuffix = propertySuffix ? `-${propertySuffix}` : '';\r\n  const top = `${finalPrefix}top${finalSuffix}`;\r\n  const right = `${finalPrefix}right${finalSuffix}`;\r\n  const bottom = `${finalPrefix}bottom${finalSuffix}`;\r\n  const left = `${finalPrefix}left${finalSuffix}`;\r\n  const result = style(elm, [top, right, bottom, left]);\r\n  return {\r\n    t: parseToZeroOrNumber(result[top]),\r\n    r: parseToZeroOrNumber(result[right]),\r\n    b: parseToZeroOrNumber(result[bottom]),\r\n    l: parseToZeroOrNumber(result[left]),\r\n  };\r\n};\r\n","import { isElement } from 'support/utils/types';\r\nimport { push, from } from 'support/utils/array';\r\n\r\ntype InputElementType = Element | Node | false | null | undefined;\r\ntype OutputElementType = Element | null;\r\n\r\nconst elmPrototype = Element.prototype;\r\n\r\n/**\r\n * Find all elements with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nconst find = (selector: string, elm?: InputElementType): Element[] => {\r\n  const arr: Array<Element> = [];\r\n  const rootElm = elm ? (isElement(elm) ? elm : null) : document;\r\n\r\n  return rootElm ? push(arr, rootElm.querySelectorAll(selector)) : arr;\r\n};\r\n\r\n/**\r\n * Find the first element with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nconst findFirst = (selector: string, elm?: InputElementType): OutputElementType => {\r\n  const rootElm = elm ? (isElement(elm) ? elm : null) : document;\r\n\r\n  return rootElm ? rootElm.querySelector(selector) : null;\r\n};\r\n\r\n/**\r\n * Determines whether the passed element is matching with the passed selector.\r\n * @param elm The element which has to be compared with the passed selector.\r\n * @param selector The selector which has to be compared with the passed element. Additional selectors: ':visible' and ':hidden'.\r\n */\r\nconst is = (elm: InputElementType, selector: string): boolean => {\r\n  if (isElement(elm)) {\r\n    /* istanbul ignore next */\r\n    // eslint-disable-next-line\r\n    // @ts-ignore\r\n    const fn: (...args: any) => boolean = elmPrototype.matches || elmPrototype.msMatchesSelector;\r\n    return fn.call(elm, selector);\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * Returns the children (no text-nodes or comments) of the passed element which are matching the passed selector. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the children shall be returned.\r\n * @param selector The selector which must match with the children elements.\r\n */\r\nconst children = (elm: InputElementType, selector?: string): ReadonlyArray<Element> => {\r\n  const childs: Array<Element> = [];\r\n\r\n  return isElement(elm)\r\n    ? push(\r\n        childs,\r\n        from(elm.children).filter((child) => (selector ? is(child, selector) : child))\r\n      )\r\n    : childs;\r\n};\r\n\r\n/**\r\n * Returns the childNodes (incl. text-nodes or comments etc.) of the passed element. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the childNodes shall be returned.\r\n */\r\nconst contents = (elm: InputElementType): ReadonlyArray<ChildNode> =>\r\n  elm ? from(elm.childNodes) : [];\r\n\r\n/**\r\n * Returns the parent element of the passed element, or null if the passed element is null.\r\n * @param elm The element of which the parent element shall be returned.\r\n */\r\nconst parent = (elm: InputElementType): OutputElementType => (elm ? elm.parentElement : null);\r\n\r\nconst closest = (elm: InputElementType, selector: string): OutputElementType => {\r\n  if (isElement(elm)) {\r\n    const closestFn = elmPrototype.closest;\r\n    if (closestFn) {\r\n      return closestFn.call(elm, selector);\r\n    }\r\n\r\n    do {\r\n      if (is(elm, selector)) {\r\n        return elm as Element;\r\n      }\r\n      elm = parent(elm);\r\n    } while (elm);\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\n/**\r\n * Determines whether the given element lies between two selectors in the DOM.\r\n * @param elm The element.\r\n * @param highBoundarySelector The high boundary selector.\r\n * @param deepBoundarySelector The deep boundary selector.\r\n */\r\nconst liesBetween = (\r\n  elm: InputElementType,\r\n  highBoundarySelector: string,\r\n  deepBoundarySelector: string\r\n): boolean => {\r\n  const closestHighBoundaryElm = elm && closest(elm, highBoundarySelector);\r\n  const closestDeepBoundaryElm = elm && findFirst(deepBoundarySelector, closestHighBoundaryElm);\r\n\r\n  return closestHighBoundaryElm && closestDeepBoundaryElm\r\n    ? closestHighBoundaryElm === elm ||\r\n        closestDeepBoundaryElm === elm ||\r\n        closest(closest(elm, deepBoundarySelector), highBoundarySelector) !== closestHighBoundaryElm\r\n    : false;\r\n};\r\n\r\nexport { find, findFirst, is, children, contents, parent, liesBetween };\r\n","import { isArrayLike } from 'support/utils/types';\r\nimport { each, from } from 'support/utils/array';\r\nimport { parent } from 'support/dom/traversal';\r\n\r\ntype NodeCollection = ArrayLike<Node> | Node | false | null | undefined;\r\n\r\n/**\r\n * Inserts Nodes before the given preferredAnchor element.\r\n * @param parentElm The parent of the preferredAnchor element or the element which shall be the parent of the inserted Nodes.\r\n * @param preferredAnchor The element before which the Nodes shall be inserted or null if the elements shall be appended at the end.\r\n * @param insertedElms The Nodes which shall be inserted.\r\n */\r\nconst before = (\r\n  parentElm: Node | false | null | undefined,\r\n  preferredAnchor: Node | false | null | undefined,\r\n  insertedElms: NodeCollection\r\n): void => {\r\n  if (insertedElms) {\r\n    let anchor: Node | false | null | undefined = preferredAnchor;\r\n    let fragment: DocumentFragment | Node | null | undefined;\r\n\r\n    // parent must be defined\r\n    if (parentElm) {\r\n      if (isArrayLike(insertedElms)) {\r\n        fragment = document.createDocumentFragment();\r\n\r\n        // append all insertedElms to the fragment and if one of these is the anchor, change the anchor\r\n        each(insertedElms, (insertedElm) => {\r\n          if (insertedElm === anchor) {\r\n            anchor = insertedElm.previousSibling;\r\n          }\r\n          fragment!.appendChild(insertedElm);\r\n        });\r\n      } else {\r\n        fragment = insertedElms;\r\n      }\r\n\r\n      // if the preferred anchor isn't null set it to a valid anchor\r\n      if (preferredAnchor) {\r\n        if (!anchor) {\r\n          anchor = parentElm.firstChild;\r\n        } else if (anchor !== preferredAnchor) {\r\n          anchor = anchor.nextSibling;\r\n        }\r\n      }\r\n\r\n      parentElm.insertBefore(fragment, anchor || null);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Appends the given children at the end of the given Node.\r\n * @param node The Node to which the children shall be appended.\r\n * @param children The Nodes which shall be appended.\r\n */\r\nexport const appendChildren = (\r\n  node: Node | false | null | undefined,\r\n  children: NodeCollection\r\n): void => {\r\n  before(node, null, children);\r\n};\r\n\r\n/**\r\n * Prepends the given children at the start of the given Node.\r\n * @param node The Node to which the children shall be prepended.\r\n * @param children The Nodes which shall be prepended.\r\n */\r\nexport const prependChildren = (\r\n  node: Node | false | null | undefined,\r\n  children: NodeCollection\r\n): void => {\r\n  before(node, node && node.firstChild, children);\r\n};\r\n\r\n/**\r\n * Inserts the given Nodes before the given Node.\r\n * @param node The Node before which the given Nodes shall be inserted.\r\n * @param insertedNodes The Nodes which shall be inserted.\r\n */\r\nexport const insertBefore = (\r\n  node: Node | false | null | undefined,\r\n  insertedNodes: NodeCollection\r\n): void => {\r\n  before(parent(node), node, insertedNodes);\r\n};\r\n\r\n/**\r\n * Inserts the given Nodes after the given Node.\r\n * @param node The Node after which the given Nodes shall be inserted.\r\n * @param insertedNodes The Nodes which shall be inserted.\r\n */\r\nexport const insertAfter = (\r\n  node: Node | false | null | undefined,\r\n  insertedNodes: NodeCollection\r\n): void => {\r\n  before(parent(node), node && node.nextSibling, insertedNodes);\r\n};\r\n\r\n/**\r\n * Removes the given Nodes from their parent.\r\n * @param nodes The Nodes which shall be removed.\r\n */\r\nexport const removeElements = (nodes: NodeCollection): void => {\r\n  if (isArrayLike(nodes)) {\r\n    each(from(nodes), (e) => removeElements(e));\r\n  } else if (nodes) {\r\n    const parentElm = parent(nodes);\r\n    if (parentElm) {\r\n      parentElm.removeChild(nodes);\r\n    }\r\n  }\r\n};\r\n","import { each } from 'support/utils/array';\r\nimport { attr } from 'support/dom/attribute';\r\nimport { contents } from 'support/dom/traversal';\r\nimport { removeElements } from 'support/dom/manipulation';\r\n\r\n/**\r\n * Creates a div DOM node.\r\n */\r\nexport const createDiv = (classNames?: string): HTMLDivElement => {\r\n  const div = document.createElement('div');\r\n  if (classNames) {\r\n    attr(div, 'class', classNames);\r\n  }\r\n  return div;\r\n};\r\n\r\n/**\r\n * Creates DOM nodes modeled after the passed html string and returns the root dom nodes as a array.\r\n * @param html The html string after which the DOM nodes shall be created.\r\n */\r\nexport const createDOM = (html: string): ReadonlyArray<Node> => {\r\n  const createdDiv = createDiv();\r\n  createdDiv.innerHTML = html.trim();\r\n\r\n  return each(contents(createdDiv), (elm) => removeElements(elm));\r\n};\r\n","import { each } from 'support/utils/array';\r\nimport { hasOwnProperty } from 'support/utils/object';\r\nimport { createDiv } from 'support/dom/create';\r\n\r\nconst firstLetterToUpper = (str: string): string => str.charAt(0).toUpperCase() + str.slice(1);\r\nconst getDummyStyle = (): CSSStyleDeclaration => createDiv().style;\r\n\r\n// https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix\r\n\r\nexport const cssPrefixes: ReadonlyArray<string> = ['-webkit-', '-moz-', '-o-', '-ms-'];\r\nexport const jsPrefixes: ReadonlyArray<string> = [\r\n  'WebKit',\r\n  'Moz',\r\n  'O',\r\n  'MS',\r\n  'webkit',\r\n  'moz',\r\n  'o',\r\n  'ms',\r\n];\r\n\r\nexport const jsCache: { [key: string]: any } = {};\r\nexport const cssCache: { [key: string]: string } = {};\r\n\r\n/**\r\n * Gets the name of the given CSS property with vendor prefix if it isn't supported without it, or and empty string if unsupported.\r\n * @param name The name of the CSS property which shall be get.\r\n */\r\nexport const cssProperty = (name: string): string => {\r\n  let result: string | undefined = cssCache[name];\r\n\r\n  if (hasOwnProperty(cssCache, name)) {\r\n    return result;\r\n  }\r\n\r\n  const uppercasedName: string = firstLetterToUpper(name);\r\n  const elmStyle: CSSStyleDeclaration = getDummyStyle();\r\n\r\n  each(cssPrefixes, (prefix: string) => {\r\n    const prefixWithoutDashes: string = prefix.replace(/-/g, '');\r\n    const resultPossibilities: Array<string> = [\r\n      name, // transition\r\n      prefix + name, // -webkit-transition\r\n      prefixWithoutDashes + uppercasedName, // webkitTransition\r\n      firstLetterToUpper(prefixWithoutDashes) + uppercasedName, // WebkitTransition\r\n    ];\r\n\r\n    // eslint-disable-next-line no-return-assign\r\n    return !(result = resultPossibilities.find(\r\n      (resultPossibility: string) => elmStyle[resultPossibility] !== undefined\r\n    ));\r\n  });\r\n\r\n  // eslint-disable-next-line no-return-assign\r\n  return (cssCache[name] = result || '');\r\n};\r\n\r\n/**\r\n * Get the name of the given CSS property value(s), with vendor prefix if it isn't supported without it, or an empty string if no value is supported.\r\n * @param property The CSS property to which the CSS property value(s) belong.\r\n * @param values The value(s) separated by spaces which shall be get.\r\n * @param suffix A suffix which is added to each value in case the value is a function or something else more advanced.\r\n */\r\nexport const cssPropertyValue = (property: string, values: string, suffix?: string): string => {\r\n  const name = `${property} ${values}`;\r\n  let result: string | undefined = cssCache[name];\r\n\r\n  if (hasOwnProperty(cssCache, name)) {\r\n    return result;\r\n  }\r\n\r\n  const dummyStyle: CSSStyleDeclaration = getDummyStyle();\r\n  const possbleValues: Array<string> = values.split(' ');\r\n  const preparedSuffix: string = suffix || '';\r\n  const cssPrefixesWithFirstEmpty = [''].concat(cssPrefixes);\r\n\r\n  each(possbleValues, (possibleValue: string) => {\r\n    each(cssPrefixesWithFirstEmpty, (prefix: string) => {\r\n      const prop = prefix + possibleValue;\r\n      dummyStyle.cssText = `${property}:${prop}${preparedSuffix}`;\r\n      if (dummyStyle.length) {\r\n        result = prop;\r\n        return false;\r\n      }\r\n    });\r\n    return !result;\r\n  });\r\n\r\n  // eslint-disable-next-line no-return-assign\r\n  return (cssCache[name] = result || '');\r\n};\r\n\r\n/**\r\n * Get the requested JS function, object or constructor with vendor prefix if it isn't supported without or undefined if unsupported.\r\n * @param name The name of the JS function, object or constructor.\r\n */\r\nexport const jsAPI = <T = any>(name: string): T | undefined => {\r\n  let result: any = jsCache[name] || window[name];\r\n\r\n  if (hasOwnProperty(jsCache, name)) {\r\n    return result;\r\n  }\r\n\r\n  each(jsPrefixes, (prefix: string) => {\r\n    result = result || window[prefix + firstLetterToUpper(name)];\r\n    return !result;\r\n  });\r\n\r\n  jsCache[name] = result;\r\n  return result;\r\n};\r\n","import { jsAPI } from 'support/compatibility/vendors';\r\n\r\nexport const MutationObserverConstructor = jsAPI<typeof MutationObserver>('MutationObserver');\r\nexport const IntersectionObserverConstructor = jsAPI<typeof IntersectionObserver>(\r\n  'IntersectionObserver'\r\n);\r\nexport const ResizeObserverConstructor = jsAPI<typeof ResizeObserver>('ResizeObserver');\r\nexport const cAF = jsAPI<typeof cancelAnimationFrame>('cancelAnimationFrame');\r\nexport const rAF = jsAPI<typeof requestAnimationFrame>('requestAnimationFrame');\r\n","import { isString } from 'support/utils/types';\r\nimport { each } from 'support/utils/array';\r\nimport { keys } from 'support/utils/object';\r\n\r\nconst rnothtmlwhite = /[^\\x20\\t\\r\\n\\f]+/g;\r\nconst classListAction = (\r\n  elm: Element | false | null | undefined,\r\n  className: string | false | null | undefined,\r\n  action: (elmClassList: DOMTokenList, clazz: string) => boolean | void\r\n): boolean => {\r\n  let clazz: string;\r\n  let i = 0;\r\n  let result = false;\r\n\r\n  if (elm && className && isString(className)) {\r\n    const classes: Array<string> = className.match(rnothtmlwhite) || [];\r\n    result = classes.length > 0;\r\n    while ((clazz = classes[i++])) {\r\n      result = !!action(elm.classList, clazz) && result;\r\n    }\r\n  }\r\n  return result;\r\n};\r\n\r\n/**\r\n * Check whether the given element has the given class name(s).\r\n * @param elm The element.\r\n * @param className The class name(s).\r\n */\r\nexport const hasClass = (\r\n  elm: Element | false | null | undefined,\r\n  className: string | false | null | undefined\r\n): boolean => classListAction(elm, className, (classList, clazz) => classList.contains(clazz));\r\n\r\n/**\r\n * Removes the given class name(s) from the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be removed. (separated by spaces)\r\n */\r\nexport const removeClass = (\r\n  elm: Element | false | null | undefined,\r\n  className: string | false | null | undefined\r\n): void => {\r\n  classListAction(elm, className, (classList, clazz) => classList.remove(clazz));\r\n};\r\n\r\n/**\r\n * Adds the given class name(s) to the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be added. (separated by spaces)\r\n * @returns A function which removes the added class name(s).\r\n */\r\nexport const addClass = (\r\n  elm: Element | false | null | undefined,\r\n  className: string | false | null | undefined\r\n): (() => void) => {\r\n  classListAction(elm, className, (classList, clazz) => classList.add(clazz));\r\n  return removeClass.bind(0, elm, className);\r\n};\r\n\r\n/**\r\n * Takes two className strings, compares them and returns the difference as array.\r\n * @param classNameA ClassName A.\r\n * @param classNameB ClassName B.\r\n */\r\nexport const diffClass = (\r\n  classNameA: string | null | undefined,\r\n  classNameB: string | null | undefined\r\n) => {\r\n  const classNameASplit = classNameA && classNameA.split(' ');\r\n  const classNameBSplit = classNameB && classNameB.split(' ');\r\n  const tempObj = {};\r\n\r\n  each(classNameASplit, (className) => {\r\n    tempObj[className] = 1;\r\n  });\r\n  each(classNameBSplit, (className) => {\r\n    if (tempObj[className]) {\r\n      delete tempObj[className];\r\n    } else {\r\n      tempObj[className] = 1;\r\n    }\r\n  });\r\n\r\n  return keys(tempObj);\r\n};\r\n","import { each } from 'support/utils/array';\r\nimport { WH, XY, TRBL } from 'support/dom';\r\nimport { PlainObject } from 'typings';\r\n\r\n/**\r\n * Compares two objects and returns true if all values of the passed prop names are identical, false otherwise or if one of the two object is falsy.\r\n * @param a Object a.\r\n * @param b Object b.\r\n * @param props The props which shall be compared.\r\n */\r\nexport const equal = <T extends PlainObject>(\r\n  a: T | undefined,\r\n  b: T | undefined,\r\n  props: Array<keyof T>,\r\n  propMutation?: ((value: any) => any) | null | false\r\n): boolean => {\r\n  if (a && b) {\r\n    let result = true;\r\n    each(props, (prop) => {\r\n      const compareA = propMutation ? propMutation(a[prop]) : a[prop];\r\n      const compareB = propMutation ? propMutation(b[prop]) : b[prop];\r\n      if (compareA !== compareB) {\r\n        result = false;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalWH = <T>(a?: WH<T>, b?: WH<T>) => equal<WH<T>>(a, b, ['w', 'h']);\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalXY = <T>(a?: XY<T>, b?: XY<T>) => equal<XY<T>>(a, b, ['x', 'y']);\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalTRBL = (a?: TRBL, b?: TRBL) => equal<TRBL>(a, b, ['t', 'r', 'b', 'l']);\r\n\r\n/**\r\n * Compares two DOM Rects for their equality of their width and height properties\r\n * Also returns false if one of the DOM Rects is undefined or null.\r\n * @param a DOM Rect a.\r\n * @param b DOM Rect b.\r\n * @param round Whether the values should be rounded.\r\n */\r\nexport const equalBCRWH = (a?: DOMRect, b?: DOMRect, round?: boolean) =>\r\n  equal<DOMRect>(a, b, ['width', 'height'], round && ((value) => Math.round(value)));\r\n","import { isNumber, isFunction } from 'support/utils/types';\r\nimport { from } from 'support/utils/array';\r\nimport { rAF, cAF } from 'support/compatibility/apis';\r\n\r\nconst clearTimeouts = (id: number | undefined) => {\r\n  id && window.clearTimeout(id);\r\n  id && cAF!(id);\r\n};\r\n\r\ntype DebounceTiming = number | false | null | undefined;\r\n\r\nexport interface DebounceOptions<FunctionToDebounce extends (...args: any) => any> {\r\n  /**\r\n   * The timeout for debouncing. If null, no debounce is applied.\r\n   */\r\n  _timeout?: DebounceTiming | (() => DebounceTiming);\r\n  /**\r\n   * A maximum amount of ms. before the function will be called even with debounce.\r\n   */\r\n  _maxDelay?: DebounceTiming | (() => DebounceTiming);\r\n  /**\r\n   * Function which merges parameters for each canceled debounce.\r\n   * If parameters can't be merged the function will return null, otherwise it returns the merged parameters.\r\n   */\r\n  _mergeParams?: (\r\n    prev: Parameters<FunctionToDebounce>,\r\n    curr: Parameters<FunctionToDebounce>\r\n  ) => Parameters<FunctionToDebounce> | false | null | undefined;\r\n}\r\n\r\nexport interface Debounced<FunctionToDebounce extends (...args: any) => any> {\r\n  (...args: Parameters<FunctionToDebounce>): ReturnType<FunctionToDebounce>;\r\n  _flush(): void;\r\n}\r\n\r\nexport const noop = () => {}; // eslint-disable-line\r\n\r\n/**\r\n * Debounces the given function either with a timeout or a animation frame.\r\n * @param functionToDebounce The function which shall be debounced.\r\n * @param options Options for debouncing.\r\n */\r\nexport const debounce = <FunctionToDebounce extends (...args: any) => any>(\r\n  functionToDebounce: FunctionToDebounce,\r\n  options?: DebounceOptions<FunctionToDebounce>\r\n): Debounced<FunctionToDebounce> => {\r\n  let timeoutId: number | undefined;\r\n  let maxTimeoutId: number | undefined;\r\n  let prevArguments: Parameters<FunctionToDebounce> | null | undefined;\r\n  let latestArguments: Parameters<FunctionToDebounce> | null | undefined;\r\n  const { _timeout, _maxDelay, _mergeParams } = options || {};\r\n  const setT = window.setTimeout;\r\n\r\n  const invokeFunctionToDebounce = function (args: IArguments) {\r\n    clearTimeouts(timeoutId);\r\n    clearTimeouts(maxTimeoutId);\r\n    maxTimeoutId = timeoutId = prevArguments = undefined;\r\n    // eslint-disable-next-line\r\n    // @ts-ignore\r\n    functionToDebounce.apply(this, args);\r\n  };\r\n\r\n  const mergeParms = (\r\n    curr: Parameters<FunctionToDebounce>\r\n  ): Parameters<FunctionToDebounce> | false | null | undefined =>\r\n    _mergeParams && prevArguments ? _mergeParams(prevArguments, curr) : curr;\r\n\r\n  const flush = () => {\r\n    /* istanbul ignore next */\r\n    if (timeoutId) {\r\n      invokeFunctionToDebounce(mergeParms(latestArguments!) || latestArguments!);\r\n    }\r\n  };\r\n\r\n  const debouncedFn = function () {\r\n    // eslint-disable-next-line prefer-rest-params\r\n    const args: Parameters<FunctionToDebounce> = from(arguments) as Parameters<FunctionToDebounce>;\r\n    const finalTimeout = isFunction(_timeout) ? _timeout() : _timeout;\r\n    const hasTimeout = isNumber(finalTimeout) && finalTimeout >= 0;\r\n\r\n    if (hasTimeout) {\r\n      const finalMaxWait = isFunction(_maxDelay) ? _maxDelay() : _maxDelay;\r\n      const hasMaxWait = isNumber(finalMaxWait) && finalMaxWait >= 0;\r\n      const setTimeoutFn = finalTimeout > 0 ? setT : rAF!;\r\n      const mergeParamsResult = mergeParms(args);\r\n      const invokedArgs = mergeParamsResult || args;\r\n      const boundInvoke = invokeFunctionToDebounce.bind(0, invokedArgs);\r\n\r\n      // if (!mergeParamsResult) {\r\n      //   invokeFunctionToDebounce(prevArguments || args);\r\n      // }\r\n\r\n      clearTimeouts(timeoutId);\r\n      // @ts-ignore\r\n      timeoutId = setTimeoutFn(boundInvoke, finalTimeout as number) as number;\r\n\r\n      if (hasMaxWait && !maxTimeoutId) {\r\n        maxTimeoutId = setT(flush, finalMaxWait as number);\r\n      }\r\n\r\n      prevArguments = latestArguments = invokedArgs;\r\n    } else {\r\n      invokeFunctionToDebounce(args);\r\n    }\r\n  };\r\n  debouncedFn._flush = flush;\r\n\r\n  return debouncedFn as Debounced<FunctionToDebounce>;\r\n};\r\n","import { style } from 'support/dom/style';\r\n\r\nexport interface WH<T = number> {\r\n  w: T;\r\n  h: T;\r\n}\r\n\r\nconst elementHasDimensions = (elm: HTMLElement): boolean =>\r\n  !!(elm.offsetWidth || elm.offsetHeight || elm.getClientRects().length);\r\nconst zeroObj: WH = {\r\n  w: 0,\r\n  h: 0,\r\n};\r\n\r\n/**\r\n * Returns the window inner- width and height.\r\n */\r\nexport const windowSize = (): WH => ({\r\n  w: window.innerWidth,\r\n  h: window.innerHeight,\r\n});\r\n\r\n/**\r\n * Returns the scroll- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the scroll- width and height shall be returned.\r\n */\r\nexport const offsetSize = (elm: HTMLElement | null | undefined): WH =>\r\n  elm\r\n    ? {\r\n        w: elm.offsetWidth,\r\n        h: elm.offsetHeight,\r\n      }\r\n    : zeroObj;\r\n\r\n/**\r\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the client- width and height shall be returned.\r\n */\r\nexport const clientSize = (elm: HTMLElement | false | null | undefined): WH =>\r\n  elm\r\n    ? {\r\n        w: elm.clientWidth,\r\n        h: elm.clientHeight,\r\n      }\r\n    : zeroObj;\r\n\r\n/**\r\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the client- width and height shall be returned.\r\n */\r\nexport const scrollSize = (elm: HTMLElement | false | null | undefined): WH =>\r\n  elm\r\n    ? {\r\n        w: elm.scrollWidth,\r\n        h: elm.scrollHeight,\r\n      }\r\n    : zeroObj;\r\n\r\n/**\r\n * Returns the fractional- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the fractional- width and height shall be returned.\r\n */\r\nexport const fractionalSize = (elm: HTMLElement | false | null | undefined): WH => {\r\n  const cssHeight = parseFloat(style(elm, 'height')) || 0;\r\n  const cssWidth = parseFloat(style(elm, 'height')) || 0;\r\n  return {\r\n    w: cssWidth - Math.round(cssWidth),\r\n    h: cssHeight - Math.round(cssHeight),\r\n  };\r\n};\r\n\r\n/**\r\n * Returns the BoundingClientRect of the passed element.\r\n * @param elm The element of which the BoundingClientRect shall be returned.\r\n */\r\nexport const getBoundingClientRect = (elm: HTMLElement): DOMRect => elm.getBoundingClientRect();\r\n\r\n/**\r\n * Determines whether the passed element has any dimensions.\r\n * @param elm The element.\r\n */\r\nexport const hasDimensions = (elm: HTMLElement | false | null | undefined): boolean =>\r\n  elm ? elementHasDimensions(elm as HTMLElement) : false;\r\n","import { isUndefined } from 'support/utils/types';\r\nimport { each, push, runEachAndClear } from 'support/utils/array';\r\n\r\nlet passiveEventsSupport: boolean;\r\nconst supportPassiveEvents = (): boolean => {\r\n  if (isUndefined(passiveEventsSupport)) {\r\n    passiveEventsSupport = false;\r\n    try {\r\n      /* eslint-disable */\r\n      // @ts-ignore\r\n      window.addEventListener(\r\n        'test',\r\n        null,\r\n        Object.defineProperty({}, 'passive', {\r\n          get: function () {\r\n            passiveEventsSupport = true;\r\n          },\r\n        })\r\n      );\r\n      /* eslint-enable */\r\n    } catch (e) {}\r\n  }\r\n  return passiveEventsSupport;\r\n};\r\nconst splitEventNames = (eventNames: string) => eventNames.split(' ');\r\n\r\nexport interface OnOptions {\r\n  _capture?: boolean;\r\n  _passive?: boolean;\r\n  _once?: boolean;\r\n}\r\n\r\n/**\r\n * Removes the passed event listener for the passed events with the passed options.\r\n * @param target The element from which the listener shall be removed.\r\n * @param eventNames The eventsnames for which the listener shall be removed.\r\n * @param listener The listener which shall be removed.\r\n * @param capture The options of the removed listener.\r\n */\r\nexport const off = <T extends Event = Event>(\r\n  target: EventTarget,\r\n  eventNames: string,\r\n  listener: (event: T) => any,\r\n  capture?: boolean\r\n): void => {\r\n  each(splitEventNames(eventNames), (eventName) => {\r\n    target.removeEventListener(eventName, listener as EventListener, capture);\r\n  });\r\n};\r\n\r\n/**\r\n * Adds the passed event listener for the passed eventnames with the passed options.\r\n * @param target The element to which the listener shall be added.\r\n * @param eventNames The eventsnames for which the listener shall be called.\r\n * @param listener The listener which is called on the eventnames.\r\n * @param options The options of the added listener.\r\n */\r\nexport const on = <T extends Event = Event>(\r\n  target: EventTarget,\r\n  eventNames: string,\r\n  listener: (event: T) => any,\r\n  options?: OnOptions\r\n): (() => void) => {\r\n  const doSupportPassiveEvents = supportPassiveEvents();\r\n  const passive = (doSupportPassiveEvents && options && options._passive) || false;\r\n  const capture = (options && options._capture) || false;\r\n  const once = (options && options._once) || false;\r\n  const offListeners: (() => void)[] = [];\r\n  const nativeOptions: AddEventListenerOptions | boolean = doSupportPassiveEvents\r\n    ? {\r\n        passive,\r\n        capture,\r\n      }\r\n    : capture;\r\n\r\n  each(splitEventNames(eventNames), (eventName) => {\r\n    const finalListener = (\r\n      once\r\n        ? (evt: T) => {\r\n            target.removeEventListener(eventName, finalListener, capture);\r\n            listener && listener(evt);\r\n          }\r\n        : listener\r\n    ) as EventListener;\r\n\r\n    push(offListeners, off.bind(null, target, eventName, finalListener, capture));\r\n    target.addEventListener(eventName, finalListener, nativeOptions);\r\n  });\r\n\r\n  return runEachAndClear.bind(0, offListeners);\r\n};\r\n\r\n/**\r\n * Shorthand for the stopPropagation event Method.\r\n * @param evt The event of which the stopPropagation method shall be called.\r\n */\r\nexport const stopPropagation = (evt: Event): void => evt.stopPropagation();\r\n\r\n/**\r\n * Shorthand for the preventDefault event Method.\r\n * @param evt The event of which the preventDefault method shall be called.\r\n */\r\nexport const preventDefault = (evt: Event): void => evt.preventDefault();\r\n\r\n/**\r\n * Shorthand for the stopPropagation and preventDefault event Method.\r\n * @param evt The event of which the stopPropagation and preventDefault methods shall be called.\r\n */\r\nexport const stopAndPrevent = (evt: Event): void =>\r\n  (stopPropagation(evt) as undefined) || (preventDefault(evt) as undefined);\r\n","import { getBoundingClientRect } from 'support/dom/dimensions';\r\n\r\nexport interface XY<T = number> {\r\n  x: T;\r\n  y: T;\r\n}\r\n\r\nconst zeroObj: XY = {\r\n  x: 0,\r\n  y: 0,\r\n};\r\n\r\n/**\r\n * Returns the offset- left and top coordinates of the passed element relative to the document. If the element is null the top and left values are 0.\r\n * @param elm The element of which the offset- top and left coordinates shall be returned.\r\n */\r\nexport const absoluteCoordinates = (elm: HTMLElement | null | undefined): XY => {\r\n  const rect = elm ? getBoundingClientRect(elm) : 0;\r\n  return rect\r\n    ? {\r\n        x: rect.left + window.pageYOffset,\r\n        y: rect.top + window.pageXOffset,\r\n      }\r\n    : zeroObj;\r\n};\r\n\r\n/**\r\n * Returns the offset- left and top coordinates of the passed element. If the element is null the top and left values are 0.\r\n * @param elm The element of which the offset- top and left coordinates shall be returned.\r\n */\r\nexport const offsetCoordinates = (elm: HTMLElement | null | undefined): XY =>\r\n  elm\r\n    ? {\r\n        x: elm.offsetLeft,\r\n        y: elm.offsetTop,\r\n      }\r\n    : zeroObj;\r\n","import { isArray } from 'support/utils/types';\r\nimport { keys } from 'support/utils/object';\r\nimport { each, from, isEmptyArray } from 'support/utils/array';\r\n\r\nexport type EventListener<\r\n  EventMap extends Record<string, any[]>,\r\n  Name extends keyof EventMap = keyof EventMap\r\n> = (...args: EventMap[Name]) => void;\r\n\r\nexport type InitialEventListeners<EventMap extends Record<string, any[]>> = {\r\n  [K in keyof EventMap]?: EventListener<EventMap> | EventListener<EventMap>[];\r\n};\r\n\r\nconst manageListener = <EventMap extends Record<string, any[]>>(\r\n  callback: (listener?: EventListener<EventMap>) => void,\r\n  listener?: EventListener<EventMap> | EventListener<EventMap>[]\r\n) => {\r\n  each(isArray(listener) ? listener : [listener], callback);\r\n};\r\n\r\nexport const createEventListenerHub = <EventMap extends Record<string, any[]>>(\r\n  initialEventListeners?: InitialEventListeners<EventMap>\r\n) => {\r\n  type EventListener<Name extends keyof EventMap = keyof EventMap> = (\r\n    ...args: EventMap[Name]\r\n  ) => void;\r\n\r\n  const events = new Map<keyof EventMap, Set<EventListener>>();\r\n\r\n  function removeEvent<Name extends keyof EventMap>(\r\n    name?: Name,\r\n    listener?: EventListener<Name>\r\n  ): void;\r\n  function removeEvent<Name extends keyof EventMap>(\r\n    name?: Name,\r\n    listener?: EventListener<Name>[]\r\n  ): void;\r\n  function removeEvent<Name extends keyof EventMap>(\r\n    name?: Name,\r\n    listener?: EventListener<Name> | EventListener<Name>[]\r\n  ): void {\r\n    if (name) {\r\n      const eventSet = events.get(name);\r\n      manageListener((currListener) => {\r\n        if (eventSet) {\r\n          eventSet[currListener ? 'delete' : 'clear'](currListener!);\r\n        }\r\n      }, listener as any);\r\n    } else {\r\n      events.forEach((eventSet) => {\r\n        eventSet.clear();\r\n      });\r\n      events.clear();\r\n    }\r\n  }\r\n\r\n  function addEvent<Name extends keyof EventMap>(\r\n    name: Name,\r\n    listener: EventListener<Name>\r\n  ): () => void;\r\n  function addEvent<Name extends keyof EventMap>(\r\n    name: Name,\r\n    listener: EventListener<Name>[]\r\n  ): () => void;\r\n  function addEvent<Name extends keyof EventMap>(\r\n    name: Name,\r\n    listener: EventListener<Name> | EventListener<Name>[]\r\n  ): () => void {\r\n    const eventSet = events.get(name) || new Set();\r\n    events.set(name, eventSet);\r\n\r\n    manageListener((currListener) => {\r\n      currListener && eventSet.add(currListener);\r\n    }, listener as any);\r\n\r\n    return removeEvent.bind(0, name as any, listener as any);\r\n  }\r\n\r\n  function triggerEvent<Name extends keyof EventMap>(name: Name, args?: EventMap[Name]): void {\r\n    const eventSet = events.get(name);\r\n\r\n    each(from(eventSet), (event) => {\r\n      if (args && !isEmptyArray(args)) {\r\n        (event as (...args: EventMap[keyof EventMap]) => void).apply(0, args as any);\r\n      } else {\r\n        (event as () => void)();\r\n      }\r\n    });\r\n  }\r\n\r\n  const initialListenerKeys = keys(initialEventListeners) as Extract<keyof EventMap, string>[];\r\n  each(initialListenerKeys, (key) => {\r\n    addEvent(key, initialEventListeners![key] as any);\r\n  });\r\n\r\n  return [addEvent, removeEvent, triggerEvent] as [\r\n    typeof addEvent,\r\n    typeof removeEvent,\r\n    typeof triggerEvent\r\n  ];\r\n};\r\n","import { assignDeep, hasOwnProperty } from 'support';\r\nimport type { Options, ReadonlyOSOptions } from 'options';\r\nimport type { PartialOptions } from 'typings';\r\n\r\nexport type SetupElements<T extends Record<string, any>> = [elements: T, destroy: () => void];\r\n\r\nexport type SetupUpdate<T = void> = (changedOptions: PartialOptions<Options>, force?: boolean) => T;\r\n\r\nexport type SetupUpdateCheckOption = <T>(path: string) => [value: T, changed: boolean];\r\n\r\nexport type SetupUpdateSegment<Hints extends Record<string, any>> = (\r\n  updateHints: Hints,\r\n  checkOption: SetupUpdateCheckOption,\r\n  force: boolean\r\n) => Partial<Hints> | void;\r\n\r\nexport type SetupState<T extends Record<string, any>> = [\r\n  get: () => T,\r\n  set: (newState: Partial<T>) => void\r\n];\r\n\r\nexport type Setup<DynamicState, StaticState extends Record<string, any> = Record<string, any>> = [\r\n  update: SetupUpdate,\r\n  state: (() => DynamicState) & StaticState,\r\n  destroy: () => void\r\n];\r\n\r\nconst getPropByPath = <T>(obj: any, path: string): T =>\r\n  obj\r\n    ? path.split('.').reduce((o, prop) => (o && hasOwnProperty(o, prop) ? o[prop] : undefined), obj)\r\n    : undefined;\r\n\r\nexport const createOptionCheck =\r\n  (\r\n    options: ReadonlyOSOptions,\r\n    changedOptions: PartialOptions<Options>,\r\n    force?: boolean\r\n  ): SetupUpdateCheckOption =>\r\n  (path: string) =>\r\n    [getPropByPath(options, path), force || getPropByPath(changedOptions, path) !== undefined];\r\n\r\nexport const createState = <S>(initialState: S): SetupState<S> => {\r\n  let state: S = initialState;\r\n  return [\r\n    () => state,\r\n    (newState: Partial<S>) => {\r\n      state = assignDeep({}, state, newState);\r\n    },\r\n  ];\r\n};\r\n","export const classNameEnvironment = 'os-environment';\r\nexport const classNameEnvironmentFlexboxGlue = `${classNameEnvironment}-flexbox-glue`;\r\nexport const classNameEnvironmentFlexboxGlueMax = `${classNameEnvironmentFlexboxGlue}-max`;\r\n\r\nexport const dataAttributeHost = 'data-overlayscrollbars';\r\nexport const dataAttributeHostOverflowX = `${dataAttributeHost}-overflow-x`;\r\nexport const dataAttributeHostOverflowY = `${dataAttributeHost}-overflow-y`;\r\nexport const dataValueHostOverflowVisible = 'overflowVisible';\r\nexport const dataValueHostViewportScrollbarStyling = 'viewportStyled';\r\nexport const classNamePadding = 'os-padding';\r\nexport const classNameViewport = 'os-viewport';\r\nexport const classNameViewportArrange = `${classNameViewport}-arrange`;\r\nexport const classNameContent = 'os-content';\r\nexport const classNameViewportScrollbarStyling = `${classNameViewport}-scrollbar-styled`;\r\nexport const classNameOverflowVisible = `os-overflow-visible`;\r\n\r\nexport const classNameSizeObserver = 'os-size-observer';\r\nexport const classNameSizeObserverAppear = `${classNameSizeObserver}-appear`;\r\nexport const classNameSizeObserverListener = `${classNameSizeObserver}-listener`;\r\nexport const classNameSizeObserverListenerScroll = `${classNameSizeObserverListener}-scroll`;\r\nexport const classNameSizeObserverListenerItem = `${classNameSizeObserverListener}-item`;\r\nexport const classNameSizeObserverListenerItemFinal = `${classNameSizeObserverListenerItem}-final`;\r\n\r\nexport const classNameTrinsicObserver = 'os-trinsic-observer';\r\n\r\nexport const classNameScrollbar = 'os-scrollbar';\r\nexport const classNameScrollbarHorizontal = `${classNameScrollbar}-horizontal`;\r\nexport const classNameScrollbarVertical = `${classNameScrollbar}-vertical`;\r\nexport const classNameScrollbarTrack = 'os-scrollbar-track';\r\nexport const classNameScrollbarHandle = 'os-scrollbar-handle';\r\n","import { assignDeep, each, isObject, keys, isArray, hasOwnProperty, isFunction } from 'support';\r\nimport { PartialOptions, ReadonlyOptions } from 'typings';\r\n\r\nconst opsStringify = (value: any) =>\r\n  JSON.stringify(value, (_, val) => {\r\n    if (isFunction(val)) {\r\n      throw new Error();\r\n    }\r\n    return val;\r\n  });\r\n\r\nexport type ResizeBehavior = 'none' | 'both' | 'horizontal' | 'vertical';\r\n\r\nexport type OverflowBehavior =\r\n  | 'hidden'\r\n  | 'scroll'\r\n  | 'visible'\r\n  | 'visible-hidden'\r\n  | 'visible-scroll';\r\n\r\nexport type VisibilityBehavior = 'visible' | 'hidden' | 'auto';\r\n\r\nexport type AutoHideBehavior = 'never' | 'scroll' | 'leave' | 'move';\r\n\r\nexport type ScrollBehavior = 'always' | 'ifneeded' | 'never';\r\n\r\nexport type BasicEventCallback = (this: any) => void;\r\n\r\nexport type ScrollEventCallback = (this: any, args?: UIEvent) => void;\r\n\r\nexport type OverflowChangedCallback = (this: any, args?: OverflowChangedArgs) => void;\r\n\r\nexport type OverflowAmountChangedCallback = (this: any, args?: OverflowAmountChangedArgs) => void;\r\n\r\nexport type DirectionChangedCallback = (this: any, args?: DirectionChangedArgs) => void;\r\n\r\nexport type SizeChangedCallback = (this: any, args?: SizeChangedArgs) => void;\r\n\r\nexport type UpdatedCallback = (this: any, args?: UpdatedArgs) => void;\r\n\r\nexport interface Options {\r\n  paddingAbsolute: boolean;\r\n  updating: {\r\n    elementEvents: Array<[elementSelector: string, eventNames: string]> | null;\r\n    attributes: string[] | null;\r\n    debounce: [timeout: number, maxWait: number] | number | null; // (if tuple: [timeout: 0, maxWait: 33], if number: [timeout: number, maxWait: false]) debounce for content Changes\r\n    ignoreMutation: ((mutation: MutationRecord) => any) | null;\r\n  };\r\n  overflow: {\r\n    x: OverflowBehavior;\r\n    y: OverflowBehavior;\r\n  };\r\n  scrollbars: {\r\n    visibility: VisibilityBehavior;\r\n    autoHide: AutoHideBehavior;\r\n    autoHideDelay: number;\r\n    dragScroll: boolean;\r\n    clickScroll: boolean;\r\n    touch: boolean;\r\n  };\r\n  nativeScrollbarsOverlaid: {\r\n    show: boolean;\r\n    initialize: boolean;\r\n  };\r\n}\r\n\r\nexport type ReadonlyOSOptions = ReadonlyOptions<Options>;\r\n\r\nexport interface OverflowChangedArgs {\r\n  x: boolean;\r\n  y: boolean;\r\n  xScrollable: boolean;\r\n  yScrollable: boolean;\r\n  clipped: boolean;\r\n}\r\n\r\nexport interface OverflowAmountChangedArgs {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport interface DirectionChangedArgs {\r\n  isRTL: number;\r\n  dir: string;\r\n}\r\n\r\nexport interface SizeChangedArgs {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport interface UpdatedArgs {\r\n  forced: boolean;\r\n}\r\n\r\nexport const defaultOptions: Options = {\r\n  // resize: 'none', // none || both  || horizontal || vertical || n || b || h || v\r\n  paddingAbsolute: false, // true || false\r\n  updating: {\r\n    elementEvents: [['img', 'load']], // array of tuples || null\r\n    debounce: [0, 33], // number || number array || null\r\n    attributes: null, // string array || null\r\n    ignoreMutation: null, // () => any || null\r\n  },\r\n  overflow: {\r\n    x: 'scroll', // visible-hidden  || visible-scroll || hidden || scroll || v-h || v-s || h || s\r\n    y: 'scroll', // visible-hidden  || visible-scroll || hidden || scroll || v-h || v-s || h || s\r\n  },\r\n  nativeScrollbarsOverlaid: {\r\n    show: false, // true || false\r\n    initialize: false, // true || false\r\n  },\r\n  scrollbars: {\r\n    visibility: 'auto', // visible || hidden || auto || v || h || a\r\n    autoHide: 'never', // never || scroll || leave || move || n || s || l || m\r\n    autoHideDelay: 800, // number\r\n    dragScroll: true, // true || false\r\n    clickScroll: false, // true || false\r\n    touch: true, // true || false\r\n  },\r\n  /*\r\n  textarea: {\r\n    dynWidth: false, // true || false\r\n    dynHeight: false, // true || false\r\n    inheritedAttrs: ['style', 'class'], // string || array || null\r\n  },\r\n  */\r\n};\r\n\r\nexport const getOptionsDiff = <T>(\r\n  currOptions: T,\r\n  newOptions: PartialOptions<T>\r\n): PartialOptions<T> => {\r\n  const diff: PartialOptions<T> = {};\r\n  const optionsKeys = keys(newOptions).concat(keys(currOptions));\r\n\r\n  each(optionsKeys, (optionKey) => {\r\n    const currOptionValue = currOptions[optionKey];\r\n    const newOptionValue = newOptions[optionKey];\r\n\r\n    if (isObject(currOptionValue) && isObject(newOptionValue)) {\r\n      assignDeep((diff[optionKey] = {}), getOptionsDiff(currOptionValue, newOptionValue));\r\n    } else if (hasOwnProperty(newOptions, optionKey) && newOptionValue !== currOptionValue) {\r\n      let isDiff = true;\r\n\r\n      if (isArray(currOptionValue) || isArray(newOptionValue)) {\r\n        try {\r\n          if (opsStringify(currOptionValue) === opsStringify(newOptionValue)) {\r\n            isDiff = false;\r\n          }\r\n        } catch {}\r\n      }\r\n\r\n      if (isDiff) {\r\n        diff[optionKey] = newOptionValue;\r\n      }\r\n    }\r\n  });\r\n\r\n  return diff;\r\n};\r\n","import {\r\n  createDOM,\r\n  addClass,\r\n  style,\r\n  appendChildren,\r\n  fractionalSize,\r\n  clientSize,\r\n  absoluteCoordinates,\r\n  offsetSize,\r\n  scrollLeft,\r\n  XY,\r\n  removeAttr,\r\n  removeElements,\r\n  windowSize,\r\n  equalBCRWH,\r\n  getBoundingClientRect,\r\n  assignDeep,\r\n  cssProperty,\r\n  createCache,\r\n  equalXY,\r\n  createEventListenerHub,\r\n  EventListener,\r\n} from 'support';\r\nimport {\r\n  classNameEnvironment,\r\n  classNameEnvironmentFlexboxGlue,\r\n  classNameEnvironmentFlexboxGlueMax,\r\n  classNameViewportScrollbarStyling,\r\n} from 'classnames';\r\nimport { Options, defaultOptions } from 'options';\r\nimport { PartialOptions } from 'typings';\r\nimport { InitializationStrategy } from 'initialization';\r\n\r\ntype EnvironmentEventMap = {\r\n  _: [];\r\n};\r\n\r\nexport interface InternalEnvironment {\r\n  readonly _nativeScrollbarsSize: XY;\r\n  readonly _nativeScrollbarsOverlaid: XY<boolean>;\r\n  readonly _nativeScrollbarsHiding: boolean;\r\n  readonly _rtlScrollBehavior: { n: boolean; i: boolean };\r\n  readonly _flexboxGlue: boolean;\r\n  readonly _cssCustomProperties: boolean;\r\n  readonly _defaultInitializationStrategy: InitializationStrategy;\r\n  readonly _defaultDefaultOptions: Options;\r\n  _addListener(listener: EventListener<EnvironmentEventMap, '_'>): () => void;\r\n  _getInitializationStrategy(): InitializationStrategy;\r\n  _setInitializationStrategy(newInitializationStrategy: Partial<InitializationStrategy>): void;\r\n  _getDefaultOptions(): Options;\r\n  _setDefaultOptions(newDefaultOptions: PartialOptions<Options>): void;\r\n}\r\n\r\nlet environmentInstance: InternalEnvironment;\r\nconst { abs, round } = Math;\r\n\r\nconst diffBiggerThanOne = (valOne: number, valTwo: number): boolean => {\r\n  const absValOne = abs(valOne);\r\n  const absValTwo = abs(valTwo);\r\n  return !(absValOne === absValTwo || absValOne + 1 === absValTwo || absValOne - 1 === absValTwo);\r\n};\r\n\r\nconst getNativeScrollbarSize = (\r\n  body: HTMLElement,\r\n  measureElm: HTMLElement,\r\n  measureElmChild: HTMLElement\r\n): XY => {\r\n  appendChildren(body, measureElm);\r\n\r\n  const cSize = clientSize(measureElm);\r\n  const oSize = offsetSize(measureElm);\r\n  const fSize = fractionalSize(measureElmChild);\r\n\r\n  return {\r\n    x: oSize.h - cSize.h + fSize.h,\r\n    y: oSize.w - cSize.w + fSize.w,\r\n  };\r\n};\r\n\r\nconst getNativeScrollbarsHiding = (testElm: HTMLElement): boolean => {\r\n  let result = false;\r\n  const revertClass = addClass(testElm, classNameViewportScrollbarStyling);\r\n  try {\r\n    result =\r\n      style(testElm, cssProperty('scrollbar-width')) === 'none' ||\r\n      window.getComputedStyle(testElm, '::-webkit-scrollbar').getPropertyValue('display') ===\r\n        'none';\r\n  } catch (ex) {}\r\n  revertClass();\r\n  return result;\r\n};\r\n\r\nconst getRtlScrollBehavior = (\r\n  parentElm: HTMLElement,\r\n  childElm: HTMLElement\r\n): { i: boolean; n: boolean } => {\r\n  const strHidden = 'hidden';\r\n  style(parentElm, { overflowX: strHidden, overflowY: strHidden, direction: 'rtl' });\r\n  scrollLeft(parentElm, 0);\r\n\r\n  const parentOffset = absoluteCoordinates(parentElm);\r\n  const childOffset = absoluteCoordinates(childElm);\r\n  scrollLeft(parentElm, -999); // https://github.com/KingSora/OverlayScrollbars/issues/187\r\n  const childOffsetAfterScroll = absoluteCoordinates(childElm);\r\n  return {\r\n    /**\r\n     * origin direction = determines if the zero scroll position is on the left or right side\r\n     * 'i' means 'invert' (i === true means that the axis must be inverted to be correct)\r\n     * true = on the left side\r\n     * false = on the right side\r\n     */\r\n    i: parentOffset.x === childOffset.x,\r\n    /**\r\n     * negative = determines if the maximum scroll is positive or negative\r\n     * 'n' means 'negate' (n === true means that the axis must be negated to be correct)\r\n     * true = negative\r\n     * false = positive\r\n     */\r\n    n: childOffset.x !== childOffsetAfterScroll.x,\r\n  };\r\n};\r\n\r\nconst getFlexboxGlue = (parentElm: HTMLElement, childElm: HTMLElement): boolean => {\r\n  const revertFbxGlue = addClass(parentElm, classNameEnvironmentFlexboxGlue);\r\n  const minOffsetsizeParent = getBoundingClientRect(parentElm);\r\n  const minOffsetsize = getBoundingClientRect(childElm);\r\n  const supportsMin = equalBCRWH(minOffsetsize, minOffsetsizeParent, true);\r\n\r\n  const revertFbxGlueMax = addClass(parentElm, classNameEnvironmentFlexboxGlueMax);\r\n  const maxOffsetsizeParent = getBoundingClientRect(parentElm);\r\n  const maxOffsetsize = getBoundingClientRect(childElm);\r\n  const supportsMax = equalBCRWH(maxOffsetsize, maxOffsetsizeParent, true);\r\n\r\n  revertFbxGlue();\r\n  revertFbxGlueMax();\r\n\r\n  return supportsMin && supportsMax;\r\n};\r\n\r\nconst getWindowDPR = (): number => {\r\n  // eslint-disable-next-line\r\n  // @ts-ignore\r\n  const dDPI = window.screen.deviceXDPI || 0;\r\n  // eslint-disable-next-line\r\n  // @ts-ignore\r\n  const sDPI = window.screen.logicalXDPI || 1;\r\n  return window.devicePixelRatio || dDPI / sDPI;\r\n};\r\n\r\nconst createEnvironment = (): InternalEnvironment => {\r\n  const { body } = document;\r\n  const envDOM = createDOM(`<div class=\"${classNameEnvironment}\"><div></div></div>`);\r\n  const envElm = envDOM[0] as HTMLElement;\r\n  const envChildElm = envElm.firstChild as HTMLElement;\r\n  const [addEvent, , triggerEvent] = createEventListenerHub<EnvironmentEventMap>();\r\n  const [updateNativeScrollbarSizeCache, getNativeScrollbarSizeCache] = createCache({\r\n    _initialValue: getNativeScrollbarSize(body, envElm, envChildElm),\r\n    _equal: equalXY,\r\n  });\r\n  const [nativeScrollbarsSize] = getNativeScrollbarSizeCache();\r\n  const nativeScrollbarsHiding = getNativeScrollbarsHiding(envElm);\r\n  const nativeScrollbarsOverlaid = {\r\n    x: nativeScrollbarsSize.x === 0,\r\n    y: nativeScrollbarsSize.y === 0,\r\n  };\r\n  const initializationStrategy = {\r\n    _padding: !nativeScrollbarsHiding,\r\n    _content: false,\r\n  };\r\n  const defaultDefaultOptions = assignDeep({}, defaultOptions);\r\n\r\n  const env: InternalEnvironment = {\r\n    _nativeScrollbarsSize: nativeScrollbarsSize,\r\n    _nativeScrollbarsOverlaid: nativeScrollbarsOverlaid,\r\n    _nativeScrollbarsHiding: nativeScrollbarsHiding,\r\n    _cssCustomProperties: style(envElm, 'zIndex') === '-1',\r\n    _rtlScrollBehavior: getRtlScrollBehavior(envElm, envChildElm),\r\n    _flexboxGlue: getFlexboxGlue(envElm, envChildElm),\r\n    _addListener: (listener) => addEvent('_', listener),\r\n    _getInitializationStrategy: assignDeep<InitializationStrategy, InitializationStrategy>.bind(\r\n      0,\r\n      {} as InitializationStrategy,\r\n      initializationStrategy\r\n    ),\r\n    _setInitializationStrategy(newInitializationStrategy) {\r\n      assignDeep(initializationStrategy, newInitializationStrategy);\r\n    },\r\n    _getDefaultOptions: assignDeep<Options, Options>.bind(0, {} as Options, defaultDefaultOptions),\r\n    _setDefaultOptions(newDefaultOptions) {\r\n      assignDeep(defaultDefaultOptions, newDefaultOptions);\r\n    },\r\n    _defaultInitializationStrategy: assignDeep({}, initializationStrategy),\r\n    _defaultDefaultOptions: assignDeep({}, defaultDefaultOptions),\r\n  };\r\n\r\n  removeAttr(envElm, 'style');\r\n  removeElements(envElm);\r\n\r\n  if (!nativeScrollbarsHiding && (!nativeScrollbarsOverlaid.x || !nativeScrollbarsOverlaid.y)) {\r\n    let size = windowSize();\r\n    let dpr = getWindowDPR();\r\n\r\n    window.addEventListener('resize', () => {\r\n      const sizeNew = windowSize();\r\n      const deltaSize = {\r\n        w: sizeNew.w - size.w,\r\n        h: sizeNew.h - size.h,\r\n      };\r\n\r\n      if (deltaSize.w === 0 && deltaSize.h === 0) return;\r\n\r\n      const deltaAbsSize = {\r\n        w: abs(deltaSize.w),\r\n        h: abs(deltaSize.h),\r\n      };\r\n      const deltaAbsRatio = {\r\n        w: abs(round(sizeNew.w / (size.w / 100.0))),\r\n        h: abs(round(sizeNew.h / (size.h / 100.0))),\r\n      };\r\n      const dprNew = getWindowDPR();\r\n      const deltaIsBigger = deltaAbsSize.w > 2 && deltaAbsSize.h > 2;\r\n      const difference = !diffBiggerThanOne(deltaAbsRatio.w, deltaAbsRatio.h);\r\n      const dprChanged = dprNew !== dpr && dpr > 0;\r\n      const isZoom = deltaIsBigger && difference && dprChanged;\r\n\r\n      if (isZoom) {\r\n        const [scrollbarSize, scrollbarSizeChanged] = updateNativeScrollbarSizeCache(\r\n          getNativeScrollbarSize(body, envElm, envChildElm)\r\n        );\r\n\r\n        assignDeep(environmentInstance._nativeScrollbarsSize, scrollbarSize); // keep the object same!\r\n        removeElements(envElm);\r\n\r\n        if (scrollbarSizeChanged) {\r\n          triggerEvent('_');\r\n        }\r\n      }\r\n\r\n      size = sizeNew;\r\n      dpr = dprNew;\r\n    });\r\n  }\r\n\r\n  return env;\r\n};\r\n\r\nconst getEnvironment = (): InternalEnvironment => {\r\n  if (!environmentInstance) {\r\n    environmentInstance = createEnvironment();\r\n  }\r\n  return environmentInstance;\r\n};\r\n\r\nexport { getEnvironment };\r\n","import { assignDeep, each, isArray, keys } from 'support';\r\nimport { OverlayScrollbars, OverlayScrollbarsStatic } from 'overlayscrollbars';\r\n\r\nexport type PluginInstance =\r\n  | Record<string, unknown>\r\n  | ((staticObj: OverlayScrollbarsStatic, instanceObj: OverlayScrollbars) => void);\r\nexport type Plugin<T extends PluginInstance = PluginInstance> = {\r\n  [pluginName: string]: T;\r\n};\r\n\r\nconst pluginRegistry: Record<string, PluginInstance> = {};\r\n\r\nexport const getPlugins = () => assignDeep({}, pluginRegistry);\r\n\r\nexport const addPlugin = (addedPlugin: Plugin | Plugin[]) =>\r\n  each((isArray(addedPlugin) ? addedPlugin : [addedPlugin]) as Plugin[], (plugin) => {\r\n    each(keys(plugin), (pluginName) => {\r\n      pluginRegistry[pluginName] = plugin[pluginName];\r\n    });\r\n  });\r\n","function _extends() {\n  module.exports = _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _extends.apply(this, arguments);\n}\n\nmodule.exports = _extends, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","import { each, hasOwnProperty, keys, push, isEmptyObject } from 'support/utils';\r\nimport { type, isArray, isUndefined, isPlainObject, isString } from 'support/utils/types';\r\nimport { PlainObject, PartialOptions } from 'typings';\r\n\r\nexport type OptionsObjectType = Record<string, unknown>;\r\nexport type OptionsFunctionType = (this: any, ...args: any[]) => any;\r\nexport type OptionsTemplateType<T extends OptionsTemplateNativeTypes> = ExtractPropsKey<\r\n  OptionsTemplateTypeMap,\r\n  T\r\n>;\r\nexport type OptionsTemplateTypes = keyof OptionsTemplateTypeMap;\r\nexport type OptionsTemplateNativeTypes = OptionsTemplateTypeMap[keyof OptionsTemplateTypeMap];\r\n\r\nexport type OptionsTemplateValue<T extends OptionsTemplateNativeTypes = string> = T extends string\r\n  ? string extends T\r\n    ? OptionsTemplateValueNonEnum<T>\r\n    : string\r\n  : OptionsTemplateValueNonEnum<T>;\r\n\r\nexport type OptionsTemplate<T> = {\r\n  [P in keyof T]: T[P] extends OptionsObjectType\r\n    ? OptionsTemplate<T[P]>\r\n    : T[P] extends OptionsTemplateNativeTypes\r\n    ? OptionsTemplateValue<T[P]>\r\n    : never;\r\n};\r\n\r\nexport type OptionsValidationResult<T> = [\r\n  PartialOptions<T>, // validated\r\n  Record<string, unknown> // foreign\r\n];\r\n\r\ntype OptionsTemplateTypeMap = {\r\n  __TPL_boolean_TYPE__: boolean;\r\n  __TPL_number_TYPE__: number;\r\n  __TPL_string_TYPE__: string;\r\n  __TPL_array_TYPE__: Array<any> | ReadonlyArray<any>;\r\n  __TPL_function_TYPE__: OptionsFunctionType;\r\n  __TPL_null_TYPE__: null;\r\n  __TPL_object_TYPE__: OptionsObjectType;\r\n};\r\n\r\ntype OptionsTemplateValueNonEnum<T extends OptionsTemplateNativeTypes> =\r\n  | OptionsTemplateType<T>\r\n  | [OptionsTemplateType<T>, ...Array<OptionsTemplateTypes>];\r\n\r\ntype ExtractPropsKey<T, TProps extends T[keyof T]> = {\r\n  [P in keyof T]: TProps extends T[P] ? P : never;\r\n}[keyof T];\r\n\r\ntype OptionsTemplateTypesDictionary = {\r\n  readonly boolean: OptionsTemplateType<boolean>;\r\n  readonly number: OptionsTemplateType<number>;\r\n  readonly string: OptionsTemplateType<string>;\r\n  readonly array: OptionsTemplateType<Array<any>>;\r\n  readonly object: OptionsTemplateType<OptionsObjectType>;\r\n  readonly function: OptionsTemplateType<OptionsFunctionType>;\r\n  readonly null: OptionsTemplateType<null>;\r\n};\r\n\r\nconst optionsTemplateTypes: OptionsTemplateTypesDictionary = {\r\n  boolean: '__TPL_boolean_TYPE__',\r\n  number: '__TPL_number_TYPE__',\r\n  string: '__TPL_string_TYPE__',\r\n  array: '__TPL_array_TYPE__',\r\n  object: '__TPL_object_TYPE__',\r\n  function: '__TPL_function_TYPE__',\r\n  null: '__TPL_null_TYPE__',\r\n};\r\n\r\n/**\r\n * Validates the given options object according to the given template object and returns a object which looks like:\r\n * {\r\n *  foreign   : a object which consists of properties which aren't defined inside the template. (foreign properties)\r\n *  validated : a object which consists only of valid properties. (property name is inside the template and value has a correct type)\r\n * }\r\n * @param template The template according to which the options object shall be validated.\r\n * @param options The options object which shall be validated.\r\n * @param optionsDiff When provided the returned validated object will only have properties which are different to this objects properties.\r\n * Example (assume all properties are valid to the template):\r\n * Options object            : { a: 'a', b: 'b', c: 'c' }\r\n * optionsDiff object        : { a: 'a', b: 'b', c: undefined }\r\n * Returned validated object : { c: 'c' }\r\n * Because the value of the properties a and b didn't change, they aren't included in the returned object.\r\n * Without the optionsDiff object the returned validated object would be: { a: 'a', b: 'b', c: 'c' }\r\n * @param doWriteErrors True if errors shall be logged into the console, false otherwise.\r\n * @param propPath The propertyPath which lead to this object. (used for error logging)\r\n */\r\nconst validateRecursive = <T extends PlainObject>(\r\n  template: OptionsTemplate<T>,\r\n  options: PartialOptions<T>,\r\n  doWriteErrors?: boolean,\r\n  propPath?: string\r\n): OptionsValidationResult<T> => {\r\n  const validatedOptions: PartialOptions<T> = {};\r\n  const optionsCopy: PartialOptions<T> = { ...options };\r\n  const props = keys(template).filter((prop) => hasOwnProperty(options, prop));\r\n\r\n  each(props, (prop: Extract<keyof T, string>) => {\r\n    const optionsValue: any = options[prop];\r\n    const templateValue: PlainObject | string | OptionsTemplateTypes | Array<OptionsTemplateTypes> =\r\n      template[prop];\r\n    const templateIsComplex = isPlainObject(templateValue);\r\n    const propPrefix = propPath ? `${propPath}.` : '';\r\n\r\n    // if the template has a object as value, it means that the options are complex (verschachtelt)\r\n    if (templateIsComplex && isPlainObject(optionsValue)) {\r\n      const [validated, foreign] = validateRecursive(\r\n        templateValue as T,\r\n        optionsValue,\r\n        doWriteErrors,\r\n        propPrefix + prop\r\n      );\r\n      validatedOptions[prop] = validated as any;\r\n      optionsCopy[prop] = foreign as any;\r\n\r\n      each([optionsCopy, validatedOptions], (value) => {\r\n        if (isEmptyObject(value[prop])) {\r\n          delete value[prop];\r\n        }\r\n      });\r\n    } else if (!templateIsComplex) {\r\n      let isValid = false;\r\n      const errorEnumStrings: Array<string> = [];\r\n      const errorPossibleTypes: Array<string> = [];\r\n      const optionsValueType = type(optionsValue);\r\n      const templateValueArr: Array<string | OptionsTemplateTypes> = !isArray(templateValue)\r\n        ? [templateValue as string | OptionsTemplateTypes]\r\n        : (templateValue as Array<OptionsTemplateTypes>);\r\n\r\n      each(templateValueArr, (currTemplateType) => {\r\n        // if currType value isn't inside possibleTemplateTypes we assume its a enum string value\r\n        let typeString: string | undefined;\r\n        each(optionsTemplateTypes, (value: string, key: string) => {\r\n          if (value === currTemplateType) {\r\n            typeString = key;\r\n          }\r\n        });\r\n        const isEnumString = isUndefined(typeString);\r\n        if (isEnumString && isString(optionsValue)) {\r\n          // split it into a array which contains all possible values for example: [\"yes\", \"no\", \"maybe\"]\r\n          const enumStringSplit = currTemplateType.split(' ');\r\n          isValid = !!enumStringSplit.find((possibility) => possibility === optionsValue);\r\n\r\n          // build error message\r\n          push(errorEnumStrings, enumStringSplit);\r\n        } else {\r\n          isValid = optionsTemplateTypes[optionsValueType] === currTemplateType;\r\n        }\r\n\r\n        // build error message\r\n        push(errorPossibleTypes, isEnumString ? optionsTemplateTypes.string : typeString!);\r\n\r\n        // continue if invalid, break if valid\r\n        return !isValid;\r\n      });\r\n\r\n      if (isValid) {\r\n        validatedOptions[prop] = optionsValue;\r\n      } else if (doWriteErrors) {\r\n        console.warn(\r\n          `${\r\n            `The option \"${propPrefix}${prop}\" wasn't set, because it doesn't accept the type [ ${optionsValueType.toUpperCase()} ] with the value of \"${optionsValue}\".\\r\\n` +\r\n            `Accepted types are: [ ${errorPossibleTypes.join(', ').toUpperCase()} ].\\r\\n`\r\n          }${\r\n            errorEnumStrings.length > 0\r\n              ? `\\r\\nValid strings are: [ ${errorEnumStrings.join(', ')} ].`\r\n              : ''\r\n          }`\r\n        );\r\n      }\r\n\r\n      delete optionsCopy[prop];\r\n    }\r\n  });\r\n\r\n  return [validatedOptions, optionsCopy]; // optionsCopy equals now to foreign options\r\n};\r\n\r\n/**\r\n * Validates the given options object according to the given template object and returns a tuple which looks like:\r\n * [\r\n *  validated : a object which consists only of valid properties. (property name is inside the template and value has a correct type)\r\n *  foreign   : a object which consists of properties which aren't defined inside the template. (foreign properties)\r\n * ]\r\n * @param template The template according to which the options object shall be validated.\r\n * @param options The options object which shall be validated.\r\n * @param doWriteErrors True if errors shall be logged into the console, false otherwise.\r\n */\r\nconst validateOptions = <T extends PlainObject>(\r\n  template: OptionsTemplate<T>,\r\n  options: PartialOptions<T>,\r\n  doWriteErrors?: boolean\r\n): OptionsValidationResult<T> => validateRecursive<T>(template, options, doWriteErrors);\r\n\r\nexport { validateOptions, optionsTemplateTypes };\r\n","import { Options, OverflowBehavior, VisibilityBehavior, AutoHideBehavior } from 'options';\r\nimport {\r\n  validateOptions,\r\n  OptionsTemplate,\r\n  OptionsTemplateValue,\r\n  optionsTemplateTypes as oTypes,\r\n} from 'plugins/optionsValidationPlugin/validation';\r\nimport type { PartialOptions } from 'typings';\r\nimport type { Plugin } from 'plugins';\r\n\r\nconst numberAllowedValues: OptionsTemplateValue<number> = oTypes.number;\r\nconst booleanAllowedValues: OptionsTemplateValue<boolean> = oTypes.boolean;\r\nconst arrayNullValues: OptionsTemplateValue<Array<unknown> | null> = [oTypes.array, oTypes.null];\r\nconst overflowAllowedValues: OptionsTemplateValue<OverflowBehavior> =\r\n  'hidden scroll visible visible-hidden';\r\nconst scrollbarsVisibilityAllowedValues: OptionsTemplateValue<VisibilityBehavior> =\r\n  'visible hidden auto';\r\nconst scrollbarsAutoHideAllowedValues: OptionsTemplateValue<AutoHideBehavior> =\r\n  'never scroll leavemove';\r\n\r\nconst optionsTemplate: OptionsTemplate<Options> = {\r\n  // resize: resizeAllowedValues, // none || both  || horizontal || vertical || n || b ||\r\n  paddingAbsolute: booleanAllowedValues, // true || false\r\n  updating: {\r\n    elementEvents: arrayNullValues, // array of tuples || null\r\n    attributes: arrayNullValues,\r\n    debounce: [oTypes.number, oTypes.array, oTypes.null], // number || number array || null\r\n    ignoreMutation: [oTypes.function, oTypes.null], // function || null\r\n  },\r\n  overflow: {\r\n    x: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scrol\r\n    y: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scrol\r\n  },\r\n  scrollbars: {\r\n    visibility: scrollbarsVisibilityAllowedValues, // visible || hidden || auto || v ||\r\n    autoHide: scrollbarsAutoHideAllowedValues, // never || scroll || leave || move ||\r\n    autoHideDelay: numberAllowedValues, // number\r\n    dragScroll: booleanAllowedValues, // true || false\r\n    clickScroll: booleanAllowedValues, // true || false\r\n    touch: booleanAllowedValues, // true || false\r\n  },\r\n  /*\r\n  textarea: {\r\n    dynWidth: booleanAllowedValues, // true || false\r\n    dynHeight: booleanAllowedValues, // true || false\r\n    inheritedAttrs: stringArrayNullAllowedValues, // string || array || nul\r\n  },\r\n  */\r\n  nativeScrollbarsOverlaid: {\r\n    show: booleanAllowedValues, // true || false\r\n    initialize: booleanAllowedValues, // true || false\r\n  },\r\n};\r\n\r\nexport type OptionsValidationPluginInstance = {\r\n  _: (options: PartialOptions<Options>, doWriteErrors?: boolean) => PartialOptions<Options>;\r\n};\r\n\r\nexport const optionsValidationPluginName = '__osOptionsValidationPlugin';\r\n\r\nexport const optionsValidationPlugin: Plugin<OptionsValidationPluginInstance> = {\r\n  [optionsValidationPluginName]: {\r\n    _: (options: PartialOptions<Options>, doWriteErrors?: boolean) => {\r\n      const [validated, foreign] = validateOptions(optionsTemplate, options, doWriteErrors);\r\n      return { ...foreign, ...validated };\r\n    },\r\n  },\r\n};\r\n","import {\r\n  createDOM,\r\n  style,\r\n  appendChildren,\r\n  offsetSize,\r\n  scrollLeft,\r\n  scrollTop,\r\n  on,\r\n  stopAndPrevent,\r\n  addClass,\r\n  equalWH,\r\n  push,\r\n  cAF,\r\n  rAF,\r\n} from 'support';\r\nimport {\r\n  classNameSizeObserverListenerScroll,\r\n  classNameSizeObserverListenerItem,\r\n  classNameSizeObserverListenerItemFinal,\r\n} from 'classnames';\r\nimport type { Plugin } from 'plugins';\r\n\r\nexport type SizeObserverPluginInstance = {\r\n  _: (\r\n    listenerElement: HTMLElement,\r\n    onSizeChangedCallback: (appear: boolean) => any,\r\n    observeAppearChange: boolean\r\n  ) => [appearCallback: () => any, offFns: (() => any)[]];\r\n};\r\n\r\nconst scrollAmount = 3333333;\r\nconst scrollEventName = 'scroll';\r\nexport const sizeObserverPluginName = '__osSizeObserverPlugin';\r\n\r\nexport const sizeObserverPlugin: Plugin<SizeObserverPluginInstance> = {\r\n  [sizeObserverPluginName]: {\r\n    _: (listenerElement, onSizeChangedCallback, observeAppearChange) => {\r\n      const observerElementChildren = createDOM(\r\n        `<div class=\"${classNameSizeObserverListenerItem}\" dir=\"ltr\"><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\"></div></div><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\" style=\"width: 200%; height: 200%\"></div></div></div>`\r\n      );\r\n      appendChildren(listenerElement, observerElementChildren);\r\n      addClass(listenerElement, classNameSizeObserverListenerScroll);\r\n      const observerElementChildrenRoot = observerElementChildren[0] as HTMLElement;\r\n      const shrinkElement = observerElementChildrenRoot.lastChild as HTMLElement;\r\n      const expandElement = observerElementChildrenRoot.firstChild as HTMLElement;\r\n      const expandElementChild = expandElement?.firstChild as HTMLElement;\r\n\r\n      let cacheSize = offsetSize(observerElementChildrenRoot);\r\n      let currSize = cacheSize;\r\n      let isDirty = false;\r\n      let rAFId: number;\r\n\r\n      const reset = () => {\r\n        scrollLeft(expandElement, scrollAmount);\r\n        scrollTop(expandElement, scrollAmount);\r\n        scrollLeft(shrinkElement, scrollAmount);\r\n        scrollTop(shrinkElement, scrollAmount);\r\n      };\r\n      const onResized = (appear?: unknown) => {\r\n        rAFId = 0;\r\n        if (isDirty) {\r\n          cacheSize = currSize;\r\n          onSizeChangedCallback(appear === true);\r\n        }\r\n      };\r\n      const onScroll = (scrollEvent?: Event | false) => {\r\n        currSize = offsetSize(observerElementChildrenRoot);\r\n        isDirty = !scrollEvent || !equalWH(currSize, cacheSize);\r\n\r\n        if (scrollEvent) {\r\n          stopAndPrevent(scrollEvent);\r\n\r\n          if (isDirty && !rAFId) {\r\n            cAF!(rAFId);\r\n            rAFId = rAF!(onResized);\r\n          }\r\n        } else {\r\n          onResized(scrollEvent === false);\r\n        }\r\n\r\n        reset();\r\n      };\r\n      const offListeners = push(\r\n        [],\r\n        [on(expandElement, scrollEventName, onScroll), on(shrinkElement, scrollEventName, onScroll)]\r\n      );\r\n\r\n      // lets assume that the divs will never be that large and a constant value is enough\r\n      style(expandElementChild, {\r\n        width: scrollAmount,\r\n        height: scrollAmount,\r\n      });\r\n\r\n      reset();\r\n\r\n      return [observeAppearChange ? onScroll.bind(0, false) : reset, offListeners];\r\n    },\r\n  },\r\n};\r\n","import { keys, attr, WH, style, addClass, removeClass, noop, each } from 'support';\r\nimport { getEnvironment } from 'environment';\r\nimport { classNameViewportArrange } from 'classnames';\r\nimport type { StyleObject } from 'typings';\r\nimport type { StructureSetupState } from 'setups/structureSetup';\r\nimport type {\r\n  ViewportOverflowState,\r\n  GetViewportOverflowState,\r\n  HideNativeScrollbars,\r\n} from 'setups/structureSetup/updateSegments/overflowUpdateSegment';\r\nimport type { Plugin } from 'plugins';\r\n\r\nexport type ArrangeViewport = (\r\n  viewportOverflowState: ViewportOverflowState,\r\n  viewportScrollSize: WH<number>,\r\n  sizeFraction: WH<number>,\r\n  directionIsRTL: boolean\r\n) => boolean;\r\n\r\nexport type UndoViewportArrangeResult = [\r\n  redoViewportArrange: () => void,\r\n  overflowState?: ViewportOverflowState\r\n];\r\n\r\nexport type UndoArrangeViewport = (\r\n  showNativeOverlaidScrollbars: boolean,\r\n  directionIsRTL: boolean,\r\n  viewportOverflowState?: ViewportOverflowState\r\n) => UndoViewportArrangeResult;\r\n\r\nexport type ScrollbarsHidingPluginInstance = {\r\n  _createUniqueViewportArrangeElement(): HTMLStyleElement | false;\r\n  _overflowUpdateSegment(\r\n    doViewportArrange: boolean,\r\n    viewport: HTMLElement,\r\n    viewportArrange: HTMLStyleElement | false | null | undefined,\r\n    getState: () => StructureSetupState,\r\n    getViewportOverflowState: GetViewportOverflowState,\r\n    hideNativeScrollbars: HideNativeScrollbars\r\n  ): [ArrangeViewport, UndoArrangeViewport];\r\n};\r\n\r\nlet contentArrangeCounter = 0;\r\n\r\nexport const scrollbarsHidingPluginName = '__osScrollbarsHidingPlugin';\r\n\r\nexport const scrollbarsHidingPlugin: Plugin<ScrollbarsHidingPluginInstance> = {\r\n  [scrollbarsHidingPluginName]: {\r\n    _createUniqueViewportArrangeElement: () => {\r\n      const {\r\n        _nativeScrollbarsHiding: _nativeScrollbarStyling,\r\n        _nativeScrollbarsOverlaid: _nativeScrollbarIsOverlaid,\r\n        _cssCustomProperties,\r\n      } = getEnvironment();\r\n      const create =\r\n        !_cssCustomProperties &&\r\n        !_nativeScrollbarStyling &&\r\n        (_nativeScrollbarIsOverlaid.x || _nativeScrollbarIsOverlaid.y);\r\n      const result = create ? document.createElement('style') : false;\r\n\r\n      if (result) {\r\n        attr(result, 'id', `${classNameViewportArrange}-${contentArrangeCounter}`);\r\n        contentArrangeCounter++;\r\n      }\r\n\r\n      return result;\r\n    },\r\n    _overflowUpdateSegment: (\r\n      doViewportArrange,\r\n      viewport,\r\n      viewportArrange,\r\n      getState,\r\n      getViewportOverflowState,\r\n      hideNativeScrollbars\r\n    ) => {\r\n      const { _flexboxGlue } = getEnvironment();\r\n\r\n      /**\r\n       * Sets the styles of the viewport arrange element.\r\n       * @param viewportOverflowState The viewport overflow state according to which the scrollbars shall be hidden.\r\n       * @param viewportScrollSize The content scroll size.\r\n       * @param directionIsRTL Whether the direction is RTL or not.\r\n       * @returns A boolean which indicates whether the viewport arrange element was adjusted.\r\n       */\r\n      const arrangeViewport: ArrangeViewport = (\r\n        viewportOverflowState,\r\n        viewportScrollSize,\r\n        sizeFraction,\r\n        directionIsRTL\r\n      ) => {\r\n        if (doViewportArrange) {\r\n          const { _viewportPaddingStyle } = getState();\r\n          const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } = viewportOverflowState;\r\n          const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n          const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\r\n          const viewportArrangeHorizontalPaddingKey: keyof StyleObject = directionIsRTL\r\n            ? 'paddingRight'\r\n            : 'paddingLeft';\r\n          const viewportArrangeHorizontalPaddingValue = _viewportPaddingStyle[\r\n            viewportArrangeHorizontalPaddingKey\r\n          ] as number;\r\n          const viewportArrangeVerticalPaddingValue = _viewportPaddingStyle.paddingTop as number;\r\n          const fractionalContentWidth = viewportScrollSize.w + sizeFraction.w;\r\n          const fractionalContenHeight = viewportScrollSize.h + sizeFraction.h;\r\n          const arrangeSize = {\r\n            w:\r\n              hideOffsetY && arrangeY\r\n                ? `${\r\n                    hideOffsetY + fractionalContentWidth - viewportArrangeHorizontalPaddingValue\r\n                  }px`\r\n                : '',\r\n            h:\r\n              hideOffsetX && arrangeX\r\n                ? `${hideOffsetX + fractionalContenHeight - viewportArrangeVerticalPaddingValue}px`\r\n                : '',\r\n          };\r\n\r\n          // adjust content arrange / before element\r\n          if (viewportArrange) {\r\n            const { sheet } = viewportArrange;\r\n            if (sheet) {\r\n              const { cssRules } = sheet;\r\n              if (cssRules) {\r\n                if (!cssRules.length) {\r\n                  sheet.insertRule(\r\n                    `#${attr(viewportArrange, 'id')} + .${classNameViewportArrange}::before {}`,\r\n                    0\r\n                  );\r\n                }\r\n\r\n                // @ts-ignore\r\n                const ruleStyle = cssRules[0].style;\r\n\r\n                ruleStyle.width = arrangeSize.w;\r\n                ruleStyle.height = arrangeSize.h;\r\n              }\r\n            }\r\n          } else {\r\n            style<'--os-vaw' | '--os-vah'>(viewport, {\r\n              '--os-vaw': arrangeSize.w,\r\n              '--os-vah': arrangeSize.h,\r\n            });\r\n          }\r\n        }\r\n\r\n        return doViewportArrange;\r\n      };\r\n\r\n      /**\r\n       * Removes all styles applied because of the viewport arrange strategy.\r\n       * @param showNativeOverlaidScrollbars Whether native overlaid scrollbars are shown instead of hidden.\r\n       * @param directionIsRTL Whether the direction is RTL or not.\r\n       * @param viewportOverflowState The currentviewport overflow state or undefined if it has to be determined.\r\n       * @returns A object with a function which applies all the removed styles and the determined viewport vverflow state.\r\n       */\r\n      const undoViewportArrange: UndoArrangeViewport = (\r\n        showNativeOverlaidScrollbars,\r\n        directionIsRTL,\r\n        viewportOverflowState?\r\n      ) => {\r\n        if (doViewportArrange) {\r\n          const finalViewportOverflowState =\r\n            viewportOverflowState || getViewportOverflowState(showNativeOverlaidScrollbars);\r\n          const { _viewportPaddingStyle: viewportPaddingStyle } = getState();\r\n          const { _scrollbarsHideOffsetArrange } = finalViewportOverflowState;\r\n          const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n          const finalPaddingStyle: StyleObject = {};\r\n          const assignProps = (props: string) =>\r\n            each(props.split(' '), (prop) => {\r\n              finalPaddingStyle[prop] = viewportPaddingStyle[prop];\r\n            });\r\n\r\n          if (arrangeX) {\r\n            assignProps('marginBottom paddingTop paddingBottom');\r\n          }\r\n\r\n          if (arrangeY) {\r\n            assignProps('marginLeft marginRight paddingLeft paddingRight');\r\n          }\r\n\r\n          const prevStyle = style(viewport, keys(finalPaddingStyle));\r\n\r\n          removeClass(viewport, classNameViewportArrange);\r\n\r\n          if (!_flexboxGlue) {\r\n            finalPaddingStyle.height = '';\r\n          }\r\n\r\n          style(viewport, finalPaddingStyle);\r\n\r\n          return [\r\n            () => {\r\n              hideNativeScrollbars(\r\n                finalViewportOverflowState,\r\n                directionIsRTL,\r\n                doViewportArrange,\r\n                prevStyle\r\n              );\r\n              style(viewport, prevStyle);\r\n              addClass(viewport, classNameViewportArrange);\r\n            },\r\n            finalViewportOverflowState,\r\n          ];\r\n        }\r\n        return [noop];\r\n      };\r\n\r\n      return [arrangeViewport, undoViewportArrange];\r\n    },\r\n  },\r\n};\r\n","import { isFunction, isNull, isUndefined } from 'support';\r\nimport type {\r\n  StructureInitialization,\r\n  StructureInitializationStrategy,\r\n} from 'setups/structureSetup';\r\nimport type {\r\n  ScrollbarsInitialization,\r\n  ScrollbarsInitializationStrategy,\r\n} from 'setups/scrollbarsSetup';\r\n\r\ntype StaticInitialization = HTMLElement | null | undefined;\r\ntype DynamicInitialization = HTMLElement | boolean | null | undefined;\r\n\r\nexport type InitializationTargetElement = HTMLElement | HTMLTextAreaElement;\r\n\r\nexport type InitializationTargetObject = StructureInitialization & ScrollbarsInitialization;\r\n\r\nexport type InitializationTarget = InitializationTargetElement | InitializationTargetObject;\r\n\r\nexport type InitializationStrategy = StructureInitializationStrategy &\r\n  ScrollbarsInitializationStrategy;\r\n\r\n/**\r\n * Static elements MUST be present.\r\n * Null or undefined behave like if this element wasn't specified during initialization.\r\n */\r\nexport type StaticInitializationElement<Args extends any[]> =\r\n  | ((...args: Args) => StaticInitialization)\r\n  | StaticInitialization;\r\n\r\n/**\r\n * Dynamic element CAN be present.\r\n * If its a element the element will be handled as the repsective element.\r\n * True means that the respective dynamic element is forced to be generated.\r\n * False means that the respective dynamic element is forced NOT to be generated.\r\n * Null or undefined behave like if this element wasn't specified during initialization.\r\n */\r\nexport type DynamicInitializationElement<Args extends any[]> =\r\n  | ((...args: Args) => DynamicInitialization)\r\n  | DynamicInitialization;\r\n\r\nexport type InitializtationElementStrategy<InitElm> = Exclude<InitElm, HTMLElement>;\r\n\r\nexport type DefaultInitializtationElementStrategy<\r\n  InitElm extends StaticInitializationElement<any> | DynamicInitializationElement<any>\r\n> = Extract<InitElm, (...args: any[]) => any> extends (...args: infer P) => any\r\n  ? (...args: P) => HTMLElement\r\n  : never;\r\n\r\nconst resolveInitialization = <T>(value: any, args: any): T =>\r\n  isFunction(value) ? value.apply(0, args) : value;\r\n\r\nconst staticInitializationElement = <T extends StaticInitializationElement<any>>(\r\n  args: Parameters<Extract<T, (...args: any[]) => any>>,\r\n  defaultStaticInitializationElement: DefaultInitializtationElementStrategy<T>,\r\n  staticInitializationElementStrategy?: InitializtationElementStrategy<T>,\r\n  staticInitializationElementValue?: T | false\r\n): HTMLElement =>\r\n  resolveInitialization<StaticInitialization>(\r\n    staticInitializationElementValue ||\r\n      resolveInitialization<StaticInitialization>(staticInitializationElementStrategy, args),\r\n    args\r\n  ) || defaultStaticInitializationElement.apply(0, args);\r\n\r\nconst dynamicInitializationElement = <T extends DynamicInitializationElement<any>>(\r\n  args: Parameters<Extract<T, (...args: any[]) => any>>,\r\n  defaultDynamicInitializationElement: DefaultInitializtationElementStrategy<T>,\r\n  dynamicInitializationElementStrategy?: InitializtationElementStrategy<T>,\r\n  dynamicInitializationElementValue?: T | false\r\n): HTMLElement | false => {\r\n  let result = resolveInitialization<DynamicInitialization>(\r\n    dynamicInitializationElementValue,\r\n    args\r\n  );\r\n\r\n  if (isNull(result) || isUndefined(result)) {\r\n    result = resolveInitialization<DynamicInitialization>(\r\n      dynamicInitializationElementStrategy,\r\n      args\r\n    );\r\n  }\r\n\r\n  return result === true || isNull(result) || isUndefined(result)\r\n    ? defaultDynamicInitializationElement.apply(0, args)\r\n    : result;\r\n};\r\n\r\nexport { staticInitializationElement, dynamicInitializationElement };\r\n","import {\r\n  isHTMLElement,\r\n  appendChildren,\r\n  createDiv,\r\n  is,\r\n  contents,\r\n  insertAfter,\r\n  addClass,\r\n  parent,\r\n  indexOf,\r\n  removeElements,\r\n  removeClass,\r\n  hasClass,\r\n  push,\r\n  runEachAndClear,\r\n  insertBefore,\r\n  attr,\r\n  keys,\r\n  removeAttr,\r\n  attrClass,\r\n  hasAttrClass,\r\n  ResizeObserverConstructor,\r\n} from 'support';\r\nimport {\r\n  dataAttributeHost,\r\n  dataAttributeHostOverflowX,\r\n  dataAttributeHostOverflowY,\r\n  classNamePadding,\r\n  classNameViewport,\r\n  classNameContent,\r\n  classNameViewportScrollbarStyling,\r\n} from 'classnames';\r\nimport { getEnvironment } from 'environment';\r\nimport { getPlugins, scrollbarsHidingPluginName } from 'plugins';\r\nimport type { ScrollbarsHidingPluginInstance } from 'plugins/scrollbarsHidingPlugin';\r\nimport {\r\n  staticInitializationElement as generalStaticInitializationElement,\r\n  dynamicInitializationElement as generalDynamicInitializationElement,\r\n} from 'initialization';\r\nimport type { InitializationTarget, InitializationTargetElement } from 'initialization';\r\nimport type {\r\n  StructureDynamicInitializationElement,\r\n  StructureInitialization,\r\n  StructureStaticInitializationElement,\r\n} from 'setups/structureSetup/structureSetup.initialization';\r\n\r\nexport type StructureSetupElements = [\r\n  targetObj: StructureSetupElementsObj,\r\n  appendElements: () => void,\r\n  destroy: () => void\r\n];\r\n\r\nexport interface StructureSetupElementsObj {\r\n  _target: InitializationTargetElement;\r\n  _host: HTMLElement;\r\n  _viewport: HTMLElement;\r\n  _padding: HTMLElement | false;\r\n  _content: HTMLElement | false;\r\n  _viewportArrange: HTMLStyleElement | false | null | undefined;\r\n  // ctx ----\r\n  _isTextarea: boolean;\r\n  _isBody: boolean;\r\n  _htmlElm: HTMLHtmlElement;\r\n  _bodyElm: HTMLBodyElement;\r\n  _windowElm: Window;\r\n  _documentElm: Document;\r\n  _targetIsElm: boolean;\r\n  _viewportIsTarget: boolean;\r\n  _viewportHasClass: (className: string, attributeClassName: string) => boolean;\r\n  _viewportAddRemoveClass: (className: string, attributeClassName: string, add?: boolean) => void;\r\n}\r\n\r\nconst createNewDiv = createDiv.bind(0, '');\r\n\r\nconst unwrap = (elm: HTMLElement | false | null | undefined) => {\r\n  appendChildren(parent(elm), contents(elm));\r\n  removeElements(elm);\r\n};\r\n\r\nconst addDataAttrHost = (elm: HTMLElement, value: string) => {\r\n  attr(elm, dataAttributeHost, value);\r\n  return removeAttr.bind(0, elm, dataAttributeHost);\r\n};\r\n\r\nexport const createStructureSetupElements = (\r\n  target: InitializationTarget\r\n): StructureSetupElements => {\r\n  const { _getInitializationStrategy, _nativeScrollbarsHiding } = getEnvironment();\r\n  const scrollbarsHidingPlugin = getPlugins()[scrollbarsHidingPluginName] as\r\n    | ScrollbarsHidingPluginInstance\r\n    | undefined;\r\n  const createUniqueViewportArrangeElement =\r\n    scrollbarsHidingPlugin && scrollbarsHidingPlugin._createUniqueViewportArrangeElement;\r\n  const {\r\n    _host: hostInitializationStrategy,\r\n    _viewport: viewportInitializationStrategy,\r\n    _padding: paddingInitializationStrategy,\r\n    _content: contentInitializationStrategy,\r\n  } = _getInitializationStrategy();\r\n  const targetIsElm = isHTMLElement(target);\r\n  const targetStructureInitialization = target as StructureInitialization;\r\n  const targetElement = targetIsElm\r\n    ? (target as InitializationTargetElement)\r\n    : targetStructureInitialization.target;\r\n  const isTextarea = is(targetElement, 'textarea');\r\n  const isBody = !isTextarea && is(targetElement, 'body');\r\n  const ownerDocument = targetElement!.ownerDocument;\r\n  const bodyElm = ownerDocument.body as HTMLBodyElement;\r\n  const wnd = ownerDocument.defaultView as Window;\r\n  const singleElmSupport = !!ResizeObserverConstructor && !isTextarea && _nativeScrollbarsHiding;\r\n  const staticInitializationElement =\r\n    generalStaticInitializationElement<StructureStaticInitializationElement>.bind(0, [\r\n      targetElement,\r\n    ]);\r\n  const dynamicInitializationElement =\r\n    generalDynamicInitializationElement<StructureDynamicInitializationElement>.bind(0, [\r\n      targetElement,\r\n    ]);\r\n  const viewportElement = [\r\n    staticInitializationElement(\r\n      createNewDiv,\r\n      viewportInitializationStrategy,\r\n      targetStructureInitialization.viewport\r\n    ),\r\n    staticInitializationElement(createNewDiv, viewportInitializationStrategy),\r\n    staticInitializationElement(createNewDiv),\r\n  ].filter((potentialViewport) =>\r\n    !singleElmSupport ? potentialViewport !== targetElement : true\r\n  )[0];\r\n  const viewportIsTarget = viewportElement === targetElement;\r\n  const evaluatedTargetObj: StructureSetupElementsObj = {\r\n    _target: targetElement,\r\n    _host: isTextarea\r\n      ? staticInitializationElement(\r\n          createNewDiv,\r\n          hostInitializationStrategy,\r\n          targetStructureInitialization.host\r\n        )\r\n      : (targetElement as HTMLElement),\r\n    _viewport: viewportElement,\r\n    _padding:\r\n      !viewportIsTarget &&\r\n      dynamicInitializationElement(\r\n        createNewDiv,\r\n        paddingInitializationStrategy,\r\n        targetStructureInitialization.padding\r\n      ),\r\n    _content:\r\n      !viewportIsTarget &&\r\n      dynamicInitializationElement(\r\n        createNewDiv,\r\n        contentInitializationStrategy,\r\n        targetStructureInitialization.content\r\n      ),\r\n    _viewportArrange:\r\n      !viewportIsTarget &&\r\n      !_nativeScrollbarsHiding &&\r\n      createUniqueViewportArrangeElement &&\r\n      createUniqueViewportArrangeElement(),\r\n    _windowElm: wnd,\r\n    _documentElm: ownerDocument,\r\n    _htmlElm: parent(bodyElm) as HTMLHtmlElement,\r\n    _bodyElm: bodyElm,\r\n    _isTextarea: isTextarea,\r\n    _isBody: isBody,\r\n    _targetIsElm: targetIsElm,\r\n    _viewportIsTarget: viewportIsTarget,\r\n    _viewportHasClass: (className: string, attributeClassName: string) =>\r\n      viewportIsTarget\r\n        ? hasAttrClass(viewportElement, dataAttributeHost, attributeClassName)\r\n        : hasClass(viewportElement, className),\r\n    _viewportAddRemoveClass: (className: string, attributeClassName: string, add?: boolean) =>\r\n      viewportIsTarget\r\n        ? attrClass(viewportElement, dataAttributeHost, attributeClassName, add)\r\n        : (add ? addClass : removeClass)(viewportElement, className),\r\n  };\r\n  const generatedElements = keys(evaluatedTargetObj).reduce((arr, key: string) => {\r\n    const value = evaluatedTargetObj[key];\r\n    return push(arr, value && !parent(value) ? value : false);\r\n  }, [] as HTMLElement[]);\r\n  const elementIsGenerated = (elm: HTMLElement | false) =>\r\n    elm ? indexOf(generatedElements, elm) > -1 : null;\r\n  const { _target, _host, _padding, _viewport, _content, _viewportArrange } = evaluatedTargetObj;\r\n  const destroyFns: (() => any)[] = [];\r\n  const isTextareaHostGenerated = isTextarea && elementIsGenerated(_host);\r\n  const targetContents = isTextarea\r\n    ? _target\r\n    : contents(\r\n        [_content, _viewport, _padding, _host, _target].find(\r\n          (elm) => elementIsGenerated(elm) === false\r\n        )\r\n      );\r\n  const contentSlot = _content || _viewport;\r\n  const appendElements = () => {\r\n    const removeHostDataAttr = addDataAttrHost(_host, viewportIsTarget ? 'viewport' : 'host');\r\n    const removePaddingClass = addClass(_padding, classNamePadding);\r\n    const removeViewportClass = addClass(_viewport, !viewportIsTarget && classNameViewport);\r\n    const removeContentClass = addClass(_content, classNameContent);\r\n\r\n    // only insert host for textarea after target if it was generated\r\n    if (isTextareaHostGenerated) {\r\n      insertAfter(_target, _host);\r\n\r\n      push(destroyFns, () => {\r\n        insertAfter(_host, _target);\r\n        removeElements(_host);\r\n      });\r\n    }\r\n\r\n    appendChildren(contentSlot, targetContents);\r\n    appendChildren(_host, _padding);\r\n    appendChildren(_padding || _host, !viewportIsTarget && _viewport);\r\n    appendChildren(_viewport, _content);\r\n\r\n    push(destroyFns, () => {\r\n      removeHostDataAttr();\r\n      removeAttr(_viewport, dataAttributeHostOverflowX);\r\n      removeAttr(_viewport, dataAttributeHostOverflowY);\r\n\r\n      if (elementIsGenerated(_content)) {\r\n        unwrap(_content);\r\n      }\r\n      if (elementIsGenerated(_viewport)) {\r\n        unwrap(_viewport);\r\n      }\r\n      if (elementIsGenerated(_padding)) {\r\n        unwrap(_padding);\r\n      }\r\n      removePaddingClass();\r\n      removeViewportClass();\r\n      removeContentClass();\r\n    });\r\n\r\n    if (_nativeScrollbarsHiding && !viewportIsTarget) {\r\n      push(destroyFns, removeClass.bind(0, _viewport, classNameViewportScrollbarStyling));\r\n    }\r\n    if (_viewportArrange) {\r\n      insertBefore(_viewport, _viewportArrange);\r\n      push(destroyFns, removeElements.bind(0, _viewportArrange));\r\n    }\r\n  };\r\n\r\n  return [evaluatedTargetObj, appendElements, runEachAndClear.bind(0, destroyFns)];\r\n};\r\n","import { style } from 'support';\r\nimport { getEnvironment } from 'environment';\r\nimport type { CreateStructureUpdateSegment } from 'setups/structureSetup/structureSetup.update';\r\n\r\n/**\r\n * Lifecycle with the responsibility to adjust the trinsic behavior of the content element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createTrinsicUpdate: CreateStructureUpdateSegment = (\r\n  structureSetupElements,\r\n  state\r\n) => {\r\n  const { _content } = structureSetupElements;\r\n  const [getState] = state;\r\n\r\n  return (updateHints) => {\r\n    const { _flexboxGlue } = getEnvironment();\r\n    const { _heightIntrinsic } = getState();\r\n    const { _heightIntrinsicChanged } = updateHints;\r\n    const heightIntrinsicChanged = (_content || !_flexboxGlue) && _heightIntrinsicChanged;\r\n\r\n    if (heightIntrinsicChanged) {\r\n      style(_content, {\r\n        height: _heightIntrinsic ? '' : '100%',\r\n      });\r\n    }\r\n\r\n    return {\r\n      _sizeChanged: heightIntrinsicChanged,\r\n      _contentMutation: heightIntrinsicChanged,\r\n    };\r\n  };\r\n};\r\n","import { createCache, topRightBottomLeft, equalTRBL, style, assignDeep } from 'support';\r\nimport { StyleObject } from 'typings';\r\nimport { getEnvironment } from 'environment';\r\nimport type { CreateStructureUpdateSegment } from 'setups/structureSetup/structureSetup.update';\r\n\r\n/**\r\n * Lifecycle with the responsibility to adjust the padding styling of the padding and viewport element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createPaddingUpdate: CreateStructureUpdateSegment = (\r\n  structureSetupElements,\r\n  state\r\n) => {\r\n  const [getState, setState] = state;\r\n  const { _host, _padding, _viewport, _viewportIsTarget: _isSingleElm } = structureSetupElements;\r\n  const [updatePaddingCache, currentPaddingCache] = createCache(\r\n    {\r\n      _equal: equalTRBL,\r\n      _initialValue: topRightBottomLeft(),\r\n    },\r\n    topRightBottomLeft.bind(0, _host, 'padding', '')\r\n  );\r\n\r\n  return (updateHints, checkOption, force) => {\r\n    let [padding, paddingChanged] = currentPaddingCache(force);\r\n    const { _nativeScrollbarsHiding: _nativeScrollbarStyling, _flexboxGlue } = getEnvironment();\r\n    const { _directionIsRTL } = getState();\r\n    const { _sizeChanged, _contentMutation, _directionChanged } = updateHints;\r\n    const [paddingAbsolute, paddingAbsoluteChanged] = checkOption('paddingAbsolute');\r\n    const contentMutation = !_flexboxGlue && _contentMutation;\r\n\r\n    if (_sizeChanged || paddingChanged || contentMutation) {\r\n      [padding, paddingChanged] = updatePaddingCache(force);\r\n    }\r\n\r\n    const paddingStyleChanged =\r\n      !_isSingleElm && (paddingAbsoluteChanged || _directionChanged || paddingChanged);\r\n\r\n    if (paddingStyleChanged) {\r\n      // if there is no padding element and no scrollbar styling, paddingAbsolute isn't supported\r\n      const paddingRelative = !paddingAbsolute || (!_padding && !_nativeScrollbarStyling);\r\n      const paddingHorizontal = padding.r + padding.l;\r\n      const paddingVertical = padding.t + padding.b;\r\n\r\n      const paddingStyle: StyleObject = {\r\n        marginRight: paddingRelative && !_directionIsRTL ? -paddingHorizontal : 0,\r\n        marginBottom: paddingRelative ? -paddingVertical : 0,\r\n        marginLeft: paddingRelative && _directionIsRTL ? -paddingHorizontal : 0,\r\n        top: paddingRelative ? -padding.t : 0,\r\n        right: paddingRelative ? (_directionIsRTL ? -padding.r : 'auto') : 0,\r\n        left: paddingRelative ? (_directionIsRTL ? 'auto' : -padding.l) : 0,\r\n        width: paddingRelative ? `calc(100% + ${paddingHorizontal}px)` : '',\r\n      };\r\n      const viewportStyle: StyleObject = {\r\n        paddingTop: paddingRelative ? padding.t : 0,\r\n        paddingRight: paddingRelative ? padding.r : 0,\r\n        paddingBottom: paddingRelative ? padding.b : 0,\r\n        paddingLeft: paddingRelative ? padding.l : 0,\r\n      };\r\n\r\n      // if there is no padding element apply the style to the viewport element instead\r\n      style(_padding || _viewport, paddingStyle);\r\n      style(_viewport, viewportStyle);\r\n\r\n      setState({\r\n        _padding: padding,\r\n        _paddingAbsolute: !paddingRelative,\r\n        _viewportPaddingStyle: _padding\r\n          ? viewportStyle\r\n          : assignDeep({}, paddingStyle, viewportStyle),\r\n      });\r\n    }\r\n\r\n    return {\r\n      _paddingStyleChanged: paddingStyleChanged,\r\n    };\r\n  };\r\n};\r\n","import {\r\n  createCache,\r\n  attr,\r\n  WH,\r\n  XY,\r\n  style,\r\n  scrollSize,\r\n  fractionalSize,\r\n  equalWH,\r\n  addClass,\r\n  removeClass,\r\n  clientSize,\r\n  equalXY,\r\n  attrClass,\r\n  noop,\r\n} from 'support';\r\nimport { getEnvironment } from 'environment';\r\nimport {\r\n  classNameViewportScrollbarStyling,\r\n  classNameOverflowVisible,\r\n  dataAttributeHost,\r\n  dataAttributeHostOverflowX,\r\n  dataAttributeHostOverflowY,\r\n  dataValueHostViewportScrollbarStyling,\r\n  dataValueHostOverflowVisible,\r\n} from 'classnames';\r\nimport { getPlugins, scrollbarsHidingPluginName } from 'plugins';\r\nimport type {\r\n  ScrollbarsHidingPluginInstance,\r\n  ArrangeViewport,\r\n  UndoArrangeViewport,\r\n} from 'plugins/scrollbarsHidingPlugin';\r\nimport type { StyleObject, OverflowStyle } from 'typings';\r\nimport type { OverflowBehavior } from 'options';\r\nimport type { CreateStructureUpdateSegment } from 'setups/structureSetup/structureSetup.update';\r\n\r\nexport interface ViewportOverflowState {\r\n  _scrollbarsHideOffset: XY<number>;\r\n  _scrollbarsHideOffsetArrange: XY<boolean>;\r\n  _overflowScroll: XY<boolean>;\r\n  _overflowStyle: XY<OverflowStyle>;\r\n}\r\n\r\nexport type GetViewportOverflowState = (\r\n  showNativeOverlaidScrollbars: boolean,\r\n  viewportStyleObj?: StyleObject\r\n) => ViewportOverflowState;\r\n\r\nexport type HideNativeScrollbars = (\r\n  viewportOverflowState: ViewportOverflowState,\r\n  directionIsRTL: boolean,\r\n  viewportArrange: boolean,\r\n  viewportStyleObj: StyleObject\r\n) => void;\r\n\r\nconst { max } = Math;\r\nconst strVisible = 'visible';\r\nconst strHidden = 'hidden';\r\nconst overlaidScrollbarsHideOffset = 42;\r\nconst whCacheOptions = {\r\n  _equal: equalWH,\r\n  _initialValue: { w: 0, h: 0 },\r\n};\r\nconst xyCacheOptions = {\r\n  _equal: equalXY,\r\n  _initialValue: { x: strHidden, y: strHidden } as XY<OverflowStyle>,\r\n};\r\n\r\nconst getOverflowAmount = (\r\n  viewportScrollSize: WH<number>,\r\n  viewportClientSize: WH<number>,\r\n  sizeFraction: WH<number>\r\n) => {\r\n  const tollerance = window.devicePixelRatio % 1 !== 0 ? 1 : 0;\r\n  const amount = {\r\n    w: max(0, viewportScrollSize.w - viewportClientSize.w - max(0, sizeFraction.w)),\r\n    h: max(0, viewportScrollSize.h - viewportClientSize.h - max(0, sizeFraction.h)),\r\n  };\r\n\r\n  return {\r\n    w: amount.w > tollerance ? amount.w : 0,\r\n    h: amount.h > tollerance ? amount.h : 0,\r\n  };\r\n};\r\n\r\nconst conditionalClass = (\r\n  elm: Element | false | null | undefined,\r\n  classNames: string,\r\n  add: boolean\r\n) => (add ? addClass(elm, classNames) : removeClass(elm, classNames));\r\n\r\nconst overflowIsVisible = (overflowBehavior: string) => overflowBehavior.indexOf(strVisible) === 0;\r\n\r\n/**\r\n * Lifecycle with the responsibility to set the correct overflow and scrollbar hiding styles of the viewport element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createOverflowUpdate: CreateStructureUpdateSegment = (\r\n  structureSetupElements,\r\n  state\r\n) => {\r\n  const [getState, setState] = state;\r\n  const {\r\n    _host,\r\n    _padding,\r\n    _viewport,\r\n    _viewportArrange,\r\n    _viewportIsTarget,\r\n    _viewportAddRemoveClass,\r\n  } = structureSetupElements;\r\n  const {\r\n    _nativeScrollbarsSize,\r\n    _flexboxGlue,\r\n    _nativeScrollbarsHiding,\r\n    _nativeScrollbarsOverlaid,\r\n  } = getEnvironment();\r\n  const scrollbarsHidingPlugin = getPlugins()[scrollbarsHidingPluginName] as\r\n    | ScrollbarsHidingPluginInstance\r\n    | undefined;\r\n  const doViewportArrange =\r\n    !_viewportIsTarget &&\r\n    !_nativeScrollbarsHiding &&\r\n    (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n\r\n  const [updateSizeFraction, getCurrentSizeFraction] = createCache<WH<number>>(\r\n    whCacheOptions,\r\n    fractionalSize.bind(0, _viewport)\r\n  );\r\n\r\n  const [updateViewportScrollSizeCache, getCurrentViewportScrollSizeCache] = createCache<\r\n    WH<number>\r\n  >(whCacheOptions, scrollSize.bind(0, _viewport));\r\n\r\n  const [updateOverflowAmountCache, getCurrentOverflowAmountCache] =\r\n    createCache<WH<number>>(whCacheOptions);\r\n\r\n  const [updateOverflowStyleCache] = createCache<XY<OverflowStyle>>(xyCacheOptions);\r\n\r\n  /**\r\n   * Applies a fixed height to the viewport so it can't overflow or underflow the host element.\r\n   * @param viewportOverflowState The current overflow state.\r\n   * @param heightIntrinsic Whether the host height is intrinsic or not.\r\n   */\r\n  const fixFlexboxGlue = (\r\n    viewportOverflowState: ViewportOverflowState,\r\n    heightIntrinsic: boolean\r\n  ) => {\r\n    style(_viewport, {\r\n      height: '',\r\n    });\r\n\r\n    if (heightIntrinsic) {\r\n      const { _paddingAbsolute, _padding: padding } = getState();\r\n      const { _overflowScroll, _scrollbarsHideOffset } = viewportOverflowState;\r\n      const fSize = fractionalSize(_host);\r\n      const hostClientSize = clientSize(_host);\r\n\r\n      // padding subtraction is only needed if padding is absolute or if viewport is content-box\r\n      const isContentBox = style(_viewport, 'boxSizing') === 'content-box';\r\n      const paddingVertical = _paddingAbsolute || isContentBox ? padding.b + padding.t : 0;\r\n      const subtractXScrollbar = !(_nativeScrollbarsOverlaid.x && isContentBox);\r\n\r\n      style(_viewport, {\r\n        height:\r\n          hostClientSize.h +\r\n          fSize.h +\r\n          (_overflowScroll.x && subtractXScrollbar ? _scrollbarsHideOffset.x : 0) -\r\n          paddingVertical,\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Gets the current overflow state of the viewport.\r\n   * @param showNativeOverlaidScrollbars Whether native overlaid scrollbars are shown instead of hidden.\r\n   * @param viewportStyleObj The viewport style object where the overflow scroll property can be read of, or undefined if shall be determined.\r\n   * @returns A object which contains informations about the current overflow state.\r\n   */\r\n  const getViewportOverflowState: GetViewportOverflowState = (\r\n    showNativeOverlaidScrollbars,\r\n    viewportStyleObj?\r\n  ) => {\r\n    const arrangeHideOffset =\r\n      !_nativeScrollbarsHiding && !showNativeOverlaidScrollbars ? overlaidScrollbarsHideOffset : 0;\r\n    const getStatePerAxis = (\r\n      styleKey: string,\r\n      isOverlaid: boolean,\r\n      nativeScrollbarSize: number\r\n    ) => {\r\n      const overflowStyle = style(_viewport, styleKey);\r\n      // can't do something like \"viewportStyleObj && viewportStyleObj[styleKey] || overflowStyle\" here!\r\n      const objectPrefferedOverflowStyle = viewportStyleObj\r\n        ? viewportStyleObj[styleKey]\r\n        : overflowStyle;\r\n      const overflowScroll = objectPrefferedOverflowStyle === 'scroll';\r\n      const nonScrollbarStylingHideOffset = isOverlaid ? arrangeHideOffset : nativeScrollbarSize;\r\n      const scrollbarsHideOffset =\r\n        overflowScroll && !_nativeScrollbarsHiding ? nonScrollbarStylingHideOffset : 0;\r\n      const scrollbarsHideOffsetArrange = isOverlaid && !!arrangeHideOffset;\r\n\r\n      return [overflowStyle, overflowScroll, scrollbarsHideOffset, scrollbarsHideOffsetArrange] as [\r\n        overflowStyle: OverflowStyle,\r\n        overflowScroll: boolean,\r\n        scrollbarsHideOffset: number,\r\n        scrollbarsHideOffsetArrange: boolean\r\n      ];\r\n    };\r\n\r\n    const [xOverflowStyle, xOverflowScroll, xScrollbarsHideOffset, xScrollbarsHideOffsetArrange] =\r\n      getStatePerAxis('overflowX', _nativeScrollbarsOverlaid.x, _nativeScrollbarsSize.x);\r\n    const [yOverflowStyle, yOverflowScroll, yScrollbarsHideOffset, yScrollbarsHideOffsetArrange] =\r\n      getStatePerAxis('overflowY', _nativeScrollbarsOverlaid.y, _nativeScrollbarsSize.y);\r\n\r\n    return {\r\n      _overflowStyle: {\r\n        x: xOverflowStyle,\r\n        y: yOverflowStyle,\r\n      },\r\n      _overflowScroll: {\r\n        x: xOverflowScroll,\r\n        y: yOverflowScroll,\r\n      },\r\n      _scrollbarsHideOffset: {\r\n        x: xScrollbarsHideOffset,\r\n        y: yScrollbarsHideOffset,\r\n      },\r\n      _scrollbarsHideOffsetArrange: {\r\n        x: xScrollbarsHideOffsetArrange,\r\n        y: yScrollbarsHideOffsetArrange,\r\n      },\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Sets the overflow property of the viewport and calculates the a overflow state according to the new parameters.\r\n   * @param showNativeOverlaidScrollbars Whether to show natively overlaid scrollbars.\r\n   * @param overflowAmount The overflow amount.\r\n   * @param overflow The overflow behavior according to the options.\r\n   * @param viewportStyleObj The viewport style object to which the overflow style shall be applied.\r\n   * @returns A object which represents the newly set overflow state.\r\n   */\r\n  const setViewportOverflowState = (\r\n    showNativeOverlaidScrollbars: boolean,\r\n    hasOverflow: XY<boolean>,\r\n    overflowOption: XY<OverflowBehavior>,\r\n    viewportStyleObj: StyleObject\r\n  ): ViewportOverflowState => {\r\n    const setAxisOverflowStyle = (behavior: OverflowBehavior, hasOverflowAxis: boolean) => {\r\n      const overflowVisible = overflowIsVisible(behavior);\r\n      const overflowVisibleBehavior =\r\n        (hasOverflowAxis && overflowVisible && behavior.replace(`${strVisible}-`, '')) || '';\r\n      return [\r\n        hasOverflowAxis && !overflowVisible ? behavior : '',\r\n        overflowIsVisible(overflowVisibleBehavior) ? 'hidden' : overflowVisibleBehavior,\r\n      ];\r\n    };\r\n\r\n    const [overflowX, visibleBehaviorX] = setAxisOverflowStyle(overflowOption.x, hasOverflow.x);\r\n    const [overflowY, visibleBehaviorY] = setAxisOverflowStyle(overflowOption.y, hasOverflow.y);\r\n\r\n    viewportStyleObj.overflowX = visibleBehaviorX && overflowY ? visibleBehaviorX : overflowX;\r\n    viewportStyleObj.overflowY = visibleBehaviorY && overflowX ? visibleBehaviorY : overflowY;\r\n\r\n    return getViewportOverflowState(showNativeOverlaidScrollbars, viewportStyleObj);\r\n  };\r\n\r\n  /**\r\n   * Hides the native scrollbars according to the passed parameters.\r\n   * @param viewportOverflowState The viewport overflow state.\r\n   * @param directionIsRTL Whether the direction is RTL or not.\r\n   * @param viewportArrange Whether special styles related to the viewport arrange strategy shall be applied.\r\n   * @param viewportStyleObj The viewport style object to which the needed styles shall be applied.\r\n   */\r\n  const hideNativeScrollbars: HideNativeScrollbars = (\r\n    viewportOverflowState,\r\n    directionIsRTL,\r\n    viewportArrange,\r\n    viewportStyleObj\r\n  ) => {\r\n    const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } = viewportOverflowState;\r\n    const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n    const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\r\n    const { _viewportPaddingStyle: viewportPaddingStyle } = getState();\r\n    const horizontalMarginKey: keyof StyleObject = directionIsRTL ? 'marginLeft' : 'marginRight';\r\n    const viewportHorizontalPaddingKey: keyof StyleObject = directionIsRTL\r\n      ? 'paddingLeft'\r\n      : 'paddingRight';\r\n    const horizontalMarginValue = viewportPaddingStyle[horizontalMarginKey] as number;\r\n    const verticalMarginValue = viewportPaddingStyle.marginBottom as number;\r\n    const horizontalPaddingValue = viewportPaddingStyle[viewportHorizontalPaddingKey] as number;\r\n    const verticalPaddingValue = viewportPaddingStyle.paddingBottom as number;\r\n\r\n    // horizontal\r\n    viewportStyleObj.width = `calc(100% + ${hideOffsetY + horizontalMarginValue * -1}px)`;\r\n    viewportStyleObj[horizontalMarginKey] = -hideOffsetY + horizontalMarginValue;\r\n\r\n    // vertical\r\n    viewportStyleObj.marginBottom = -hideOffsetX + verticalMarginValue;\r\n\r\n    // viewport arrange additional styles\r\n    if (viewportArrange) {\r\n      viewportStyleObj[viewportHorizontalPaddingKey] =\r\n        horizontalPaddingValue + (arrangeY ? hideOffsetY : 0);\r\n      viewportStyleObj.paddingBottom = verticalPaddingValue + (arrangeX ? hideOffsetX : 0);\r\n    }\r\n  };\r\n\r\n  const [arrangeViewport, undoViewportArrange] = scrollbarsHidingPlugin\r\n    ? scrollbarsHidingPlugin._overflowUpdateSegment(\r\n        doViewportArrange,\r\n        _viewport,\r\n        _viewportArrange,\r\n        getState,\r\n        getViewportOverflowState,\r\n        hideNativeScrollbars\r\n      )\r\n    : [(() => doViewportArrange) as ArrangeViewport, (() => [noop]) as UndoArrangeViewport];\r\n\r\n  return (updateHints, checkOption, force) => {\r\n    const {\r\n      _sizeChanged,\r\n      _hostMutation,\r\n      _contentMutation,\r\n      _paddingStyleChanged,\r\n      _heightIntrinsicChanged,\r\n      _directionChanged,\r\n    } = updateHints;\r\n    const { _heightIntrinsic, _directionIsRTL } = getState();\r\n    const [showNativeOverlaidScrollbarsOption, showNativeOverlaidScrollbarsChanged] =\r\n      checkOption<boolean>('nativeScrollbarsOverlaid.show');\r\n    const [overflow, overflowChanged] = checkOption<XY<OverflowBehavior>>('overflow');\r\n\r\n    const showNativeOverlaidScrollbars =\r\n      showNativeOverlaidScrollbarsOption &&\r\n      _nativeScrollbarsOverlaid.x &&\r\n      _nativeScrollbarsOverlaid.y;\r\n    const adjustFlexboxGlue =\r\n      !_viewportIsTarget &&\r\n      !_flexboxGlue &&\r\n      (_sizeChanged ||\r\n        _contentMutation ||\r\n        _hostMutation ||\r\n        showNativeOverlaidScrollbarsChanged ||\r\n        _heightIntrinsicChanged);\r\n    const overflowXVisible = overflowIsVisible(overflow.x);\r\n    const overflowYVisible = overflowIsVisible(overflow.y);\r\n    const overflowVisible = overflowXVisible || overflowYVisible;\r\n\r\n    let sizeFractionCache = getCurrentSizeFraction(force);\r\n    let viewportScrollSizeCache = getCurrentViewportScrollSizeCache(force);\r\n    let overflowAmuntCache = getCurrentOverflowAmountCache(force);\r\n\r\n    let preMeasureViewportOverflowState: ViewportOverflowState | undefined;\r\n\r\n    if (showNativeOverlaidScrollbarsChanged && _nativeScrollbarsHiding) {\r\n      _viewportAddRemoveClass(\r\n        classNameViewportScrollbarStyling,\r\n        dataValueHostViewportScrollbarStyling,\r\n        !showNativeOverlaidScrollbars\r\n      );\r\n    }\r\n\r\n    if (adjustFlexboxGlue) {\r\n      preMeasureViewportOverflowState = getViewportOverflowState(showNativeOverlaidScrollbars);\r\n      fixFlexboxGlue(preMeasureViewportOverflowState, _heightIntrinsic);\r\n    }\r\n\r\n    if (\r\n      _sizeChanged ||\r\n      _paddingStyleChanged ||\r\n      _contentMutation ||\r\n      _directionChanged ||\r\n      showNativeOverlaidScrollbarsChanged\r\n    ) {\r\n      if (overflowVisible) {\r\n        _viewportAddRemoveClass(classNameOverflowVisible, dataValueHostOverflowVisible, false);\r\n      }\r\n\r\n      const [redoViewportArrange, undoViewportArrangeOverflowState] = undoViewportArrange(\r\n        showNativeOverlaidScrollbars,\r\n        _directionIsRTL,\r\n        preMeasureViewportOverflowState\r\n      );\r\n      const [sizeFraction, sizeFractionChanged] = (sizeFractionCache = updateSizeFraction(force));\r\n      const [viewportScrollSize, viewportScrollSizeChanged] = (viewportScrollSizeCache =\r\n        updateViewportScrollSizeCache(force));\r\n      const viewportclientSize = clientSize(_viewport);\r\n      let arrangedViewportScrollSize = viewportScrollSize;\r\n      let arrangedViewportClientSize = viewportclientSize;\r\n\r\n      redoViewportArrange();\r\n\r\n      // if re measure is required (only required if content arrange strategy is used)\r\n      if (\r\n        (viewportScrollSizeChanged || sizeFractionChanged || showNativeOverlaidScrollbarsChanged) &&\r\n        undoViewportArrangeOverflowState &&\r\n        !showNativeOverlaidScrollbars &&\r\n        arrangeViewport(\r\n          undoViewportArrangeOverflowState,\r\n          viewportScrollSize,\r\n          sizeFraction,\r\n          _directionIsRTL\r\n        )\r\n      ) {\r\n        arrangedViewportClientSize = clientSize(_viewport);\r\n        arrangedViewportScrollSize = scrollSize(_viewport);\r\n      }\r\n\r\n      overflowAmuntCache = updateOverflowAmountCache(\r\n        getOverflowAmount(\r\n          {\r\n            w: max(viewportScrollSize.w, arrangedViewportScrollSize.w),\r\n            h: max(viewportScrollSize.h, arrangedViewportScrollSize.h),\r\n          }, // scroll size\r\n          {\r\n            w: arrangedViewportClientSize.w + max(0, viewportclientSize.w - viewportScrollSize.w),\r\n            h: arrangedViewportClientSize.h + max(0, viewportclientSize.h - viewportScrollSize.h),\r\n          }, // client size\r\n          sizeFraction\r\n        ),\r\n        force\r\n      );\r\n    }\r\n\r\n    const [overflowAmount, overflowAmountChanged] = overflowAmuntCache;\r\n    const [viewportScrollSize, viewportScrollSizeChanged] = viewportScrollSizeCache;\r\n    const [sizeFraction, sizeFractionChanged] = sizeFractionCache;\r\n    const hasOverflow = {\r\n      x: overflowAmount.w > 0,\r\n      y: overflowAmount.h > 0,\r\n    };\r\n    const removeClipping =\r\n      (overflowXVisible && overflowYVisible && (hasOverflow.x || hasOverflow.y)) ||\r\n      (overflowXVisible && hasOverflow.x && !hasOverflow.y) ||\r\n      (overflowYVisible && hasOverflow.y && !hasOverflow.x);\r\n\r\n    if (\r\n      _paddingStyleChanged ||\r\n      _directionChanged ||\r\n      sizeFractionChanged ||\r\n      viewportScrollSizeChanged ||\r\n      overflowAmountChanged ||\r\n      overflowChanged ||\r\n      showNativeOverlaidScrollbarsChanged ||\r\n      adjustFlexboxGlue\r\n    ) {\r\n      const viewportStyle: StyleObject = {\r\n        marginRight: 0,\r\n        marginBottom: 0,\r\n        marginLeft: 0,\r\n        width: '',\r\n        overflowY: '',\r\n        overflowX: '',\r\n      };\r\n      const viewportOverflowState = setViewportOverflowState(\r\n        showNativeOverlaidScrollbars,\r\n        hasOverflow,\r\n        overflow,\r\n        viewportStyle\r\n      );\r\n      const viewportArranged = arrangeViewport(\r\n        viewportOverflowState,\r\n        viewportScrollSize,\r\n        sizeFraction,\r\n        _directionIsRTL\r\n      );\r\n\r\n      if (!_viewportIsTarget) {\r\n        hideNativeScrollbars(\r\n          viewportOverflowState,\r\n          _directionIsRTL,\r\n          viewportArranged,\r\n          viewportStyle\r\n        );\r\n      }\r\n\r\n      if (adjustFlexboxGlue) {\r\n        fixFlexboxGlue(viewportOverflowState, _heightIntrinsic);\r\n      }\r\n\r\n      if (_viewportIsTarget) {\r\n        attr(_host, dataAttributeHostOverflowX, viewportStyle.overflowX as string);\r\n        attr(_host, dataAttributeHostOverflowY, viewportStyle.overflowY as string);\r\n      } else {\r\n        style(_viewport, viewportStyle);\r\n      }\r\n    }\r\n\r\n    attrClass(_host, dataAttributeHost, dataValueHostOverflowVisible, removeClipping);\r\n    conditionalClass(_padding, classNameOverflowVisible, removeClipping);\r\n    !_viewportIsTarget && conditionalClass(_viewport, classNameOverflowVisible, overflowVisible);\r\n\r\n    const [overflowStyle, overflowStyleChanged] = updateOverflowStyleCache(\r\n      getViewportOverflowState(showNativeOverlaidScrollbars)._overflowStyle\r\n    );\r\n\r\n    setState({\r\n      _overflowStyle: overflowStyle,\r\n      _overflowAmount: {\r\n        x: overflowAmount.w,\r\n        y: overflowAmount.h,\r\n      },\r\n      _hasOverflow: hasOverflow,\r\n    });\r\n\r\n    return {\r\n      _overflowStyleChanged: overflowStyleChanged,\r\n      _overflowAmountChanged: overflowAmountChanged,\r\n    };\r\n  };\r\n};\r\n","import { each, isNumber, scrollLeft, scrollTop, assignDeep, keys } from 'support';\r\nimport { getEnvironment } from 'environment';\r\nimport {\r\n  createTrinsicUpdate,\r\n  createPaddingUpdate,\r\n  createOverflowUpdate,\r\n} from 'setups/structureSetup/updateSegments';\r\nimport type { SetupState, SetupUpdateSegment, SetupUpdateCheckOption } from 'setups';\r\nimport type { StructureSetupState } from 'setups/structureSetup';\r\nimport type { StructureSetupElementsObj } from 'setups/structureSetup/structureSetup.elements';\r\n\r\nexport type CreateStructureUpdateSegment = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  state: SetupState<StructureSetupState>\r\n) => StructureSetupUpdateSegment;\r\n\r\nexport type StructureSetupUpdateSegment = SetupUpdateSegment<StructureSetupUpdateHints>;\r\n\r\nexport type StructureSetupUpdate = (\r\n  checkOption: SetupUpdateCheckOption,\r\n  updateHints: Partial<StructureSetupUpdateHints>,\r\n  force?: boolean\r\n) => StructureSetupUpdateHints;\r\n\r\nexport interface StructureSetupUpdateHints {\r\n  _sizeChanged: boolean;\r\n  _directionChanged: boolean;\r\n  _heightIntrinsicChanged: boolean;\r\n  _overflowAmountChanged: boolean;\r\n  _overflowStyleChanged: boolean;\r\n  _paddingStyleChanged: boolean;\r\n  _hostMutation: boolean;\r\n  _contentMutation: boolean;\r\n}\r\n\r\nconst prepareUpdateHints = <T extends StructureSetupUpdateHints>(\r\n  leading: Required<T>,\r\n  adaptive?: Partial<T>,\r\n  force?: boolean\r\n): Required<T> => {\r\n  const result = {};\r\n  const finalAdaptive = adaptive || {};\r\n  const objKeys = keys(leading).concat(keys(finalAdaptive));\r\n\r\n  each(objKeys, (key) => {\r\n    const leadingValue = leading[key];\r\n    const adaptiveValue = finalAdaptive[key];\r\n    result[key] = !!(force || leadingValue || adaptiveValue);\r\n  });\r\n\r\n  return result as Required<T>;\r\n};\r\n\r\nexport const createStructureSetupUpdate = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  state: SetupState<StructureSetupState>\r\n): StructureSetupUpdate => {\r\n  const { _viewport } = structureSetupElements;\r\n  const {\r\n    _nativeScrollbarsHiding: _nativeScrollbarStyling,\r\n    _nativeScrollbarsOverlaid: _nativeScrollbarIsOverlaid,\r\n    _flexboxGlue,\r\n  } = getEnvironment();\r\n  const doViewportArrange =\r\n    !_nativeScrollbarStyling && (_nativeScrollbarIsOverlaid.x || _nativeScrollbarIsOverlaid.y);\r\n\r\n  const updateSegments: StructureSetupUpdateSegment[] = [\r\n    createTrinsicUpdate(structureSetupElements, state),\r\n    createPaddingUpdate(structureSetupElements, state),\r\n    createOverflowUpdate(structureSetupElements, state),\r\n  ];\r\n\r\n  return (\r\n    checkOption: SetupUpdateCheckOption,\r\n    updateHints: Partial<StructureSetupUpdateHints>,\r\n    force?: boolean\r\n  ) => {\r\n    const initialUpdateHints = prepareUpdateHints(\r\n      assignDeep(\r\n        {\r\n          _sizeChanged: false,\r\n          _paddingStyleChanged: false,\r\n          _directionChanged: false,\r\n          _heightIntrinsicChanged: false,\r\n          _overflowAmountChanged: false,\r\n          _overflowStyleChanged: false,\r\n          _hostMutation: false,\r\n          _contentMutation: false,\r\n        },\r\n        updateHints\r\n      ),\r\n      {},\r\n      force\r\n    );\r\n    const adjustScrollOffset = doViewportArrange || !_flexboxGlue;\r\n    const scrollOffsetX = adjustScrollOffset && scrollLeft(_viewport);\r\n    const scrollOffsetY = adjustScrollOffset && scrollTop(_viewport);\r\n\r\n    let adaptivedUpdateHints: Required<StructureSetupUpdateHints> = initialUpdateHints;\r\n    each(updateSegments, (updateSegment) => {\r\n      adaptivedUpdateHints = prepareUpdateHints<StructureSetupUpdateHints>(\r\n        adaptivedUpdateHints,\r\n        updateSegment(adaptivedUpdateHints, checkOption, !!force) || {},\r\n        force\r\n      );\r\n    });\r\n\r\n    if (isNumber(scrollOffsetX)) {\r\n      scrollLeft(_viewport, scrollOffsetX);\r\n    }\r\n    if (isNumber(scrollOffsetY)) {\r\n      scrollTop(_viewport, scrollOffsetY);\r\n    }\r\n\r\n    return adaptivedUpdateHints;\r\n  };\r\n};\r\n","import {\r\n  Cache,\r\n  CacheValues,\r\n  createCache,\r\n  createDOM,\r\n  style,\r\n  scrollLeft,\r\n  scrollTop,\r\n  runEachAndClear,\r\n  prependChildren,\r\n  removeElements,\r\n  on,\r\n  stopAndPrevent,\r\n  addClass,\r\n  push,\r\n  ResizeObserverConstructor,\r\n  isArray,\r\n  isBoolean,\r\n  removeClass,\r\n  isObject,\r\n} from 'support';\r\nimport { getEnvironment } from 'environment';\r\nimport {\r\n  classNameSizeObserver,\r\n  classNameSizeObserverAppear,\r\n  classNameSizeObserverListener,\r\n} from 'classnames';\r\nimport { getPlugins, SizeObserverPluginInstance, sizeObserverPluginName } from 'plugins';\r\n\r\nexport interface SizeObserverOptions {\r\n  _direction?: boolean;\r\n  _appear?: boolean;\r\n}\r\n\r\nexport interface SizeObserverCallbackParams {\r\n  _sizeChanged: boolean;\r\n  _directionIsRTLCache?: CacheValues<boolean>;\r\n  _appear?: boolean;\r\n}\r\n\r\nexport type DestroySizeObserver = () => void;\r\n\r\nconst animationStartEventName = 'animationstart';\r\nconst scrollEventName = 'scroll';\r\nconst scrollAmount = 3333333;\r\nconst getElmDirectionIsRTL = (elm: HTMLElement): boolean => style(elm, 'direction') === 'rtl';\r\nconst domRectHasDimensions = (rect?: DOMRectReadOnly) => rect && (rect.height || rect.width);\r\n\r\n/**\r\n * Creates a size observer which observes any size, padding, border, margin and box-sizing changes of the target element. Depending on the options also direction and appear can be observed.\r\n * @param target The target element which shall be observed.\r\n * @param onSizeChangedCallback The callback which gets called after a size change was detected.\r\n * @param options The options for size detection, whether to observe also direction and appear.\r\n * @returns A object which represents the instance of the size observer.\r\n */\r\nexport const createSizeObserver = (\r\n  target: HTMLElement,\r\n  onSizeChangedCallback: (params: SizeObserverCallbackParams) => any,\r\n  options?: SizeObserverOptions\r\n): DestroySizeObserver => {\r\n  const { _direction: observeDirectionChange = false, _appear: observeAppearChange = false } =\r\n    options || {};\r\n  const sizeObserverPlugin = getPlugins()[sizeObserverPluginName] as\r\n    | SizeObserverPluginInstance\r\n    | undefined;\r\n  const { _rtlScrollBehavior: rtlScrollBehavior } = getEnvironment();\r\n  const baseElements = createDOM(\r\n    `<div class=\"${classNameSizeObserver}\"><div class=\"${classNameSizeObserverListener}\"></div></div>`\r\n  );\r\n  const sizeObserver = baseElements[0] as HTMLElement;\r\n  const listenerElement = sizeObserver.firstChild as HTMLElement;\r\n  const getIsDirectionRTL = getElmDirectionIsRTL.bind(0, sizeObserver);\r\n  const [updateResizeObserverContentRectCache] = createCache<DOMRectReadOnly | undefined>({\r\n    _initialValue: undefined,\r\n    _alwaysUpdateValues: true,\r\n    _equal: (currVal, newVal) =>\r\n      !(\r\n        !currVal || // if no initial value\r\n        // if from display: none to display: block\r\n        (!domRectHasDimensions(currVal) && domRectHasDimensions(newVal))\r\n      ),\r\n  });\r\n  const onSizeChangedCallbackProxy = (\r\n    sizeChangedContext?: CacheValues<boolean> | ResizeObserverEntry[] | Event | boolean\r\n  ) => {\r\n    const isResizeObserverCall =\r\n      isArray(sizeChangedContext) &&\r\n      sizeChangedContext.length > 0 &&\r\n      isObject(sizeChangedContext[0]);\r\n\r\n    const hasDirectionCache =\r\n      !isResizeObserverCall && isBoolean((sizeChangedContext as CacheValues<boolean>)[0]);\r\n\r\n    let skip = false;\r\n    let appear: boolean | number | undefined = false;\r\n    let doDirectionScroll = true; // always true if sizeChangedContext is Event (appear callback or RO. Polyfill)\r\n\r\n    // if triggered from RO.\r\n    if (isResizeObserverCall) {\r\n      const [currRContentRect, , prevContentRect] = updateResizeObserverContentRectCache(\r\n        (sizeChangedContext as ResizeObserverEntry[]).pop()!.contentRect\r\n      );\r\n      const hasDimensions = domRectHasDimensions(currRContentRect);\r\n      const hadDimensions = domRectHasDimensions(prevContentRect);\r\n      skip = !prevContentRect || !hasDimensions; // skip on initial RO. call or if display is none\r\n      appear = !hadDimensions && hasDimensions;\r\n\r\n      doDirectionScroll = !skip; // direction scroll when not skipping\r\n    }\r\n    // else if its triggered with DirectionCache\r\n    else if (hasDirectionCache) {\r\n      [, doDirectionScroll] = sizeChangedContext as CacheValues<boolean>; // direction scroll when DirectionCache changed, false otherwise\r\n    }\r\n    // else if it triggered with appear from polyfill\r\n    else {\r\n      appear = sizeChangedContext === true;\r\n    }\r\n\r\n    if (observeDirectionChange && doDirectionScroll) {\r\n      const rtl = hasDirectionCache\r\n        ? (sizeChangedContext as CacheValues<boolean>)[0]\r\n        : getElmDirectionIsRTL(sizeObserver);\r\n      scrollLeft(\r\n        sizeObserver,\r\n        rtl\r\n          ? rtlScrollBehavior.n\r\n            ? -scrollAmount\r\n            : rtlScrollBehavior.i\r\n            ? 0\r\n            : scrollAmount\r\n          : scrollAmount\r\n      );\r\n      scrollTop(sizeObserver, scrollAmount);\r\n    }\r\n\r\n    if (!skip) {\r\n      onSizeChangedCallback({\r\n        _sizeChanged: !hasDirectionCache,\r\n        _directionIsRTLCache: hasDirectionCache\r\n          ? (sizeChangedContext as CacheValues<boolean>)\r\n          : undefined,\r\n        _appear: !!appear,\r\n      });\r\n    }\r\n  };\r\n  const offListeners: (() => void)[] = [];\r\n  let appearCallback: ((...args: any) => any) | false = observeAppearChange\r\n    ? onSizeChangedCallbackProxy\r\n    : false;\r\n  let directionIsRTLCache: Cache<boolean> | undefined;\r\n\r\n  if (ResizeObserverConstructor) {\r\n    const resizeObserverInstance = new ResizeObserverConstructor(onSizeChangedCallbackProxy);\r\n    resizeObserverInstance.observe(listenerElement);\r\n    push(offListeners, () => {\r\n      resizeObserverInstance.disconnect();\r\n    });\r\n  } else if (sizeObserverPlugin) {\r\n    const [pluginAppearCallback, pluginOffListeners] = sizeObserverPlugin._(\r\n      listenerElement,\r\n      onSizeChangedCallbackProxy,\r\n      observeAppearChange\r\n    );\r\n    appearCallback = pluginAppearCallback;\r\n    push(offListeners, pluginOffListeners);\r\n  }\r\n\r\n  if (observeDirectionChange) {\r\n    directionIsRTLCache = createCache(\r\n      {\r\n        _initialValue: !getIsDirectionRTL(), // invert current value to trigger initial change\r\n      },\r\n      getIsDirectionRTL\r\n    );\r\n    const [updateDirectionIsRTLCache] = directionIsRTLCache;\r\n\r\n    push(\r\n      offListeners,\r\n      on(sizeObserver, scrollEventName, (event: Event) => {\r\n        const directionIsRTLCacheValues = updateDirectionIsRTLCache();\r\n        const [directionIsRTL, directionIsRTLChanged] = directionIsRTLCacheValues;\r\n\r\n        if (directionIsRTLChanged) {\r\n          removeClass(listenerElement, 'ltr rtl');\r\n          if (directionIsRTL) {\r\n            addClass(listenerElement, 'rtl');\r\n          } else {\r\n            addClass(listenerElement, 'ltr');\r\n          }\r\n          onSizeChangedCallbackProxy(directionIsRTLCacheValues);\r\n        }\r\n\r\n        stopAndPrevent(event);\r\n      })\r\n    );\r\n  }\r\n\r\n  // appearCallback is always needed on scroll-observer strategy to reset it\r\n  if (appearCallback) {\r\n    addClass(sizeObserver, classNameSizeObserverAppear);\r\n    push(\r\n      offListeners,\r\n      on(sizeObserver, animationStartEventName, appearCallback, {\r\n        // Fire only once for \"CSS is ready\" event if ResizeObserver strategy is used\r\n        _once: !!ResizeObserverConstructor,\r\n      })\r\n    );\r\n  }\r\n\r\n  prependChildren(target, sizeObserver);\r\n\r\n  return () => {\r\n    runEachAndClear(offListeners);\r\n    removeElements(sizeObserver);\r\n  };\r\n};\r\n","import {\r\n  WH,\r\n  CacheValues,\r\n  createDiv,\r\n  offsetSize,\r\n  runEachAndClear,\r\n  prependChildren,\r\n  removeElements,\r\n  createCache,\r\n  push,\r\n  IntersectionObserverConstructor,\r\n} from 'support';\r\nimport { createSizeObserver } from 'observers/sizeObserver';\r\nimport { classNameTrinsicObserver } from 'classnames';\r\n\r\nexport type DestroyTrinsicObserver = () => void;\r\n\r\nconst isHeightIntrinsic = (ioEntryOrSize: IntersectionObserverEntry | WH<number>): boolean =>\r\n  (ioEntryOrSize as WH<number>).h === 0 ||\r\n  (ioEntryOrSize as IntersectionObserverEntry).isIntersecting ||\r\n  (ioEntryOrSize as IntersectionObserverEntry).intersectionRatio > 0;\r\n\r\n/**\r\n * Creates a trinsic observer which observes changes to intrinsic or extrinsic sizing for the height of the target element.\r\n * @param target The element which shall be observed.\r\n * @param onTrinsicChangedCallback The callback which gets called after a change was detected.\r\n * @returns A object which represents the instance of the trinsic observer.\r\n */\r\nexport const createTrinsicObserver = (\r\n  target: HTMLElement,\r\n  onTrinsicChangedCallback: (heightIntrinsic: CacheValues<boolean>) => any\r\n): DestroyTrinsicObserver => {\r\n  const trinsicObserver = createDiv(classNameTrinsicObserver);\r\n  const offListeners: (() => void)[] = [];\r\n  const [updateHeightIntrinsicCache] = createCache({\r\n    _initialValue: false,\r\n  });\r\n\r\n  const triggerOnTrinsicChangedCallback = (\r\n    updateValue?: IntersectionObserverEntry | WH<number>\r\n  ) => {\r\n    if (updateValue) {\r\n      const heightIntrinsic = updateHeightIntrinsicCache(isHeightIntrinsic(updateValue));\r\n      const [, heightIntrinsicChanged] = heightIntrinsic;\r\n\r\n      if (heightIntrinsicChanged) {\r\n        onTrinsicChangedCallback(heightIntrinsic);\r\n      }\r\n    }\r\n  };\r\n\r\n  if (IntersectionObserverConstructor) {\r\n    const intersectionObserverInstance: IntersectionObserver = new IntersectionObserverConstructor(\r\n      (entries: IntersectionObserverEntry[]) => {\r\n        if (entries && entries.length > 0) {\r\n          triggerOnTrinsicChangedCallback(entries.pop());\r\n        }\r\n      },\r\n      { root: target }\r\n    );\r\n    intersectionObserverInstance.observe(trinsicObserver);\r\n    push(offListeners, () => {\r\n      intersectionObserverInstance.disconnect();\r\n    });\r\n  } else {\r\n    const onSizeChanged = () => {\r\n      const newSize = offsetSize(trinsicObserver);\r\n      triggerOnTrinsicChangedCallback(newSize);\r\n    };\r\n    push(offListeners, createSizeObserver(trinsicObserver, onSizeChanged));\r\n    onSizeChanged();\r\n  }\r\n\r\n  prependChildren(target, trinsicObserver);\r\n\r\n  return () => {\r\n    runEachAndClear(offListeners);\r\n    removeElements(trinsicObserver);\r\n  };\r\n};\r\n","import {\r\n  each,\r\n  noop,\r\n  debounce,\r\n  indexOf,\r\n  isString,\r\n  MutationObserverConstructor,\r\n  isEmptyArray,\r\n  on,\r\n  attr,\r\n  is,\r\n  find,\r\n  push,\r\n} from 'support';\r\n\r\ntype DOMContentObserverCallback = (contentChangedTroughEvent: boolean) => any;\r\n\r\ntype DOMTargetObserverCallback = (targetChangedAttrs: string[], targetStyleChanged: boolean) => any;\r\n\r\ninterface DOMObserverOptionsBase {\r\n  _attributes?: string[];\r\n  _styleChangingAttributes?: string[];\r\n  /**\r\n   * A function which can ignore a changed attribute if it returns true.\r\n   * for DOMTargetObserver this applies to the changes to the observed target\r\n   * for DOMContentObserver this applies to changes to nested targets -> nested targets are elements which match the \"_nestedTargetSelector\" selector\r\n   */\r\n  _ignoreTargetChange?: DOMObserverIgnoreTargetChange;\r\n}\r\n\r\ninterface DOMContentObserverOptions extends DOMObserverOptionsBase {\r\n  _eventContentChange?: DOMObserverEventContentChange; // [selector, eventname(s) | function returning eventname(s)] -> eventnames divided by whitespaces\r\n  _nestedTargetSelector?: string;\r\n  _ignoreContentChange?: DOMObserverIgnoreContentChange; // function which will prevent marking certain dom changes as content change if it returns true\r\n}\r\n\r\ntype DOMTargetObserverOptions = DOMObserverOptionsBase;\r\n\r\ntype ContentChangeArrayItem = [selector?: string, eventNames?: string] | null | undefined;\r\n\r\nexport type DOMObserverEventContentChange =\r\n  | Array<ContentChangeArrayItem>\r\n  | false\r\n  | null\r\n  | undefined;\r\n\r\nexport type DOMObserverIgnoreContentChange = (\r\n  mutation: MutationRecord,\r\n  isNestedTarget: boolean,\r\n  domObserverTarget: HTMLElement,\r\n  domObserverOptions?: DOMContentObserverOptions\r\n) => boolean;\r\n\r\nexport type DOMObserverIgnoreTargetChange = (\r\n  target: Node,\r\n  attributeName: string,\r\n  oldAttributeValue: string | null,\r\n  newAttributeValue: string | null\r\n) => boolean;\r\n\r\nexport type DOMObserverCallback<ContentObserver extends boolean> = ContentObserver extends true\r\n  ? DOMContentObserverCallback\r\n  : DOMTargetObserverCallback;\r\n\r\nexport type DOMObserverOptions<ContentObserver extends boolean> = ContentObserver extends true\r\n  ? DOMContentObserverOptions\r\n  : DOMTargetObserverOptions;\r\n\r\nexport type DOMObserver = [destroy: () => void, update: () => void];\r\n\r\ntype EventContentChangeUpdateElement = (getElements?: (selector: string) => Node[]) => void;\r\ntype EventContentChange = [destroy: () => void, updateElements: EventContentChangeUpdateElement];\r\n\r\n/**\r\n * Creates a set of helper functions to observe events of elements inside the target element.\r\n * @param target The target element of which the children elements shall be observed. (not only direct children but also nested ones)\r\n * @param eventContentChange The event content change array. (array of tuples: selector and eventname(s))\r\n * @param callback Callback which is called if one of the elements emits the corresponding event.\r\n * @returns A object which contains a set of helper functions to destroy and update the observation of elements.\r\n */\r\nconst createEventContentChange = (\r\n  target: Element,\r\n  callback: (...args: any) => any,\r\n  eventContentChange?: DOMObserverEventContentChange\r\n): EventContentChange => {\r\n  let map: WeakMap<Node, [string, () => any]> | undefined; // weak map to prevent memory leak for detached elements\r\n  let destroyed = false;\r\n  const destroy = () => {\r\n    destroyed = true;\r\n  };\r\n  const updateElements: EventContentChangeUpdateElement = (getElements?) => {\r\n    if (eventContentChange) {\r\n      const eventElmList = eventContentChange.reduce<Array<[Node[], string]>>((arr, item) => {\r\n        if (item) {\r\n          const selector = item[0];\r\n          const eventNames = item[1];\r\n          const elements =\r\n            eventNames &&\r\n            selector &&\r\n            (getElements ? getElements(selector) : find(selector, target));\r\n\r\n          if (elements && elements.length && eventNames && isString(eventNames)) {\r\n            push(arr, [elements, eventNames.trim()], true);\r\n          }\r\n        }\r\n        return arr;\r\n      }, []);\r\n\r\n      each(eventElmList, (item) =>\r\n        each(item[0], (elm) => {\r\n          const eventNames = item[1];\r\n          const entry = map!.get(elm);\r\n\r\n          if (entry) {\r\n            const entryEventNames = entry[0];\r\n            const entryOff = entry[1];\r\n\r\n            // in case an already registered element is registered again, unregister the previous events\r\n            if (entryEventNames === eventNames) {\r\n              entryOff();\r\n            }\r\n          }\r\n\r\n          const off = on(elm, eventNames, (event: Event) => {\r\n            if (destroyed) {\r\n              off();\r\n              map!.delete(elm);\r\n            } else {\r\n              callback(event);\r\n            }\r\n          });\r\n          map!.set(elm, [eventNames, off]);\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  if (eventContentChange) {\r\n    map = new WeakMap();\r\n    updateElements();\r\n  }\r\n\r\n  return [destroy, updateElements];\r\n};\r\n\r\n/**\r\n * Creates a DOM observer which observes DOM changes to either the target element or its children.\r\n * @param target The element which shall be observed.\r\n * @param isContentObserver Whether this observer is just observing the target or just the targets children. (not only direct children but also nested ones)\r\n * @param callback The callback which gets called if a change was detected.\r\n * @param options The options for DOM change detection.\r\n * @returns A object which represents the instance of the DOM observer.\r\n */\r\nexport const createDOMObserver = <ContentObserver extends boolean>(\r\n  target: HTMLElement,\r\n  isContentObserver: ContentObserver,\r\n  callback: DOMObserverCallback<ContentObserver>,\r\n  options?: DOMObserverOptions<ContentObserver>\r\n): DOMObserver => {\r\n  let isConnected = false;\r\n  const {\r\n    _attributes,\r\n    _styleChangingAttributes,\r\n    _eventContentChange,\r\n    _nestedTargetSelector,\r\n    _ignoreTargetChange,\r\n    _ignoreContentChange,\r\n  } = (options as DOMContentObserverOptions & DOMTargetObserverOptions) || {};\r\n  const [destroyEventContentChange, updateEventContentChangeElements] = createEventContentChange(\r\n    target,\r\n    debounce(\r\n      () => {\r\n        if (isConnected) {\r\n          (callback as DOMContentObserverCallback)(true);\r\n        }\r\n      },\r\n      { _timeout: 33, _maxDelay: 99 }\r\n    ),\r\n    _eventContentChange\r\n  );\r\n\r\n  // MutationObserver\r\n  const finalAttributes = _attributes || [];\r\n  const finalStyleChangingAttributes = _styleChangingAttributes || [];\r\n  const observedAttributes = finalAttributes.concat(finalStyleChangingAttributes);\r\n  const observerCallback = (mutations: MutationRecord[]) => {\r\n    const ignoreTargetChange = _ignoreTargetChange || noop;\r\n    const ignoreContentChange = _ignoreContentChange || noop;\r\n    const targetChangedAttrs: string[] = [];\r\n    const totalAddedNodes: Node[] = [];\r\n    let targetStyleChanged = false;\r\n    let contentChanged = false;\r\n    let childListChanged = false;\r\n    each(mutations, (mutation) => {\r\n      const { attributeName, target: mutationTarget, type, oldValue, addedNodes } = mutation;\r\n      const isAttributesType = type === 'attributes';\r\n      const isChildListType = type === 'childList';\r\n      const targetIsMutationTarget = target === mutationTarget;\r\n      const attributeValue =\r\n        isAttributesType && isString(attributeName)\r\n          ? attr(mutationTarget as HTMLElement, attributeName!)\r\n          : 0;\r\n      const attributeChanged = attributeValue !== 0 && oldValue !== attributeValue;\r\n      const styleChangingAttrChanged =\r\n        indexOf(finalStyleChangingAttributes, attributeName) > -1 && attributeChanged;\r\n\r\n      // if is content observer and something changed in children\r\n      if (isContentObserver && !targetIsMutationTarget) {\r\n        const notOnlyAttrChanged = !isAttributesType;\r\n        const contentAttrChanged = isAttributesType && styleChangingAttrChanged;\r\n        const isNestedTarget =\r\n          contentAttrChanged && _nestedTargetSelector && is(mutationTarget, _nestedTargetSelector);\r\n        const baseAssertion = isNestedTarget\r\n          ? !ignoreTargetChange(mutationTarget, attributeName!, oldValue, attributeValue)\r\n          : notOnlyAttrChanged || contentAttrChanged;\r\n        const contentFinalChanged =\r\n          baseAssertion && !ignoreContentChange(mutation, !!isNestedTarget, target, options);\r\n\r\n        push(totalAddedNodes, addedNodes);\r\n\r\n        contentChanged = contentChanged || contentFinalChanged;\r\n        childListChanged = childListChanged || isChildListType;\r\n      }\r\n      // if is target observer and target attr changed\r\n      if (\r\n        !isContentObserver &&\r\n        targetIsMutationTarget &&\r\n        attributeChanged &&\r\n        !ignoreTargetChange(mutationTarget, attributeName!, oldValue, attributeValue)\r\n      ) {\r\n        push(targetChangedAttrs, attributeName!);\r\n        targetStyleChanged = targetStyleChanged || styleChangingAttrChanged;\r\n      }\r\n    });\r\n\r\n    if (childListChanged && !isEmptyArray(totalAddedNodes)) {\r\n      // adds / removes the new elements from the event content change\r\n      updateEventContentChangeElements((selector) =>\r\n        totalAddedNodes.reduce<Node[]>((arr, node) => {\r\n          push(arr, find(selector, node));\r\n          return is(node, selector) ? push(arr, node) : arr;\r\n        }, [])\r\n      );\r\n    }\r\n\r\n    if (isContentObserver) {\r\n      contentChanged && (callback as DOMContentObserverCallback)(false);\r\n    } else if (!isEmptyArray(targetChangedAttrs) || targetStyleChanged) {\r\n      (callback as DOMTargetObserverCallback)(targetChangedAttrs, targetStyleChanged);\r\n    }\r\n  };\r\n  const mutationObserver: MutationObserver = new MutationObserverConstructor!(observerCallback);\r\n\r\n  // Connect\r\n  mutationObserver.observe(target, {\r\n    attributes: true,\r\n    attributeOldValue: true,\r\n    attributeFilter: observedAttributes,\r\n    subtree: isContentObserver,\r\n    childList: isContentObserver,\r\n    characterData: isContentObserver,\r\n  });\r\n  isConnected = true;\r\n\r\n  return [\r\n    () => {\r\n      if (isConnected) {\r\n        destroyEventContentChange();\r\n        mutationObserver.disconnect();\r\n        isConnected = false;\r\n      }\r\n    },\r\n    () => {\r\n      if (isConnected) {\r\n        observerCallback(mutationObserver.takeRecords());\r\n      }\r\n    },\r\n  ];\r\n};\r\n","import {\r\n  debounce,\r\n  isArray,\r\n  isNumber,\r\n  each,\r\n  indexOf,\r\n  isString,\r\n  attr,\r\n  removeAttr,\r\n  CacheValues,\r\n  keys,\r\n  liesBetween,\r\n  scrollSize,\r\n  equalWH,\r\n  createCache,\r\n  WH,\r\n  fractionalSize,\r\n  isFunction,\r\n  ResizeObserverConstructor,\r\n} from 'support';\r\nimport { getEnvironment } from 'environment';\r\nimport {\r\n  dataAttributeHost,\r\n  dataValueHostOverflowVisible,\r\n  classNameViewport,\r\n  classNameOverflowVisible,\r\n} from 'classnames';\r\nimport { createSizeObserver, SizeObserverCallbackParams } from 'observers/sizeObserver';\r\nimport { createTrinsicObserver } from 'observers/trinsicObserver';\r\nimport { createDOMObserver, DOMObserver } from 'observers/domObserver';\r\nimport type { SetupState, SetupUpdateCheckOption } from 'setups';\r\nimport type { StructureSetupState } from 'setups/structureSetup';\r\nimport type { StructureSetupElementsObj } from 'setups/structureSetup/structureSetup.elements';\r\nimport type {\r\n  StructureSetupUpdate,\r\n  StructureSetupUpdateHints,\r\n} from 'setups/structureSetup/structureSetup.update';\r\n\r\nexport type StructureSetupObserversUpdate = (checkOption: SetupUpdateCheckOption) => void;\r\n\r\nexport type StructureSetupObservers = [\r\n  updateObserverOptions: StructureSetupObserversUpdate,\r\n  destroy: () => void\r\n];\r\n\r\ntype ExcludeFromTuple<T extends readonly any[], E> = T extends [infer F, ...infer R]\r\n  ? [F] extends [E]\r\n    ? ExcludeFromTuple<R, E>\r\n    : [F, ...ExcludeFromTuple<R, E>]\r\n  : [];\r\n\r\nconst hostSelector = `[${dataAttributeHost}]`;\r\n\r\n// TODO: observer textarea attrs if textarea\r\n\r\nconst viewportSelector = `.${classNameViewport}`;\r\nconst viewportAttrsFromTarget = ['tabindex'];\r\nconst baseStyleChangingAttrsTextarea = ['wrap', 'cols', 'rows'];\r\nconst baseStyleChangingAttrs = ['id', 'class', 'style', 'open'];\r\n\r\nexport const createStructureSetupObservers = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  state: SetupState<StructureSetupState>,\r\n  structureSetupUpdate: (\r\n    ...args: ExcludeFromTuple<Parameters<StructureSetupUpdate>, Parameters<StructureSetupUpdate>[0]>\r\n  ) => any\r\n): StructureSetupObservers => {\r\n  let debounceTimeout: number | false | undefined;\r\n  let debounceMaxDelay: number | false | undefined;\r\n  let contentMutationObserver: DOMObserver | undefined;\r\n  const [, setState] = state;\r\n  const {\r\n    _host,\r\n    _viewport,\r\n    _content,\r\n    _isTextarea,\r\n    _viewportIsTarget,\r\n    _viewportHasClass,\r\n    _viewportAddRemoveClass,\r\n  } = structureSetupElements;\r\n  const { _nativeScrollbarsHiding: _nativeScrollbarStyling, _flexboxGlue } = getEnvironment();\r\n\r\n  const [updateContentSizeCache] = createCache<WH<number>>(\r\n    {\r\n      _equal: equalWH,\r\n      _initialValue: { w: 0, h: 0 },\r\n    },\r\n    () => {\r\n      const has = _viewportHasClass(classNameOverflowVisible, dataValueHostOverflowVisible);\r\n      has && _viewportAddRemoveClass(classNameOverflowVisible, dataValueHostOverflowVisible);\r\n\r\n      const contentScroll = scrollSize(_content);\r\n      const viewportScroll = scrollSize(_viewport);\r\n      const fractional = fractionalSize(_viewport);\r\n\r\n      has && _viewportAddRemoveClass(classNameOverflowVisible, dataValueHostOverflowVisible, true);\r\n      return {\r\n        w: viewportScroll.w + contentScroll.w + fractional.w,\r\n        h: viewportScroll.h + contentScroll.h + fractional.h,\r\n      };\r\n    }\r\n  );\r\n  const contentMutationObserverAttr = _isTextarea\r\n    ? baseStyleChangingAttrsTextarea\r\n    : baseStyleChangingAttrs.concat(baseStyleChangingAttrsTextarea);\r\n  const structureSetupUpdateWithDebouncedAdaptiveUpdateHints = debounce(structureSetupUpdate, {\r\n    _timeout: () => debounceTimeout,\r\n    _maxDelay: () => debounceMaxDelay,\r\n    _mergeParams(prev, curr) {\r\n      const [prevObj] = prev;\r\n      const [currObj] = curr;\r\n      return [\r\n        keys(prevObj)\r\n          .concat(keys(currObj))\r\n          .reduce((obj, key) => {\r\n            obj[key] = prevObj[key] || currObj[key];\r\n            return obj;\r\n          }, {}),\r\n      ] as [Partial<StructureSetupUpdateHints>];\r\n    },\r\n  });\r\n\r\n  const updateViewportAttrsFromHost = (attributes?: string[]) => {\r\n    each(attributes || viewportAttrsFromTarget, (attribute) => {\r\n      if (indexOf(viewportAttrsFromTarget, attribute) > -1) {\r\n        const hostAttr = attr(_host, attribute);\r\n        if (isString(hostAttr)) {\r\n          attr(_viewport, attribute, hostAttr);\r\n        } else {\r\n          removeAttr(_viewport, attribute);\r\n        }\r\n      }\r\n    });\r\n  };\r\n  const onTrinsicChanged = (heightIntrinsicCache: CacheValues<boolean>) => {\r\n    const [heightIntrinsic, heightIntrinsicChanged] = heightIntrinsicCache;\r\n    setState({ _heightIntrinsic: heightIntrinsic });\r\n    structureSetupUpdate({ _heightIntrinsicChanged: heightIntrinsicChanged });\r\n  };\r\n  const onSizeChanged = ({\r\n    _sizeChanged,\r\n    _directionIsRTLCache,\r\n    _appear,\r\n  }: SizeObserverCallbackParams) => {\r\n    const updateFn =\r\n      !_sizeChanged || _appear\r\n        ? structureSetupUpdate\r\n        : structureSetupUpdateWithDebouncedAdaptiveUpdateHints;\r\n\r\n    let directionChanged = false;\r\n    if (_directionIsRTLCache) {\r\n      const [directionIsRTL, directionIsRTLChanged] = _directionIsRTLCache;\r\n      directionChanged = directionIsRTLChanged;\r\n      setState({ _directionIsRTL: directionIsRTL });\r\n    }\r\n\r\n    updateFn({ _sizeChanged, _directionChanged: directionChanged });\r\n  };\r\n  const onContentMutation = (contentChangedTroughEvent: boolean) => {\r\n    const [, contentSizeChanged] = updateContentSizeCache();\r\n    // if contentChangedTroughEvent is true its already debounced\r\n    const updateFn = contentChangedTroughEvent\r\n      ? structureSetupUpdate\r\n      : structureSetupUpdateWithDebouncedAdaptiveUpdateHints;\r\n\r\n    if (contentSizeChanged) {\r\n      updateFn({\r\n        _contentMutation: true,\r\n      });\r\n    }\r\n  };\r\n  const onHostMutation = (targetChangedAttrs: string[], targetStyleChanged: boolean) => {\r\n    if (targetStyleChanged) {\r\n      structureSetupUpdateWithDebouncedAdaptiveUpdateHints({\r\n        _hostMutation: true,\r\n      });\r\n    } else if (!_viewportIsTarget) {\r\n      updateViewportAttrsFromHost(targetChangedAttrs);\r\n    }\r\n  };\r\n\r\n  const destroyTrinsicObserver =\r\n    (_content || !_flexboxGlue) && createTrinsicObserver(_host, onTrinsicChanged);\r\n  const destroySizeObserver =\r\n    !_viewportIsTarget &&\r\n    createSizeObserver(_host, onSizeChanged, {\r\n      _appear: true,\r\n      _direction: !_nativeScrollbarStyling,\r\n    });\r\n  const [destroyHostMutationObserver] = createDOMObserver(_host, false, onHostMutation, {\r\n    _styleChangingAttributes: baseStyleChangingAttrs,\r\n    _attributes: baseStyleChangingAttrs.concat(viewportAttrsFromTarget),\r\n  });\r\n\r\n  const viewportIsTargetResizeObserver =\r\n    _viewportIsTarget &&\r\n    new ResizeObserverConstructor!(onSizeChanged.bind(0, { _sizeChanged: true }));\r\n\r\n  viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.observe(_host);\r\n  updateViewportAttrsFromHost();\r\n\r\n  return [\r\n    (checkOption) => {\r\n      const [ignoreMutation] = checkOption<string[] | null>('updating.ignoreMutation');\r\n      const [attributes, attributesChanged] = checkOption<string[] | null>('updating.attributes');\r\n      const [elementEvents, elementEventsChanged] = checkOption<Array<[string, string]> | null>(\r\n        'updating.elementEvents'\r\n      );\r\n      const [debounceValue, debounceChanged] = checkOption<Array<number> | number | null>(\r\n        'updating.debounce'\r\n      );\r\n      const updateContentMutationObserver = elementEventsChanged || attributesChanged;\r\n      const ignoreMutationFromOptions = (mutation: MutationRecord) =>\r\n        isFunction(ignoreMutation) && ignoreMutation(mutation);\r\n\r\n      if (updateContentMutationObserver) {\r\n        if (contentMutationObserver) {\r\n          contentMutationObserver[1](); // update\r\n          contentMutationObserver[0](); // destroy\r\n        }\r\n        contentMutationObserver = createDOMObserver(\r\n          _content || _viewport,\r\n          true,\r\n          onContentMutation,\r\n          {\r\n            _styleChangingAttributes: contentMutationObserverAttr.concat(attributes || []),\r\n            _attributes: contentMutationObserverAttr.concat(attributes || []),\r\n            _eventContentChange: elementEvents,\r\n            _nestedTargetSelector: hostSelector,\r\n            _ignoreContentChange: (mutation, isNestedTarget) => {\r\n              const { target, attributeName } = mutation;\r\n              const ignore =\r\n                !isNestedTarget && attributeName\r\n                  ? liesBetween(target as Element, hostSelector, viewportSelector)\r\n                  : false;\r\n              return ignore || !!ignoreMutationFromOptions(mutation);\r\n            },\r\n          }\r\n        );\r\n      }\r\n\r\n      if (debounceChanged) {\r\n        structureSetupUpdateWithDebouncedAdaptiveUpdateHints._flush();\r\n        if (isArray(debounceValue)) {\r\n          const timeout = debounceValue[0];\r\n          const maxWait = debounceValue[1];\r\n          debounceTimeout = isNumber(timeout) ? timeout : false;\r\n          debounceMaxDelay = isNumber(maxWait) ? maxWait : false;\r\n        } else if (isNumber(debounceValue)) {\r\n          debounceTimeout = debounceValue;\r\n          debounceMaxDelay = false;\r\n        } else {\r\n          debounceTimeout = false;\r\n          debounceMaxDelay = false;\r\n        }\r\n      }\r\n    },\r\n    () => {\r\n      contentMutationObserver && contentMutationObserver[0](); // destroy\r\n      destroyTrinsicObserver && destroyTrinsicObserver();\r\n      destroySizeObserver && destroySizeObserver();\r\n      viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.disconnect();\r\n      destroyHostMutationObserver();\r\n    },\r\n  ];\r\n};\r\n","import { createEventListenerHub } from 'support';\r\nimport { createState, createOptionCheck } from 'setups/setups';\r\nimport { createStructureSetupElements } from 'setups/structureSetup/structureSetup.elements';\r\nimport { createStructureSetupUpdate } from 'setups/structureSetup/structureSetup.update';\r\nimport { createStructureSetupObservers } from 'setups/structureSetup/structureSetup.observers';\r\nimport type { StructureSetupUpdateHints } from 'setups/structureSetup/structureSetup.update';\r\nimport type { StructureSetupElementsObj } from 'setups/structureSetup/structureSetup.elements';\r\nimport type { TRBL, XY, EventListener } from 'support';\r\nimport type { Options, ReadonlyOSOptions } from 'options';\r\nimport type { Setup } from 'setups';\r\nimport type { InitializationTarget } from 'initialization';\r\nimport type { PartialOptions, StyleObject, OverflowStyle } from 'typings';\r\n\r\nexport interface StructureSetupState {\r\n  _padding: TRBL;\r\n  _paddingAbsolute: boolean;\r\n  _viewportPaddingStyle: StyleObject;\r\n  _overflowAmount: XY<number>;\r\n  _overflowStyle: XY<OverflowStyle>;\r\n  _hasOverflow: XY<boolean>;\r\n  _heightIntrinsic: boolean;\r\n  _directionIsRTL: boolean;\r\n}\r\n\r\nexport interface StructureSetupStaticState {\r\n  _elements: StructureSetupElementsObj;\r\n  _appendElements: () => void;\r\n  _addOnUpdatedListener: (listener: EventListener<StructureSetupEventMap, 'u'>) => void;\r\n}\r\n\r\ntype StructureSetupEventMap = {\r\n  u: [\r\n    updateHints: StructureSetupUpdateHints,\r\n    changedOptions: PartialOptions<Options>,\r\n    force: boolean\r\n  ];\r\n};\r\n\r\nconst initialStructureSetupUpdateState: StructureSetupState = {\r\n  _padding: {\r\n    t: 0,\r\n    r: 0,\r\n    b: 0,\r\n    l: 0,\r\n  },\r\n  _paddingAbsolute: false,\r\n  _viewportPaddingStyle: {\r\n    marginRight: 0,\r\n    marginBottom: 0,\r\n    marginLeft: 0,\r\n    paddingTop: 0,\r\n    paddingRight: 0,\r\n    paddingBottom: 0,\r\n    paddingLeft: 0,\r\n  },\r\n  _overflowAmount: {\r\n    x: 0,\r\n    y: 0,\r\n  },\r\n  _overflowStyle: {\r\n    x: 'hidden',\r\n    y: 'hidden',\r\n  },\r\n  _hasOverflow: {\r\n    x: false,\r\n    y: false,\r\n  },\r\n  _heightIntrinsic: false,\r\n  _directionIsRTL: false,\r\n};\r\n\r\nexport const createStructureSetup = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOSOptions\r\n): Setup<StructureSetupState, StructureSetupStaticState> => {\r\n  const checkOptionsFallback = createOptionCheck(options, {});\r\n  const state = createState(initialStructureSetupUpdateState);\r\n  const [addEvent, removeEvent, triggerEvent] = createEventListenerHub<StructureSetupEventMap>();\r\n  const [getState] = state;\r\n  const [elements, appendElements, destroyElements] = createStructureSetupElements(target);\r\n  const updateStructure = createStructureSetupUpdate(elements, state);\r\n  const [updateObservers, destroyObservers] = createStructureSetupObservers(\r\n    elements,\r\n    state,\r\n    (updateHints) => {\r\n      triggerEvent('u', [updateStructure(checkOptionsFallback, updateHints), {}, false]);\r\n    }\r\n  );\r\n\r\n  const structureSetupState = getState.bind(0) as (() => StructureSetupState) &\r\n    StructureSetupStaticState;\r\n  structureSetupState._addOnUpdatedListener = (listener) => {\r\n    addEvent('u', listener);\r\n  };\r\n  structureSetupState._appendElements = appendElements;\r\n  structureSetupState._elements = elements;\r\n\r\n  return [\r\n    (changedOptions, force?) => {\r\n      const checkOption = createOptionCheck(options, changedOptions, force);\r\n      updateObservers(checkOption);\r\n      triggerEvent('u', [updateStructure(checkOption, {}, force), changedOptions, !!force]);\r\n    },\r\n    structureSetupState,\r\n    () => {\r\n      removeEvent();\r\n      destroyObservers();\r\n      destroyElements();\r\n    },\r\n  ];\r\n};\r\n","import { appendChildren, createDiv, removeElements } from 'support';\r\nimport {\r\n  classNameScrollbar,\r\n  classNameScrollbarHorizontal,\r\n  classNameScrollbarVertical,\r\n  classNameScrollbarTrack,\r\n  classNameScrollbarHandle,\r\n} from 'classnames';\r\nimport { getEnvironment } from 'environment';\r\nimport { dynamicInitializationElement as generalDynamicInitializationElement } from 'initialization';\r\nimport type { InitializationTarget } from 'initialization';\r\nimport type { StructureSetupElementsObj } from 'setups/structureSetup/structureSetup.elements';\r\nimport type {\r\n  ScrollbarsInitialization,\r\n  ScrollbarsInitializationStrategy,\r\n  ScrollbarsDynamicInitializationElement,\r\n} from 'setups/scrollbarsSetup/scrollbarsSetup.initialization';\r\n\r\nexport interface ScrollbarStructure {\r\n  _scrollbar: HTMLElement;\r\n  _track: HTMLElement;\r\n  _handle: HTMLElement;\r\n}\r\n\r\nexport interface ScrollbarsSetupElementsObj {\r\n  _horizontalScrollbarStructure: ScrollbarStructure;\r\n  _verticalScrollbarStructure: ScrollbarStructure;\r\n}\r\n\r\nexport type ScrollbarsSetupElements = [\r\n  elements: ScrollbarsSetupElementsObj,\r\n  appendElements: () => void,\r\n  destroy: () => void\r\n];\r\n\r\nconst generateScrollbarDOM = (scrollbarClassName: string): ScrollbarStructure => {\r\n  const scrollbar = createDiv(`${classNameScrollbar} ${scrollbarClassName}`);\r\n  const track = createDiv(classNameScrollbarTrack);\r\n  const handle = createDiv(classNameScrollbarHandle);\r\n\r\n  appendChildren(scrollbar, track);\r\n  appendChildren(track, handle);\r\n\r\n  return {\r\n    _scrollbar: scrollbar,\r\n    _track: track,\r\n    _handle: handle,\r\n  };\r\n};\r\n\r\nexport const createScrollbarsSetupElements = (\r\n  target: InitializationTarget,\r\n  structureSetupElements: StructureSetupElementsObj\r\n): ScrollbarsSetupElements => {\r\n  const { _getInitializationStrategy } = getEnvironment();\r\n  const { _scrollbarsSlot: environmentScrollbarSlot } =\r\n    _getInitializationStrategy() as ScrollbarsInitializationStrategy;\r\n  const { _target, _host, _viewport, _targetIsElm } = structureSetupElements;\r\n  const initializationScrollbarSlot =\r\n    !_targetIsElm && (target as ScrollbarsInitialization).scrollbarsSlot;\r\n  const evaluatedScrollbarSlot =\r\n    generalDynamicInitializationElement<ScrollbarsDynamicInitializationElement>(\r\n      [_target, _host, _viewport],\r\n      () => _host,\r\n      environmentScrollbarSlot,\r\n      initializationScrollbarSlot\r\n    );\r\n\r\n  const horizontalScrollbarStructure = generateScrollbarDOM(classNameScrollbarHorizontal);\r\n  const verticalScrollbarStructure = generateScrollbarDOM(classNameScrollbarVertical);\r\n\r\n  const { _scrollbar: horizontalScrollbar } = horizontalScrollbarStructure;\r\n  const { _scrollbar: verticalScrollbar } = verticalScrollbarStructure;\r\n\r\n  const appendElements = () => {\r\n    appendChildren(evaluatedScrollbarSlot, horizontalScrollbar);\r\n    appendChildren(evaluatedScrollbarSlot, verticalScrollbar);\r\n  };\r\n\r\n  return [\r\n    {\r\n      _horizontalScrollbarStructure: horizontalScrollbarStructure,\r\n      _verticalScrollbarStructure: verticalScrollbarStructure,\r\n    },\r\n    appendElements,\r\n    removeElements.bind(0, [horizontalScrollbar, verticalScrollbar]),\r\n  ];\r\n};\r\n","import { createState, createOptionCheck } from 'setups/setups';\r\nimport {\r\n  createScrollbarsSetupElements,\r\n  ScrollbarsSetupElementsObj,\r\n} from 'setups/scrollbarsSetup/scrollbarsSetup.elements';\r\nimport type { StructureSetupElementsObj } from 'setups/structureSetup/structureSetup.elements';\r\nimport type { ReadonlyOSOptions } from 'options';\r\nimport type { Setup } from 'setups';\r\nimport type { InitializationTarget } from 'initialization';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\r\nexport interface ScrollbarsSetupState {}\r\n\r\nexport interface ScrollbarsSetupStaticState {\r\n  _elements: ScrollbarsSetupElementsObj;\r\n  _appendElements: () => void;\r\n}\r\n\r\nexport const createScrollbarsSetup = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOSOptions,\r\n  structureSetupElements: StructureSetupElementsObj\r\n): Setup<ScrollbarsSetupState, ScrollbarsSetupStaticState> => {\r\n  const state = createState({});\r\n  const [getState] = state;\r\n\r\n  const [elements, appendElements, destroyElements] = createScrollbarsSetupElements(\r\n    target,\r\n    structureSetupElements\r\n  );\r\n\r\n  const scrollbarsSetupState = getState.bind(0) as (() => ScrollbarsSetupState) &\r\n    ScrollbarsSetupStaticState;\r\n  scrollbarsSetupState._elements = elements;\r\n  scrollbarsSetupState._appendElements = appendElements;\r\n\r\n  return [\r\n    (changedOptions, force?) => {\r\n      const checkOption = createOptionCheck(options, changedOptions, force);\r\n      // eslint-disable-next-line no-console\r\n      console.log(checkOption);\r\n    },\r\n    scrollbarsSetupState,\r\n    () => {\r\n      destroyElements();\r\n    },\r\n  ];\r\n};\r\n","import { OverlayScrollbars } from 'overlayscrollbars';\r\n\r\nconst targets: Set<Element> = new Set();\r\nconst targetInstanceMap: WeakMap<Element, OverlayScrollbars> = new WeakMap();\r\n\r\n/**\r\n * Adds the given OverlayScrollbars instance to the given element.\r\n * @param target The element which is the target of the OverlayScrollbars instance.\r\n * @param osInstance The OverlayScrollbars instance.\r\n */\r\nexport const addInstance = (target: Element, osInstance: OverlayScrollbars): void => {\r\n  targetInstanceMap.set(target, osInstance);\r\n  targets.add(target);\r\n};\r\n\r\n/**\r\n * Removes a OverlayScrollbars instance from the given element.\r\n * @param target The element from which its OverlayScrollbars instance shall be removed.\r\n */\r\nexport const removeInstance = (target: Element): void => {\r\n  targetInstanceMap.delete(target);\r\n  targets.delete(target);\r\n};\r\n\r\n/**\r\n * Gets the OverlayScrollbars from the given element or undefined if it doesn't have one.\r\n * @param target The element of which its OverlayScrollbars instance shall be get.\r\n */\r\nexport const getInstance = (target: Element): OverlayScrollbars | undefined =>\r\n  targetInstanceMap.get(target);\r\n\r\n/**\r\n * Gets a Map which represents all active OverayScrollbars instances.\r\n * The Key is the element and the value is the instance.\r\n */\r\nexport const allInstances = (): ReadonlyMap<Element, OverlayScrollbars> => {\r\n  const validTargetInstanceMap: Map<Element, OverlayScrollbars> = new Map();\r\n\r\n  targets.forEach((target: Element) => {\r\n    /* istanbul ignore else */\r\n    if (targetInstanceMap.has(target)) {\r\n      validTargetInstanceMap.set(target, targetInstanceMap.get(target)!);\r\n    }\r\n  });\r\n\r\n  targets.clear();\r\n\r\n  validTargetInstanceMap.forEach((instance: OverlayScrollbars, validTarget: Element) => {\r\n    targets.add(validTarget);\r\n  });\r\n\r\n  return validTargetInstanceMap;\r\n};\r\n","import {\r\n  assignDeep,\r\n  isEmptyObject,\r\n  each,\r\n  isFunction,\r\n  keys,\r\n  isHTMLElement,\r\n  XY,\r\n  TRBL,\r\n  createEventListenerHub,\r\n} from 'support';\r\nimport { createStructureSetup, createScrollbarsSetup } from 'setups';\r\nimport { getOptionsDiff, Options, ReadonlyOSOptions } from 'options';\r\nimport { getEnvironment } from 'environment';\r\nimport {\r\n  getPlugins,\r\n  addPlugin,\r\n  optionsValidationPluginName,\r\n  Plugin,\r\n  OptionsValidationPluginInstance,\r\n} from 'plugins';\r\nimport { addInstance, getInstance, removeInstance } from 'instances';\r\nimport type { PartialOptions, OverflowStyle } from 'typings';\r\nimport type {\r\n  InitializationTarget,\r\n  InitializationTargetObject,\r\n  InitializationStrategy,\r\n} from 'initialization';\r\nimport type {\r\n  InitialEventListeners as GeneralInitialEventListeners,\r\n  EventListener as GeneralEventListener,\r\n} from 'support/eventListeners';\r\n\r\nexport interface OverlayScrollbarsStatic {\r\n  (\r\n    target: InitializationTarget | InitializationTargetObject,\r\n    options?: PartialOptions<Options>,\r\n    eventListeners?: GeneralInitialEventListeners<EventListenerMap>\r\n  ): OverlayScrollbars;\r\n\r\n  plugin(osPlugin: Plugin | Plugin[]): void;\r\n  env(): Environment;\r\n}\r\n\r\nexport interface Environment {\r\n  scrollbarsSize: XY<number>;\r\n  scrollbarsOverlaid: XY<boolean>;\r\n  scrollbarsHiding: boolean;\r\n  rtlScrollBehavior: { n: boolean; i: boolean };\r\n  flexboxGlue: boolean;\r\n  cssCustomProperties: boolean;\r\n  defaultInitializationStrategy: InitializationStrategy;\r\n  defaultDefaultOptions: Options;\r\n\r\n  getInitializationStrategy(): InitializationStrategy;\r\n  setInitializationStrategy(newInitializationStrategy: Partial<InitializationStrategy>): void;\r\n  getDefaultOptions(): Options;\r\n  setDefaultOptions(newDefaultOptions: PartialOptions<Options>): void;\r\n}\r\n\r\nexport interface State {\r\n  padding: TRBL;\r\n  paddingAbsolute: boolean;\r\n  overflowAmount: XY<number>;\r\n  overflowStyle: XY<OverflowStyle>;\r\n  hasOverflow: XY<boolean>;\r\n  destroyed: boolean;\r\n}\r\n\r\nexport interface Elements {\r\n  target: HTMLElement;\r\n  host: HTMLElement;\r\n  padding: HTMLElement;\r\n  viewport: HTMLElement;\r\n  content: HTMLElement;\r\n}\r\n\r\nexport interface OnUpdatedEventListenerArgs {\r\n  updateHints: {\r\n    sizeChanged: boolean;\r\n    directionChanged: boolean;\r\n    heightIntrinsicChanged: boolean;\r\n    overflowAmountChanged: boolean;\r\n    overflowStyleChanged: boolean;\r\n    hostMutation: boolean;\r\n    contentMutation: boolean;\r\n  };\r\n  changedOptions: PartialOptions<Options>;\r\n  force: boolean;\r\n}\r\n\r\nexport type EventListenerMap = {\r\n  /**\r\n   * Triggered after all elements are initialized and appended.\r\n   */\r\n  initialized: [instance: OverlayScrollbars];\r\n  /**\r\n   * Triggered after an update.\r\n   */\r\n  updated: [instance: OverlayScrollbars, onUpdatedArgs: OnUpdatedEventListenerArgs];\r\n  /**\r\n   * Triggered after all elements, observers and events are destroyed.\r\n   */\r\n  destroyed: [instance: OverlayScrollbars, withdrawn: boolean];\r\n};\r\n\r\nexport type InitialEventListeners = GeneralInitialEventListeners<EventListenerMap>;\r\n\r\nexport type EventListener<Name extends keyof EventListenerMap> = GeneralEventListener<\r\n  EventListenerMap,\r\n  Name\r\n>;\r\n\r\nexport interface OverlayScrollbars {\r\n  options(): Options;\r\n  options(newOptions?: PartialOptions<Options>): Options;\r\n\r\n  update(force?: boolean): OverlayScrollbars;\r\n\r\n  destroy(): void;\r\n\r\n  state(): State;\r\n\r\n  elements(): Elements;\r\n\r\n  on<Name extends keyof EventListenerMap>(name: Name, listener: EventListener<Name>): () => void;\r\n  on<Name extends keyof EventListenerMap>(name: Name, listener: EventListener<Name>[]): () => void;\r\n\r\n  off<Name extends keyof EventListenerMap>(name: Name, listener: EventListener<Name>): void;\r\n  off<Name extends keyof EventListenerMap>(name: Name, listener: EventListener<Name>[]): void;\r\n}\r\n\r\n/**\r\n * Notes:\r\n * Height intrinsic detection use \"content: true\" init strategy - or open ticket for custom height intrinsic observer\r\n */\r\n\r\nexport const OverlayScrollbars: OverlayScrollbarsStatic = (\r\n  target,\r\n  options?,\r\n  eventListeners?\r\n): OverlayScrollbars => {\r\n  let destroyed = false;\r\n  const {\r\n    _getDefaultOptions,\r\n    _nativeScrollbarsOverlaid: _nativeScrollbarIsOverlaid,\r\n    _addListener: addEnvListener,\r\n  } = getEnvironment();\r\n  const plugins = getPlugins();\r\n  const instanceTarget = isHTMLElement(target) ? target : target.target;\r\n  const potentialInstance = getInstance(instanceTarget);\r\n  if (potentialInstance) {\r\n    return potentialInstance;\r\n  }\r\n\r\n  const optionsValidationPlugin = plugins[\r\n    optionsValidationPluginName\r\n  ] as OptionsValidationPluginInstance;\r\n  const validateOptions = (newOptions?: PartialOptions<Options>) => {\r\n    const opts = newOptions || {};\r\n    const validate = optionsValidationPlugin && optionsValidationPlugin._;\r\n    return validate ? validate(opts, true) : opts;\r\n  };\r\n  const currentOptions: ReadonlyOSOptions = assignDeep(\r\n    {},\r\n    _getDefaultOptions(),\r\n    validateOptions(options)\r\n  );\r\n  const [addEvent, removeEvent, triggerEvent] = createEventListenerHub(eventListeners);\r\n  const [updateStructure, structureState, destroyStructure] = createStructureSetup(\r\n    target,\r\n    currentOptions\r\n  );\r\n  const [updateScrollbars, scrollbarsState, destroyScrollbars] = createScrollbarsSetup(\r\n    target,\r\n    currentOptions,\r\n    structureState._elements\r\n  );\r\n  const update = (changedOptions: PartialOptions<Options>, force?: boolean) => {\r\n    updateStructure(changedOptions, force);\r\n    updateScrollbars(changedOptions, force);\r\n  };\r\n  const removeEnvListener = addEnvListener(update.bind(0, {}, true));\r\n  const destroy = (withdrawn?: boolean) => {\r\n    removeInstance(instanceTarget);\r\n    removeEnvListener();\r\n\r\n    destroyScrollbars();\r\n    destroyStructure();\r\n\r\n    destroyed = true;\r\n\r\n    // eslint-disable-next-line no-use-before-define\r\n    triggerEvent('destroyed', [instance, !!withdrawn]);\r\n    removeEvent();\r\n  };\r\n\r\n  const instance: OverlayScrollbars = {\r\n    options(newOptions?: PartialOptions<Options>) {\r\n      if (newOptions) {\r\n        const changedOptions = getOptionsDiff(currentOptions, validateOptions(newOptions));\r\n\r\n        if (!isEmptyObject(changedOptions)) {\r\n          assignDeep(currentOptions, changedOptions);\r\n          update(changedOptions);\r\n        }\r\n      }\r\n      return assignDeep({}, currentOptions);\r\n    },\r\n    on: addEvent,\r\n    off: (name, listener) => {\r\n      name && listener && removeEvent(name, listener as any);\r\n    },\r\n    state() {\r\n      const { _overflowAmount, _overflowStyle, _hasOverflow, _padding, _paddingAbsolute } =\r\n        structureState();\r\n      return assignDeep(\r\n        {},\r\n        {\r\n          overflowAmount: _overflowAmount,\r\n          overflowStyle: _overflowStyle,\r\n          hasOverflow: _hasOverflow,\r\n          padding: _padding,\r\n          paddingAbsolute: _paddingAbsolute,\r\n          destroyed,\r\n        }\r\n      );\r\n    },\r\n    elements() {\r\n      const { _target, _host, _padding, _viewport, _content } = structureState._elements;\r\n      return assignDeep(\r\n        {},\r\n        {\r\n          target: _target,\r\n          host: _host,\r\n          padding: _padding || _viewport,\r\n          viewport: _viewport,\r\n          content: _content || _viewport,\r\n        }\r\n      );\r\n    },\r\n    update(force?: boolean) {\r\n      update({}, force);\r\n      return instance;\r\n    },\r\n    destroy: destroy.bind(0),\r\n  };\r\n\r\n  each(keys(plugins), (pluginName) => {\r\n    const pluginInstance = plugins[pluginName];\r\n    if (isFunction(pluginInstance)) {\r\n      pluginInstance(OverlayScrollbars, instance);\r\n    }\r\n  });\r\n\r\n  if (\r\n    _nativeScrollbarIsOverlaid.x &&\r\n    _nativeScrollbarIsOverlaid.y &&\r\n    !currentOptions.nativeScrollbarsOverlaid.initialize\r\n  ) {\r\n    destroy(true);\r\n    return instance;\r\n  }\r\n\r\n  structureState._appendElements();\r\n  scrollbarsState._appendElements();\r\n\r\n  addInstance(instanceTarget, instance);\r\n  triggerEvent('initialized', [instance]);\r\n\r\n  structureState._addOnUpdatedListener((updateHints, changedOptions, force) => {\r\n    const {\r\n      _sizeChanged,\r\n      _directionChanged,\r\n      _heightIntrinsicChanged,\r\n      _overflowAmountChanged,\r\n      _overflowStyleChanged,\r\n      _contentMutation,\r\n      _hostMutation,\r\n    } = updateHints;\r\n\r\n    triggerEvent('updated', [\r\n      instance,\r\n      {\r\n        updateHints: {\r\n          sizeChanged: _sizeChanged,\r\n          directionChanged: _directionChanged,\r\n          heightIntrinsicChanged: _heightIntrinsicChanged,\r\n          overflowAmountChanged: _overflowAmountChanged,\r\n          overflowStyleChanged: _overflowStyleChanged,\r\n          contentMutation: _contentMutation,\r\n          hostMutation: _hostMutation,\r\n        },\r\n        changedOptions,\r\n        force,\r\n      },\r\n    ]);\r\n  });\r\n\r\n  return instance.update(true);\r\n};\r\n\r\nOverlayScrollbars.plugin = addPlugin;\r\nOverlayScrollbars.env = () => {\r\n  const {\r\n    _nativeScrollbarsSize,\r\n    _nativeScrollbarsOverlaid,\r\n    _nativeScrollbarsHiding,\r\n    _rtlScrollBehavior,\r\n    _flexboxGlue,\r\n    _cssCustomProperties,\r\n    _defaultInitializationStrategy,\r\n    _defaultDefaultOptions,\r\n    _getInitializationStrategy,\r\n    _setInitializationStrategy,\r\n    _getDefaultOptions,\r\n    _setDefaultOptions,\r\n  } = getEnvironment();\r\n  return assignDeep(\r\n    {},\r\n    {\r\n      scrollbarsSize: _nativeScrollbarsSize,\r\n      scrollbarsOverlaid: _nativeScrollbarsOverlaid,\r\n      scrollbarsHiding: _nativeScrollbarsHiding,\r\n      rtlScrollBehavior: _rtlScrollBehavior,\r\n      flexboxGlue: _flexboxGlue,\r\n      cssCustomProperties: _cssCustomProperties,\r\n      defaultInitializationStrategy: _defaultInitializationStrategy,\r\n      defaultDefaultOptions: _defaultDefaultOptions,\r\n\r\n      getInitializationStrategy: _getInitializationStrategy,\r\n      setInitializationStrategy: _setInitializationStrategy,\r\n      getDefaultOptions: _getDefaultOptions,\r\n      setDefaultOptions: _setDefaultOptions,\r\n    }\r\n  );\r\n};\r\n"],"names":["createCache","options","update","_initialValue","_equal","_alwaysUpdateValues","_value","_previous","cacheUpdateContextual","newValue","force","curr","newVal","changed","cacheUpdateIsolated","getCurrentCache","isUndefined","obj","undefined","isNull","isNumber","isString","isBoolean","isFunction","isArray","Array","isObject","isArrayLike","length","lengthCorrectFormat","isPlainObject","type","key","cstr","ctor","ctorProto","prototype","hasOwnConstructor","hasOwnProperty","call","hasIsPrototypeOf","isHTMLElement","instanceofObj","window","HTMLElement","nodeType","ElementNodeType","isElement","Element","each","source","callback","i","Object","keys","assignDeep","target","object1","object2","object3","object4","object5","object6","sources","copy","copyIsArray","src","clone","isEmptyObject","name","getSetProp","topLeft","fallback","elm","value","attr","attrName","getAttribute","setAttribute","scrollLeft","scrollTop","style","styles","getSingleStyle","getStyles","getStylesResult","computedStyle","getComputedStyle","getCSSVal","reduce","result","setCSSVal","Node","ELEMENT_NODE","toString","replace","toLowerCase","indexOf","arr","item","fromIndex","push","array","items","arrayIsSingleItem","apply","from","Set","forEach","isEmptyArray","runEachAndClear","args","keep","runFn","fn","clear","splice","prop","attrClass","add","currValues","currValuesSet","split","join","trim","hasAttrClass","has","removeAttr","removeAttribute","elmPrototype","find","selector","rootElm","document","querySelectorAll","findFirst","querySelector","is","matches","msMatchesSelector","contents","childNodes","parent","parentElement","closest","closestFn","liesBetween","highBoundarySelector","deepBoundarySelector","closestHighBoundaryElm","closestDeepBoundaryElm","before","parentElm","preferredAnchor","insertedElms","anchor","fragment","createDocumentFragment","insertedElm","previousSibling","appendChild","firstChild","nextSibling","insertBefore","appendChildren","node","children","prependChildren","insertedNodes","insertAfter","removeElements","nodes","e","removeChild","createDiv","classNames","div","createElement","createDOM","html","createdDiv","innerHTML","firstLetterToUpper","str","charAt","toUpperCase","slice","getDummyStyle","cssPrefixes","jsPrefixes","jsCache","cssCache","cssProperty","uppercasedName","elmStyle","prefix","prefixWithoutDashes","resultPossibilities","resultPossibility","jsAPI","MutationObserverConstructor","IntersectionObserverConstructor","ResizeObserverConstructor","cAF","rAF","rnothtmlwhite","classListAction","className","action","clazz","classes","match","classList","hasClass","contains","removeClass","remove","addClass","bind","equal","a","b","props","propMutation","compareA","compareB","equalWH","equalXY","equalTRBL","equalBCRWH","round","Math","clearTimeouts","id","clearTimeout","noop","debounce","functionToDebounce","timeoutId","maxTimeoutId","prevArguments","latestArguments","_timeout","_maxDelay","_mergeParams","setT","setTimeout","invokeFunctionToDebounce","this","mergeParms","flush","debouncedFn","arguments","finalTimeout","hasTimeout","finalMaxWait","hasMaxWait","setTimeoutFn","mergeParamsResult","invokedArgs","boundInvoke","_flush","cssNumber","opacity","zindex","parseToZeroOrNumber","toFloat","num","parseFloat","parseInt","Number","isNaN","adaptCSSVal","val","getPropertyValue","setProperty","topRightBottomLeft","propertyPrefix","propertySuffix","finalPrefix","finalSuffix","top","right","bottom","left","t","r","l","zeroObj","w","h","windowSize","innerWidth","innerHeight","offsetSize","offsetWidth","offsetHeight","clientSize","clientWidth","clientHeight","scrollSize","scrollWidth","scrollHeight","fractionalSize","cssHeight","cssWidth","getBoundingClientRect","passiveEventsSupport","supportPassiveEvents","addEventListener","defineProperty","get","splitEventNames","eventNames","off","listener","capture","eventName","removeEventListener","on","doSupportPassiveEvents","passive","_passive","_capture","once","_once","offListeners","nativeOptions","finalListener","evt","stopPropagation","preventDefault","stopAndPrevent","x","y","absoluteCoordinates","rect","pageYOffset","pageXOffset","manageListener","createEventListenerHub","initialEventListeners","removeEvent","eventSet","events","currListener","addEvent","set","triggerEvent","event","Map","initialListenerKeys","getPropByPath","path","o","createOptionCheck","changedOptions","createState","initialState","state","newState","classNameEnvironment","classNameEnvironmentFlexboxGlue","classNameEnvironmentFlexboxGlueMax","dataAttributeHost","dataAttributeHostOverflowX","dataAttributeHostOverflowY","dataValueHostOverflowVisible","dataValueHostViewportScrollbarStyling","classNamePadding","classNameViewport","classNameViewportArrange","classNameContent","classNameViewportScrollbarStyling","classNameOverflowVisible","classNameSizeObserver","classNameSizeObserverAppear","classNameSizeObserverListener","classNameSizeObserverListenerScroll","classNameSizeObserverListenerItem","classNameSizeObserverListenerItemFinal","classNameTrinsicObserver","classNameScrollbar","classNameScrollbarHorizontal","classNameScrollbarVertical","classNameScrollbarTrack","classNameScrollbarHandle","opsStringify","JSON","stringify","_","Error","defaultOptions","paddingAbsolute","updating","elementEvents","attributes","ignoreMutation","overflow","nativeScrollbarsOverlaid","show","initialize","scrollbars","visibility","autoHide","autoHideDelay","dragScroll","clickScroll","touch","getOptionsDiff","currOptions","newOptions","diff","optionsKeys","concat","optionKey","currOptionValue","newOptionValue","isDiff","environmentInstance","abs","diffBiggerThanOne","valOne","valTwo","absValOne","absValTwo","getNativeScrollbarSize","body","measureElm","measureElmChild","cSize","oSize","fSize","getNativeScrollbarsHiding","testElm","revertClass","ex","getRtlScrollBehavior","childElm","strHidden","overflowX","overflowY","direction","parentOffset","childOffset","childOffsetAfterScroll","n","getFlexboxGlue","revertFbxGlue","minOffsetsizeParent","minOffsetsize","supportsMin","revertFbxGlueMax","maxOffsetsizeParent","maxOffsetsize","supportsMax","getWindowDPR","dDPI","screen","deviceXDPI","sDPI","logicalXDPI","devicePixelRatio","createEnvironment","_document","envDOM","envElm","envChildElm","_createEventListenerH","_createCache","updateNativeScrollbarSizeCache","getNativeScrollbarSizeCache","_getNativeScrollbarSi","nativeScrollbarsSize","nativeScrollbarsHiding","initializationStrategy","_padding","_content","defaultDefaultOptions","env","_nativeScrollbarsSize","_nativeScrollbarsOverlaid","_nativeScrollbarsHiding","_cssCustomProperties","_rtlScrollBehavior","_flexboxGlue","_addListener","_getInitializationStrategy","_setInitializationStrategy","newInitializationStrategy","_getDefaultOptions","_setDefaultOptions","newDefaultOptions","_defaultInitializationStrategy","_defaultDefaultOptions","size","dpr","sizeNew","deltaSize","deltaAbsSize","deltaAbsRatio","dprNew","deltaIsBigger","difference","dprChanged","isZoom","scrollbarSize","_updateNativeScrollba","scrollbarSizeChanged","getEnvironment","pluginRegistry","getPlugins","addPlugin","addedPlugin","plugin","pluginName","_extends","module","assign","exports","__esModule","optionsTemplateTypes","boolean","number","string","object","function","null","validateRecursive","template","doWriteErrors","propPath","validatedOptions","optionsCopy","filter","optionsValue","templateValue","templateIsComplex","propPrefix","validated","_validateRecursive","foreign","isValid","errorEnumStrings","errorPossibleTypes","optionsValueType","templateValueArr","currTemplateType","typeString","isEnumString","enumStringSplit","possibility","console","warn","validateOptions","numberAllowedValues","oTypes","booleanAllowedValues","arrayNullValues","overflowAllowedValues","scrollbarsVisibilityAllowedValues","scrollbarsAutoHideAllowedValues","optionsTemplate","optionsValidationPluginName","optionsValidationPlugin","_validateOptions","_optionsValidationPlu","scrollAmount","scrollEventName","sizeObserverPluginName","sizeObserverPlugin","listenerElement","onSizeChangedCallback","observeAppearChange","observerElementChildren","observerElementChildrenRoot","shrinkElement","lastChild","expandElement","expandElementChild","cacheSize","currSize","isDirty","rAFId","reset","onResized","appear","onScroll","scrollEvent","width","height","_sizeObserverPlugin","contentArrangeCounter","scrollbarsHidingPluginName","scrollbarsHidingPlugin","_createUniqueViewportArrangeElement","_getEnvironment","_nativeScrollbarStyling","_nativeScrollbarIsOverlaid","create","_overflowUpdateSegment","doViewportArrange","viewport","viewportArrange","getState","getViewportOverflowState","hideNativeScrollbars","_getEnvironment2","arrangeViewport","viewportOverflowState","viewportScrollSize","sizeFraction","directionIsRTL","_getState","_viewportPaddingStyle","_scrollbarsHideOffset","_scrollbarsHideOffsetArrange","arrangeX","arrangeY","hideOffsetX","hideOffsetY","viewportArrangeHorizontalPaddingKey","viewportArrangeHorizontalPaddingValue","viewportArrangeVerticalPaddingValue","paddingTop","fractionalContentWidth","fractionalContenHeight","arrangeSize","sheet","cssRules","insertRule","ruleStyle","undoViewportArrange","showNativeOverlaidScrollbars","finalViewportOverflowState","_getState2","viewportPaddingStyle","finalPaddingStyle","assignProps","prevStyle","_scrollbarsHidingPlug","resolveInitialization","staticInitializationElement","defaultStaticInitializationElement","staticInitializationElementStrategy","staticInitializationElementValue","dynamicInitializationElement","defaultDynamicInitializationElement","dynamicInitializationElementStrategy","dynamicInitializationElementValue","createNewDiv","unwrap","addDataAttrHost","createStructureSetupElements","createUniqueViewportArrangeElement","_getInitializationStr","hostInitializationStrategy","_host","viewportInitializationStrategy","_viewport","paddingInitializationStrategy","contentInitializationStrategy","targetIsElm","targetStructureInitialization","targetElement","isTextarea","isBody","ownerDocument","bodyElm","wnd","defaultView","singleElmSupport","generalStaticInitializationElement","generalDynamicInitializationElement","viewportElement","potentialViewport","viewportIsTarget","evaluatedTargetObj","_target","host","padding","content","_viewportArrange","_windowElm","_documentElm","_htmlElm","_bodyElm","_isTextarea","_isBody","_targetIsElm","_viewportIsTarget","_viewportHasClass","attributeClassName","_viewportAddRemoveClass","generatedElements","elementIsGenerated","destroyFns","isTextareaHostGenerated","targetContents","contentSlot","appendElements","removeHostDataAttr","removePaddingClass","removeViewportClass","removeContentClass","createTrinsicUpdate","structureSetupElements","updateHints","_heightIntrinsic","_heightIntrinsicChanged","heightIntrinsicChanged","_sizeChanged","_contentMutation","createPaddingUpdate","setState","_isSingleElm","updatePaddingCache","currentPaddingCache","checkOption","_currentPaddingCache","paddingChanged","_directionIsRTL","_directionChanged","_checkOption","paddingAbsoluteChanged","contentMutation","_updatePaddingCache","paddingStyleChanged","paddingRelative","paddingHorizontal","paddingVertical","paddingStyle","marginRight","marginBottom","marginLeft","viewportStyle","paddingRight","paddingBottom","paddingLeft","_paddingAbsolute","_paddingStyleChanged","max","strVisible","overlaidScrollbarsHideOffset","whCacheOptions","xyCacheOptions","getOverflowAmount","viewportClientSize","tollerance","amount","conditionalClass","overflowIsVisible","overflowBehavior","createOverflowUpdate","updateSizeFraction","getCurrentSizeFraction","_createCache2","updateViewportScrollSizeCache","getCurrentViewportScrollSizeCache","updateOverflowAmountCache","_createCache3","getCurrentOverflowAmountCache","updateOverflowStyleCache","_createCache4","fixFlexboxGlue","heightIntrinsic","_overflowScroll","hostClientSize","isContentBox","subtractXScrollbar","viewportStyleObj","arrangeHideOffset","getStatePerAxis","styleKey","isOverlaid","nativeScrollbarSize","overflowStyle","objectPrefferedOverflowStyle","overflowScroll","nonScrollbarStylingHideOffset","scrollbarsHideOffset","scrollbarsHideOffsetArrange","xOverflowStyle","_getStatePerAxis","xOverflowScroll","xScrollbarsHideOffset","xScrollbarsHideOffsetArrange","yOverflowStyle","_getStatePerAxis2","yOverflowScroll","yScrollbarsHideOffset","yScrollbarsHideOffsetArrange","_overflowStyle","setViewportOverflowState","hasOverflow","overflowOption","setAxisOverflowStyle","behavior","hasOverflowAxis","overflowVisible","overflowVisibleBehavior","_setAxisOverflowStyle","visibleBehaviorX","_setAxisOverflowStyle2","visibleBehaviorY","horizontalMarginKey","viewportHorizontalPaddingKey","horizontalMarginValue","verticalMarginValue","horizontalPaddingValue","verticalPaddingValue","_ref","_hostMutation","_getState3","showNativeOverlaidScrollbarsOption","showNativeOverlaidScrollbarsChanged","_checkOption2","overflowChanged","adjustFlexboxGlue","overflowXVisible","overflowYVisible","sizeFractionCache","viewportScrollSizeCache","overflowAmuntCache","preMeasureViewportOverflowState","_undoViewportArrange","redoViewportArrange","undoViewportArrangeOverflowState","_sizeFractionCache","sizeFractionChanged","_viewportScrollSizeCa","viewportScrollSizeChanged","viewportclientSize","arrangedViewportScrollSize","arrangedViewportClientSize","_overflowAmuntCache","overflowAmount","overflowAmountChanged","_viewportScrollSizeCa2","_sizeFractionCache2","removeClipping","viewportArranged","_updateOverflowStyleC","overflowStyleChanged","_overflowAmount","_hasOverflow","_overflowStyleChanged","_overflowAmountChanged","prepareUpdateHints","leading","adaptive","finalAdaptive","objKeys","leadingValue","adaptiveValue","createStructureSetupUpdate","updateSegments","initialUpdateHints","adjustScrollOffset","scrollOffsetX","scrollOffsetY","adaptivedUpdateHints","updateSegment","animationStartEventName","getElmDirectionIsRTL","domRectHasDimensions","createSizeObserver","_ref$_direction","_direction","observeDirectionChange","_ref$_appear","_appear","rtlScrollBehavior","baseElements","sizeObserver","getIsDirectionRTL","currVal","updateResizeObserverContentRectCache","onSizeChangedCallbackProxy","sizeChangedContext","isResizeObserverCall","hasDirectionCache","skip","doDirectionScroll","_updateResizeObserver","pop","contentRect","currRContentRect","prevContentRect","hasDimensions","hadDimensions","rtl","_directionIsRTLCache","appearCallback","directionIsRTLCache","resizeObserverInstance","observe","disconnect","pluginAppearCallback","_sizeObserverPlugin$_","pluginOffListeners","updateDirectionIsRTLCache","directionIsRTLCacheValues","directionIsRTLChanged","isHeightIntrinsic","ioEntryOrSize","isIntersecting","intersectionRatio","createTrinsicObserver","onTrinsicChangedCallback","trinsicObserver","updateHeightIntrinsicCache","triggerOnTrinsicChangedCallback","updateValue","intersectionObserverInstance","entries","root","onSizeChanged","newSize","createEventContentChange","eventContentChange","map","destroyed","destroy","updateElements","getElements","eventElmList","elements","entry","entryEventNames","entryOff","delete","WeakMap","createDOMObserver","isContentObserver","isConnected","_attributes","_styleChangingAttributes","_eventContentChange","_nestedTargetSelector","_ignoreTargetChange","_ignoreContentChange","_createEventContentCh","destroyEventContentChange","updateEventContentChangeElements","finalAttributes","finalStyleChangingAttributes","observedAttributes","observerCallback","mutations","ignoreTargetChange","ignoreContentChange","targetChangedAttrs","totalAddedNodes","targetStyleChanged","contentChanged","childListChanged","mutation","attributeName","mutationTarget","oldValue","addedNodes","isAttributesType","isChildListType","targetIsMutationTarget","attributeValue","attributeChanged","styleChangingAttrChanged","notOnlyAttrChanged","contentAttrChanged","isNestedTarget","baseAssertion","contentFinalChanged","mutationObserver","attributeOldValue","attributeFilter","subtree","childList","characterData","takeRecords","hostSelector","viewportSelector","viewportAttrsFromTarget","baseStyleChangingAttrsTextarea","baseStyleChangingAttrs","createStructureSetupObservers","structureSetupUpdate","debounceTimeout","debounceMaxDelay","contentMutationObserver","contentScroll","viewportScroll","fractional","updateContentSizeCache","contentMutationObserverAttr","structureSetupUpdateWithDebouncedAdaptiveUpdateHints","prev","prevObj","currObj","updateViewportAttrsFromHost","attribute","hostAttr","onTrinsicChanged","heightIntrinsicCache","updateFn","directionChanged","onContentMutation","contentChangedTroughEvent","_updateContentSizeCac","contentSizeChanged","onHostMutation","destroyTrinsicObserver","destroySizeObserver","_createDOMObserver","destroyHostMutationObserver","viewportIsTargetResizeObserver","attributesChanged","_checkOption3","elementEventsChanged","debounceValue","_checkOption4","debounceChanged","updateContentMutationObserver","ignoreMutationFromOptions","ignore","timeout","maxWait","initialStructureSetupUpdateState","createStructureSetup","checkOptionsFallback","_createStructureSetup","destroyElements","updateStructure","updateObservers","_createStructureSetup2","destroyObservers","structureSetupState","_addOnUpdatedListener","_appendElements","_elements","generateScrollbarDOM","scrollbarClassName","scrollbar","track","handle","_scrollbar","_track","_handle","createScrollbarsSetupElements","environmentScrollbarSlot","_scrollbarsSlot","initializationScrollbarSlot","scrollbarsSlot","evaluatedScrollbarSlot","horizontalScrollbarStructure","verticalScrollbarStructure","horizontalScrollbar","verticalScrollbar","_horizontalScrollbarStructure","_verticalScrollbarStructure","createScrollbarsSetup","_createScrollbarsSetu","scrollbarsSetupState","log","targets","targetInstanceMap","addInstance","osInstance","removeInstance","getInstance","OverlayScrollbars","eventListeners","addEnvListener","plugins","instanceTarget","potentialInstance","opts","validate","currentOptions","structureState","destroyStructure","updateScrollbars","scrollbarsState","destroyScrollbars","removeEnvListener","withdrawn","instance","_structureState","pluginInstance","sizeChanged","hostMutation","scrollbarsSize","scrollbarsOverlaid","scrollbarsHiding","flexboxGlue","cssCustomProperties","defaultInitializationStrategy","getInitializationStrategy","setInitializationStrategy","getDefaultOptions","setDefaultOptions"],"mappings":"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"}